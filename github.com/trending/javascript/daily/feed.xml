<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Mon, 14 Dec 2020 01:42:09 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>synacktiv/PS4-webkit-exploit-6.XX</title>
      <link>https://github.com/synacktiv/PS4-webkit-exploit-6.XX</link>
      <description>&lt;p&gt;Webkit exploit that give arbitrary R/W on 6.XX PS4 firmwares&lt;/p&gt;&lt;hr&gt;</description>
    </item>
    
    <item>
      <title>camtheperson/get-my-ps5</title>
      <link>https://github.com/camtheperson/get-my-ps5</link>
      <description>&lt;p&gt;A CLI utility to help people secure a PlayStation 5 (PS5).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Get My PS5&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/camtheperson/get-my-ps5/master/src/assets/bot-validation.jpg&quot; alt=&quot;Reddit conversation&quot;&gt;&lt;/p&gt; 
&lt;p&gt;A simple command line interface (CLI) utility that checks for PlayStation 5 (disc or digital edition) every 5 seconds, then opens your browser as soon as it&#39;s available.&lt;/p&gt; 
&lt;h2&gt;How can I support this project?&lt;/h2&gt; 
&lt;p&gt;Follow me on Twitter: &lt;a href=&quot;https://twitter.com/CamThePerson&quot;&gt;@CamThePerson&lt;/a&gt; (feel free to hit me up if you have any trouble)&lt;/p&gt; 
&lt;p&gt;Donations greatly appreciated (this work takes time):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cash.app/$CamThePerson&quot;&gt;Cash App&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://venmo.com/Cameron-Hermens-1&quot;&gt;Venmo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick start guide&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install the LTS version of &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Download this repository above.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;After installing node, go into the &lt;code&gt;get-my-ps5&lt;/code&gt; folder and run &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;After it finishes installing, run &lt;code&gt;npm run watch&lt;/code&gt; to start monitoring for PlayStation 5 restocks.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Important note&lt;/h2&gt; 
&lt;p&gt;By using this software, you are doing so at your own risk.&lt;/p&gt; 
&lt;p&gt;The biggest consequence of running this software is getting an IP-based ban on the PlayStation Direct store. This can easily be circumvented by using a VPN, which is highly recommended.&lt;/p&gt; 
&lt;h2&gt;Additional documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/camtheperson/get-my-ps5/master/docs/installation.md&quot;&gt;How to install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/camtheperson/get-my-ps5/master/docs/usage.md&quot;&gt;How to use&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/camtheperson/get-my-ps5/master/docs/issues.md&quot;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/camtheperson/get-my-ps5/master/docs/faq.md&quot;&gt;Frequently asked questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/camtheperson/get-my-ps5/master/docs/contributing.md&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>cypress-io/cypress</title>
      <link>https://github.com/cypress-io/cypress</link>
      <description>&lt;p&gt;Fast, easy and reliable testing for anything that runs in a browser.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is Cypress?&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://badge.fury.io/js/cypress&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/cypress.svg&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Install Cypress for Mac, Linux, or Windows, then &lt;a href=&quot;https://docs.cypress.io/guides/getting-started/installing-cypress.html&quot;&gt;get started&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install cypress --save-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add cypress --dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1271364/31740846-7bf607f0-b420-11e7-855f-41c996040d31.gif&quot; alt=&quot;installing-cli e1693232&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress/tree/develop&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress/tree/develop.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; - &lt;code&gt;develop&lt;/code&gt; branch&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress/tree/master&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress/tree/master.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; - &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress/develop/CONTRIBUTING.md&quot;&gt;Contributing Guideline&lt;/a&gt; which explains repo organization, linting, testing, and other steps.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-green.svg&quot; alt=&quot;license&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This project is licensed under the terms of the &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress/develop/LICENSE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Badges&lt;/h2&gt; 
&lt;p&gt;Let the world know your project is using Cypress.io to test with this cool badge&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.cypress.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg&quot; alt=&quot;Cypress.io&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[![Cypress.io](https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg)](https://www.cypress.io/)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>typesense/showcase-recipe-search</title>
      <link>https://github.com/typesense/showcase-recipe-search</link>
      <description>&lt;p&gt;An app showing Typesense Search in action on a 2M recipe database&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üç≥ Recipe Search, powered by Typesense&lt;/h1&gt; 
&lt;p&gt;This is a demo that showcases some of &lt;a href=&quot;https://github.com/typesense/typesense&quot;&gt;Typesense&#39;s&lt;/a&gt; features using a 2 Million database of recipes.&lt;/p&gt; 
&lt;p&gt;View it live here: &lt;a href=&quot;https://recipe-search.typesense.org/&quot;&gt;recipe-search.typesense.org&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Tech Stack&lt;/h2&gt; 
&lt;p&gt;This search experience is powered by 
 &lt;!-- raw HTML omitted --&gt;Typesense
 &lt;!-- raw HTML omitted --&gt; which is a blazing-fast, 
 &lt;!-- raw HTML omitted --&gt;open source
 &lt;!-- raw HTML omitted --&gt; typo-tolerant search-engine. It is an open source alternative to Algolia and an easier-to-use alternative to ElasticSearch.&lt;/p&gt; 
&lt;p&gt;The recipe dataset is from 
 &lt;!-- raw HTML omitted --&gt;Glorf/recipenlg
 &lt;!-- raw HTML omitted --&gt; üôè!&lt;/p&gt; 
&lt;p&gt;The dataset is 2.2 GB on disk, with ~2.2 million rows. It took 8 minutes to index this dataset on a 3-node Typesense cluster with 4vCPUs per node and the index was 2.7GB in RAM.&lt;/p&gt; 
&lt;p&gt;The app was built using the 
 &lt;!-- raw HTML omitted --&gt; Typesense Adapter for InstantSearch.js
 &lt;!-- raw HTML omitted --&gt; and is hosted on S3, with CloudFront for a CDN.&lt;/p&gt; 
&lt;p&gt;The search backend is powered by a geo-distributed 3-node Typesense cluster running on 
 &lt;!-- raw HTML omitted --&gt;Typesense Cloud
 &lt;!-- raw HTML omitted --&gt;, with nodes in Oregon, Frankfurt and Mumbai.&lt;/p&gt; 
&lt;h2&gt;Repo structure&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;src/&lt;/code&gt; and &lt;code&gt;index.html&lt;/code&gt; - contain the frontend UI components, built with 
  &lt;!-- raw HTML omitted --&gt;Typesense Adapter for InstantSearch.js
  &lt;!-- raw HTML omitted --&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;scripts/indexer&lt;/code&gt; - contains the script to index the recipe data into Typesense.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;scripts/data&lt;/code&gt; - contains a 1K sample subset of the recipes database. But you can download the full dataset from the link above.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;To run this project locally, install the dependencies and run the local server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;yarn
bundle # JSON parsing takes a while to run using JS when indexing, so we&#39;re using Ruby just for indexing

yarn run typesenseServer

ln -s .env.development .env

BATCH_SIZE=1000 yarn run indexer:transformDataset # This will output a JSONL file
yarn run indexer:importToTypesense # This will import the JSONL file into Typesense

yarn start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open http://localhost:3000 to see the app.&lt;/p&gt; 
&lt;h2&gt;Deployment&lt;/h2&gt; 
&lt;p&gt;The app is hosted on S3, with Cloudfront for a CDN.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;yarn build
yarn deploy

aws s3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>yangshun/tech-interview-handbook</title>
      <link>https://github.com/yangshun/tech-interview-handbook</link>
      <description>&lt;p&gt;üíØ Materials to help you rock your next coding interview&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is this?&lt;/h2&gt; 
&lt;p&gt;Carefully curated content to help you ace your next technical interview, with a focus on algorithms. System design questions are in-progress. Besides the usual algorithm questions, other &lt;strong&gt;awesome&lt;/strong&gt; stuff includes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://yangshun.github.io/tech-interview-handbook/coding-round-overview&quot;&gt;How to prepare&lt;/a&gt; for coding interviews&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://yangshun.github.io/tech-interview-handbook/cheatsheet&quot;&gt;Interview Cheatsheet&lt;/a&gt; - Straight-to-the-point Do&#39;s and Don&#39;ts&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://yangshun.github.io/tech-interview-handbook/algorithms/algorithms-introduction&quot;&gt;Algorithm tips and the best practice questions&lt;/a&gt; categorized by topic&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook&quot;&gt;&quot;Front-end Job Interview Questions&quot; answers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://yangshun.github.io/tech-interview-handbook/interview-formats&quot;&gt;Interview formats&lt;/a&gt; of the top tech companies&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://yangshun.github.io/tech-interview-handbook/behavioral-questions&quot;&gt;Behavioral questions&lt;/a&gt; asked by the top tech companies&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://yangshun.github.io/tech-interview-handbook/questions-to-ask&quot;&gt;Good questions to ask your interviewers&lt;/a&gt; at the end of the interviews&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://yangshun.github.io/tech-interview-handbook/resume&quot;&gt;Helpful resume tips&lt;/a&gt; to get your resume noticed and the Do&#39;s and Don&#39;ts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Help from you in contributing content would be very much appreciated!&lt;/p&gt; 
&lt;h2&gt;Why do I want this?&lt;/h2&gt; 
&lt;p&gt;This repository has &lt;em&gt;practical&lt;/em&gt; content that covers all phases of a technical interview, from applying for a job to passing the interviews to offer negotiation. Technically competent candidates might still find the non-technical content helpful as well.&lt;/p&gt; 
&lt;h2&gt;Who is this for?&lt;/h2&gt; 
&lt;p&gt;Anybody who wants to land a job at a tech company but is new to technical interviews, seasoned engineers who have not been on the other side of the interviewing table in a while and want to get back into the game, or anyone who wants to be better at technical interviewing.&lt;/p&gt; 
&lt;hr&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h2&gt;How is this repository different?&lt;/h2&gt; 
&lt;p&gt;There are many awesome books like &lt;a href=&quot;http://www.crackingthecodinginterview.com/&quot;&gt;Cracking the Coding Interview&lt;/a&gt; and interview-related repositories out there on GitHub, what makes this repository different? The difference is that many existing interview repositories contain mainly links to external resources whereas this repository contains top quality curated content directly for your consumption.&lt;/p&gt; 
&lt;p&gt;Also, existing resources focus mainly on algorithm questions and lack coverage for more domain-specific and non-technical questions. This handbook aims to cover content beyond the typical algorithmic coding questions. üòé&lt;/p&gt; 
&lt;h2&gt;Looking for Front End content?&lt;/h2&gt; 
&lt;p&gt;Front end-related content have been extracted out into a separate repository - &lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook&quot;&gt;Front End Interview Handbook&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;p&gt;A &lt;a href=&quot;https://github.com/facebook/docusaurus&quot;&gt;Docusaurus&lt;/a&gt; website has been created to provide a better reading experience. Check out the website &lt;a href=&quot;https://yangshun.github.io/tech-interview-handbook/&quot;&gt;here&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Related&lt;/h2&gt; 
&lt;p&gt;If you are interested in how data structures are implemented, check out &lt;a href=&quot;https://github.com/yangshun/lago&quot;&gt;Lago&lt;/a&gt;, a Data Structures and Algorithms library for JavaScript. It is pretty much still WIP but I intend to make it into a library that is able to be used in production and also a reference resource for revising Data Structures and Algorithms.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;There are no formal contributing guidelines at the moment as things are still in flux and we might find a better approach to structure content as we go along. You are welcome to contribute whatever you think will be helpful to fellow engineers. If you would like to contribute content for different domains, feel free to create an issue or submit a pull request and we can discuss further.&lt;/p&gt; 
&lt;h3&gt;Online one-click setup for contributing&lt;/h3&gt; 
&lt;p&gt;You can use Gitpod (A free online VS Code-like IDE) for contributing online. With a single click it will launch a workspace and automatically:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;clone the tech-interview-handbook repo.&lt;/li&gt; 
 &lt;li&gt;install the dependencies.&lt;/li&gt; 
 &lt;li&gt;run &lt;code&gt;yarn start&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;So that you can start straight away.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitpod.io/#https://github.com/yangshun/tech-interview-handbook&quot;&gt;&lt;img src=&quot;https://gitpod.io/button/open-in-gitpod.svg&quot; alt=&quot;Open in Gitpod&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;p&gt;This project exists thanks to all the people who contributed. [&lt;a href=&quot;https://raw.githubusercontent.com/yangshun/tech-interview-handbook/master/CONTRIBUTING.md&quot;&gt;Contribute&lt;/a&gt;]. 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h3&gt;Backers&lt;/h3&gt; 
&lt;p&gt;Thank you to all our backers! üôè [&lt;a href=&quot;https://opencollective.com/tech-interview-handbook#backer&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h3&gt;Sponsors&lt;/h3&gt; 
&lt;p&gt;Support this project by becoming a sponsor. Your logo/profile picture will show up here with a link to your website. [&lt;a href=&quot;https://opencollective.com/tech-interview-handbook#sponsor&quot;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Maintainers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yangshun&quot;&gt;Yangshun Tay&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/louietyj&quot;&gt;Louie Tan&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;I am providing code in the repository to you under an open source license. Because this is my personal repository, the license you receive to my code is from me and not my employer (Facebook)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>trekhleb/javascript-algorithms</title>
      <link>https://github.com/trekhleb/javascript-algorithms</link>
      <description>&lt;p&gt;üìù Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Algorithms and Data Structures&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/trekhleb/javascript-algorithms&quot;&gt;&lt;img src=&quot;https://travis-ci.org/trekhleb/javascript-algorithms.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/trekhleb/javascript-algorithms&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/trekhleb/javascript-algorithms/branch/master/graph/badge.svg&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository contains JavaScript based examples of many popular algorithms and data structures.&lt;/p&gt; 
&lt;p&gt;Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Read this in other languages:&lt;/em&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-CN.md&quot;&gt;&lt;em&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-TW.md&quot;&gt;&lt;em&gt;ÁπÅÈ´î‰∏≠Êñá&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ko-KR.md&quot;&gt;&lt;em&gt;ÌïúÍµ≠Ïñ¥&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ja-JP.md&quot;&gt;&lt;em&gt;Êó•Êú¨Ë™û&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pl-PL.md&quot;&gt;&lt;em&gt;Polski&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.fr-FR.md&quot;&gt;&lt;em&gt;Fran√ßais&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.es-ES.md&quot;&gt;&lt;em&gt;Espa√±ol&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pt-BR.md&quot;&gt;&lt;em&gt;Portugu√™s&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ru-RU.md&quot;&gt;&lt;em&gt;–†—É—Å—Å–∫–∏–π&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.tr-TR.md&quot;&gt;&lt;em&gt;T√ºrk&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.it-IT.md&quot;&gt;&lt;em&gt;Italiana&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;‚òù Note that this project is meant to be used for learning and researching purposes only, and it is &lt;strong&gt;not&lt;/strong&gt; meant to be used for production.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Data Structures&lt;/h2&gt; 
&lt;p&gt;A data structure is a particular way of organizing and storing data in a computer so that it can be accessed and modified efficiently. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/linked-list&quot;&gt;Linked List&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/doubly-linked-list&quot;&gt;Doubly Linked List&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/queue&quot;&gt;Queue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/stack&quot;&gt;Stack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/hash-table&quot;&gt;Hash Table&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/heap&quot;&gt;Heap&lt;/a&gt; - max and min heap versions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/priority-queue&quot;&gt;Priority Queue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/trie&quot;&gt;Trie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree&quot;&gt;Tree&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/binary-search-tree&quot;&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/avl-tree&quot;&gt;AVL Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/red-black-tree&quot;&gt;Red-Black Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/segment-tree&quot;&gt;Segment Tree&lt;/a&gt; - with min/max/sum range queries examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/fenwick-tree&quot;&gt;Fenwick Tree&lt;/a&gt; (Binary Indexed Tree)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/graph&quot;&gt;Graph&lt;/a&gt; (both directed and undirected)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/disjoint-set&quot;&gt;Disjoint Set&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/bloom-filter&quot;&gt;Bloom Filter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Algorithms&lt;/h2&gt; 
&lt;p&gt;An algorithm is an unambiguous specification of how to solve a class of problems. It is a set of rules that precisely define a sequence of operations.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; 
&lt;h3&gt;Algorithms by Topic&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Math&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/bits&quot;&gt;Bit Manipulation&lt;/a&gt; - set/get/update/clear bits, multiplication/division by two, make negative etc.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/factorial&quot;&gt;Factorial&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci&quot;&gt;Fibonacci Number&lt;/a&gt; - classic and closed-form versions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/prime-factors&quot;&gt;Prime Factors&lt;/a&gt; - finding prime factors and counting them using Hardy-Ramanujan&#39;s theorem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/primality-test&quot;&gt;Primality Test&lt;/a&gt; (trial division method)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm&quot;&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/least-common-multiple&quot;&gt;Least Common Multiple&lt;/a&gt; (LCM)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/sieve-of-eratosthenes&quot;&gt;Sieve of Eratosthenes&lt;/a&gt; - finding all prime numbers up to any given limit&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/is-power-of-two&quot;&gt;Is Power of Two&lt;/a&gt; - check if the number is power of two (naive and bitwise algorithms)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle&quot;&gt;Pascal&#39;s Triangle&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/complex-number&quot;&gt;Complex Number&lt;/a&gt; - complex numbers and basic operations with them&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/radian&quot;&gt;Radian &amp;amp; Degree&lt;/a&gt; - radians to degree and backwards conversion&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering&quot;&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/horner-method&quot;&gt;Horner&#39;s method&lt;/a&gt; - polynomial evaluation&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition&quot;&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/square-root&quot;&gt;Square Root&lt;/a&gt; - Newton&#39;s method&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/liu-hui&quot;&gt;Liu Hui œÄ Algorithm&lt;/a&gt; - approximate œÄ calculations based on N-gons&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform&quot;&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sets&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/cartesian-product&quot;&gt;Cartesian Product&lt;/a&gt; - product of multiple sets&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/fisher-yates&quot;&gt;Fisher‚ÄìYates Shuffle&lt;/a&gt; - random permutation of a finite sequence&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set&quot;&gt;Power Set&lt;/a&gt; - all subsets of a set (bitwise and backtracking solutions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations&quot;&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations&quot;&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence&quot;&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence&quot;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence&quot;&gt;Shortest Common Supersequence&lt;/a&gt; (SCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&quot;&gt;Knapsack Problem&lt;/a&gt; - &quot;0/1&quot; and &quot;Unbound&quot; ones&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&quot;&gt;Maximum Subarray&lt;/a&gt; - &quot;Brute Force&quot; and &quot;Dynamic Programming&quot; (Kadane&#39;s) versions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum&quot;&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/hamming-distance&quot;&gt;Hamming Distance&lt;/a&gt; - number of positions at which the symbols are different&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance&quot;&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/knuth-morris-pratt&quot;&gt;Knuth‚ÄìMorris‚ÄìPratt Algorithm&lt;/a&gt; (KMP Algorithm) - substring search (pattern matching)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/z-algorithm&quot;&gt;Z Algorithm&lt;/a&gt; - substring search (pattern matching)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/rabin-karp&quot;&gt;Rabin Karp Algorithm&lt;/a&gt; - substring search&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring&quot;&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching&quot;&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Searches&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search&quot;&gt;Linear Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/jump-search&quot;&gt;Jump Search&lt;/a&gt; (or Block Search) - search in sorted array&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search&quot;&gt;Binary Search&lt;/a&gt; - search in sorted array&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/interpolation-search&quot;&gt;Interpolation Search&lt;/a&gt; - search in uniformly distributed sorted array&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sorting&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/bubble-sort&quot;&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/selection-sort&quot;&gt;Selection Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/insertion-sort&quot;&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/heap-sort&quot;&gt;Heap Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort&quot;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort&quot;&gt;Quicksort&lt;/a&gt; - in-place and non-in-place implementations&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/shell-sort&quot;&gt;Shellsort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/counting-sort&quot;&gt;Counting Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/radix-sort&quot;&gt;Radix Sort&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linked Lists&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/traversal&quot;&gt;Straight Traversal&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/reverse-traversal&quot;&gt;Reverse Traversal&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Trees&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search&quot;&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/breadth-first-search&quot;&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Graphs&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search&quot;&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/breadth-first-search&quot;&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal&quot;&gt;Kruskal‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra&quot;&gt;Dijkstra Algorithm&lt;/a&gt; - finding shortest paths to all graph vertices from single vertex&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford&quot;&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding shortest paths to all graph vertices from single vertex&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall&quot;&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find shortest paths between all pairs of vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/detect-cycle&quot;&gt;Detect Cycle&lt;/a&gt; - for both directed and undirected graphs (DFS and Disjoint Set based versions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim&quot;&gt;Prim‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/topological-sorting&quot;&gt;Topological Sorting&lt;/a&gt; - DFS method&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/articulation-points&quot;&gt;Articulation Points&lt;/a&gt; - Tarjan&#39;s algorithm (DFS based)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bridges&quot;&gt;Bridges&lt;/a&gt; - DFS based algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/eulerian-path&quot;&gt;Eulerian Path and Eulerian Circuit&lt;/a&gt; - Fleury&#39;s algorithm - Visit every edge exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle&quot;&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/strongly-connected-components&quot;&gt;Strongly Connected Components&lt;/a&gt; - Kosaraju&#39;s algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman&quot;&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cryptography&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/polynomial-hash&quot;&gt;Polynomial Hash&lt;/a&gt; - rolling hash function based on polynomial&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/caesar-cipher&quot;&gt;Caesar Cipher&lt;/a&gt; - simple substitution cipher&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://github.com/trekhleb/nano-neuron&quot;&gt;NanoNeuron&lt;/a&gt; - 7 simple JS functions that illustrate how machines can actually learn (forward/backward propagation)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Uncategorized&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower&quot;&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/square-matrix-rotation&quot;&gt;Square Matrix Rotation&lt;/a&gt; - in-place algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt; - backtracking, dynamic programming (top-down + bottom-up) and greedy examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&quot;&gt;Unique Paths&lt;/a&gt; - backtracking, dynamic programming and Pascal&#39;s Triangle based examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&quot;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem (dynamic programming and brute force versions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&quot;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top (4 solutions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens&quot;&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour&quot;&gt;Knight&#39;s Tour&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Algorithms by Paradigm&lt;/h3&gt; 
&lt;p&gt;An algorithmic paradigm is a generic method or approach which underlies the design of a class of algorithms. It is an abstraction higher than the notion of an algorithm, just as an algorithm is an abstraction higher than a computer program.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Brute Force&lt;/strong&gt; - look at all the possibilities and selects the best solution 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search&quot;&gt;Linear Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&quot;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&quot;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&quot;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman&quot;&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform&quot;&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Greedy&lt;/strong&gt; - choose the best option at the current time, without any consideration for the future 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&quot;&gt;Unbound Knapsack Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra&quot;&gt;Dijkstra Algorithm&lt;/a&gt; - finding shortest path to all graph vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim&quot;&gt;Prim‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal&quot;&gt;Kruskal‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Divide and Conquer&lt;/strong&gt; - divide the problem into smaller parts and then solve those parts 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search&quot;&gt;Binary Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower&quot;&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle&quot;&gt;Pascal&#39;s Triangle&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm&quot;&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort&quot;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort&quot;&gt;Quicksort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search&quot;&gt;Tree Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search&quot;&gt;Graph Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering&quot;&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations&quot;&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations&quot;&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic Programming&lt;/strong&gt; - build up a solution using previously found sub-solutions 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci&quot;&gt;Fibonacci Number&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&quot;&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&quot;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&quot;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance&quot;&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence&quot;&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring&quot;&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence&quot;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence&quot;&gt;Shortest Common Supersequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&quot;&gt;0/1 Knapsack Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition&quot;&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&quot;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford&quot;&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding shortest path to all graph vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall&quot;&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find shortest paths between all pairs of vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching&quot;&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backtracking&lt;/strong&gt; - similarly to brute force, try to generate all possible solutions, but each time you generate next solution you test if it satisfies all conditions, and only then continue generating subsequent solutions. Otherwise, backtrack, and go on a different path of finding a solution. Normally the DFS traversal of state-space is being used. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&quot;&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set&quot;&gt;Power Set&lt;/a&gt; - all subsets of a set&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle&quot;&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens&quot;&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour&quot;&gt;Knight&#39;s Tour&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum&quot;&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Branch &amp;amp; Bound&lt;/strong&gt; - remember the lowest-cost solution found at each stage of the backtracking search, and use the cost of the lowest-cost solution found so far as a lower bound on the cost of a least-cost solution to the problem, in order to discard partial solutions with costs larger than the lowest-cost solution found so far. Normally BFS traversal in combination with DFS traversal of state-space tree is being used.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to use this repository&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Install all dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run ESLint&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You may want to run it to check code quality.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm run lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run all tests&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run tests by name&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test -- &#39;LinkedList&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You may play with data-structures and algorithms in &lt;code&gt;./src/playground/playground.js&lt;/code&gt; file and write tests for it in &lt;code&gt;./src/playground/__test__/playground.test.js&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Then just simply run the following command to test if your playground code works as expected:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test -- &#39;playground&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Useful Information&lt;/h2&gt; 
&lt;h3&gt;References&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8&quot;&gt;‚ñ∂ Data Structures and Algorithms on YouTube&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Big O Notation&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Big O notation&lt;/em&gt; is used to classify algorithms according to how their running time or space requirements grow as the input size grows. On the chart below you may find most common orders of growth of algorithms specified in Big O notation.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/assets/big-o-graph.png&quot; alt=&quot;Big O graphs&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Source: &lt;a href=&quot;http://bigocheatsheet.com/&quot;&gt;Big O Cheat Sheet&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data.&lt;/p&gt; 
&lt;p&gt;| Big O Notation | Computations for 10 elements | Computations for 100 elements | Computations for 1000 elements | | -------------- | ---------------------------- | ----------------------------- | ------------------------------- | | &lt;strong&gt;O(1)&lt;/strong&gt; | 1 | 1 | 1 | | &lt;strong&gt;O(log N)&lt;/strong&gt; | 3 | 6 | 9 | | &lt;strong&gt;O(N)&lt;/strong&gt; | 10 | 100 | 1000 | | &lt;strong&gt;O(N log N)&lt;/strong&gt; | 30 | 600 | 9000 | | &lt;strong&gt;O(N^2)&lt;/strong&gt; | 100 | 10000 | 1000000 | | &lt;strong&gt;O(2^N)&lt;/strong&gt; | 1024 | 1.26e+29 | 1.07e+301 | | &lt;strong&gt;O(N!)&lt;/strong&gt; | 3628800 | 9.3e+157 | 4.02e+2567 |&lt;/p&gt; 
&lt;h3&gt;Data Structure Operations Complexity&lt;/h3&gt; 
&lt;p&gt;| Data Structure | Access | Search | Insertion | Deletion | Comments | | ----------------------- | :-------: | :-------: | :-------: | :-------: | :-------- | | &lt;strong&gt;Array&lt;/strong&gt; | 1 | n | n | n | | | &lt;strong&gt;Stack&lt;/strong&gt; | n | n | 1 | 1 | | | &lt;strong&gt;Queue&lt;/strong&gt; | n | n | 1 | 1 | | | &lt;strong&gt;Linked List&lt;/strong&gt; | n | n | 1 | n | | | &lt;strong&gt;Hash Table&lt;/strong&gt; | - | n | n | n | In case of perfect hash function costs would be O(1) | | &lt;strong&gt;Binary Search Tree&lt;/strong&gt; | n | n | n | n | In case of balanced tree costs would be O(log(n)) | | &lt;strong&gt;B-Tree&lt;/strong&gt; | log(n) | log(n) | log(n) | log(n) | | | &lt;strong&gt;Red-Black Tree&lt;/strong&gt; | log(n) | log(n) | log(n) | log(n) | | | &lt;strong&gt;AVL Tree&lt;/strong&gt; | log(n) | log(n) | log(n) | log(n) | | | &lt;strong&gt;Bloom Filter&lt;/strong&gt; | - | 1 | 1 | - | False positives are possible while searching |&lt;/p&gt; 
&lt;h3&gt;Array Sorting Algorithms Complexity&lt;/h3&gt; 
&lt;p&gt;| Name | Best | Average | Worst | Memory | Stable | Comments | | --------------------- | :-------------: | :-----------------: | :-----------------: | :-------: | :-------: | :-------- | | &lt;strong&gt;Bubble sort&lt;/strong&gt; | n | n
 &lt;!-- raw HTML omitted --&gt;2
 &lt;!-- raw HTML omitted --&gt; | n
 &lt;!-- raw HTML omitted --&gt;2
 &lt;!-- raw HTML omitted --&gt; | 1 | Yes | | | &lt;strong&gt;Insertion sort&lt;/strong&gt; | n | n
 &lt;!-- raw HTML omitted --&gt;2
 &lt;!-- raw HTML omitted --&gt; | n
 &lt;!-- raw HTML omitted --&gt;2
 &lt;!-- raw HTML omitted --&gt; | 1 | Yes | | | &lt;strong&gt;Selection sort&lt;/strong&gt; | n
 &lt;!-- raw HTML omitted --&gt;2
 &lt;!-- raw HTML omitted --&gt; | n
 &lt;!-- raw HTML omitted --&gt;2
 &lt;!-- raw HTML omitted --&gt; | n
 &lt;!-- raw HTML omitted --&gt;2
 &lt;!-- raw HTML omitted --&gt; | 1 | No | | | &lt;strong&gt;Heap sort&lt;/strong&gt; | n&amp;nbsp;log(n) | n&amp;nbsp;log(n) | n&amp;nbsp;log(n) | 1 | No | | | &lt;strong&gt;Merge sort&lt;/strong&gt; | n&amp;nbsp;log(n) | n&amp;nbsp;log(n) | n&amp;nbsp;log(n) | n | Yes | | | &lt;strong&gt;Quick sort&lt;/strong&gt; | n&amp;nbsp;log(n) | n&amp;nbsp;log(n) | n
 &lt;!-- raw HTML omitted --&gt;2
 &lt;!-- raw HTML omitted --&gt; | log(n) | No | Quicksort is usually done in-place with O(log(n)) stack space | | &lt;strong&gt;Shell sort&lt;/strong&gt; | n&amp;nbsp;log(n) | depends on gap sequence | n&amp;nbsp;(log(n))
 &lt;!-- raw HTML omitted --&gt;2
 &lt;!-- raw HTML omitted --&gt; | 1 | No | | | &lt;strong&gt;Counting sort&lt;/strong&gt; | n + r | n + r | n + r | n + r | Yes | r - biggest number in array | | &lt;strong&gt;Radix sort&lt;/strong&gt; | n * k | n * k | n * k | n + k | Yes | k - length of longest key |&lt;/p&gt; 
&lt;h2&gt;Project Backers&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You may support this project via ‚ù§Ô∏èÔ∏è &lt;a href=&quot;https://github.com/sponsors/trekhleb&quot;&gt;GitHub&lt;/a&gt; or ‚ù§Ô∏èÔ∏è &lt;a href=&quot;https://www.patreon.com/trekhleb&quot;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/trekhleb/javascript-algorithms/blob/master/BACKERS.md&quot;&gt;Folks who are backing this project&lt;/a&gt; &lt;code&gt;‚àë = 1&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>withspectrum/spectrum</title>
      <link>https://github.com/withspectrum/spectrum</link>
      <description>&lt;p&gt;Simple, powerful online communities.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://spectrum.chat&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/public/img/media.png&quot; alt=&quot;Spectrum&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Simple, powerful online communities.&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;This is the main monorepo codebase of &lt;a href=&quot;https://spectrum.chat&quot;&gt;Spectrum&lt;/a&gt;. Every single line of code that&#39;s not packaged into a reusable library is in this repository.&lt;/p&gt; 
&lt;h2&gt;What is Spectrum?&lt;/h2&gt; 
&lt;h3&gt;Vision&lt;/h3&gt; 
&lt;p&gt;It is difficult to grow, manage and measure the impact of online communities. Community owners need modern, chat-based communities but are running into scaling issues when their community grows beyond a few hundred members. It becomes hard to keep track of who&#39;s who, know what conversations are happening, and ensure that the community is staying healthy and productive.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Spectrum aims to be the best platform to build any kind of community online by combining the best of forums and real-time chat apps.&lt;/strong&gt; With best-in-class moderation tooling, a single platform for all your communities, threaded conversations by default, community health monitoring, and much more to come we think that we will be able to help more people start and grow the best online communities.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&quot;[Spectrum] will take the place that Reddit used to have a long time ago for communities (especially tech) to freely share ideas and interact. Except realtime and trolling-free.&quot;&lt;/p&gt; 
 &lt;p&gt;- &lt;a href=&quot;https://twitter.com/rauchg/status/930946768841228288&quot;&gt;Guillermo Rauch (@rauchg)&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Status&lt;/h3&gt; 
&lt;p&gt;Spectrum has been in full-time development since March 2017 and is &lt;a href=&quot;https://spectrum.chat/spectrum/general/spectrum-is-joining-github%7E1d3eb8ee-4c99-46c0-8daf-ca35a96be6ce&quot;&gt;part of GitHub since November 2018&lt;/a&gt;. See our current priorities and what we are working on in the &lt;a href=&quot;https://github.com/withspectrum/spectrum/projects/23&quot;&gt;main project board&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/#contributing&quot;&gt;Contributing&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/#ground-rules&quot;&gt;Ground Rules&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/#codebase&quot;&gt;Codebase&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/#technologies&quot;&gt;Technologies&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/#folder-structure&quot;&gt;Folder Structure&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/#code-style&quot;&gt;Code Style&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/#first-time-setup&quot;&gt;First time setup&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/#running-the-app-locally&quot;&gt;Running the app locally&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/withspectrum/spectrum/projects/19&quot;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/docs/&quot;&gt;Technical&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/docs/testing/intro.md&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/docs/workers/background-jobs.md&quot;&gt;Background Jobs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/docs/deployments.md&quot;&gt;Deployment&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/docs/backend/api/&quot;&gt;API&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/docs/backend/api/fragments.md&quot;&gt;Fragments&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/docs/backend/api/pagination.md&quot;&gt;Pagination&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/docs/backend/api/testing.md&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/docs/backend/api/tips-and-tricks.md&quot;&gt;Tips and Tricks&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;We heartily welcome any and all contributions that match our engineering standards!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;That being said, this codebase isn&#39;t your typical open source project because it&#39;s not a library or package with a limited scope‚Äîit&#39;s our entire product.&lt;/p&gt; 
&lt;h3&gt;Ground Rules&lt;/h3&gt; 
&lt;h4&gt;Contributions and discussion guidelines&lt;/h4&gt; 
&lt;p&gt;All conversations and communities on Spectrum agree to GitHub&#39;s &lt;a href=&quot;https://help.github.com/en/github/site-policy/github-community-guidelines&quot;&gt;Community Guidelines&lt;/a&gt; and &lt;a href=&quot;https://help.github.com/en/github/site-policy/github-acceptable-use-policies&quot;&gt;Acceptable Use Policies&lt;/a&gt;. This code of conduct also applies to all conversations that happen within our contributor community here on GitHub. We expect discussions in issues and pull requests to stay positive, productive, and respectful. Remember: there are real people on the other side of that screen!&lt;/p&gt; 
&lt;h4&gt;Reporting a bug or discussing a feature idea&lt;/h4&gt; 
&lt;p&gt;If you found a technical bug on Spectrum or have ideas for features we should implement, the issue tracker is the best place to share your ideas. Make sure to follow the issue template and you should be golden! (&lt;a href=&quot;https://github.com/withspectrum/spectrum/issues/new&quot;&gt;click here to open a new issue&lt;/a&gt;)&lt;/p&gt; 
&lt;h4&gt;Fixing a bug or implementing a new feature&lt;/h4&gt; 
&lt;p&gt;If you find a bug on Spectrum and open a PR that fixes it we&#39;ll review it as soon as possible to ensure it matches our engineering standards.&lt;/p&gt; 
&lt;p&gt;If you want to implement a new feature, open an issue first to discuss what it&#39;d look like and to ensure it fits in our roadmap and plans for the app (see &lt;a href=&quot;https://github.com/withspectrum/spectrum/projects/23&quot;&gt;the main project board&lt;/a&gt; for planned and currently ongoing work).&lt;/p&gt; 
&lt;p&gt;If you want to contribute but are unsure to start, we have &lt;a href=&quot;https://github.com/withspectrum/spectrum/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;a &quot;good first issue&quot; label&lt;/a&gt; which is applied to newcomer-friendly issues. Take a look at &lt;a href=&quot;https://github.com/withspectrum/spectrum/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;the full list of good first issues&lt;/a&gt; and pick something you like! There is also &lt;a href=&quot;https://spectrum.chat/spectrum/open&quot;&gt;an &quot;open&quot; channel in the Spectrum community on Spectrum&lt;/a&gt; (how meta), if you run into troubles while trying to contribute that is the best place to talk to us.&lt;/p&gt; 
&lt;p&gt;Want to fix a bug or implement an agreed-upon feature? Great, jump to the &lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/#first-time-setup&quot;&gt;local setup instructions&lt;/a&gt;!&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Codebase&lt;/h3&gt; 
&lt;h4&gt;Technologies&lt;/h4&gt; 
&lt;p&gt;With the ground rules out of the way, let&#39;s talk about the coarse architecture of this mono repo:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Full-stack JavaScript&lt;/strong&gt;: We use Node.js to power our servers, and React to power our frontend apps. Almost all of the code you&#39;ll touch in this codebase will be JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Background Jobs&lt;/strong&gt;: We leverage background jobs (powered by &lt;a href=&quot;https://github.com/OptimalBits/bull&quot;&gt;&lt;code&gt;bull&lt;/code&gt;&lt;/a&gt; and Redis) a lot. These jobs are handled by a handful of small worker servers, each with its own purpose.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here is a list of all the big technologies we use:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;RethinkDB&lt;/strong&gt;: Data storage&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Redis&lt;/strong&gt;: Background jobs and caching&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;: API, powered by the entire Apollo toolchain&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flowtype&lt;/strong&gt;: Type-safe JavaScript&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;PassportJS&lt;/strong&gt;: Authentication&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;React&lt;/strong&gt;: Frontend React app&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Folder structure&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;spectrum/
‚îú‚îÄ‚îÄ api        # API server
‚îú‚îÄ‚îÄ athena     # Worker server (notifications and general processing)
‚îú‚îÄ‚îÄ chronos    # Worker server (cron jobs)
‚îú‚îÄ‚îÄ desktop    # desktop apps (build with electron)
‚îú‚îÄ‚îÄ docs
‚îú‚îÄ‚îÄ email-templates
‚îú‚îÄ‚îÄ hermes     # Worker server (email sending)
‚îú‚îÄ‚îÄ hyperion   # Rendering server
‚îú‚îÄ‚îÄ mercury    # Worker server (reputation)
‚îú‚îÄ‚îÄ public     # Public files used on the frontend
‚îú‚îÄ‚îÄ shared     # Shared JavaScript code
‚îú‚îÄ‚îÄ src        # Frontend SPA
‚îî‚îÄ‚îÄ vulcan     # Worker server (search indexing; syncing with Algolia)
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;Naming Scheme&lt;/h4&gt; 
&lt;p&gt;As you can see we follow a loose naming scheme based on ancient Greek, Roman, and philosophical figures that are somewhat related to what our servers do:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Hyperion: (/ha…™Ààp…™…ôri…ôn/) is one of the twelve Titan children of Gaia and Uranus.&lt;/li&gt; 
 &lt;li&gt;Athena (/…ôÀàŒ∏iÀên…ô/) is the goddess of wisdom, craft, and war.&lt;/li&gt; 
 &lt;li&gt;Hermes (/Ààh…úÀêrmiÀêz/) is the messenger god, moving between the worlds of the mortal and the divine.&lt;/li&gt; 
 &lt;li&gt;Chronos (/Ààkro än…ís/) is the personification of Time in pre-Socratic philosophy&lt;/li&gt; 
 &lt;li&gt;Mercury (/Ààm…úÀêrkj äri/) is the patron god of financial gain, commerce, eloquence (and thus poetry), messages/communication (including divination), travelers, boundaries, luck, trickery and thieves&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;Code Style&lt;/h4&gt; 
&lt;p&gt;We run Prettier on-commit, which means you can write code in whatever style you want and it will be automatically formatted according to the common style when you run &lt;code&gt;git commit&lt;/code&gt;. We also have ESLint set up, although we&#39;ve disabled all stylistic rules since Prettier takes care of those.&lt;/p&gt; 
&lt;h5&gt;Rules&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;All new &lt;code&gt;.js&lt;/code&gt; files must be flow typed&lt;/strong&gt;: Since we only introduced Flowtype after we finished building the first version of Spectrum, we enforce in CI that all new files added to the codebase are typed. (if you&#39;ve never used Flowtype before that&#39;s totally fine, just write your code in plain JS and let us know in the PR body, we can take care of it for you)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No &lt;code&gt;console.log&lt;/code&gt;s in any file&lt;/strong&gt;: We use the &lt;code&gt;debug&lt;/code&gt; module across the codebase to log debugging information in development only. Never commit a file that contains a &lt;code&gt;console.log&lt;/code&gt; as CI will fail your build. The only exceptions are errors, which you can log, but you have to use &lt;code&gt;console.error&lt;/code&gt; to be explicit about it&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;First time setup&lt;/h3&gt; 
&lt;p&gt;The first step to running Spectrum locally is downloading the code by cloning the repository:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone git@github.com:withspectrum/spectrum.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you get &lt;code&gt;Permission denied&lt;/code&gt; error using &lt;code&gt;ssh&lt;/code&gt; refer &lt;a href=&quot;https://help.github.com/articles/error-permission-denied-publickey/&quot;&gt;here&lt;/a&gt; or use &lt;code&gt;https&lt;/code&gt; link as a fallback.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/withspectrum/spectrum.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Installation&lt;/h4&gt; 
&lt;p&gt;Spectrum has four big installation steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Install RethinkDB&lt;/strong&gt;: See &lt;a href=&quot;https://rethinkdb.com/docs/install/&quot;&gt;the RethinkDB documentation&lt;/a&gt; for instructions on installing it with your OS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Install Redis&lt;/strong&gt;: See &lt;a href=&quot;https://redis.io/download&quot;&gt;the Redis documentation&lt;/a&gt; for instructions on installing it with your OS.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Install yarn&lt;/strong&gt;: We use &lt;a href=&quot;https://yarnpkg.com&quot;&gt;yarn&lt;/a&gt; to handle our JavaScript dependencies. (plain &lt;code&gt;npm&lt;/code&gt; doesn&#39;t work due to our monorepo setup) See &lt;a href=&quot;https://yarnpkg.com/en/docs/install&quot;&gt;the yarn documentation&lt;/a&gt; for instructions on installing it.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Install the dependencies&lt;/strong&gt;: Because it&#39;s pretty tedious to install the dependencies for each worker individually we&#39;ve created a script that goes through and runs &lt;code&gt;yarn install&lt;/code&gt; for every worker for you: (this takes a couple minutes, so dive into the &lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/docs&quot;&gt;technical docs&lt;/a&gt; in the meantime)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;node shared/install-dependencies.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You&#39;ve now finished installing everything! Let&#39;s migrate the database and you&#39;ll be ready to go :100:&lt;/p&gt; 
&lt;h4&gt;Migrating the database&lt;/h4&gt; 
&lt;p&gt;When you first download the code and want to run it locally you have to migrate the database and seed it with test data. First, start rethinkdb in its own terminal tab:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;rethinkdb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, in a new tab, run these commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn run db:migrate
yarn run db:seed
# ‚ö†Ô∏è To empty the database (e.g. if there&#39;s faulty data) run yarn run db:drop
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There&#39;s a shortcut for dropping, migrating and seeding the database too:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn run db:reset
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;testing&lt;/code&gt; database used in end to end tests is managed separately. It is built, migrated, and seeded when you run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn run start:api:test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To drop the &lt;code&gt;testing&lt;/code&gt; database, go to http://localhost:8080/#tables while &lt;code&gt;rethinkdb&lt;/code&gt; is running, and click Delete Database on the appropriate database.&lt;/p&gt; 
&lt;h4&gt;Getting the secrets&lt;/h4&gt; 
&lt;p&gt;While the app will run without any secrets set up, you won&#39;t be able to sign in locally. To get that set up, copy the provided example secrets file to the real location:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cp now-secrets.example.json now-secrets.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If you&#39;re an employee at Spectrum we&#39;ve got a more complete list of secrets that also lets you upload images etc. in 1Password, search for &quot;now-secrets.json&quot; to find it.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Now you&#39;re ready to run the app locally and sign into your local instance!&lt;/p&gt; 
&lt;h3&gt;Running the app locally&lt;/h3&gt; 
&lt;h4&gt;Background services&lt;/h4&gt; 
&lt;p&gt;Whenever you want to run Spectrum locally you have to have RethinkDB and Redis running in the background. First start rethinkdb like we did to migrate the database:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;rethinkdb
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then (without closing the rethinkdb tab!) open another tab and start Redis:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;redis-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Start the servers&lt;/h4&gt; 
&lt;p&gt;Depending on what you&#39;re trying to work on you&#39;ll need to start different servers. Generally, all servers run in development mode by doing &lt;code&gt;yarn run dev:&amp;lt;workername&amp;gt;&lt;/code&gt;, e.g. &lt;code&gt;yarn run dev:hermes&lt;/code&gt; to start the email worker.&lt;/p&gt; 
&lt;p&gt;No matter what you&#39;re trying to do though, you&#39;ll want to have the API running, so start that in a background tab:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;yarn run dev:api
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Develop the web UI&lt;/h4&gt; 
&lt;p&gt;To develop the frontend and web UI run&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;yarn run dev:web
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Develop the desktop app&lt;/h4&gt; 
&lt;p&gt;To develop the desktop app you have to have the dev web server running in the background (&lt;code&gt;yarn run dev:web&lt;/code&gt;) and then, in another terminal tab, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;yarn run dev:desktop
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If something didn&#39;t work or you ran into troubles please submit PRs to improve this doc and keep it up to date!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;GitHub&lt;/h2&gt; 
&lt;p&gt;Spectrum is now part of GitHub. For code of conduct, please see &lt;a href=&quot;https://help.github.com/en/github/site-policy/github-community-guidelines&quot;&gt;GitHub&#39;s Community Guidelines&lt;/a&gt; and &lt;a href=&quot;https://help.github.com/en/github/site-policy/github-acceptable-use-policies&quot;&gt;Acceptable Use Policies&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;BSD 3-Clause, see the &lt;a href=&quot;https://raw.githubusercontent.com/withspectrum/spectrum/alpha/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jonasschmedtmann/complete-javascript-course</title>
      <link>https://github.com/jonasschmedtmann/complete-javascript-course</link>
      <description>&lt;p&gt;Starter files, final projects and FAQ for my Complete JavaScript course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Course Material and FAQ for my Complete JavaScript Course&lt;/h1&gt; 
&lt;p&gt;This repo contains starter files and final code for all sections and projects contained in the course.&lt;/p&gt; 
&lt;p&gt;Use starter code to start each section, and &lt;strong&gt;final code to compare it with your own code whenever something doesn&#39;t work&lt;/strong&gt;!&lt;/p&gt; 
&lt;p&gt;üëá &lt;strong&gt;&lt;em&gt;Please read the following Frequently Asked Questions (FAQ) carefully before starting the course&lt;/em&gt;&lt;/strong&gt; üëá&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;Q1: How do I download the files?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; If you&#39;re new to GitHub and just want to download the entire code, hit the green button saying &quot;Code&quot;, and then choose the &quot;Download ZIP&quot; option. If you can&#39;t see the button (on mobile), use &lt;a href=&quot;https://github.com/jonasschmedtmann/complete-javascript-course/archive/master.zip&quot;&gt;this link&lt;/a&gt; instead.&lt;/p&gt; 
&lt;h3&gt;Q2: I&#39;m looking for the old course version (v1) files. Where can I find them?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; They are in this same repo, but in the &lt;a href=&quot;https://github.com/jonasschmedtmann/complete-javascript-course/tree/v1&quot;&gt;v1 branch&lt;/a&gt;. So just go to &lt;a href=&quot;https://github.com/jonasschmedtmann/complete-javascript-course/tree/v1&quot;&gt;v1&lt;/a&gt;, and download the code from there.&lt;/p&gt; 
&lt;h3&gt;Q3: I&#39;m stuck! Where do I get help?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Have you actually tried to fix the problem on your own? Have you compared your code to the final code? If you failed fixing your problem, please &lt;strong&gt;post a detailed description of the problem to the Q&amp;amp;A area of that video over at Udemy&lt;/strong&gt;, along with a &lt;a href=&quot;https://codepen.io/pen/&quot;&gt;codepen&lt;/a&gt; containing your code. You will get help there. Please don&#39;t send me a personal message or email to fix coding problems.&lt;/p&gt; 
&lt;h3&gt;Q4: What VSCode theme are you using?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; I use Monokai Pro for all my coding and course production. It&#39;s a paid theme, but you can actually use the free demo version forever üòÖ&lt;/p&gt; 
&lt;h3&gt;Q5: Can I see a final version of the course projects?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Sure! Here you go:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pig-game-v2.netlify.app&quot;&gt;Pig Game&lt;/a&gt; (DOM Manipulation)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bankist.netlify.app/&quot;&gt;Bankist&lt;/a&gt; (Arrays, Numbers, Dates, Timers. Fake &quot;log in&quot; with user &lt;code&gt;js&lt;/code&gt; and PIN &lt;code&gt;1111&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bankist-dom.netlify.app/&quot;&gt;Bankist Site&lt;/a&gt; (Advanced DOM and Events)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mapty.netlify.app/&quot;&gt;Mapty&lt;/a&gt; (OOP, Geolocation, Project planning)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://forkify-v2.netlify.app/&quot;&gt;forkify&lt;/a&gt; (Final advanced project)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Q6: Videos don&#39;t load, can you fix it?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Unfortunately, there is nothing I can do about it. The course is hosted on Udemy, and sometimes they have technical issues like this. Please just come back a bit later or &lt;a href=&quot;https://support.udemy.com/hc/en-us&quot;&gt;contact their support team&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Q7: Videos are blurred / have low quality, can you fix it?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Please open video settings and change the quality from &#39;Auto&#39; to another value, for example 720p. If that doesn&#39;t help, please &lt;a href=&quot;https://support.udemy.com/hc/en-us&quot;&gt;contact the Udemy support team&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Q8: Are the videos downloadable?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Yes! I made all videos downloadable from Udemy so you can learn even without an internet connection. To download a video, use the settings icon in the right bottom corner of the video player. Videos have to be downloaded individually.&lt;/p&gt; 
&lt;h3&gt;Q9: I want to put these projects in my portfolio. Is that allowed?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Absolutely! Just make sure you actually built them yourself by following the course, and that you understand what you did. What is &lt;strong&gt;not allowed&lt;/strong&gt; is that you create your own course/videos/articles based on this course&#39;s content!&lt;/p&gt; 
&lt;h3&gt;Q10: You keep mentioning your resources page. Where can I find it?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; It&#39;s on my website at &lt;a href=&quot;http://codingheroes.io/resources&quot;&gt;http://codingheroes.io/resources&lt;/a&gt;. You can subscribe for updates üòâ&lt;/p&gt; 
&lt;h3&gt;Q11: I love your courses and want to get updates on new courses. How?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; First, you can subscribe to my email list &lt;a href=&quot;http://codingheroes.io/resources&quot;&gt;at my website&lt;/a&gt;. Plus, I make important announcements on twitter &lt;a href=&quot;https://twitter.com/jonasschmedtman&quot;&gt;@jonasschmedtman&lt;/a&gt;, so you should definitely follow me there üî•&lt;/p&gt; 
&lt;h3&gt;Q12: How do I get my certificate of completion?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; A certificate of completion is provided by Udemy after you complete 100% of the course. After completing the course, just click on the &quot;Your progress&quot; indicator in the top right-hand corner of the course page. If you want to change your name on the certificate, please &lt;a href=&quot;https://support.udemy.com/hc/en-us&quot;&gt;contact the Udemy support team&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Q13: Do you accept pull requests?&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; No, for the simple reason that I want this repository to contain the &lt;em&gt;exact&lt;/em&gt; same code that is shown in the videos. However, please feel free to add an issue if you found one.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>freeCodeCamp/freeCodeCamp</title>
      <link>https://github.com/freeCodeCamp/freeCodeCamp</link>
      <description>&lt;p&gt;freeCodeCamp.org&#39;s open source codebase and curriculum. Learn to code at home.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://s3.amazonaws.com/freecodecamp/wide-social-banner.png&quot; alt=&quot;freeCodeCamp.org Social Banner&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://makeapullrequest.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat&quot; alt=&quot;Pull Requests Welcome&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.firsttimersonly.com/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/first--timers--only-friendly-blue.svg&quot; alt=&quot;first-timers-only Friendly&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.codetriage.com/freecodecamp/freecodecamp&quot;&gt;&lt;img src=&quot;https://www.codetriage.com/freecodecamp/freecodecamp/badges/users.svg&quot; alt=&quot;Open Source Helpers&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitpod.io/from-referrer/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/setup-automated-blue?logo=gitpod&quot; alt=&quot;Setup Automated&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;freeCodeCamp.org&#39;s open-source codebase and curriculum&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.freecodecamp.org&quot;&gt;freeCodeCamp.org&lt;/a&gt; is a friendly community where you can learn to code for free. It is run by a &lt;a href=&quot;https://donate.freecodecamp.org&quot;&gt;donor-supported 501(c)(3) nonprofit&lt;/a&gt; to help millions of busy adults transition into tech. Our community has already helped more than 10,000 people get their first developer job.&lt;/p&gt; 
&lt;p&gt;Our full-stack web development and machine learning curriculum is completely free and self-paced. We have thousands of interactive coding challenges to help you expand your skills.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/master/#certifications&quot;&gt;Certifications&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/master/#the-learning-platform&quot;&gt;The Learning Platform&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/master/#reporting-bugs-and-issues&quot;&gt;Reporting Bugs and Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/master/#reporting-security-issues-and-responsible-disclosure&quot;&gt;Reporting Security Issues and Responsible Disclosure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/master/#platform-build-and-deployment-status&quot;&gt;Platform, Build and Deployment Status&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Certifications&lt;/h3&gt; 
&lt;p&gt;freeCodeCamp.org offers several free developer certifications. Each of these certifications involves building 5 required web app projects, along with hundreds of optional coding challenges to help you prepare for those projects. We estimate that each certification will take a beginner programmer around 300 hours to earn.&lt;/p&gt; 
&lt;p&gt;Each of these 50 projects in the freeCodeCamp.org curriculum has its own agile user stories and automated tests. These help you build up your project incrementally and ensure you&#39;ve fulfilled all the user stories before you submit it.&lt;/p&gt; 
&lt;p&gt;You can pull in these test suites through &lt;a href=&quot;https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js&quot;&gt;freeCodeCamp&#39;s CDN&lt;/a&gt;. This means you can build these projects on websites like CodePen and Glitch - or even on your local computer&#39;s development environment.&lt;/p&gt; 
&lt;p&gt;Once you‚Äôve earned a certification, you will always have it. You will always be able to link to it from your LinkedIn or r√©sum√©. And when your prospective employers or freelance clients click that link, they‚Äôll see a verified certification specific to you.&lt;/p&gt; 
&lt;p&gt;The one exception to this is if we discover violations of our &lt;a href=&quot;https://www.freecodecamp.org/academic-honesty&quot;&gt;Academic Honesty Policy&lt;/a&gt;. When we catch people unambiguously plagiarizing (submitting other people&#39;s code or projects as their own without citation), we do what all rigorous institutions of learning should do - we revoke their certifications and ban those people.&lt;/p&gt; 
&lt;p&gt;Here are our ten core certifications:&lt;/p&gt; 
&lt;h4&gt;1. Responsive Web Design Certification&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/responsive-web-design/basic-html-and-html5&quot;&gt;Basic HTML and HTML5&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/responsive-web-design/basic-css&quot;&gt;Basic CSS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/responsive-web-design/applied-visual-design&quot;&gt;Applied Visual Design&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/responsive-web-design/applied-accessibility&quot;&gt;Applied Accessibility&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/responsive-web-design/responsive-web-design-principles&quot;&gt;Responsive Web Design Principles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/responsive-web-design/css-flexbox&quot;&gt;CSS Flexbox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/responsive-web-design/css-grid&quot;&gt;CSS Grid&lt;/a&gt; 
  &lt;!-- raw HTML omitted --&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&quot;https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-projects/build-a-tribute-page&quot;&gt;Tribute Page&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-projects/build-a-survey-form&quot;&gt;Survey Form&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-projects/build-a-product-landing-page&quot;&gt;Product Landing Page&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-projects/build-a-technical-documentation-page&quot;&gt;Technical Documentation Page&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/responsive-web-design/responsive-web-design-projects/build-a-personal-portfolio-webpage&quot;&gt;Personal Portfolio Webpage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;2. JavaScript Algorithms and Data Structures Certification&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-javascript&quot;&gt;Basic JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/es6&quot;&gt;ES6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/regular-expressions&quot;&gt;Regular Expressions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/debugging&quot;&gt;Debugging&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-data-structures&quot;&gt;Basic Data Structures&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-algorithm-scripting&quot;&gt;Algorithm Scripting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/object-oriented-programming&quot;&gt;Object-Oriented Programming&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/functional-programming&quot;&gt;Functional Programming&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting&quot;&gt;Intermediate Algorithm Scripting&lt;/a&gt; 
  &lt;!-- raw HTML omitted --&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&quot;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/palindrome-checker&quot;&gt;Palindrome Checker&lt;/a&gt;,&lt;a href=&quot;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/roman-numeral-converter&quot;&gt; Roman Numeral Converter&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/caesars-cipher&quot;&gt;Caesar&#39;s Cipher&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/telephone-number-validator&quot;&gt;Telephone Number Validator&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/cash-register&quot;&gt;Cash Register&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;3. Front End Libraries Certification&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/front-end-libraries/bootstrap&quot;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/front-end-libraries/jquery&quot;&gt;jQuery&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/front-end-libraries/sass&quot;&gt;Sass&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/front-end-libraries/react&quot;&gt;React&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/front-end-libraries/redux&quot;&gt;Redux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/front-end-libraries/react-and-redux&quot;&gt;React and Redux&lt;/a&gt; 
  &lt;!-- raw HTML omitted --&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&quot;https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-random-quote-machine&quot;&gt;Random Quote Machine&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer&quot;&gt;Markdown Previewer&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-drum-machine&quot;&gt;Drum Machine&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-javascript-calculator&quot;&gt;JavaScript Calculator&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-25--5-clock&quot;&gt;25 + 5 Clock&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;4. Data Visualization Certification&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/data-visualization/data-visualization-with-d3&quot;&gt;Data Visualization with D3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/data-visualization/json-apis-and-ajax&quot;&gt;JSON APIs and Ajax&lt;/a&gt; 
  &lt;!-- raw HTML omitted --&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&quot;https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-bar-chart&quot;&gt;Bar Chart&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-scatterplot-graph&quot;&gt;Scatterplot Graph&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-heat-map&quot;&gt;Heat Map&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-choropleth-map&quot;&gt;Choropleth Map&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/data-visualization/data-visualization-projects/visualize-data-with-a-treemap-diagram&quot;&gt;Treemap Diagram&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;5. APIs and Microservices Certification&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/apis-and-microservices/managing-packages-with-npm&quot;&gt;Managing Packages with Npm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/apis-and-microservices/basic-node-and-express&quot;&gt;Basic Node and Express&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/apis-and-microservices/mongodb-and-mongoose&quot;&gt;MongoDB and Mongoose&lt;/a&gt; 
  &lt;!-- raw HTML omitted --&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&quot;https://www.freecodecamp.org/learn/apis-and-microservices/apis-and-microservices-projects/timestamp-microservice&quot;&gt;Timestamp Microservice&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/apis-and-microservices/apis-and-microservices-projects/request-header-parser-microservice&quot;&gt;Request Header Parser&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/apis-and-microservices/apis-and-microservices-projects/url-shortener-microservice&quot;&gt;URL Shortener&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/apis-and-microservices/apis-and-microservices-projects/exercise-tracker&quot;&gt;Exercise Tracker&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/apis-and-microservices/apis-and-microservices-projects/file-metadata-microservice&quot;&gt;File Metadata Microservice&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;6. Quality Assurance Certification&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-and-testing-with-chai/&quot;&gt;Quality Assurance and Testing with Chai&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/learn/quality-assurance/advanced-node-and-express/&quot;&gt;Advanced Node and Express&lt;/a&gt; 
  &lt;!-- raw HTML omitted --&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&quot;https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/metric-imperial-converter&quot;&gt;Metric-Imperial Converter&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/issue-tracker&quot;&gt;Issue Tracker&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/personal-library&quot;&gt;Personal Library&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/sudoku-solver&quot;&gt;Sudoku Solver&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/quality-assurance/quality-assurance-projects/american-british-translator&quot;&gt;American British Translator&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;7. Scientific Computing with Python Certification&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/scientific-computing-with-python/python-for-everybody&quot;&gt;Introduction to Python for Everybody&lt;/a&gt; 
  &lt;!-- raw HTML omitted --&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&quot;https://www.freecodecamp.org/learn/scientific-computing-with-python/scientific-computing-with-python-projects/arithmetic-formatter&quot;&gt;Arithmetic Formatter&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/scientific-computing-with-python/scientific-computing-with-python-projects/time-calculator&quot;&gt;Time Calculator&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/scientific-computing-with-python/scientific-computing-with-python-projects/budget-app&quot;&gt;Budget App&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/scientific-computing-with-python/scientific-computing-with-python-projects/polygon-area-calculator&quot;&gt;Polygon Area Calculator&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/scientific-computing-with-python/scientific-computing-with-python-projects/probability-calculator&quot;&gt;Probability Calculator&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;8. Data Analysis with Python Certification&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/data-analysis-with-python/data-analysis-with-python-course&quot;&gt;Data Analysis with Python Course&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/data-analysis-with-python/numpy&quot;&gt;NumPy&lt;/a&gt; 
  &lt;!-- raw HTML omitted --&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&quot;https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/mean-variance-standard-deviation-calculator&quot;&gt;Mean-Variance-Standard Deviation Calculator&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/demographic-data-analyzer&quot;&gt;Demographic Data Analyzer&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/medical-data-visualizer&quot;&gt;Medical Data Visualizer&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/page-view-time-series-visualizer&quot;&gt;Page View Time Series Visualizer&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/sea-level-predictor&quot;&gt;Sea Level Predictor&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;9. Information Security Certification&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/information-security/information-security-with-helmetjs&quot;&gt;Information Security with HelmetJS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/information-security/python-for-penetration-testing&quot;&gt;Python for Penetration Testing&lt;/a&gt; 
  &lt;!-- raw HTML omitted --&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&quot;https://www.freecodecamp.org/learn/information-security/information-security-projects/stock-price-checker&quot;&gt;Stock Price Checker&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/information-security/information-security-projects/anonymous-message-board&quot;&gt;Anonymous Message Board&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/information-security/information-security-projects/port-scanner&quot;&gt;Port Scanner&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/information-security/information-security-projects/sha-1-password-cracker&quot;&gt;SHA-1 Password Cracker&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/information-security/information-security-projects/secure-real-time-multiplayer-game&quot;&gt;Secure Real Time Multiplayer Game &lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;10. Machine Learning with Python Certification&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/machine-learning-with-python/tensorflow&quot;&gt;TensorFlow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.freecodecamp.org/machine-learning-with-python/how-neural-networks-work&quot;&gt;How Neural Networks Work&lt;/a&gt; 
  &lt;!-- raw HTML omitted --&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;strong&gt;Projects&lt;/strong&gt;: &lt;a href=&quot;https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/rock-paper-scissors&quot;&gt;Rock Paper Scissors&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/cat-and-dog-image-classifier&quot;&gt;Cat and Dog Image Classifier&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/book-recommendation-engine-using-knn&quot;&gt;Book Recommendation Engine using KNN&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/linear-regression-health-costs-calculator&quot;&gt;Linear Regression Health Costs Calculator&lt;/a&gt;, &lt;a href=&quot;https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/neural-network-sms-text-classifier&quot;&gt;Neural Network SMS Text Classifier&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Legacy Full Stack Development Certification&lt;/h4&gt; 
&lt;p&gt;Once you have earned the Responsive Web Design, Algorithms and Data Structures, Front End Libraries, Data Visualization, APIs and Microservices, and Legacy Information Security and Quality Assurance certifications, you&#39;ll be able to claim your freeCodeCamp.org Full Stack Development Certification. This distinction signifies that you&#39;ve completed around 1,800 hours of coding with a wide range of web development tools.&lt;/p&gt; 
&lt;h4&gt;Legacy Certifications&lt;/h4&gt; 
&lt;p&gt;We also have 4 legacy certifications dating back to our 2015 curriculum, which are still available. All of the required projects for these legacy certifications will remain available on freeCodeCamp.org.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Legacy Front End Development Certification&lt;/li&gt; 
 &lt;li&gt;Legacy Data Visualization Certification&lt;/li&gt; 
 &lt;li&gt;Legacy Back End Development Certification&lt;/li&gt; 
 &lt;li&gt;Legacy Information Security and Quality Assurance Certification&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;The Learning Platform&lt;/h3&gt; 
&lt;p&gt;This code is running live at &lt;a href=&quot;https://www.freecodecamp.org&quot;&gt;freeCodeCamp.org&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Our community also has:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://forum.freecodecamp.org&quot;&gt;forum&lt;/a&gt; where you can usually get programming help or project feedback within hours.&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://youtube.com/freecodecamp&quot;&gt;YouTube channel&lt;/a&gt; with free courses on Python, SQL, Android, and a wide variety of other technologies.&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://www.freecodecamp.org/news&quot;&gt;technical publication&lt;/a&gt; with thousands of programming tutorials and articles about math and computer science.&lt;/li&gt; 
 &lt;li&gt;A &lt;a href=&quot;https://discord.gg/KVUmVXA&quot;&gt;Discord chat room&lt;/a&gt; where you can hang out and talk with developers and people who are learning to code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://www.freecodecamp.org/signin&quot;&gt;Join the community here&lt;/a&gt;.&lt;/h4&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Reporting Bugs and Issues&lt;/h3&gt; 
&lt;p&gt;If you think you&#39;ve found a bug, first read the &lt;a href=&quot;https://forum.freecodecamp.org/t/how-to-report-a-bug/19543&quot;&gt;how to report a bug&lt;/a&gt; article and follow its instructions.&lt;/p&gt; 
&lt;p&gt;If you&#39;re confident it&#39;s a new bug and have confirmed that someone else is facing the same issue, go ahead and create a new GitHub issue. Be sure to include as much information as possible so we can reproduce the bug.&lt;/p&gt; 
&lt;h3&gt;Reporting Security Issues and Responsible Disclosure&lt;/h3&gt; 
&lt;p&gt;If you think you have found a vulnerability, &lt;em&gt;please report responsibly&lt;/em&gt;. Don&#39;t create GitHub issues for security issues. Instead, please send an email to &lt;code&gt;security@freecodecamp.org&lt;/code&gt; and we&#39;ll look into it immediately.&lt;/p&gt; 
&lt;p&gt;We appreciate any responsible disclosure of vulnerabilities that might impact the integrity of our platforms and users. While we do not offer any bounties or swags at the moment, we&#39;ll be happy to list your name in our &lt;a href=&quot;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/master/HoF.md&quot;&gt;Hall of Fame&lt;/a&gt; for security researchers.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;The freeCodeCamp.org community is possible thanks to thousands of kind volunteers like you. We welcome any and all contributions to the community and are excited to welcome you aboard.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;h4&gt;&lt;a href=&quot;https://contribute.freecodecamp.org&quot;&gt;Please follow these steps to contribute&lt;/a&gt;.&lt;/h4&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Platform, Build and Deployment Status&lt;/h3&gt; 
&lt;p&gt;The general platform status for all our applications is available at &lt;a href=&quot;https://status.freecodecamp.org&quot;&gt;&lt;code&gt;status.freecodecamp.org&lt;/code&gt;&lt;/a&gt;. The build and deployment status for the code is available in &lt;a href=&quot;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/master/docs/devops.md&quot;&gt;our DevOps Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;Copyright ¬© 2020 freeCodeCamp.org&lt;/p&gt; 
&lt;p&gt;The content of this repository is bound by the following licenses:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The computer software is licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/master/LICENSE.md&quot;&gt;BSD-3-Clause&lt;/a&gt; license.&lt;/li&gt; 
 &lt;li&gt;The learning resources in the &lt;a href=&quot;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/master/curriculum&quot;&gt;&lt;code&gt;/curriculum&lt;/code&gt;&lt;/a&gt; directory including their subdirectories thereon are licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/freeCodeCamp/freeCodeCamp/master/curriculum/LICENSE.md&quot;&gt;CC-BY-SA-4.0&lt;/a&gt; license.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ccxt/ccxt</title>
      <link>https://github.com/ccxt/ccxt</link>
      <description>&lt;p&gt;A JavaScript / Python / PHP cryptocurrency trading API with support for more than 120 bitcoin/altcoin exchanges&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CCXT ‚Äì CryptoCurrency eXchange Trading Library&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.com/ccxt/ccxt&quot;&gt;&lt;img src=&quot;https://travis-ci.com/ccxt/ccxt.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://npmjs.com/package/ccxt&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ccxt.svg&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://pypi.python.org/pypi/ccxt&quot;&gt;&lt;img src=&quot;https://img.shields.io/pypi/v/ccxt.svg&quot; alt=&quot;PyPI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/ccxt&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/ccxt.svg&quot; alt=&quot;NPM Downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/dhzSKYU&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/690203284119617602?logo=discord&amp;amp;logoColor=white&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Exchange-Markets&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/exchanges-122-blue.svg&quot; alt=&quot;Supported Exchanges&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/ccxt&quot;&gt;&lt;img src=&quot;https://opencollective.com/ccxt/backers/badge.svg&quot; alt=&quot;Open Collective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/ccxt_official&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/ccxt_official.svg?style=social&amp;amp;label=CCXT&quot; alt=&quot;Twitter Follow&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A JavaScript / Python / PHP library for cryptocurrency trading and e-commerce with support for many bitcoin/ether/altcoin exchange markets and merchant APIs.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ccxt/ccxt/master/#install&quot;&gt;Install&lt;/a&gt; ¬∑ &lt;a href=&quot;https://raw.githubusercontent.com/ccxt/ccxt/master/#usage&quot;&gt;Usage&lt;/a&gt; ¬∑ &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki&quot;&gt;Manual&lt;/a&gt; ¬∑ &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/FAQ&quot;&gt;FAQ&lt;/a&gt; ¬∑ &lt;a href=&quot;https://github.com/ccxt/ccxt/tree/master/examples&quot;&gt;Examples&lt;/a&gt; ¬∑ &lt;a href=&quot;https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt; ¬∑ &lt;a href=&quot;https://raw.githubusercontent.com/ccxt/ccxt/master/#social&quot;&gt;Social&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;The &lt;strong&gt;CCXT&lt;/strong&gt; library is used to connect and trade with cryptocurrency exchanges and payment processing services worldwide. It provides quick access to market data for storage, analysis, visualization, indicator development, algorithmic trading, strategy backtesting, bot programming, and related software engineering.&lt;/p&gt; 
&lt;p&gt;It is intended to be used by &lt;strong&gt;coders, developers, technically-skilled traders, data-scientists and financial analysts&lt;/strong&gt; for building trading algorithms.&lt;/p&gt; 
&lt;p&gt;Current feature list:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;support for many cryptocurrency exchanges ‚Äî more coming soon&lt;/li&gt; 
 &lt;li&gt;fully implemented public and private APIs&lt;/li&gt; 
 &lt;li&gt;optional normalized data for cross-exchange analytics and arbitrage&lt;/li&gt; 
 &lt;li&gt;an out of the box unified API that is extremely easy to integrate&lt;/li&gt; 
 &lt;li&gt;works in Node 7.6+, Python 3, PHP 5.4+, and web browsers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Sponsored Promotion&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/93346896-22dfb080-f83d-11ea-957f-6b8ae008f62a.png&quot; alt=&quot;CCXT Pro ‚Äì A JavaScript / Python / PHP cryptocurrency exchange trading WebSocket API for professionals&quot;&gt;&lt;/a&gt; &lt;strong&gt;&lt;a href=&quot;https://ccxt.pro&quot;&gt;A JavaScript / Python / PHP cryptocurrency exchange trading WebSocket API for professionals&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;See Also&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://quadency.com?utm_source=ccxt&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/69334382-a0618100-0c6b-11ea-9ba9-40aa97440cfa.png&quot; alt=&quot;Quadency&quot;&gt;&lt;/a&gt;
  &lt;!-- raw HTML omitted --&gt;&amp;nbsp; &lt;strong&gt;&lt;a href=&quot;https://quadency.com?utm_source=ccxt&quot;&gt;Quadency&lt;/a&gt;&lt;/strong&gt;&amp;nbsp;‚Äî&amp;nbsp;trading automation terminal for leading exchanges with streaming APIs + Python IDE.&lt;/li&gt; 
 &lt;li&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://tab-trader.com/?utm_source=ccxt&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/66755907-9c3e8880-eea1-11e9-846e-0bff349ceb87.png&quot; alt=&quot;TabTrader&quot;&gt;&lt;/a&gt;
  &lt;!-- raw HTML omitted --&gt;&amp;nbsp; &lt;strong&gt;&lt;a href=&quot;https://tab-trader.com/?utm_source=ccxt&quot;&gt;TabTrader&lt;/a&gt;&lt;/strong&gt;&amp;nbsp;‚Äî&amp;nbsp;trading on all exchanges in one app. Avaliable on &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.tabtrader.android&amp;amp;referrer=utm_source%3Dccxt&quot;&gt;Android&lt;/a&gt; and &lt;a href=&quot;https://itunes.apple.com/app/apple-store/id1095716562?mt=8&quot;&gt;iOS&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Certified Cryptocurrency Exchanges&lt;/h2&gt; 
&lt;p&gt;| logo | id | name | ver | doc | certified | pro | |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-----------------------------------------------------------------------------|:---:|:----------------------------------------------------------------------------------:|-----------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------| | &lt;a href=&quot;https://www.binance.com/?ref=10205187&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg&quot; alt=&quot;binance&quot;&gt;&lt;/a&gt; | binance | &lt;a href=&quot;https://www.binance.com/?ref=10205187&quot;&gt;Binance&lt;/a&gt; | * | &lt;a href=&quot;https://binance-docs.github.io/apidocs/spot/en&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.bitfinex.com/?refcode=P61eYxFL&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg&quot; alt=&quot;bitfinex&quot;&gt;&lt;/a&gt; | bitfinex | &lt;a href=&quot;https://www.bitfinex.com/?refcode=P61eYxFL&quot;&gt;Bitfinex&lt;/a&gt; | 1 | &lt;a href=&quot;https://docs.bitfinex.com/v1/docs&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://bittrex.com/Account/Register?referralCode=1ZE-G0G-M3B&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87153921-edf53180-c2c0-11ea-96b9-f2a9a95a455b.jpg&quot; alt=&quot;bittrex&quot;&gt;&lt;/a&gt; | bittrex | &lt;a href=&quot;https://bittrex.com/Account/Register?referralCode=1ZE-G0G-M3B&quot;&gt;Bittrex&lt;/a&gt; | 3 | &lt;a href=&quot;https://bittrex.github.io/api/v3&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://bitvavo.com/?a=24F34952F7&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/83165440-2f1cf200-a116-11ea-9046-a255d09fb2ed.jpg&quot; alt=&quot;bitvavo&quot;&gt;&lt;/a&gt; | bitvavo | &lt;a href=&quot;https://bitvavo.com/?a=24F34952F7&quot;&gt;Bitvavo&lt;/a&gt; | 2 | &lt;a href=&quot;https://docs.bitvavo.com/&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.byte-trade.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/67288762-2f04a600-f4e6-11e9-9fd6-c60641919491.jpg&quot; alt=&quot;bytetrade&quot;&gt;&lt;/a&gt; | bytetrade | &lt;a href=&quot;https://www.byte-trade.com&quot;&gt;ByteTrade&lt;/a&gt; | * | &lt;a href=&quot;https://docs.byte-trade.com/#description&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | | | &lt;a href=&quot;https://currency.com/trading/signup?c=362jaimv&amp;amp;pid=referral&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/83718672-36745c00-a63e-11ea-81a9-677b1f789a4d.jpg&quot; alt=&quot;currencycom&quot;&gt;&lt;/a&gt; | currencycom | &lt;a href=&quot;https://currency.com/trading/signup?c=362jaimv&amp;amp;pid=referral&quot;&gt;Currency.com&lt;/a&gt; | 1 | &lt;a href=&quot;https://currency.com/api&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://eterbase.exchange/invite/1wjjh4Pe&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/82067900-faeb0f80-96d9-11ea-9f22-0071cfcb9871.jpg&quot; alt=&quot;eterbase&quot;&gt;&lt;/a&gt; | eterbase | &lt;a href=&quot;https://eterbase.exchange/invite/1wjjh4Pe&quot;&gt;Eterbase&lt;/a&gt; | 1 | &lt;a href=&quot;https://developers.eterbase.exchange&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | | | &lt;a href=&quot;https://ftx.com/#a=1623029&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/67149189-df896480-f2b0-11e9-8816-41593e17f9ec.jpg&quot; alt=&quot;ftx&quot;&gt;&lt;/a&gt; | ftx | &lt;a href=&quot;https://ftx.com/#a=1623029&quot;&gt;FTX&lt;/a&gt; | * | &lt;a href=&quot;https://github.com/ftexchange/ftx&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://idex.io&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/94481303-2f222100-01e0-11eb-97dd-bc14c5943a86.jpg&quot; alt=&quot;idex&quot;&gt;&lt;/a&gt; | idex | &lt;a href=&quot;https://idex.io&quot;&gt;IDEX&lt;/a&gt; | 2 | &lt;a href=&quot;https://docs.idex.io/&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.kraken.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/76173629-fc67fb00-61b1-11ea-84fe-f2de582f58a3.jpg&quot; alt=&quot;kraken&quot;&gt;&lt;/a&gt; | kraken | &lt;a href=&quot;https://www.kraken.com&quot;&gt;Kraken&lt;/a&gt; | 0 | &lt;a href=&quot;https://www.kraken.com/features/api&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://upbit.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/49245610-eeaabe00-f423-11e8-9cba-4b0aed794799.jpg&quot; alt=&quot;upbit&quot;&gt;&lt;/a&gt; | upbit | &lt;a href=&quot;https://upbit.com&quot;&gt;Upbit&lt;/a&gt; | 1 | &lt;a href=&quot;https://docs.upbit.com/docs/%EC%9A%94%EC%B2%AD-%EC%88%98-%EC%A0%9C%ED%95%9C&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://waves.exchange&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/84547058-5fb27d80-ad0b-11ea-8711-78ac8b3c7f31.jpg&quot; alt=&quot;wavesexchange&quot;&gt;&lt;/a&gt; | wavesexchange | &lt;a href=&quot;https://waves.exchange&quot;&gt;Waves.Exchange&lt;/a&gt; | * | &lt;a href=&quot;https://docs.waves.exchange&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | | | &lt;a href=&quot;https://xena.exchange&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87489843-bb469280-c64c-11ea-91aa-69c6326506af.jpg&quot; alt=&quot;xena&quot;&gt;&lt;/a&gt; | xena | &lt;a href=&quot;https://xena.exchange&quot;&gt;Xena Exchange&lt;/a&gt; | * | &lt;a href=&quot;https://support.xena.exchange/support/solutions/44000808700&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | |&lt;/p&gt; 
&lt;h2&gt;Supported Cryptocurrency Exchange Markets&lt;/h2&gt; 
&lt;p&gt;The CCXT library currently supports the following 122 cryptocurrency exchange markets and trading APIs:&lt;/p&gt; 
&lt;p&gt;| logo | id | name | ver | doc | certified | pro | |--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------|-----------------------------------------------------------------------------------------|:---:|:-------------------------------------------------------------------------------------------:|-----------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------| | &lt;a href=&quot;https://acx.io&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/30247614-1fe61c74-9621-11e7-9e8c-f1a627afa279.jpg&quot; alt=&quot;acx&quot;&gt;&lt;/a&gt; | acx | &lt;a href=&quot;https://acx.io&quot;&gt;ACX&lt;/a&gt; | 2 | &lt;a href=&quot;https://acx.io/documents/api_v2&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://aofex.com/#/register?key=9763840&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/77670271-056d1080-6f97-11ea-9ac2-4268e9ed0c1f.jpg&quot; alt=&quot;aofex&quot;&gt;&lt;/a&gt; | aofex | &lt;a href=&quot;https://aofex.com/#/register?key=9763840&quot;&gt;AOFEX&lt;/a&gt; | * | &lt;a href=&quot;https://aofex.zendesk.com/hc/en-us/sections/360005576574-API&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.bcex.top/register?invite_code=758978&amp;amp;lang=en&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/77231516-851c6900-6bac-11ea-8fd6-ee5c23eddbd4.jpg&quot; alt=&quot;bcex&quot;&gt;&lt;/a&gt; | bcex | &lt;a href=&quot;https://www.bcex.top/register?invite_code=758978&amp;amp;lang=en&quot;&gt;BCEX&lt;/a&gt; | 1 | &lt;a href=&quot;https://github.com/BCEX-TECHNOLOGY-LIMITED/API_Docs/wiki/Interface&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://bequant.io&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/55248342-a75dfe00-525a-11e9-8aa2-05e9dca943c6.jpg&quot; alt=&quot;bequant&quot;&gt;&lt;/a&gt; | bequant | &lt;a href=&quot;https://bequant.io&quot;&gt;Bequant&lt;/a&gt; | 2 | &lt;a href=&quot;https://api.bequant.io/&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://w2.bibox365.com/login/register?invite_code=05Kj3I&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/77257418-3262b000-6c85-11ea-8fb8-20bdf20b3592.jpg&quot; alt=&quot;bibox&quot;&gt;&lt;/a&gt; | bibox | &lt;a href=&quot;https://w2.bibox365.com/login/register?invite_code=05Kj3I&quot;&gt;Bibox&lt;/a&gt; | 1 | &lt;a href=&quot;https://biboxcom.github.io/en/&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://b1.run/users/new?code=D3LLBVFT&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/69354403-1d532180-0c91-11ea-88ed-44c06cefdf87.jpg&quot; alt=&quot;bigone&quot;&gt;&lt;/a&gt; | bigone | &lt;a href=&quot;https://b1.run/users/new?code=D3LLBVFT&quot;&gt;BigONE&lt;/a&gt; | 3 | &lt;a href=&quot;https://open.big.one/docs/api.html&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.binance.com/?ref=10205187&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg&quot; alt=&quot;binance&quot;&gt;&lt;/a&gt; | binance | &lt;a href=&quot;https://www.binance.com/?ref=10205187&quot;&gt;Binance&lt;/a&gt; | * | &lt;a href=&quot;https://binance-docs.github.io/apidocs/spot/en&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.binance.us/?ref=35005074&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/65177307-217b7c80-da5f-11e9-876e-0b748ba0a358.jpg&quot; alt=&quot;binanceus&quot;&gt;&lt;/a&gt; | binanceus | &lt;a href=&quot;https://www.binance.us/?ref=35005074&quot;&gt;Binance US&lt;/a&gt; | * | &lt;a href=&quot;https://github.com/binance-us/binance-official-api-docs&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://bit2c.co.il/Aff/63bfed10-e359-420c-ab5a-ad368dab0baf&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg&quot; alt=&quot;bit2c&quot;&gt;&lt;/a&gt; | bit2c | &lt;a href=&quot;https://bit2c.co.il/Aff/63bfed10-e359-420c-ab5a-ad368dab0baf&quot;&gt;Bit2C&lt;/a&gt; | * | &lt;a href=&quot;https://www.bit2c.co.il/home/api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://bitbank.cc/&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/37808081-b87f2d9c-2e59-11e8-894d-c1900b7584fe.jpg&quot; alt=&quot;bitbank&quot;&gt;&lt;/a&gt; | bitbank | &lt;a href=&quot;https://bitbank.cc/&quot;&gt;bitbank&lt;/a&gt; | 1 | &lt;a href=&quot;https://docs.bitbank.cc/&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://auth.bitbay.net/ref/jHlbB4mIkdS1&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766132-978a7bd8-5ece-11e7-9540-bc96d1e9bbb8.jpg&quot; alt=&quot;bitbay&quot;&gt;&lt;/a&gt; | bitbay | &lt;a href=&quot;https://auth.bitbay.net/ref/jHlbB4mIkdS1&quot;&gt;BitBay&lt;/a&gt; | * | &lt;a href=&quot;https://bitbay.net/public-api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://exchange.bitcoin.com/referral/da948b21d6c92d69&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/97296144-514fa300-1861-11eb-952b-3d55d492200b.jpg&quot; alt=&quot;bitcoincom&quot;&gt;&lt;/a&gt; | bitcoincom | &lt;a href=&quot;https://exchange.bitcoin.com/referral/da948b21d6c92d69&quot;&gt;bitcoin.com&lt;/a&gt; | 2 | &lt;a href=&quot;https://api.exchange.bitcoin.com/api/2/explore&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.bitfinex.com/?refcode=P61eYxFL&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg&quot; alt=&quot;bitfinex&quot;&gt;&lt;/a&gt; | bitfinex | &lt;a href=&quot;https://www.bitfinex.com/?refcode=P61eYxFL&quot;&gt;Bitfinex&lt;/a&gt; | 1 | &lt;a href=&quot;https://docs.bitfinex.com/v1/docs&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.bitfinex.com/?refcode=P61eYxFL&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg&quot; alt=&quot;bitfinex2&quot;&gt;&lt;/a&gt; | bitfinex2 | &lt;a href=&quot;https://www.bitfinex.com/?refcode=P61eYxFL&quot;&gt;Bitfinex&lt;/a&gt; | 2 | &lt;a href=&quot;https://docs.bitfinex.com/v2/docs/&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://bitflyer.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg&quot; alt=&quot;bitflyer&quot;&gt;&lt;/a&gt; | bitflyer | &lt;a href=&quot;https://bitflyer.com&quot;&gt;bitFlyer&lt;/a&gt; | 1 | &lt;a href=&quot;https://lightning.bitflyer.com/docs?lang=en&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.bitforex.com/en/invitationRegister?inviterId=1867438&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87295553-1160ec00-c50e-11ea-8ea0-df79276a9646.jpg&quot; alt=&quot;bitforex&quot;&gt;&lt;/a&gt; | bitforex | &lt;a href=&quot;https://www.bitforex.com/en/invitationRegister?inviterId=1867438&quot;&gt;Bitforex&lt;/a&gt; | 1 | &lt;a href=&quot;https://github.com/githubdev2020/API_Doc_en/wiki&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.bitget.com/expressly?languageType=0&amp;amp;channelCode=ccxt&amp;amp;vipCode=tg9j&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/88317935-a8a21c80-cd22-11ea-8e2b-4b9fac5975eb.jpg&quot; alt=&quot;bitget&quot;&gt;&lt;/a&gt; | bitget | &lt;a href=&quot;https://www.bitget.com/expressly?languageType=0&amp;amp;channelCode=ccxt&amp;amp;vipCode=tg9j&quot;&gt;Bitget&lt;/a&gt; | 3 | &lt;a href=&quot;https://bitgetlimited.github.io/apidoc/en/swap&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.bithumb.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/30597177-ea800172-9d5e-11e7-804c-b9d4fa9b56b0.jpg&quot; alt=&quot;bithumb&quot;&gt;&lt;/a&gt; | bithumb | &lt;a href=&quot;https://www.bithumb.com&quot;&gt;Bithumb&lt;/a&gt; | * | &lt;a href=&quot;https://apidocs.bithumb.com&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.bitkk.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/32859187-cd5214f0-ca5e-11e7-967d-96568e2e2bd1.jpg&quot; alt=&quot;bitkk&quot;&gt;&lt;/a&gt; | bitkk | &lt;a href=&quot;https://www.bitkk.com&quot;&gt;bitkk&lt;/a&gt; | 1 | &lt;a href=&quot;https://www.bitkk.com/i/developer&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;http://www.bitmart.com/?r=rQCFLh&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/61835713-a2662f80-ae85-11e9-9d00-6442919701fd.jpg&quot; alt=&quot;bitmart&quot;&gt;&lt;/a&gt; | bitmart | &lt;a href=&quot;http://www.bitmart.com/?r=rQCFLh&quot;&gt;BitMart&lt;/a&gt; | 1 | &lt;a href=&quot;https://github.com/bitmartexchange/bitmart-official-api-docs&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://bitmax.io/#/register?inviteCode=EL6BXBQM&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/66820319-19710880-ef49-11e9-8fbe-16be62a11992.jpg&quot; alt=&quot;bitmax&quot;&gt;&lt;/a&gt; | bitmax | &lt;a href=&quot;https://bitmax.io/#/register?inviteCode=EL6BXBQM&quot;&gt;BitMax&lt;/a&gt; | 1 | &lt;a href=&quot;https://bitmax-exchange.github.io/bitmax-pro-api/#bitmax-pro-api-documentation&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.bitmex.com/register/upZpOX&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg&quot; alt=&quot;bitmex&quot;&gt;&lt;/a&gt; | bitmex | &lt;a href=&quot;https://www.bitmex.com/register/upZpOX&quot;&gt;BitMEX&lt;/a&gt; | 1 | &lt;a href=&quot;https://www.bitmex.com/app/apiOverview&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.bitpanda.com/en/pro&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87591171-9a377d80-c6f0-11ea-94ac-97a126eac3bc.jpg&quot; alt=&quot;bitpanda&quot;&gt;&lt;/a&gt; | bitpanda | &lt;a href=&quot;https://www.bitpanda.com/en/pro&quot;&gt;Bitpanda Pro&lt;/a&gt; | 1 | &lt;a href=&quot;https://developers.bitpanda.com/exchange/&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://bitso.com/?ref=itej&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87295554-11f98280-c50e-11ea-80d6-15b3bafa8cbf.jpg&quot; alt=&quot;bitso&quot;&gt;&lt;/a&gt; | bitso | &lt;a href=&quot;https://bitso.com/?ref=itej&quot;&gt;Bitso&lt;/a&gt; | 3 | &lt;a href=&quot;https://bitso.com/api_info&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.bitstamp.net&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg&quot; alt=&quot;bitstamp&quot;&gt;&lt;/a&gt; | bitstamp | &lt;a href=&quot;https://www.bitstamp.net&quot;&gt;Bitstamp&lt;/a&gt; | 2 | &lt;a href=&quot;https://www.bitstamp.net/api&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.bitstamp.net&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg&quot; alt=&quot;bitstamp1&quot;&gt;&lt;/a&gt; | bitstamp1 | &lt;a href=&quot;https://www.bitstamp.net&quot;&gt;Bitstamp&lt;/a&gt; | 1 | &lt;a href=&quot;https://www.bitstamp.net/api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://bittrex.com/Account/Register?referralCode=1ZE-G0G-M3B&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87153921-edf53180-c2c0-11ea-96b9-f2a9a95a455b.jpg&quot; alt=&quot;bittrex&quot;&gt;&lt;/a&gt; | bittrex | &lt;a href=&quot;https://bittrex.com/Account/Register?referralCode=1ZE-G0G-M3B&quot;&gt;Bittrex&lt;/a&gt; | 3 | &lt;a href=&quot;https://bittrex.github.io/api/v3&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://bitvavo.com/?a=24F34952F7&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/83165440-2f1cf200-a116-11ea-9046-a255d09fb2ed.jpg&quot; alt=&quot;bitvavo&quot;&gt;&lt;/a&gt; | bitvavo | &lt;a href=&quot;https://bitvavo.com/?a=24F34952F7&quot;&gt;Bitvavo&lt;/a&gt; | 2 | &lt;a href=&quot;https://docs.bitvavo.com/&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://u.bitz.com/register?invite_code=1429193&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87443304-fec5e000-c5fd-11ea-98f8-ba8e67f7eaff.jpg&quot; alt=&quot;bitz&quot;&gt;&lt;/a&gt; | bitz | &lt;a href=&quot;https://u.bitz.com/register?invite_code=1429193&quot;&gt;Bit-Z&lt;/a&gt; | 2 | &lt;a href=&quot;https://apidoc.bitz.com/en/&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://bl3p.eu&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/28501752-60c21b82-6feb-11e7-818b-055ee6d0e754.jpg&quot; alt=&quot;bl3p&quot;&gt;&lt;/a&gt; | bl3p | &lt;a href=&quot;https://bl3p.eu&quot;&gt;BL3P&lt;/a&gt; | 1 | &lt;a href=&quot;https://github.com/BitonicNL/bl3p-api/tree/master/docs&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://bleutrade.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/30303000-b602dbe6-976d-11e7-956d-36c5049c01e7.jpg&quot; alt=&quot;bleutrade&quot;&gt;&lt;/a&gt; | bleutrade | &lt;a href=&quot;https://bleutrade.com&quot;&gt;Bleutrade&lt;/a&gt; | * | &lt;a href=&quot;https://app.swaggerhub.com/apis-docs/bleu/white-label/3.0.0&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://braziliex.com/?ref=5FE61AB6F6D67DA885BC98BA27223465&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/34703593-c4498674-f504-11e7-8d14-ff8e44fb78c1.jpg&quot; alt=&quot;braziliex&quot;&gt;&lt;/a&gt; | braziliex | &lt;a href=&quot;https://braziliex.com/?ref=5FE61AB6F6D67DA885BC98BA27223465&quot;&gt;Braziliex&lt;/a&gt; | * | &lt;a href=&quot;https://braziliex.com/exchange/api.php&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://btc-alpha.com/?r=123788&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/42625213-dabaa5da-85cf-11e8-8f99-aa8f8f7699f0.jpg&quot; alt=&quot;btcalpha&quot;&gt;&lt;/a&gt; | btcalpha | &lt;a href=&quot;https://btc-alpha.com/?r=123788&quot;&gt;BTC-Alpha&lt;/a&gt; | 1 | &lt;a href=&quot;https://btc-alpha.github.io/api-docs&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.btcbox.co.jp/&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87327317-98c55400-c53c-11ea-9a11-81f7d951cc74.jpg&quot; alt=&quot;btcbox&quot;&gt;&lt;/a&gt; | btcbox | &lt;a href=&quot;https://www.btcbox.co.jp/&quot;&gt;BtcBox&lt;/a&gt; | 1 | &lt;a href=&quot;https://blog.btcbox.jp/en/archives/8762&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://btcmarkets.net&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/89731817-b3fb8480-da52-11ea-817f-783b08aaf32b.jpg&quot; alt=&quot;btcmarkets&quot;&gt;&lt;/a&gt; | btcmarkets | &lt;a href=&quot;https://btcmarkets.net&quot;&gt;BTC Markets&lt;/a&gt; | 3 | &lt;a href=&quot;https://api.btcmarkets.net/doc/v3&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://btc-trade.com.ua/registration/22689&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg&quot; alt=&quot;btctradeua&quot;&gt;&lt;/a&gt; | btctradeua | &lt;a href=&quot;https://btc-trade.com.ua/registration/22689&quot;&gt;BTC Trade UA&lt;/a&gt; | * | &lt;a href=&quot;https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.btcturk.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87153926-efbef500-c2c0-11ea-9842-05b63612c4b9.jpg&quot; alt=&quot;btcturk&quot;&gt;&lt;/a&gt; | btcturk | &lt;a href=&quot;https://www.btcturk.com&quot;&gt;BTCTurk&lt;/a&gt; | * | &lt;a href=&quot;https://github.com/BTCTrader/broker-api-docs&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.buda.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/47380619-8a029200-d706-11e8-91e0-8a391fe48de3.jpg&quot; alt=&quot;buda&quot;&gt;&lt;/a&gt; | buda | &lt;a href=&quot;https://www.buda.com&quot;&gt;Buda&lt;/a&gt; | 2 | &lt;a href=&quot;https://api.buda.com&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.bw.com/regGetCommission/N3JuT1R3bWxKTE0&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/69436317-31128c80-0d52-11ea-91d1-eb7bb5818812.jpg&quot; alt=&quot;bw&quot;&gt;&lt;/a&gt; | bw | &lt;a href=&quot;https://www.bw.com/regGetCommission/N3JuT1R3bWxKTE0&quot;&gt;BW&lt;/a&gt; | 1 | &lt;a href=&quot;https://github.com/bw-exchange/api_docs_en/wiki&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.bybit.com/app/register?ref=X7Prm&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/76547799-daff5b80-649e-11ea-87fb-3be9bac08954.jpg&quot; alt=&quot;bybit&quot;&gt;&lt;/a&gt; | bybit | &lt;a href=&quot;https://www.bybit.com/app/register?ref=X7Prm&quot;&gt;Bybit&lt;/a&gt; | 2 | &lt;a href=&quot;https://bybit-exchange.github.io/docs/inverse/&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.byte-trade.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/67288762-2f04a600-f4e6-11e9-9fd6-c60641919491.jpg&quot; alt=&quot;bytetrade&quot;&gt;&lt;/a&gt; | bytetrade | &lt;a href=&quot;https://www.byte-trade.com&quot;&gt;ByteTrade&lt;/a&gt; | * | &lt;a href=&quot;https://docs.byte-trade.com/#description&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | | | &lt;a href=&quot;https://cex.io/r/0/up105393824/0/&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg&quot; alt=&quot;cex&quot;&gt;&lt;/a&gt; | cex | &lt;a href=&quot;https://cex.io/r/0/up105393824/0/&quot;&gt;CEX.IO&lt;/a&gt; | * | &lt;a href=&quot;https://cex.io/cex-api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://chilebit.net&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27991414-1298f0d8-647f-11e7-9c40-d56409266336.jpg&quot; alt=&quot;chilebit&quot;&gt;&lt;/a&gt; | chilebit | &lt;a href=&quot;https://chilebit.net&quot;&gt;ChileBit&lt;/a&gt; | 1 | &lt;a href=&quot;https://blinktrade.com/docs&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.coinbase.com/join/58cbe25a355148797479dbd2&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/40811661-b6eceae2-653a-11e8-829e-10bfadb078cf.jpg&quot; alt=&quot;coinbase&quot;&gt;&lt;/a&gt; | coinbase | &lt;a href=&quot;https://www.coinbase.com/join/58cbe25a355148797479dbd2&quot;&gt;Coinbase&lt;/a&gt; | 2 | &lt;a href=&quot;https://developers.coinbase.com/api/v2&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://prime.coinbase.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/44539184-29f26e00-a70c-11e8-868f-e907fc236a7c.jpg&quot; alt=&quot;coinbaseprime&quot;&gt;&lt;/a&gt; | coinbaseprime | &lt;a href=&quot;https://prime.coinbase.com&quot;&gt;Coinbase Prime&lt;/a&gt; | * | &lt;a href=&quot;https://docs.prime.coinbase.com&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://pro.coinbase.com/&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/41764625-63b7ffde-760a-11e8-996d-a6328fa9347a.jpg&quot; alt=&quot;coinbasepro&quot;&gt;&lt;/a&gt; | coinbasepro | &lt;a href=&quot;https://pro.coinbase.com/&quot;&gt;Coinbase Pro&lt;/a&gt; | * | &lt;a href=&quot;https://docs.pro.coinbase.com&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://coincheck.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87182088-1d6d6380-c2ec-11ea-9c64-8ab9f9b289f5.jpg&quot; alt=&quot;coincheck&quot;&gt;&lt;/a&gt; | coincheck | &lt;a href=&quot;https://coincheck.com&quot;&gt;coincheck&lt;/a&gt; | * | &lt;a href=&quot;https://coincheck.com/documents/exchange/api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.coinegg.com/user/register?invite=523218&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/36770310-adfa764e-1c5a-11e8-8e09-449daac3d2fb.jpg&quot; alt=&quot;coinegg&quot;&gt;&lt;/a&gt; | coinegg | &lt;a href=&quot;https://www.coinegg.com/user/register?invite=523218&quot;&gt;CoinEgg&lt;/a&gt; | * | &lt;a href=&quot;https://www.coinegg.com/explain.api.html&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.coinex.com/register?refer_code=yw5fz&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87182089-1e05fa00-c2ec-11ea-8da9-cc73b45abbbc.jpg&quot; alt=&quot;coinex&quot;&gt;&lt;/a&gt; | coinex | &lt;a href=&quot;https://www.coinex.com/register?refer_code=yw5fz&quot;&gt;CoinEx&lt;/a&gt; | 1 | &lt;a href=&quot;https://github.com/coinexcom/coinex_exchange_api/wiki&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://coinfalcon.com/?ref=CFJSVGTUPASB&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/41822275-ed982188-77f5-11e8-92bb-496bcd14ca52.jpg&quot; alt=&quot;coinfalcon&quot;&gt;&lt;/a&gt; | coinfalcon | &lt;a href=&quot;https://coinfalcon.com/?ref=CFJSVGTUPASB&quot;&gt;CoinFalcon&lt;/a&gt; | 1 | &lt;a href=&quot;https://docs.coinfalcon.com&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.coinfloor.co.uk&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87153925-ef265e80-c2c0-11ea-91b5-020c804b90e0.jpg&quot; alt=&quot;coinfloor&quot;&gt;&lt;/a&gt; | coinfloor | &lt;a href=&quot;https://www.coinfloor.co.uk&quot;&gt;coinfloor&lt;/a&gt; | * | &lt;a href=&quot;https://github.com/coinfloor/api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.coingi.com/?r=XTPPMC&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg&quot; alt=&quot;coingi&quot;&gt;&lt;/a&gt; | coingi | &lt;a href=&quot;https://www.coingi.com/?r=XTPPMC&quot;&gt;Coingi&lt;/a&gt; | * | &lt;a href=&quot;https://coingi.docs.apiary.io&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://coinmarketcap.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87182086-1cd4cd00-c2ec-11ea-9ec4-d0cf2a2abf62.jpg&quot; alt=&quot;coinmarketcap&quot;&gt;&lt;/a&gt; | coinmarketcap | &lt;a href=&quot;https://coinmarketcap.com&quot;&gt;CoinMarketCap&lt;/a&gt; | 1 | &lt;a href=&quot;https://coinmarketcap.com/api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://coinmate.io?referral=YTFkM1RsOWFObVpmY1ZjMGREQmpTRnBsWjJJNVp3PT0&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87460806-1c9f3f00-c616-11ea-8c46-a77018a8f3f4.jpg&quot; alt=&quot;coinmate&quot;&gt;&lt;/a&gt; | coinmate | &lt;a href=&quot;https://coinmate.io?referral=YTFkM1RsOWFObVpmY1ZjMGREQmpTRnBsWjJJNVp3PT0&quot;&gt;CoinMate&lt;/a&gt; | * | &lt;a href=&quot;https://coinmate.docs.apiary.io&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://coinone.co.kr&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/38003300-adc12fba-323f-11e8-8525-725f53c4a659.jpg&quot; alt=&quot;coinone&quot;&gt;&lt;/a&gt; | coinone | &lt;a href=&quot;https://coinone.co.kr&quot;&gt;CoinOne&lt;/a&gt; | 2 | &lt;a href=&quot;https://doc.coinone.co.kr&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.coinspot.com.au/register?code=PJURCU&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg&quot; alt=&quot;coinspot&quot;&gt;&lt;/a&gt; | coinspot | &lt;a href=&quot;https://www.coinspot.com.au/register?code=PJURCU&quot;&gt;CoinSpot&lt;/a&gt; | * | &lt;a href=&quot;https://www.coinspot.com.au/api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://crex24.com/?refid=slxsjsjtil8xexl9hksr&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/47813922-6f12cc00-dd5d-11e8-97c6-70f957712d47.jpg&quot; alt=&quot;crex24&quot;&gt;&lt;/a&gt; | crex24 | &lt;a href=&quot;https://crex24.com/?refid=slxsjsjtil8xexl9hksr&quot;&gt;CREX24&lt;/a&gt; | 2 | &lt;a href=&quot;https://docs.crex24.com/trade-api/v2&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://currency.com/trading/signup?c=362jaimv&amp;amp;pid=referral&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/83718672-36745c00-a63e-11ea-81a9-677b1f789a4d.jpg&quot; alt=&quot;currencycom&quot;&gt;&lt;/a&gt; | currencycom | &lt;a href=&quot;https://currency.com/trading/signup?c=362jaimv&amp;amp;pid=referral&quot;&gt;Currency.com&lt;/a&gt; | 1 | &lt;a href=&quot;https://currency.com/api&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.deribit.com/reg-1189.4038&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/41933112-9e2dd65a-798b-11e8-8440-5bab2959fcb8.jpg&quot; alt=&quot;deribit&quot;&gt;&lt;/a&gt; | deribit | &lt;a href=&quot;https://www.deribit.com/reg-1189.4038&quot;&gt;Deribit&lt;/a&gt; | 2 | &lt;a href=&quot;https://docs.deribit.com/v2&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.digifinex.com/en-ww/from/DhOzBg?channelCode=ljaUPp&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87443315-01283a00-c5fe-11ea-8628-c2a0feaf07ac.jpg&quot; alt=&quot;digifinex&quot;&gt;&lt;/a&gt; | digifinex | &lt;a href=&quot;https://www.digifinex.com/en-ww/from/DhOzBg?channelCode=ljaUPp&quot;&gt;DigiFinex&lt;/a&gt; | 3 | &lt;a href=&quot;https://docs.digifinex.com&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://dsxglobal.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/76909626-cb2bb100-68bc-11ea-99e0-28ba54f04792.jpg&quot; alt=&quot;dsx&quot;&gt;&lt;/a&gt; | dsx | &lt;a href=&quot;https://dsxglobal.com&quot;&gt;DSX&lt;/a&gt; | 3 | &lt;a href=&quot;https://dsxglobal.com/developers/publicApi&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://eterbase.exchange/invite/1wjjh4Pe&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/82067900-faeb0f80-96d9-11ea-9f22-0071cfcb9871.jpg&quot; alt=&quot;eterbase&quot;&gt;&lt;/a&gt; | eterbase | &lt;a href=&quot;https://eterbase.exchange/invite/1wjjh4Pe&quot;&gt;Eterbase&lt;/a&gt; | 1 | &lt;a href=&quot;https://developers.eterbase.exchange&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | | | &lt;a href=&quot;https://exmo.me/?ref=131685&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766491-1b0ea956-5eda-11e7-9225-40d67b481b8d.jpg&quot; alt=&quot;exmo&quot;&gt;&lt;/a&gt; | exmo | &lt;a href=&quot;https://exmo.me/?ref=131685&quot;&gt;EXMO&lt;/a&gt; | 1.1 | &lt;a href=&quot;https://exmo.me/en/api_doc?ref=131685&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.exx.com/r/fde4260159e53ab8a58cc9186d35501f?recommQd=1&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/37770292-fbf613d0-2de4-11e8-9f79-f2dc451b8ccb.jpg&quot; alt=&quot;exx&quot;&gt;&lt;/a&gt; | exx | &lt;a href=&quot;https://www.exx.com/r/fde4260159e53ab8a58cc9186d35501f?recommQd=1&quot;&gt;EXX&lt;/a&gt; | * | &lt;a href=&quot;https://www.exx.com/help/restApi&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.fcoin.com/i/Z5P7V&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/42244210-c8c42e1e-7f1c-11e8-8710-a5fb63b165c4.jpg&quot; alt=&quot;fcoin&quot;&gt;&lt;/a&gt; | fcoin | &lt;a href=&quot;https://www.fcoin.com/i/Z5P7V&quot;&gt;FCoin&lt;/a&gt; | 2 | &lt;a href=&quot;https://developer.fcoin.com&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.fcoinjp.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/54219174-08b66b00-4500-11e9-862d-f522d0fe08c6.jpg&quot; alt=&quot;fcoinjp&quot;&gt;&lt;/a&gt; | fcoinjp | &lt;a href=&quot;https://www.fcoinjp.com&quot;&gt;FCoinJP&lt;/a&gt; | 2 | &lt;a href=&quot;https://developer.fcoin.com&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.flowbtc.com.br&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87443317-01c0d080-c5fe-11ea-95c2-9ebe1a8fafd9.jpg&quot; alt=&quot;flowbtc&quot;&gt;&lt;/a&gt; | flowbtc | &lt;a href=&quot;https://www.flowbtc.com.br&quot;&gt;flowBTC&lt;/a&gt; | 1 | &lt;a href=&quot;https://www.flowbtc.com.br/api.html&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://foxbit.com.br/exchange&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87443320-01c0d080-c5fe-11ea-92e2-4ef56d32b026.jpg&quot; alt=&quot;foxbit&quot;&gt;&lt;/a&gt; | foxbit | &lt;a href=&quot;https://foxbit.com.br/exchange&quot;&gt;FoxBit&lt;/a&gt; | 1 | &lt;a href=&quot;https://foxbit.com.br/api/&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://ftx.com/#a=1623029&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/67149189-df896480-f2b0-11e9-8816-41593e17f9ec.jpg&quot; alt=&quot;ftx&quot;&gt;&lt;/a&gt; | ftx | &lt;a href=&quot;https://ftx.com/#a=1623029&quot;&gt;FTX&lt;/a&gt; | * | &lt;a href=&quot;https://github.com/ftexchange/ftx&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.gate.io/signup/2436035&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/31784029-0313c702-b509-11e7-9ccc-bc0da6a0e435.jpg&quot; alt=&quot;gateio&quot;&gt;&lt;/a&gt; | gateio | &lt;a href=&quot;https://www.gate.io/signup/2436035&quot;&gt;Gate.io&lt;/a&gt; | 2 | &lt;a href=&quot;https://gate.io/api2&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://gemini.com/&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg&quot; alt=&quot;gemini&quot;&gt;&lt;/a&gt; | gemini | &lt;a href=&quot;https://gemini.com/&quot;&gt;Gemini&lt;/a&gt; | 1 | &lt;a href=&quot;https://docs.gemini.com/rest-api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.hbtc.com/register/O2S8NS&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/80134449-70663300-85a7-11ea-8942-e204cdeaab5d.jpg&quot; alt=&quot;hbtc&quot;&gt;&lt;/a&gt; | hbtc | &lt;a href=&quot;https://www.hbtc.com/register/O2S8NS&quot;&gt;HBTC&lt;/a&gt; | 1 | &lt;a href=&quot;https://github.com/bhexopen/BHEX-OpenApi/tree/master/doc&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://hitbtc.com/?ref_id=5a5d39a65d466&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg&quot; alt=&quot;hitbtc&quot;&gt;&lt;/a&gt; | hitbtc | &lt;a href=&quot;https://hitbtc.com/?ref_id=5a5d39a65d466&quot;&gt;HitBTC&lt;/a&gt; | 2 | &lt;a href=&quot;https://api.hitbtc.com&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://pro.hollaex.com/signup?affiliation_code=QSWA6G&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/75841031-ca375180-5ddd-11ea-8417-b975674c23cb.jpg&quot; alt=&quot;hollaex&quot;&gt;&lt;/a&gt; | hollaex | &lt;a href=&quot;https://pro.hollaex.com/signup?affiliation_code=QSWA6G&quot;&gt;HollaEx&lt;/a&gt; | 1 | &lt;a href=&quot;https://apidocs.hollaex.com&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.huobi.co.jp/register/?invite_code=znnq3&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/85734211-85755480-b705-11ea-8b35-0b7f1db33a2f.jpg&quot; alt=&quot;huobijp&quot;&gt;&lt;/a&gt; | huobijp | &lt;a href=&quot;https://www.huobi.co.jp/register/?invite_code=znnq3&quot;&gt;Huobi Japan&lt;/a&gt; | 1 | &lt;a href=&quot;https://api-doc.huobi.co.jp&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.huobi.com/en-us/topic/invited/?invite_code=rwrd3&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/76137448-22748a80-604e-11ea-8069-6e389271911d.jpg&quot; alt=&quot;huobipro&quot;&gt;&lt;/a&gt; | huobipro | &lt;a href=&quot;https://www.huobi.com/en-us/topic/invited/?invite_code=rwrd3&quot;&gt;Huobi Pro&lt;/a&gt; | 1 | &lt;a href=&quot;https://huobiapi.github.io/docs/spot/v1/cn/&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://ice3x.com?ref=14341802&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87460809-1dd06c00-c616-11ea-98ad-7d5e1cb7fcdd.jpg&quot; alt=&quot;ice3x&quot;&gt;&lt;/a&gt; | ice3x | &lt;a href=&quot;https://ice3x.com?ref=14341802&quot;&gt;ICE3X&lt;/a&gt; | 1 | &lt;a href=&quot;https://ice3x.co.za/ice-cubed-bitcoin-exchange-api-documentation-1-june-2017&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://idex.io&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/94481303-2f222100-01e0-11eb-97dd-bc14c5943a86.jpg&quot; alt=&quot;idex&quot;&gt;&lt;/a&gt; | idex | &lt;a href=&quot;https://idex.io&quot;&gt;IDEX&lt;/a&gt; | 2 | &lt;a href=&quot;https://docs.idex.io/&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.independentreserve.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87182090-1e9e9080-c2ec-11ea-8e49-563db9a38f37.jpg&quot; alt=&quot;independentreserve&quot;&gt;&lt;/a&gt; | independentreserve | &lt;a href=&quot;https://www.independentreserve.com&quot;&gt;Independent Reserve&lt;/a&gt; | * | &lt;a href=&quot;https://www.independentreserve.com/API&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://indodax.com/ref/testbitcoincoid/1&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87070508-9358c880-c221-11ea-8dc5-5391afbbb422.jpg&quot; alt=&quot;indodax&quot;&gt;&lt;/a&gt; | indodax | &lt;a href=&quot;https://indodax.com/ref/testbitcoincoid/1&quot;&gt;INDODAX&lt;/a&gt; | 2.0 | &lt;a href=&quot;https://github.com/btcid/indodax-official-api-docs&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.itbit.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg&quot; alt=&quot;itbit&quot;&gt;&lt;/a&gt; | itbit | &lt;a href=&quot;https://www.itbit.com&quot;&gt;itBit&lt;/a&gt; | 1 | &lt;a href=&quot;https://api.itbit.com/docs&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.kraken.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/76173629-fc67fb00-61b1-11ea-84fe-f2de582f58a3.jpg&quot; alt=&quot;kraken&quot;&gt;&lt;/a&gt; | kraken | &lt;a href=&quot;https://www.kraken.com&quot;&gt;Kraken&lt;/a&gt; | 0 | &lt;a href=&quot;https://www.kraken.com/features/api&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.kucoin.com/?rcode=E5wkqe&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87295558-132aaf80-c50e-11ea-9801-a2fb0c57c799.jpg&quot; alt=&quot;kucoin&quot;&gt;&lt;/a&gt; | kucoin | &lt;a href=&quot;https://www.kucoin.com/?rcode=E5wkqe&quot;&gt;KuCoin&lt;/a&gt; | 2 | &lt;a href=&quot;https://docs.kucoin.com&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://kuna.io?r=kunaid-gvfihe8az7o4&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87153927-f0578b80-c2c0-11ea-84b6-74612568e9e1.jpg&quot; alt=&quot;kuna&quot;&gt;&lt;/a&gt; | kuna | &lt;a href=&quot;https://kuna.io?r=kunaid-gvfihe8az7o4&quot;&gt;Kuna&lt;/a&gt; | 2 | &lt;a href=&quot;https://kuna.io/documents/api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.lakebtc.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/28074120-72b7c38a-6660-11e7-92d9-d9027502281d.jpg&quot; alt=&quot;lakebtc&quot;&gt;&lt;/a&gt; | lakebtc | &lt;a href=&quot;https://www.lakebtc.com&quot;&gt;LakeBTC&lt;/a&gt; | 2 | &lt;a href=&quot;https://www.lakebtc.com/s/api_v2&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://latoken.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/61511972-24c39f00-aa01-11e9-9f7c-471f1d6e5214.jpg&quot; alt=&quot;latoken&quot;&gt;&lt;/a&gt; | latoken | &lt;a href=&quot;https://latoken.com&quot;&gt;Latoken&lt;/a&gt; | 1 | &lt;a href=&quot;https://api.latoken.com&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.lbex.io/invite?icode=7QCY&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/38063602-9605e28a-3302-11e8-81be-64b1e53c4cfb.jpg&quot; alt=&quot;lbank&quot;&gt;&lt;/a&gt; | lbank | &lt;a href=&quot;https://www.lbex.io/invite?icode=7QCY&quot;&gt;LBank&lt;/a&gt; | 1 | &lt;a href=&quot;https://github.com/LBank-exchange/lbank-official-api-docs&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.liquid.com/sign-up/?affiliate=SbzC62lt30976&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/45798859-1a872600-bcb4-11e8-8746-69291ce87b04.jpg&quot; alt=&quot;liquid&quot;&gt;&lt;/a&gt; | liquid | &lt;a href=&quot;https://www.liquid.com/sign-up/?affiliate=SbzC62lt30976&quot;&gt;Liquid&lt;/a&gt; | 2 | &lt;a href=&quot;https://developers.liquid.com&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://livecoin.net/?from=Livecoin-CQ1hfx44&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27980768-f22fc424-638a-11e7-89c9-6010a54ff9be.jpg&quot; alt=&quot;livecoin&quot;&gt;&lt;/a&gt; | livecoin | &lt;a href=&quot;https://livecoin.net/?from=Livecoin-CQ1hfx44&quot;&gt;LiveCoin&lt;/a&gt; | * | &lt;a href=&quot;https://www.livecoin.net/api?lang=en&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.luno.com/invite/44893A&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg&quot; alt=&quot;luno&quot;&gt;&lt;/a&gt; | luno | &lt;a href=&quot;https://www.luno.com/invite/44893A&quot;&gt;luno&lt;/a&gt; | 1 | &lt;a href=&quot;https://www.luno.com/en/api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.lykke.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/34487620-3139a7b0-efe6-11e7-90f5-e520cef74451.jpg&quot; alt=&quot;lykke&quot;&gt;&lt;/a&gt; | lykke | &lt;a href=&quot;https://www.lykke.com&quot;&gt;Lykke&lt;/a&gt; | 1 | &lt;a href=&quot;https://hft-api.lykke.com/swagger/ui/&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.mercadobitcoin.com.br&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg&quot; alt=&quot;mercado&quot;&gt;&lt;/a&gt; | mercado | &lt;a href=&quot;https://www.mercadobitcoin.com.br&quot;&gt;Mercado Bitcoin&lt;/a&gt; | 3 | &lt;a href=&quot;https://www.mercadobitcoin.com.br/api-doc&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://mixcoins.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87460810-1dd06c00-c616-11ea-9276-956f400d6ffa.jpg&quot; alt=&quot;mixcoins&quot;&gt;&lt;/a&gt; | mixcoins | &lt;a href=&quot;https://mixcoins.com&quot;&gt;MixCoins&lt;/a&gt; | 1 | &lt;a href=&quot;https://mixcoins.com/help/api/&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.novadax.com.br/?s=ccxt&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/92337550-2b085500-f0b3-11ea-98e7-5794fb07dd3b.jpg&quot; alt=&quot;novadax&quot;&gt;&lt;/a&gt; | novadax | &lt;a href=&quot;https://www.novadax.com.br/?s=ccxt&quot;&gt;NovaDAX&lt;/a&gt; | 1 | &lt;a href=&quot;https://doc.novadax.com/pt-BR/&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://oceanex.pro/signup?referral=VE24QX&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/58385970-794e2d80-8001-11e9-889c-0567cd79b78e.jpg&quot; alt=&quot;oceanex&quot;&gt;&lt;/a&gt; | oceanex | &lt;a href=&quot;https://oceanex.pro/signup?referral=VE24QX&quot;&gt;OceanEx&lt;/a&gt; | 1 | &lt;a href=&quot;https://api.oceanex.pro/doc/v1&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.okcoin.com/account/register?flag=activity&amp;amp;channelId=600001513&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87295551-102fbf00-c50e-11ea-90a9-462eebba5829.jpg&quot; alt=&quot;okcoin&quot;&gt;&lt;/a&gt; | okcoin | &lt;a href=&quot;https://www.okcoin.com/account/register?flag=activity&amp;amp;channelId=600001513&quot;&gt;OKCoin&lt;/a&gt; | 3 | &lt;a href=&quot;https://www.okcoin.com/docs/en/&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.okex.com/join/1888677&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/32552768-0d6dd3c6-c4a6-11e7-90f8-c043b64756a7.jpg&quot; alt=&quot;okex&quot;&gt;&lt;/a&gt; | okex | &lt;a href=&quot;https://www.okex.com/join/1888677&quot;&gt;OKEX&lt;/a&gt; | 3 | &lt;a href=&quot;https://www.okex.com/docs/en/&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.paymium.com/page/sign-up?referral=eDAzPoRQFMvaAB8sf-qj&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87153930-f0f02200-c2c0-11ea-9c0a-40337375ae89.jpg&quot; alt=&quot;paymium&quot;&gt;&lt;/a&gt; | paymium | &lt;a href=&quot;https://www.paymium.com/page/sign-up?referral=eDAzPoRQFMvaAB8sf-qj&quot;&gt;Paymium&lt;/a&gt; | 1 | &lt;a href=&quot;https://github.com/Paymium/api-documentation&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://phemex.com/register?referralCode=EDNVJ&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/85225056-221eb600-b3d7-11ea-930d-564d2690e3f6.jpg&quot; alt=&quot;phemex&quot;&gt;&lt;/a&gt; | phemex | &lt;a href=&quot;https://phemex.com/register?referralCode=EDNVJ&quot;&gt;Phemex&lt;/a&gt; | 1 | &lt;a href=&quot;https://github.com/phemex/phemex-api-docs&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://poloniex.com/signup?c=UBFZJRPJ&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg&quot; alt=&quot;poloniex&quot;&gt;&lt;/a&gt; | poloniex | &lt;a href=&quot;https://poloniex.com/signup?c=UBFZJRPJ&quot;&gt;Poloniex&lt;/a&gt; | * | &lt;a href=&quot;https://docs.poloniex.com&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.probit.com/r/34608773&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/79268032-c4379480-7ea2-11ea-80b3-dd96bb29fd0d.jpg&quot; alt=&quot;probit&quot;&gt;&lt;/a&gt; | probit | &lt;a href=&quot;https://www.probit.com/r/34608773&quot;&gt;ProBit&lt;/a&gt; | 1 | &lt;a href=&quot;https://docs-en.probit.com&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://qtrade.io/?ref=BKOQWVFGRH2C&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/80491487-74a99c00-896b-11ea-821e-d307e832f13e.jpg&quot; alt=&quot;qtrade&quot;&gt;&lt;/a&gt; | qtrade | &lt;a href=&quot;https://qtrade.io/?ref=BKOQWVFGRH2C&quot;&gt;qTrade&lt;/a&gt; | 1 | &lt;a href=&quot;https://qtrade-exchange.github.io/qtrade-docs&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.rightbtc.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87182092-1f372700-c2ec-11ea-8f9e-01b4d3ff8941.jpg&quot; alt=&quot;rightbtc&quot;&gt;&lt;/a&gt; | rightbtc | &lt;a href=&quot;https://www.rightbtc.com&quot;&gt;RightBTC&lt;/a&gt; | * | &lt;a href=&quot;https://docs.rightbtc.com/api/&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://exchange.ripio.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/94507548-a83d6a80-0218-11eb-9998-28b9cec54165.jpg&quot; alt=&quot;ripio&quot;&gt;&lt;/a&gt; | ripio | &lt;a href=&quot;https://exchange.ripio.com&quot;&gt;Ripio&lt;/a&gt; | 1 | &lt;a href=&quot;https://exchange.ripio.com/en/api/&quot;&gt;API&lt;/a&gt; | | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.southxchange.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27838912-4f94ec8a-60f6-11e7-9e5d-bbf9bd50a559.jpg&quot; alt=&quot;southxchange&quot;&gt;&lt;/a&gt; | southxchange | &lt;a href=&quot;https://www.southxchange.com&quot;&gt;SouthXchange&lt;/a&gt; | * | &lt;a href=&quot;https://www.southxchange.com/Home/Api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://app.stex.com?ref=36416021&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/69680782-03fd0b80-10bd-11ea-909e-7f603500e9cc.jpg&quot; alt=&quot;stex&quot;&gt;&lt;/a&gt; | stex | &lt;a href=&quot;https://app.stex.com?ref=36416021&quot;&gt;STEX&lt;/a&gt; | 3 | &lt;a href=&quot;https://help.stex.com/en/collections/1593608-api-v3-documentation&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://surbitcoin.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27991511-f0a50194-6481-11e7-99b5-8f02932424cc.jpg&quot; alt=&quot;surbitcoin&quot;&gt;&lt;/a&gt; | surbitcoin | &lt;a href=&quot;https://surbitcoin.com&quot;&gt;SurBitcoin&lt;/a&gt; | 1 | &lt;a href=&quot;https://blinktrade.com/docs&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://therocktrading.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766869-75057fa2-5ee9-11e7-9a6f-13e641fa4707.jpg&quot; alt=&quot;therock&quot;&gt;&lt;/a&gt; | therock | &lt;a href=&quot;https://therocktrading.com&quot;&gt;TheRockTrading&lt;/a&gt; | 1 | &lt;a href=&quot;https://api.therocktrading.com/doc/v1/index.html&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;http://bit.ly/2IX0LrM&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87460811-1e690280-c616-11ea-8652-69f187305add.jpg&quot; alt=&quot;tidebit&quot;&gt;&lt;/a&gt; | tidebit | &lt;a href=&quot;http://bit.ly/2IX0LrM&quot;&gt;TideBit&lt;/a&gt; | 2 | &lt;a href=&quot;https://www.tidebit.com/documents/api/guide&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://tidex.com/exchange/?ref=57f5638d9cd7&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/30781780-03149dc4-a12e-11e7-82bb-313b269d24d4.jpg&quot; alt=&quot;tidex&quot;&gt;&lt;/a&gt; | tidex | &lt;a href=&quot;https://tidex.com/exchange/?ref=57f5638d9cd7&quot;&gt;Tidex&lt;/a&gt; | 3 | &lt;a href=&quot;https://tidex.com/exchange/public-api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://timex.io/?refcode=1x27vNkTbP1uwkCck&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/70423869-6839ab00-1a7f-11ea-8f94-13ae72c31115.jpg&quot; alt=&quot;timex&quot;&gt;&lt;/a&gt; | timex | &lt;a href=&quot;https://timex.io/?refcode=1x27vNkTbP1uwkCck&quot;&gt;TimeX&lt;/a&gt; | 1 | &lt;a href=&quot;https://docs.timex.io&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://upbit.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/49245610-eeaabe00-f423-11e8-9cba-4b0aed794799.jpg&quot; alt=&quot;upbit&quot;&gt;&lt;/a&gt; | upbit | &lt;a href=&quot;https://upbit.com&quot;&gt;Upbit&lt;/a&gt; | 1 | &lt;a href=&quot;https://docs.upbit.com/docs/%EC%9A%94%EC%B2%AD-%EC%88%98-%EC%A0%9C%ED%95%9C&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://ccxt.pro&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Pro-black&quot; alt=&quot;CCXT Pro&quot;&gt;&lt;/a&gt; | | &lt;a href=&quot;https://www.vaultoro.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766880-f205e870-5ee9-11e7-8fe2-0d5b15880752.jpg&quot; alt=&quot;vaultoro&quot;&gt;&lt;/a&gt; | vaultoro | &lt;a href=&quot;https://www.vaultoro.com&quot;&gt;Vaultoro&lt;/a&gt; | 1 | &lt;a href=&quot;https://api.vaultoro.com&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://vbtc.exchange&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27991481-1f53d1d8-6481-11e7-884e-21d17e7939db.jpg&quot; alt=&quot;vbtc&quot;&gt;&lt;/a&gt; | vbtc | &lt;a href=&quot;https://vbtc.exchange&quot;&gt;VBTC&lt;/a&gt; | 1 | &lt;a href=&quot;https://blinktrade.com/docs&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://vcc.exchange?ref=l4xhrH&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/100545356-8427f500-326c-11eb-9539-7d338242d61b.jpg&quot; alt=&quot;vcc&quot;&gt;&lt;/a&gt; | vcc | &lt;a href=&quot;https://vcc.exchange?ref=l4xhrH&quot;&gt;VCC Exchange&lt;/a&gt; | 3 | &lt;a href=&quot;https://vcc.exchange/api&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://waves.exchange&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/84547058-5fb27d80-ad0b-11ea-8711-78ac8b3c7f31.jpg&quot; alt=&quot;wavesexchange&quot;&gt;&lt;/a&gt; | wavesexchange | &lt;a href=&quot;https://waves.exchange&quot;&gt;Waves.Exchange&lt;/a&gt; | * | &lt;a href=&quot;https://docs.waves.exchange&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | | | &lt;a href=&quot;https://whitebit.com/referral/d9bdf40e-28f2-4b52-b2f9-cd1415d82963&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/66732963-8eb7dd00-ee66-11e9-849b-10d9282bb9e0.jpg&quot; alt=&quot;whitebit&quot;&gt;&lt;/a&gt; | whitebit | &lt;a href=&quot;https://whitebit.com/referral/d9bdf40e-28f2-4b52-b2f9-cd1415d82963&quot;&gt;WhiteBit&lt;/a&gt; | 2 | &lt;a href=&quot;https://documenter.getpostman.com/view/7473075/Szzj8dgv?version=latest&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://xbtce.com/?agent=XX97BTCXXXG687021000B&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/28059414-e235970c-662c-11e7-8c3a-08e31f78684b.jpg&quot; alt=&quot;xbtce&quot;&gt;&lt;/a&gt; | xbtce | &lt;a href=&quot;https://xbtce.com/?agent=XX97BTCXXXG687021000B&quot;&gt;xBTCe&lt;/a&gt; | 1 | &lt;a href=&quot;https://www.xbtce.com/tradeapi&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://xena.exchange&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/51840849/87489843-bb469280-c64c-11ea-91aa-69c6326506af.jpg&quot; alt=&quot;xena&quot;&gt;&lt;/a&gt; | xena | &lt;a href=&quot;https://xena.exchange&quot;&gt;Xena Exchange&lt;/a&gt; | * | &lt;a href=&quot;https://support.xena.exchange/support/solutions/44000808700&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki/Certification&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/CCXT-Certified-green.svg&quot; alt=&quot;CCXT Certified&quot;&gt;&lt;/a&gt; | | | &lt;a href=&quot;https://www.yobit.net&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg&quot; alt=&quot;yobit&quot;&gt;&lt;/a&gt; | yobit | &lt;a href=&quot;https://www.yobit.net&quot;&gt;YoBit&lt;/a&gt; | 3 | &lt;a href=&quot;https://www.yobit.net/en/api/&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://zaif.jp&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg&quot; alt=&quot;zaif&quot;&gt;&lt;/a&gt; | zaif | &lt;a href=&quot;https://zaif.jp&quot;&gt;Zaif&lt;/a&gt; | 1 | &lt;a href=&quot;https://techbureau-api-document.readthedocs.io/ja/latest/index.html&quot;&gt;API&lt;/a&gt; | | | | &lt;a href=&quot;https://www.zb.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1294454/32859187-cd5214f0-ca5e-11e7-967d-96568e2e2bd1.jpg&quot; alt=&quot;zb&quot;&gt;&lt;/a&gt; | zb | &lt;a href=&quot;https://www.zb.com&quot;&gt;ZB&lt;/a&gt; | 1 | &lt;a href=&quot;https://www.zb.com/i/developer&quot;&gt;API&lt;/a&gt; | | |&lt;/p&gt; 
&lt;p&gt;The list above is updated frequently, new crypto markets, exchanges, bug fixes, and API endpoints are introduced on a regular basis. See the &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki&quot;&gt;Manual&lt;/a&gt; for more details. If you can&#39;t find a cryptocurrency exchange in the list above and want it to be added, post a link to it by opening an issue here on GitHub or send us an email.&lt;/p&gt; 
&lt;p&gt;The library is under &lt;a href=&quot;https://github.com/ccxt/ccxt/blob/master/LICENSE.txt&quot;&gt;MIT license&lt;/a&gt;, that means it&#39;s absolutely free for any developer to build commercial and opensource software on top of it, but use it at your own risk with no warranties, as is.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;The easiest way to install the CCXT library is to use a package manager:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/ccxt&quot;&gt;ccxt in &lt;strong&gt;NPM&lt;/strong&gt;&lt;/a&gt; (JavaScript / Node v7.6+)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/ccxt&quot;&gt;ccxt in &lt;strong&gt;PyPI&lt;/strong&gt;&lt;/a&gt; (Python 3.5.3+)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://packagist.org/packages/ccxt/ccxt&quot;&gt;ccxt in &lt;strong&gt;Packagist/Composer&lt;/strong&gt;&lt;/a&gt; (PHP 5.4+)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This library is shipped as an all-in-one module implementation with minimalistic dependencies and requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ccxt/ccxt/blob/master/js/&quot;&gt;&lt;code&gt;js/&lt;/code&gt;&lt;/a&gt; in JavaScript&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ccxt/ccxt/blob/master/python/&quot;&gt;&lt;code&gt;python/&lt;/code&gt;&lt;/a&gt; in Python (generated from JS)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ccxt/ccxt/blob/master/php/&quot;&gt;&lt;code&gt;php/&lt;/code&gt;&lt;/a&gt; in PHP (generated from JS)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also clone it into your project directory from &lt;a href=&quot;https://github.com/ccxt/ccxt&quot;&gt;ccxt GitHub repository&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git clone https://github.com/ccxt/ccxt.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;JavaScript (NPM)&lt;/h3&gt; 
&lt;p&gt;JavaScript version of CCXT works in both Node and web browsers. Requires ES6 and &lt;code&gt;async/await&lt;/code&gt; syntax support (Node 7.6.0+). When compiling with Webpack and Babel, make sure it is &lt;a href=&quot;https://github.com/ccxt/ccxt/issues/225#issuecomment-331905178&quot;&gt;not excluded&lt;/a&gt; in your &lt;code&gt;babel-loader&lt;/code&gt; config.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/ccxt&quot;&gt;ccxt in &lt;strong&gt;NPM&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install ccxt
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;var ccxt = require (&#39;ccxt&#39;)

console.log (ccxt.exchanges) // print all available exchanges
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;JavaScript (for use with the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag):&lt;/h3&gt; 
&lt;p&gt;All-in-one browser bundle (dependencies included), served from a CDN of your choice:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;jsDelivr: https://cdn.jsdelivr.net/npm/ccxt@1.39.33/dist/ccxt.browser.js&lt;/li&gt; 
 &lt;li&gt;unpkg: https://unpkg.com/ccxt@1.39.33/dist/ccxt.browser.js&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;CDNs are not updated in real-time and may have delays. Defaulting to the most recent version without specifying the version number is not recommended. Please, keep in mind that we are not responsible for the correct operation of those CDN servers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/ccxt@1.39.33/dist/ccxt.browser.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Creates a global &lt;code&gt;ccxt&lt;/code&gt; object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;console.log (ccxt.exchanges) // print all available exchanges
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://pypi.python.org/pypi/ccxt&quot;&gt;ccxt in &lt;strong&gt;PyPI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;pip install ccxt
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;import ccxt
print(ccxt.exchanges) # print a list of all available exchange classes
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The library supports concurrent asynchronous mode with asyncio and async/await in Python 3.5.3+&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;import ccxt.async_support as ccxt # link against the asynchronous version of ccxt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;PHP&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://packagist.org/packages/ccxt/ccxt&quot;&gt;ccxt in PHP with &lt;strong&gt;Packagist/Composer&lt;/strong&gt;&lt;/a&gt; (PHP 5.4+)&lt;/p&gt; 
&lt;p&gt;It requires common PHP modules:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;cURL&lt;/li&gt; 
 &lt;li&gt;mbstring (using UTF-8 is highly recommended)&lt;/li&gt; 
 &lt;li&gt;PCRE&lt;/li&gt; 
 &lt;li&gt;iconv&lt;/li&gt; 
 &lt;li&gt;gmp (this is a built-in extension as of PHP 7.2+)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-PHP&quot;&gt;include &quot;ccxt.php&quot;;
var_dump (\ccxt\Exchange::$exchanges); // print a list of all available exchange classes
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Docker&lt;/h3&gt; 
&lt;p&gt;You can get CCXT installed in a container along with all the supported languages and dependencies. This may be useful if you want to contribute to CCXT (e.g. run the build scripts and tests ‚Äî please see the &lt;a href=&quot;https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt; document for the details on that).&lt;/p&gt; 
&lt;p&gt;Using &lt;code&gt;docker-compose&lt;/code&gt; (in the cloned CCXT repository):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;docker-compose run --rm ccxt
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You don&#39;t need the Docker image if you&#39;re not going to develop CCXT. If you just want to use CCXT ‚Äì&amp;nbsp;just install it as a regular package into your project.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki&quot;&gt;Manual&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Intro&lt;/h3&gt; 
&lt;p&gt;The CCXT library consists of a public part and a private part. Anyone can use the public part immediately after installation. Public APIs provide unrestricted access to public information for all exchange markets without the need to register a user account or have an API key.&lt;/p&gt; 
&lt;p&gt;Public APIs include the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;market data&lt;/li&gt; 
 &lt;li&gt;instruments/trading pairs&lt;/li&gt; 
 &lt;li&gt;price feeds (exchange rates)&lt;/li&gt; 
 &lt;li&gt;order books&lt;/li&gt; 
 &lt;li&gt;trade history&lt;/li&gt; 
 &lt;li&gt;tickers&lt;/li&gt; 
 &lt;li&gt;OHLC(V) for charting&lt;/li&gt; 
 &lt;li&gt;other public endpoints&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In order to trade with private APIs you need to obtain API keys from an exchange&#39;s website. It usually means signing up to the exchange and creating API keys for your account. Some exchanges require personal info or identification. Sometimes verification may be necessary as well. In this case you will need to register yourself, this library will not create accounts or API keys for you. Some exchanges expose API endpoints for registering an account, but most exchanges don&#39;t. You will have to sign up and create API keys on their websites.&lt;/p&gt; 
&lt;p&gt;Private APIs allow the following:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;manage personal account info&lt;/li&gt; 
 &lt;li&gt;query account balances&lt;/li&gt; 
 &lt;li&gt;trade by making market and limit orders&lt;/li&gt; 
 &lt;li&gt;deposit and withdraw fiat and crypto funds&lt;/li&gt; 
 &lt;li&gt;query personal orders&lt;/li&gt; 
 &lt;li&gt;get ledger history&lt;/li&gt; 
 &lt;li&gt;transfer funds between accounts&lt;/li&gt; 
 &lt;li&gt;use merchant services&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This library implements full public and private REST APIs for all exchanges. WebSocket and FIX implementations in JavaScript, PHP, Python are available in &lt;a href=&quot;https://ccxt.pro&quot;&gt;CCXT Pro&lt;/a&gt;, which is a professional addon to CCXT with support for WebSocket streams.&lt;/p&gt; 
&lt;p&gt;The CCXT library supports both camelcase notation (preferred in JavaScript) and underscore notation (preferred in Python and PHP), therefore all methods can be called in either notation or coding style in any language.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;// both of these notations work in JavaScript/Python/PHP
exchange.methodName ()  // camelcase pseudocode
exchange.method_name () // underscore pseudocode
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki&quot;&gt;Manual&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;JavaScript&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;&#39;use strict&#39;;
const ccxt = require (&#39;ccxt&#39;);

(async function () {
    let kraken    = new ccxt.kraken ()
    let bitfinex  = new ccxt.bitfinex ({ verbose: true })
    let huobipro  = new ccxt.huobipro ()
    let okcoinusd = new ccxt.okcoinusd ({
        apiKey: &#39;YOUR_PUBLIC_API_KEY&#39;,
        secret: &#39;YOUR_SECRET_PRIVATE_KEY&#39;,
    })

    const exchangeId = &#39;binance&#39;
        , exchangeClass = ccxt[exchangeId]
        , exchange = new exchangeClass ({
            &#39;apiKey&#39;: &#39;YOUR_API_KEY&#39;,
            &#39;secret&#39;: &#39;YOUR_SECRET&#39;,
            &#39;timeout&#39;: 30000,
            &#39;enableRateLimit&#39;: true,
        })

    console.log (kraken.id,    await kraken.loadMarkets ())
    console.log (bitfinex.id,  await bitfinex.loadMarkets  ())
    console.log (huobipro.id,  await huobipro.loadMarkets ())

    console.log (kraken.id,    await kraken.fetchOrderBook (kraken.symbols[0]))
    console.log (bitfinex.id,  await bitfinex.fetchTicker (&#39;BTC/USD&#39;))
    console.log (huobipro.id,  await huobipro.fetchTrades (&#39;ETH/USDT&#39;))

    console.log (okcoinusd.id, await okcoinusd.fetchBalance ())

    // sell 1 BTC/USD for market price, sell a bitcoin for dollars immediately
    console.log (okcoinusd.id, await okcoinusd.createMarketSellOrder (&#39;BTC/USD&#39;, 1))

    // buy 1 BTC/USD for $2500, you pay $2500 and receive ‡∏ø1 when the order is closed
    console.log (okcoinusd.id, await okcoinusd.createLimitBuyOrder (&#39;BTC/USD&#39;, 1, 2500.00))

    // pass/redefine custom exchange-specific order params: type, amount, price or whatever
    // use a custom order type
    bitfinex.createLimitSellOrder (&#39;BTC/USD&#39;, 1, 10, { &#39;type&#39;: &#39;trailing-stop&#39; })

}) ();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;# coding=utf-8

import ccxt

hitbtc   = ccxt.hitbtc({&#39;verbose&#39;: True})
bitmex   = ccxt.bitmex()
huobipro = ccxt.huobipro()
exmo     = ccxt.exmo({
    &#39;apiKey&#39;: &#39;YOUR_PUBLIC_API_KEY&#39;,
    &#39;secret&#39;: &#39;YOUR_SECRET_PRIVATE_KEY&#39;,
})
kraken = ccxt.kraken({
    &#39;apiKey&#39;: &#39;YOUR_PUBLIC_API_KEY&#39;,
    &#39;secret&#39;: &#39;YOUR_SECRET_PRIVATE_KEY&#39;,
})

exchange_id = &#39;binance&#39;
exchange_class = getattr(ccxt, exchange_id)
exchange = exchange_class({
    &#39;apiKey&#39;: &#39;YOUR_API_KEY&#39;,
    &#39;secret&#39;: &#39;YOUR_SECRET&#39;,
    &#39;timeout&#39;: 30000,
    &#39;enableRateLimit&#39;: True,
})

hitbtc_markets = hitbtc.load_markets()

print(hitbtc.id, hitbtc_markets)
print(bitmex.id, bitmex.load_markets())
print(huobipro.id, huobipro.load_markets())

print(hitbtc.fetch_order_book(hitbtc.symbols[0]))
print(bitmex.fetch_ticker(&#39;BTC/USD&#39;))
print(huobipro.fetch_trades(&#39;LTC/USDT&#39;))

print(exmo.fetch_balance())

# sell one ‡∏ø for market price and receive $ right now
print(exmo.id, exmo.create_market_sell_order(&#39;BTC/USD&#39;, 1))

# limit buy BTC/EUR, you pay ‚Ç¨2500 and receive ‡∏ø1  when the order is closed
print(exmo.id, exmo.create_limit_buy_order(&#39;BTC/EUR&#39;, 1, 2500.00))

# pass/redefine custom exchange-specific order params: type, amount, price, flags, etc...
kraken.create_market_buy_order(&#39;BTC/USD&#39;, 1, {&#39;trading_agreement&#39;: &#39;agree&#39;})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;PHP&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-PHP&quot;&gt;include &#39;ccxt.php&#39;;

$poloniex = new \ccxt\poloniex ();
$bittrex  = new \ccxt\bittrex  (array (&#39;verbose&#39; =&amp;gt; true));
$quoinex  = new \ccxt\quoinex   ();
$zaif     = new \ccxt\zaif     (array (
    &#39;apiKey&#39; =&amp;gt; &#39;YOUR_PUBLIC_API_KEY&#39;,
    &#39;secret&#39; =&amp;gt; &#39;YOUR_SECRET_PRIVATE_KEY&#39;,
));
$hitbtc   = new \ccxt\hitbtc   (array (
    &#39;apiKey&#39; =&amp;gt; &#39;YOUR_PUBLIC_API_KEY&#39;,
    &#39;secret&#39; =&amp;gt; &#39;YOUR_SECRET_PRIVATE_KEY&#39;,
));

$exchange_id = &#39;binance&#39;;
$exchange_class = &quot;\\ccxt\\$exchange_id&quot;;
$exchange = new $exchange_class (array (
    &#39;apiKey&#39; =&amp;gt; &#39;YOUR_API_KEY&#39;,
    &#39;secret&#39; =&amp;gt; &#39;YOUR_SECRET&#39;,
    &#39;timeout&#39; =&amp;gt; 30000,
    &#39;enableRateLimit&#39; =&amp;gt; true,
));

$poloniex_markets = $poloniex-&amp;gt;load_markets ();

var_dump ($poloniex_markets);
var_dump ($bittrex-&amp;gt;load_markets ());
var_dump ($quoinex-&amp;gt;load_markets ());

var_dump ($poloniex-&amp;gt;fetch_order_book ($poloniex-&amp;gt;symbols[0]));
var_dump ($bittrex-&amp;gt;fetch_trades (&#39;BTC/USD&#39;));
var_dump ($quoinex-&amp;gt;fetch_ticker (&#39;ETH/EUR&#39;));
var_dump ($zaif-&amp;gt;fetch_ticker (&#39;BTC/JPY&#39;));

var_dump ($zaif-&amp;gt;fetch_balance ());

// sell 1 BTC/JPY for market price, you pay ¬• and receive ‡∏ø immediately
var_dump ($zaif-&amp;gt;id, $zaif-&amp;gt;create_market_sell_order (&#39;BTC/JPY&#39;, 1));

// buy BTC/JPY, you receive ‡∏ø1 for ¬•285000 when the order closes
var_dump ($zaif-&amp;gt;id, $zaif-&amp;gt;create_limit_buy_order (&#39;BTC/JPY&#39;, 1, 285000));

// set a custom user-defined id to your order
$hitbtc-&amp;gt;create_order (&#39;BTC/USD&#39;, &#39;limit&#39;, &#39;buy&#39;, 1, 3000, array (&#39;clientOrderId&#39; =&amp;gt; &#39;123&#39;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read the &lt;a href=&quot;https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; document before making changes that you would like adopted in the code. Also, read the &lt;a href=&quot;https://github.com/ccxt/ccxt/wiki&quot;&gt;Manual&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Support Developer Team&lt;/h2&gt; 
&lt;p&gt;We are investing a significant amount of time into the development of this library. If CCXT made your life easier and you want to help us improve it further, or if you want to speed up development of new features and exchanges, please support us with a tip. We appreciate all contributions!&lt;/p&gt; 
&lt;h3&gt;Sponsors&lt;/h3&gt; 
&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website.&lt;/p&gt; 
&lt;p&gt;[&lt;a href=&quot;https://opencollective.com/ccxt#sponsor&quot;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h3&gt;Supporters&lt;/h3&gt; 
&lt;p&gt;Support this project by becoming a supporter. Your avatar will show up here with a link to your website.&lt;/p&gt; 
&lt;p&gt;[&lt;a href=&quot;https://opencollective.com/ccxt#supporter&quot;&gt;Become a supporter&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h3&gt;Backers&lt;/h3&gt; 
&lt;p&gt;Thank you to all our backers! [&lt;a href=&quot;https://opencollective.com/ccxt#backer&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h3&gt;Crypto&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;ETH 0x26a3CB49578F07000575405a57888681249c35Fd (ETH only)
BTC 33RmVRfhK2WZVQR1R83h2e9yXoqRNDvJva
BCH 1GN9p233TvNcNQFthCgfiHUnj5JRKEc2Ze
LTC LgM5hkvPzytEFfQGGDFGKYkE743jwUA7qv
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Thank you!&lt;/p&gt; 
&lt;h2&gt;Social&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/ccxt_official&quot;&gt;Follow us on Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/@ccxt&quot;&gt;Read our blog on Medium&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;
  &lt;!-- raw HTML omitted --&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://discord.gg/dhzSKYU&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/690203284119617602?logo=discord&amp;amp;logoColor=white&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;
  &lt;!-- raw HTML omitted --&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact Us&lt;/h2&gt; 
&lt;p&gt;For business inquiries: info@ccxt.trade&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>adiwajshing/Baileys</title>
      <link>https://github.com/adiwajshing/Baileys</link>
      <description>&lt;p&gt;Lightweight full-featured typescript/javascript WhatsApp Web API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Baileys - Typescript/Javascript WhatsApp Web API&lt;/h1&gt; 
&lt;p&gt;Baileys does not require Selenium or any other browser to be interface with WhatsApp Web, it does so directly using a &lt;strong&gt;WebSocket&lt;/strong&gt;. Not running Selenium or Chromimum saves you like &lt;strong&gt;half a gig&lt;/strong&gt; of ram :/&lt;/p&gt; 
&lt;p&gt;Thank you to &lt;a href=&quot;https://github.com/sigalor/whatsapp-web-reveng&quot;&gt;@Sigalor&lt;/a&gt; for writing his observations on the workings of WhatsApp Web and thanks to &lt;a href=&quot;https://github.com/Rhymen/go-whatsapp/&quot;&gt;@Rhymen&lt;/a&gt; for the &lt;strong&gt;go&lt;/strong&gt; implementation.&lt;/p&gt; 
&lt;p&gt;Baileys is type-safe, extensible and simple to use. If you require more functionality than provided, it&#39;ll super easy for you to write an extension. More on this &lt;a href=&quot;https://raw.githubusercontent.com/adiwajshing/Baileys/master/#WritingCustomFunctionality&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you&#39;re interested in building a WhatsApp bot, you may wanna check out &lt;a href=&quot;https://github.com/adiwajshing/WhatsappInfoBot&quot;&gt;WhatsAppInfoBot&lt;/a&gt; and an actual bot built with it, &lt;a href=&quot;https://github.com/adiwajshing/Messcat&quot;&gt;Messcat&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Read the docs &lt;a href=&quot;https://adiwajshing.github.io/Baileys&quot;&gt;here&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;Join the Discord &lt;a href=&quot;https://discord.gg/7FYURJyqng&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;p&gt;Do check out &amp;amp; run &lt;a href=&quot;https://raw.githubusercontent.com/adiwajshing/Baileys/master/Example/example.ts&quot;&gt;example.ts&lt;/a&gt; to see example usage of the library. The script covers most common use cases. To run the example script, download or clone the repo and then type the following in terminal:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;cd path/to/Baileys&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npm run example&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;Create and cd to your NPM project directory and then in terminal, write:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;stable: &lt;code&gt;npm install @adiwajshing/baileys&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;stabl-ish w quicker fixes &amp;amp; latest features: &lt;code&gt;npm install github:adiwajshing/baileys&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Do note, the library will likely vary if you&#39;re using the NPM package, read that &lt;a href=&quot;https://www.npmjs.com/package/@adiwajshing/baileys&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Then import in your code using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { WAConnection } from &#39;@adiwajshing/baileys&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Unit Tests&lt;/h2&gt; 
&lt;p&gt;Baileys also comes with a unit test suite. Simply cd into the Baileys directory &amp;amp; run &lt;code&gt;npm test&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You will require a phone with WhatsApp to test, and a second WhatsApp number to send messages to. Set the phone number you can randomly send messages to in a &lt;code&gt;.env&lt;/code&gt; file with &lt;code&gt;TEST_JID=1234@s.whatsapp.net&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Connecting&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { WAConnection } from &#39;@adiwajshing/baileys&#39;

async function connectToWhatsApp () {
    const conn = new WAConnection() 
    // called when WA sends chats
    // this can take up to a few minutes if you have thousands of chats!
    conn.on(&#39;chats-received&#39;, async ({ hasNewChats }) =&amp;gt; {
        console.log(`you have ${conn.chats.length} chats, new chats available: ${hasNewChats}`)

        const unread = await conn.loadAllUnreadMessages ()
        console.log (&quot;you have &quot; + unread.length + &quot; unread messages&quot;)
    })
    // called when WA sends chats
    // this can take up to a few minutes if you have thousands of contacts!
    conn.on(&#39;contacts-received&#39;, () =&amp;gt; {
        console.log(&#39;you have &#39; + Object.keys(conn.contacts).length + &#39; contacts&#39;)
    })

    await conn.connect ()
    conn.on(&#39;chat-update&#39;, chatUpdate =&amp;gt; {
        // `chatUpdate` is a partial object, containing the updated properties of the chat
        // received a new message
        if (chatUpdate.messages &amp;amp;&amp;amp; chatUpdate.count) {
            const message = chatUpdate.messages.all()[0]
            console.log (message)
        } else console.log (chatUpdate) // see updates (can be archived, pinned etc.)
    })
}
// run in main file
connectToWhatsApp ()
.catch (err =&amp;gt; console.log(&quot;unexpected error: &quot; + err) ) // catch any errors
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the connection is successful, you will see a QR code printed on your terminal screen, scan it with WhatsApp on your phone and you&#39;ll be logged in!&lt;/p&gt; 
&lt;p&gt;Do note, the &lt;code&gt;conn.chats&lt;/code&gt; object is a &lt;a href=&quot;https://github.com/adiwajshing/keyed-db&quot;&gt;KeyedDB&lt;/a&gt;. This is done for the following reasons:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Most applications require chats to be ordered in descending order of time. (&lt;code&gt;KeyedDB&lt;/code&gt; does this in &lt;code&gt;log(N)&lt;/code&gt; time)&lt;/li&gt; 
 &lt;li&gt;Most applications require pagination of chats (Use &lt;code&gt;chats.paginated()&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Most applications require &lt;strong&gt;O(1)&lt;/strong&gt; access to chats via the chat ID. (Use &lt;code&gt;chats.get(jid)&lt;/code&gt; with &lt;code&gt;KeyedDB&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Configuring the Connection&lt;/h2&gt; 
&lt;p&gt;You can configure the connection via the &lt;code&gt;connectOptions&lt;/code&gt; property. You can even specify an HTTPS proxy. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { WAConnection, ProxyAgent } from &#39;@adiwajshing/baileys&#39;

const conn = new WAConnecion ()
conn.connectOptions.agent = ProxyAgent (&#39;http://some-host:1234&#39;)

await conn.connect ()
console.log (&quot;oh hello &quot; + conn.user.name + &quot;! You connected via a proxy&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The entire &lt;code&gt;WAConnectOptions&lt;/code&gt; struct is mentioned here with default values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;conn.connectOptions = {
    /** fails the connection if no data is received for X seconds */
    maxIdleTimeMs?: 15_000,
    /** maximum attempts to connect */
    maxRetries?: 5,
    /** max time for the phone to respond to a connectivity test */
    phoneResponseTime?: 10_000,
    /** minimum time between new connections */
    connectCooldownMs?: 3000,
    /** agent used for WS connections (could be a proxy agent) */
    agent?: Agent = undefined,
    /** agent used for fetch requests -- uploading/downloading media */
    fetchAgent?: Agent = undefined,
    /** always uses takeover for connecting */
    alwaysUseTakeover: true
} as WAConnectOptions
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Saving &amp;amp; Restoring Sessions&lt;/h2&gt; 
&lt;p&gt;You obviously don&#39;t want to keep scanning the QR code every time you want to connect.&lt;/p&gt; 
&lt;p&gt;So, you can save the credentials to log back in via:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import * as fs from &#39;fs&#39;

const conn = new WAConnection() 
// this will be called as soon as the credentials are updated
conn.on (&#39;credentials-updated&#39;, () =&amp;gt; {
    // save credentials whenever updated
    console.log (`credentials updated!`)
    const authInfo = conn.base64EncodedAuthInfo() // get all the auth info we need to restore this session
    fs.writeFileSync(&#39;./auth_info.json&#39;, JSON.stringify(authInfo, null, &#39;\t&#39;)) // save this info to a file
})
await conn.connect() // connect
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, to restore a session:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const conn = new WAConnection() 
conn.loadAuthInfo (&#39;./auth_info.json&#39;) // will load JSON credentials from file
await conn.connect() 
// yay connected without scanning QR
/*
    Optionally, you can load the credentials yourself from somewhere 
    &amp;amp; pass in the JSON object to loadAuthInfo () as well.
*/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you&#39;re considering switching from a Chromium/Puppeteer based library, you can use WhatsApp Web&#39;s Browser credentials to restore sessions too:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;conn.loadAuthInfo (&#39;./auth_info_browser.json&#39;)
await conn.connect() // works the same
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See the browser credentials type in the docs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Upon every successive connection, WA can update part of the stored credentials. Whenever that happens, the &lt;code&gt;credentials-updated&lt;/code&gt; event is triggered, and you should probably update your saved credentials upon receiving that event. Not doing so &lt;em&gt;may&lt;/em&gt; lead WA to log you out after a few weeks with a 419 error code.&lt;/p&gt; 
&lt;h2&gt;QR Callback&lt;/h2&gt; 
&lt;p&gt;If you want to do some custom processing with the QR code used to authenticate, you can register for the following event:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;conn.on(&#39;qr&#39;, qr =&amp;gt; {
    // Now, use the &#39;qr&#39; string to display in QR UI or send somewhere
}
await conn.connect ()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The QR will auto-regenerate and will fire a new &lt;code&gt;qr&lt;/code&gt; event after 30 seconds, if you don&#39;t want to regenerate or want to change the re-gen interval:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;conn.regenerateQRIntervalMs = null // no QR regen
conn.regenerateQRIntervalMs = 20000 // QR regen every 20 seconds
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Handling Events&lt;/h2&gt; 
&lt;p&gt;Baileys now uses the EventEmitter syntax for events. They&#39;re all nicely typed up, so you shouldn&#39;t have any issues with an Intellisense editor like VS Code.&lt;/p&gt; 
&lt;p&gt;Also, these events are fired regardless of whether they are initiated by the Baileys client or are relayed from your phone.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;/** when the connection has opened successfully */
on (event: &#39;open&#39;, listener: (result: WAOpenResult) =&amp;gt; void): this
/** when the connection is opening */
on (event: &#39;connecting&#39;, listener: () =&amp;gt; void): this
/** when the connection has been validated */
on (event: &#39;connection-validated&#39;, listener: (user: WAUser) =&amp;gt; void): this
/** when the connection has closed */
on (event: &#39;close&#39;, listener: (err: {reason?: DisconnectReason | string, isReconnecting: boolean}) =&amp;gt; void): this
/** when the socket is closed */
on (event: &#39;ws-close&#39;, listener: (err: {reason?: DisconnectReason | string}) =&amp;gt; void): this
/** when WA updates the credentials */
on (event: &#39;credentials-updated&#39;, listener: (auth: AuthenticationCredentials) =&amp;gt; void): this
/** when a new QR is generated, ready for scanning */
on (event: &#39;qr&#39;, listener: (qr: string) =&amp;gt; void): this
/** when the connection to the phone changes */
on (event: &#39;connection-phone-change&#39;, listener: (state: {connected: boolean}) =&amp;gt; void): this
/** when a user&#39;s status is updated */
on (event: &#39;user-status-update&#39;, listener: (update: {jid: string, status?: string}) =&amp;gt; void): this
/** when a new chat is added */
on (event: &#39;chat-new&#39;, listener: (chat: WAChat) =&amp;gt; void): this
/** when contacts are sent by WA */
on (event: &#39;contacts-received&#39;, listener: () =&amp;gt; void): this
/** when chats are sent by WA, and when all messages are received from WhatsApp */
on (event: &#39;chats-received&#39;, listener: (update: {hasNewChats?: boolean, hasReceivedLastMessage?: boolean}) =&amp;gt; void): this
/** when multiple chats are updated (new message, updated message, deleted, pinned, etc) */
on (event: &#39;chats-update&#39;, listener: (chats: WAChatUpdate[]) =&amp;gt; void): this
/** when a chat is updated (new message, updated message, deleted, pinned, presence updated etc) */
on (event: &#39;chat-update&#39;, listener: (chat: Partial&amp;lt;WAChat&amp;gt; &amp;amp; { hasNewMessage: boolean }) =&amp;gt; void): this
/** when a message&#39;s status is updated (deleted, delivered, read, sent etc.) */
on (event: &#39;message-status-update&#39;, listener: (message: WAMessageStatusUpdate) =&amp;gt; void): this
/** when participants are added to a group */
on (event: &#39;group-participants-update&#39;, listener: (update: {jid: string, participants: string[], actor?: string, action: WAParticipantAction}) =&amp;gt; void): this
/** when the group is updated */
on (event: &#39;group-update&#39;, listener: (update: Partial&amp;lt;WAGroupMetadata&amp;gt; &amp;amp; {jid: string, actor?: string}) =&amp;gt; void): this
/** when WA sends back a pong */
on (event: &#39;received-pong&#39;, listener: () =&amp;gt; void): this
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sending Messages&lt;/h2&gt; 
&lt;p&gt;Send like, all types of messages with a single function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { MessageType, MessageOptions, Mimetype } from &#39;@adiwajshing/baileys&#39;

const id = &#39;abcd@s.whatsapp.net&#39; // the WhatsApp ID 
// send a simple text!
conn.sendMessage (id, &#39;oh hello there&#39;, MessageType.text)
// send a location!
conn.sendMessage(id, {degreesLatitude: 24.121231, degreesLongitude: 55.1121221}, MessageType.location)
// send a contact!
const vcard = &#39;BEGIN:VCARD\n&#39; // metadata of the contact card
            + &#39;VERSION:3.0\n&#39; 
            + &#39;FN:Jeff Singh\n&#39; // full name
            + &#39;ORG:Ashoka Uni;\n&#39; // the organization of the contact
            + &#39;TEL;type=CELL;type=VOICE;waid=911234567890:+91 12345 67890\n&#39; // WhatsApp ID + phone number
            + &#39;END:VCARD&#39;
conn.sendMessage(id, {displayname: &quot;Jeff&quot;, vcard: vcard}, MessageType.contact)
// send a gif
const buffer = fs.readFileSync(&quot;Media/ma_gif.mp4&quot;) // load some gif
const options: MessageOptions = {mimetype: Mimetype.gif, caption: &quot;hello!&quot;} // some metadata &amp;amp; caption
conn.sendMessage(id, buffer, MessageType.video, options)
// send an audio file
const buffer = fs.readFileSync(&quot;Media/audio.mp3&quot;) // can send mp3, mp4, &amp;amp; ogg
const options: MessageOptions = {mimetype: Mimetype.mp4Audio} // some metadata (can&#39;t have caption in audio)
conn.sendMessage(id, buffer, MessageType.audio, options)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To note:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;id&lt;/code&gt; is the WhatsApp ID of the person or group you&#39;re sending the message to. 
  &lt;ul&gt; 
   &lt;li&gt;It must be in the format &lt;code&gt;[country code][phone number]@s.whatsapp.net&lt;/code&gt;, for example &lt;code&gt;+19999999999@s.whatsapp.net&lt;/code&gt; for people. For groups, it must be in the format &lt;code&gt;123456789-123345@g.us&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;For broadcast lists it&#39;s &lt;code&gt;[timestamp of creation]@broadcast&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;For stories, the ID is &lt;code&gt;status@broadcast&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;For media messages, the thumbnail can be generated automatically for images &amp;amp; stickers. Thumbnails for videos can also be generated automatically, though, you need to have &lt;code&gt;ffmpeg&lt;/code&gt; installed on your system.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MessageOptions&lt;/strong&gt;: some extra info about the message. It can have the following &lt;strong&gt;optional&lt;/strong&gt; values: &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const info: MessageOptions = {
    quoted: quotedMessage, // the message you want to quote
    contextInfo: { forwardingScore: 2, isForwarded: true }, // some random context info (can show a forwarded message with this too)
    timestamp: Date(), // optional, if you want to manually set the timestamp of the message
    caption: &quot;hello there!&quot;, // (for media messages) the caption to send with the media (cannot be sent with stickers though)
    thumbnail: &quot;23GD#4/==&quot;, /*  (for location &amp;amp; media messages) has to be a base 64 encoded JPEG if you want to send a custom thumb, 
                                or set to null if you don&#39;t want to send a thumbnail.
                                Do not enter this field if you want to automatically generate a thumb
                            */
    mimetype: Mimetype.pdf, /* (for media messages) specify the type of media (optional for all media types except documents),
                                import {Mimetype} from &#39;@adiwajshing/baileys&#39;
                            */
    filename: &#39;somefile.pdf&#39;, // (for media messages) file name for the media
    /* will send audio messages as voice notes, if set to true */
    ptt: true,
    // will detect links &amp;amp; generate a link preview automatically (default true)
    detectLinks: true,
    /** Should it send as a disappearing messages. 
     * By default &#39;chat&#39; -- which follows the setting of the chat */
    sendEphemeral: &#39;chat&#39;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Forwarding Messages&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const messages = await conn.loadConversation (&#39;1234@s.whatsapp.net&#39;, 1)
const message = messages[0] // get the last message from this conversation
await conn.forwardMessage (&#39;455@s.whatsapp.net&#39;, message) // WA forward the message!
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Reading Messages&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const id = &#39;1234-123@g.us&#39;
const messageID = &#39;AHASHH123123AHGA&#39; // id of the message you want to read

await conn.chatRead (id) // mark all messages in chat as read (equivalent of opening a chat in WA)
await conn.chatRead (id, &#39;unread&#39;) // mark the chat as unread
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The message ID is the unique identifier of the message that you are marking as read. On a &lt;code&gt;WAMessage&lt;/code&gt;, the &lt;code&gt;messageID&lt;/code&gt; can be accessed using &lt;code&gt;messageID = message.key.id&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Update Presence&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { Presence } from &#39;@adiwajshing/baileys&#39;
await conn.updatePresence(id, Presence.available) 

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This lets the person/group with &lt;code&gt;id&lt;/code&gt; know whether you&#39;re online, offline, typing etc. where &lt;code&gt;presence&lt;/code&gt; can be one of the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;export enum Presence {
    available = &#39;available&#39;, // &quot;online&quot;
    composing = &#39;composing&#39;, // &quot;typing...&quot;
    recording = &#39;recording&#39;, // &quot;recording...&quot;
    paused = &#39;paused&#39; // stopped typing, back to &quot;online&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The presence expires after about 10 seconds.&lt;/p&gt; 
&lt;h2&gt;Downloading Media Messages&lt;/h2&gt; 
&lt;p&gt;If you want to save the media you received&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { MessageType } from &#39;@adiwajshing/baileys&#39;
conn.on (&#39;message-new&#39;, async m =&amp;gt; {
    if (!m.message) return // if there is no text or media message
    const messageType = Object.keys (m.message)[0]// get what type of message it is -- text, image, video
    // if the message is not a text message
    if (messageType !== MessageType.text &amp;amp;&amp;amp; messageType !== MessageType.extendedText) {
        const buffer = await conn.downloadMediaMessage(m) // to decrypt &amp;amp; use as a buffer
        
        const savedFilename = await conn.downloadAndSaveMediaMessage (m) // to decrypt &amp;amp; save to file
        console.log(m.key.remoteJid + &quot; sent media, saved at: &quot; + savedFilename)
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Deleting Messages&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const jid = &#39;1234@s.whatsapp.net&#39; // can also be a group
const response = await conn.sendMessage (jid, &#39;hello!&#39;, MessageType.text) // send a message

await conn.deleteMessage (jid, {id: response.messageID, remoteJid: jid, fromMe: true}) // will delete the sent message for everyone!
await conn.clearMessage (jid, {id: response.messageID, remoteJid: jid, fromMe: true}) // will delete the sent message for only you!
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Modifying Chats&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const jid = &#39;1234@s.whatsapp.net&#39; // can also be a group
await conn.modifyChat (jid, ChatModification.archive) // archive chat
await conn.modifyChat (jid, ChatModification.unarchive) // unarchive chat

const response = await conn.modifyChat (jid, ChatModification.pin) // pin the chat
await conn.modifyChat (jid, ChatModification.unpin) // unpin it

await conn.modifyChat (jid, ChatModification.mute, 8*60*60*1000) // mute for 8 hours
setTimeout (() =&amp;gt; {
    conn.modifyChat (jid, ChatModification.unmute)
}, 5000) // unmute after 5 seconds

await conn.modifyChat (jid, ChatModification.delete) // will delete the chat (can be a group or broadcast list as well)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; to unmute or unpin a chat, one must pass the timestamp of the pinning or muting. This is returned by the pin &amp;amp; mute functions. This is also available in the &lt;code&gt;WAChat&lt;/code&gt; objects of the respective chats, as a &lt;code&gt;mute&lt;/code&gt; or &lt;code&gt;pin&lt;/code&gt; property.&lt;/p&gt; 
&lt;h2&gt;Disappearing Messages&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const jid = &#39;1234@s.whatsapp.net&#39; // can also be a group
// turn on disappearing messages
await conn.toggleDisappearingMessages(
    jid, 
    WA_DEFAULT_EPHEMERAL // this is 1 week in seconds -- how long you want messages to appear for
) 
// will automatically send as a disappearing message
await conn.sendMessage(jid, &#39;Hello poof!&#39;, MessageType.text)
// turn off disappearing messages
await conn.toggleDisappearingMessages(jid, 0)

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Misc&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;To load chats in a paginated manner &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const {chats, cursor} = await conn.loadChats (25)
if (cursor) {
    const moreChats = await conn.loadChats (25, cursor) // load the next 25 chats
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To check if a given ID is on WhatsApp Note: this method falls back to using &lt;code&gt;https://wa.me&lt;/code&gt; to determine whether a number is on WhatsApp in case the WebSocket connection is not open yet. &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const id = &#39;123456&#39;
const exists = await conn.isOnWhatsApp (id)
if (exists) console.log (`${id} exists on WhatsApp, as jid: ${exists.jid}`)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To query chat history on a group or with someone &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;// query the last 25 messages (replace 25 with the number of messages you want to query)
const messages = await conn.loadMessages (&quot;xyz-abc@g.us&quot;, 25)
console.log(&quot;got back &quot; + messages.length + &quot; messages&quot;)
&lt;/code&gt;&lt;/pre&gt; You can also load the entire conversation history if you want &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;await conn.loadAllMessages (&quot;xyz@c.us&quot;, message =&amp;gt; console.log(&quot;Loaded message with ID: &quot; + message.key.id))
console.log(&quot;queried all messages&quot;) // promise resolves once all messages are retreived
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To get the status of some person &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const status = await conn.getStatus (&quot;xyz@c.us&quot;) // leave empty to get your own status
console.log(&quot;status: &quot; + status)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To get the display picture of some person/group &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const ppUrl = await conn.getProfilePicture (&quot;xyz@g.us&quot;) // leave empty to get your own
console.log(&quot;download profile picture from: &quot; + ppUrl)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To change your display picture or a group&#39;s &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const jid = &#39;111234567890-1594482450@g.us&#39; // can be your own too
const img = fs.readFileSync (&#39;new-profile-picture.jpeg&#39;) // can be PNG also
await conn.updateProfilePicture (jid, img)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To get someone&#39;s presence (if they&#39;re typing, online) &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;// the presence update is fetched and called here
conn.on (&#39;user-presence-update&#39;, json =&amp;gt; console.log(json.id + &quot; presence is &quot; + json.type))
await conn.requestPresenceUpdate (&quot;xyz@c.us&quot;) // request the update
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To search through messages &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const response = await conn.searchMessages (&#39;so cool&#39;, null, 25, 1) // search in all chats
console.log (`got ${response.messages.length} messages in search`)

const response2 = await conn.searchMessages (&#39;so cool&#39;, &#39;1234@c.us&#39;, 25, 1) // search in given chat
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Of course, replace &lt;code&gt;xyz&lt;/code&gt; with an actual ID.&lt;/p&gt; 
&lt;h2&gt;Groups&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;To create a group &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;// title &amp;amp; participants
const group = await conn.groupCreate (&quot;My Fab Group&quot;, [&quot;abcd@s.whatsapp.net&quot;, &quot;efgh@s.whatsapp.net&quot;])
console.log (&quot;created group with id: &quot; + group.gid)
conn.sendMessage(group.gid, &quot;hello everyone&quot;, MessageType.extendedText) // say hello to everyone on the group
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To add people to a group &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;// id &amp;amp; people to add to the group (will throw error if it fails)
const response = await conn.groupAdd (&quot;abcd-xyz@g.us&quot;, [&quot;abcd@s.whatsapp.net&quot;, &quot;efgh@s.whatsapp.net&quot;])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To make/demote admins on a group &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;// id &amp;amp; people to make admin (will throw error if it fails)
await conn.groupMakeAdmin (&quot;abcd-xyz@g.us&quot;, [&quot;abcd@s.whatsapp.net&quot;, &quot;efgh@s.whatsapp.net&quot;])
await conn.groupDemoteAdmin (&quot;abcd-xyz@g.us&quot;, [&quot;abcd@s.whatsapp.net&quot;, &quot;efgh@s.whatsapp.net&quot;]) // demote admins
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To change the group&#39;s subject &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;await conn.groupUpdateSubject(&quot;abcd-xyz@g.us&quot;, &quot;New Subject!&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To change the group&#39;s description &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;await conn.groupUpdateDescription(&quot;abcd-xyz@g.us&quot;, &quot;This group has a new description&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To change group settings &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { GroupSettingChange } from &#39;@adiwajshing/baileys&#39;
// only allow admins to send messages
await conn.groupSettingChange (&quot;abcd-xyz@g.us&quot;, GroupSettingChange.messageSend, true)
// allow everyone to modify the group&#39;s settings -- like display picture etc.
await conn.groupSettingChange (&quot;abcd-xyz@g.us&quot;, GroupSettingChange.settingChange, false)
// only allow admins to modify the group&#39;s settings
await conn.groupSettingChange (&quot;abcd-xyz@g.us&quot;, GroupSettingChange.settingChange, true)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To leave a group &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;await conn.groupLeave (&quot;abcd-xyz@g.us&quot;) // (will throw error if it fails)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To get the invite code for a group &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const code = await conn.groupInviteCode (&quot;abcd-xyz@g.us&quot;)
console.log(&quot;group code: &quot; + code)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt;To query the metadata of a group &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const metadata = await conn.groupMetadata (&quot;abcd-xyz@g.us&quot;) 
console.log(json.id + &quot;, title: &quot; + json.subject + &quot;, description: &quot; + json.desc)

// Or if you&#39;ve left the group -- call this
const metadata2 = await conn.groupMetadataMinimal (&quot;abcd-xyz@g.us&quot;) 
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Broadcast Lists &amp;amp; Stories&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can send messages to broadcast lists the same way you send messages to groups &amp;amp; individual chats.&lt;/li&gt; 
 &lt;li&gt;Unfortunately, WA Web does not support creating broadcast lists right now but you can still delete them.&lt;/li&gt; 
 &lt;li&gt;Broadcast IDs are in the format &lt;code&gt;12345678@broadcast&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;To query a broadcast list&#39;s recipients &amp;amp; name: &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const bList = await conn.getBroadcastListInfo (&quot;1234@broadcast&quot;)
console.log (`list name: ${bList.name}, recps: ${bList.recipients}`)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Writing Custom Functionality&lt;/h2&gt; 
&lt;p&gt;Baileys is written, keeping in mind, that you may require other custom functionality. Hence, instead of having to fork the project &amp;amp; re-write the internals, you can simply write extensions in your own code.&lt;/p&gt; 
&lt;p&gt;First, enable the logging of unhandled messages from WhatsApp by setting&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;conn.logger.level = &#39;debug&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will enable you to see all sorts of messages WhatsApp sends in the console. Some examples:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Functionality to track of the battery percentage of your phone. You enable logging and you&#39;ll see a message about your battery pop up in the console: &lt;code&gt;s22, [&quot;action&quot;,null,[[&quot;battery&quot;,{&quot;live&quot;:&quot;false&quot;,&quot;value&quot;:&quot;52&quot;},null]]] &lt;/code&gt;&lt;/p&gt; &lt;p&gt;You now know what a battery update looks like. It&#39;ll have the following characteristics.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Given &lt;code&gt;const bMessage = [&quot;action&quot;,null,[[&quot;battery&quot;,{&quot;live&quot;:&quot;false&quot;,&quot;value&quot;:&quot;52&quot;},null]]]&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;bMessage[0]&lt;/code&gt; is always &lt;code&gt;&quot;action&quot;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;bMessage[1]&lt;/code&gt; is always &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;bMessage[2][0][0]&lt;/code&gt; is always &lt;code&gt;&quot;battery&quot;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Hence, you can register a callback for an event using the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;conn.on ([&quot;action&quot;, null, &quot;battery&quot;], json =&amp;gt; {
    const batteryLevelStr = json[2][0][1].value
    const batterylevel = parseInt (batteryLevelStr)
    console.log (&quot;battery level: &quot; + batterylevel + &quot;%&quot;)
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This callback will be fired any time a message is received matching the following criteria: &lt;code&gt;message [0] === &quot;action&quot; &amp;amp;&amp;amp; message [1] === null &amp;amp;&amp;amp; message[2][0][0] === &quot;battery&quot;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Functionality to keep track of the pushname changes on your phone. You enable logging and you&#39;ll see an unhandled message about your pushanme pop up like this: &lt;code&gt;s24, [&quot;Conn&quot;,{&quot;pushname&quot;:&quot;adiwajshing&quot;}]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;You now know what a pushname update looks like. It&#39;ll have the following characteristics.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Given &lt;code&gt;const pMessage = [&quot;Conn&quot;,{&quot;pushname&quot;:&quot;adiwajshing&quot;}] &lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;pMessage[0]&lt;/code&gt; is always &lt;code&gt;&quot;Conn&quot;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;pMessage[1]&lt;/code&gt; always has the key &lt;code&gt;&quot;pushname&quot;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;pMessage[2]&lt;/code&gt; is always &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;Following this, one can implement the following callback:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;conn.on (&#39;CB:Conn,pushname&#39;, json =&amp;gt; {
    const pushname = json[1].pushname
    conn.user.name = pushname // update on client too
    console.log (&quot;Name updated: &quot; + pushname)
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This callback will be fired any time a message is received matching the following criteria: &lt;code&gt;message [0] === &quot;Conn&quot; &amp;amp;&amp;amp; message [1].pushname&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;A little more testing will reveal that almost all WhatsApp messages are in the format illustrated above. Note: except for the first parameter (in the above cases, &lt;code&gt;&quot;action&quot;&lt;/code&gt; or &lt;code&gt;&quot;Conn&quot;&lt;/code&gt;), all the other parameters are optional.&lt;/p&gt; 
&lt;h3&gt;Note&lt;/h3&gt; 
&lt;p&gt;This library was originally a project for &lt;strong&gt;CS-2362 at Ashoka University&lt;/strong&gt; and is in no way affiliated with WhatsApp. Use at your own discretion. Do not spam people with this.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dortania/OpenCore-Install-Guide</title>
      <link>https://github.com/dortania/OpenCore-Install-Guide</link>
      <description>&lt;p&gt;Repo for the OpenCore Install Guide&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; 
&lt;p&gt;home: true heroImage: /dortania-logo-clear.png heroText: Dortania&#39;s OpenCore Install Guide actionText: Getting Started‚Üí actionLink: prerequisites.md&lt;/p&gt; 
&lt;p&gt;meta:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;name: description content: Current supported version 0.6.4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h1&gt;What is OpenCore and who is this guide for&lt;/h1&gt; 
&lt;p&gt;OpenCore is what we refer to as a &quot;boot loader&quot; ‚Äì it is a complex piece of software that we use to prepare our systems for macOS ‚Äì specifically by injecting new data for macOS such as SMBIOS, ACPI tables and kexts. How this tool differs from others like Clover is that it has been designed with security and quality in mind, allowing us to use many security features found on real Macs, such as SIP and FileVault. A more in-depth look can be found here: &lt;a href=&quot;https://raw.githubusercontent.com/dortania/OpenCore-Install-Guide/master/why-oc.md&quot;&gt;Why OpenCore over Clover and others&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This guide specifically focuses on two main things:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Installing macOS on an X86-based PC&lt;/li&gt; 
 &lt;li&gt;Teaching you what makes your Hack work&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Because of this, you will be expected to read, learn and even use Google. This is not a simple one-click install setup.&lt;/p&gt; 
&lt;p&gt;Please remember that OpenCore is still new and currently in beta. While quite stable, and arguably much more stable than Clover in pretty much every way, it is still being frequently updated, so chunks of configuration change quite often (i.e. new quirks replacing old ones).&lt;/p&gt; 
&lt;p&gt;Lastly, those having issues can visit both the &lt;a href=&quot;https://www.reddit.com/r/hackintosh/&quot;&gt;r/Hackintosh subreddit&lt;/a&gt; and &lt;a href=&quot;https://discord.gg/u8V7N5C&quot;&gt;r/Hackintosh Discord&lt;/a&gt; for more help.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>returntocorp/semgrep</title>
      <link>https://github.com/returntocorp/semgrep</link>
      <description>&lt;p&gt;Lightweight static analysis for many languages. Find bug variants with patterns that look like source code.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Semgrep is a fast, open-source, static analysis tool that excels at expressing code standards ‚Äî without complicated queries ‚Äî and surfacing bugs early at editor, commit, and CI time. Precise rules look like the code you‚Äôre searching; no more traversing abstract syntax trees or wrestling with regexes.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;https://semgrep.dev/explore&quot;&gt;Semgrep Registry&lt;/a&gt; has 1,000+ rules written by the Semgrep community covering security, correctness, and performance bugs. No need to DIY unless you want to.&lt;/p&gt; 
&lt;p&gt;Semgrep runs offline, on uncompiled code.&lt;/p&gt; 
&lt;p&gt;Semgrep is used in production everywhere from one-person startups to multi-billion dollar companies; it is the engine inside tools like &lt;a href=&quot;https://semgrep.dev/p/nodejsscan&quot;&gt;NodeJsScan&lt;/a&gt;. Semgrep is developed and commercially supported by &lt;a href=&quot;https://r2c.dev&quot;&gt;r2c, a software security company&lt;/a&gt;. r2c‚Äôs free hosted service, &lt;a href=&quot;https://semgrep.dev&quot;&gt;Semgrep Community&lt;/a&gt;, lets organizations write and share rules, and manage Semgrep in CI across many projects. r2c also offers a paid hosted tier for enterprises, &lt;a href=&quot;https://r2c.dev/pricing&quot;&gt;Semgrep Team&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Language support&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Getting started&lt;/h3&gt; 
&lt;p&gt;To install Semgrep use Homebrew or pip, or run without installation via Docker:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# For macOS
$ brew install semgrep

# For Ubuntu/WSL/Linux/macOS
$ python3 -m pip install semgrep

# To try Semgrep without installation run via Docker
$ docker run --rm -v &quot;${PWD}:/src&quot; returntocorp/semgrep --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once installed, Semgrep can run with single rules or entire rulesets. Visit &lt;a href=&quot;https://semgrep.dev/docs/running-rules/&quot;&gt;Running rules&lt;/a&gt; to learn more or try the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Check for Python == where the left and right hand sides are the same (often a bug)
$ semgrep -e &#39;$X == $X&#39; --lang=py path/to/src

# Run the r2c-ci ruleset (with rules for many languages) on your own code!
$ semgrep --config=p/r2c-ci path/to/src
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://semgrep.dev/docs/getting-started/&quot;&gt;Getting started&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h3&gt;Rule examples&lt;/h3&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://semgrep.dev/docs/writing-rules/rule-ideas/&quot;&gt;Rule examples&lt;/a&gt; for use cases and ideas. There is also an excellent &lt;a href=&quot;https://semgrep.dev/learn&quot;&gt;interactive tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;| Use case | Semgrep rule | | :-------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Ban dangerous APIs | &lt;a href=&quot;https://semgrep.dev/s/clintgibler:no-exec&quot;&gt;Prevent use of exec&lt;/a&gt; | | Search routes and authentication | &lt;a href=&quot;https://semgrep.dev/s/clintgibler:spring-routes&quot;&gt;Extract Spring routes&lt;/a&gt; | | Enforce the use secure defaults | &lt;a href=&quot;https://semgrep.dev/s/dlukeomalley:flask-set-cookie&quot;&gt;Securely set Flask cookies&lt;/a&gt; | | Enforce project best-practices | &lt;a href=&quot;https://semgrep.dev/s/dlukeomalley:use-assertEqual-for-equality&quot;&gt;Use assertEqual for == checks&lt;/a&gt;, &lt;a href=&quot;https://semgrep.dev/s/dlukeomalley:unchecked-subprocess-call&quot;&gt;Always check subprocess calls&lt;/a&gt; | | Codify project-specific knowledge | &lt;a href=&quot;https://semgrep.dev/s/dlukeomalley:verify-before-make&quot;&gt;Verify transactions before making them&lt;/a&gt; | | Audit security hotspots | &lt;a href=&quot;https://semgrep.dev/s/ievans:airflow-xss&quot;&gt;Finding XSS in Apache Airflow&lt;/a&gt;, &lt;a href=&quot;https://semgrep.dev/s/dlukeomalley:hardcoded-credentials&quot;&gt;Hardcoded credentials&lt;/a&gt; | | Audit configuration files | &lt;a href=&quot;https://semgrep.dev/s/dlukeomalley:s3-arn-use&quot;&gt;Find S3 ARN uses&lt;/a&gt; | | Migrate from deprecated APIs | &lt;a href=&quot;https://semgrep.dev/editor?registry=java.lang.security.audit.crypto.des-is-deprecated&quot;&gt;DES is deprecated&lt;/a&gt;, &lt;a href=&quot;https://semgrep.dev/editor?registry=python.flask.maintainability.deprecated.deprecated-apis&quot;&gt;Deprecated Flask APIs&lt;/a&gt;, &lt;a href=&quot;https://semgrep.dev/editor?registry=python.bokeh.maintainability.deprecated.deprecated_apis&quot;&gt;Deprecated Bokeh APIs&lt;/a&gt; | | Apply automatic fixes | &lt;a href=&quot;https://semgrep.dev/s/clintgibler:use-listenAndServeTLS&quot;&gt;Use listenAndServeTLS&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Integrations&lt;/h3&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://semgrep.dev/docs/integrations/&quot;&gt;Integrations&lt;/a&gt; to learn about Semgrep editor, commit, and CI integrations. When integrated into CI and configured to scan pull requests, Semgrep will only report issues introduced by that pull request; this lets you start using Semgrep without fixing or ignoring pre-existing issues!&lt;/p&gt; 
&lt;h3&gt;More&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://semgrep.dev/docs/faq/&quot;&gt;Frequently asked questions (FAQs)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://semgrep.dev/docs/contributing/&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://r2c.dev/slack&quot;&gt;Ask questions in the r2c Community Slack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://semgrep.dev/docs/cli-usage&quot;&gt;CLI usage and exit codes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC5ahcFBorwzUTqPipFhjkWg&quot;&gt;r2c YouTube channel with Semgrep presentation videos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/returntocorp/semgrep/develop/LICENSE&quot;&gt;License (LGPL-2.1)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Upgrading&lt;/h3&gt; 
&lt;p&gt;To upgrade, run the command below associated with how you installed Semgrep:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Using Homebrew
$ brew upgrade semgrep

# Using pip
$ python3 -m pip install --upgrade semgrep

# Using Docker
$ docker pull returntocorp/semgrep:latest
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>jhu-ep-coursera/fullstack-course4</title>
      <link>https://github.com/jhu-ep-coursera/fullstack-course4</link>
      <description>&lt;p&gt;Example code for HTML, CSS, and Javascript for Web Developers Coursera Course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Coursera: HTML, CSS and Javascript for Web Developers&lt;/h1&gt; 
&lt;h2&gt;Example Source Code&lt;/h2&gt; 
&lt;p&gt;This repository contains all of the example source code used in the Coursera.org course called &lt;a href=&quot;https://www.coursera.org/learn/html-css-javascript-for-web-developers&quot;&gt;HTML, CSS and Javascript for Web Developers&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/html-css-javascript-for-web-developers&quot;&gt;Enroll now! It&#39;s free!&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;p&gt;Please check our FAQ to see if a question you want to ask on the forums has been answered already. Here is the link to the FAQ:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jhu-ep-coursera/fullstack-course4/master/FAQ.md&quot;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Customer Website Launched&lt;/h2&gt; 
&lt;p&gt;As part of this course we developed a &lt;em&gt;real&lt;/em&gt; website for a &lt;em&gt;real&lt;/em&gt; client. Below is a link to the final product. (&lt;em&gt;Note&lt;/em&gt;, the site is left without speed optimization to keep it exactly as it was in the course. Site optimization wasn&#39;t part of the course).&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://www.davidchuschinabistro.com/&quot;&gt;David Chu&#39;s China Bistro Restaurant in Baltimore, MD&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>twbs/bootstrap</title>
      <link>https://github.com/twbs/bootstrap</link>
      <description>&lt;p&gt;The most popular HTML, CSS, and JavaScript framework for developing responsive, mobile first projects on the web.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Bootstrap 4&lt;/h2&gt; 
&lt;p&gt;Our default branch is for development of our upcoming Bootstrap 5 release. Head to the &lt;a href=&quot;https://github.com/twbs/bootstrap/tree/v4-dev&quot;&gt;&lt;code&gt;v4-dev&lt;/code&gt; branch&lt;/a&gt; to view the readme, documentation, and source code for Bootstrap 4.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#quick-start&quot;&gt;Quick start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#status&quot;&gt;Status&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#whats-included&quot;&gt;What&#39;s included&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#bugs-and-feature-requests&quot;&gt;Bugs and feature requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#versioning&quot;&gt;Versioning&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#creators&quot;&gt;Creators&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#thanks&quot;&gt;Thanks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#copyright-and-license&quot;&gt;Copyright and license&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;Several quick start options are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/twbs/bootstrap/archive/v5.0.0-beta1.zip&quot;&gt;Download the latest release&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clone the repo: &lt;code&gt;git clone https://github.com/twbs/bootstrap.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;: &lt;code&gt;npm install bootstrap@next&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn&lt;/a&gt;: &lt;code&gt;yarn add bootstrap@next&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt;: &lt;code&gt;composer require twbs/bootstrap:5.0.0-beta1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://www.nuget.org/&quot;&gt;NuGet&lt;/a&gt;: CSS: &lt;code&gt;Install-Package bootstrap&lt;/code&gt; Sass: &lt;code&gt;Install-Package bootstrap.sass&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://getbootstrap.com/docs/5.0/getting-started/introduction/&quot;&gt;Getting started page&lt;/a&gt; for information on the framework contents, templates and examples, and more.&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://bootstrap-slack.herokuapp.com/&quot;&gt;&lt;img src=&quot;https://bootstrap-slack.herokuapp.com/badge.svg&quot; alt=&quot;Slack&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/actions?query=workflow%3AJS+Tests+branch%3Amain&quot;&gt;&lt;img src=&quot;https://github.com/twbs/bootstrap/workflows/JS%20Tests/badge.svg?branch=main&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/bootstrap&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/bootstrap&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://rubygems.org/gems/bootstrap&quot;&gt;&lt;img src=&quot;https://img.shields.io/gem/v/bootstrap&quot; alt=&quot;Gem version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://atmospherejs.com/twbs/bootstrap&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/meteor-twbs%3Abootstrap-blue&quot; alt=&quot;Meteor Atmosphere&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://packagist.org/packages/twbs/bootstrap&quot;&gt;&lt;img src=&quot;https://img.shields.io/packagist/vpre/twbs/bootstrap&quot; alt=&quot;Packagist Prerelease&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.nuget.org/packages/bootstrap/absoluteLatest&quot;&gt;&lt;img src=&quot;https://img.shields.io/nuget/vpre/bootstrap&quot; alt=&quot;NuGet&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/twbs/bootstrap?type=peer&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/peer/twbs/bootstrap&quot; alt=&quot;peerDependencies Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/twbs/bootstrap?type=dev&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/dev/twbs/bootstrap&quot; alt=&quot;devDependency Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/twbs/bootstrap?branch=main&quot;&gt;&lt;img src=&quot;https://img.shields.io/coveralls/github/twbs/bootstrap/main&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/dist/css/bootstrap.min.css&quot;&gt;&lt;img src=&quot;https://img.badgesize.io/twbs/bootstrap/main/dist/css/bootstrap.min.css?compression=gzip&amp;amp;label=CSS%20gzip%20size&quot; alt=&quot;CSS gzip size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/dist/css/bootstrap.min.css&quot;&gt;&lt;img src=&quot;https://img.badgesize.io/twbs/bootstrap/main/dist/css/bootstrap.min.css?compression=brotli&amp;amp;label=CSS%20Brotli%20size&quot; alt=&quot;CSS Brotli size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/dist/js/bootstrap.min.js&quot;&gt;&lt;img src=&quot;https://img.badgesize.io/twbs/bootstrap/main/dist/js/bootstrap.min.js?compression=gzip&amp;amp;label=JS%20gzip%20size&quot; alt=&quot;JS gzip size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/dist/js/bootstrap.min.js&quot;&gt;&lt;img src=&quot;https://img.badgesize.io/twbs/bootstrap/main/dist/js/bootstrap.min.js?compression=brotli&amp;amp;label=JS%20Brotli%20size&quot; alt=&quot;JS Brotli size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.browserstack.com/automate/public-build/SkxZcStBeExEdVJqQ2hWYnlWckpkNmNEY213SFp6WHFETWk2bGFuY3pCbz0tLXhqbHJsVlZhQnRBdEpod3NLSDMzaHc9PQ==--3d0b75245708616eb93113221beece33e680b229&quot;&gt;&lt;img src=&quot;https://www.browserstack.com/automate/badge.svg?badge_key=SkxZcStBeExEdVJqQ2hWYnlWckpkNmNEY213SFp6WHFETWk2bGFuY3pCbz0tLXhqbHJsVlZhQnRBdEpod3NLSDMzaHc9PQ==--3d0b75245708616eb93113221beece33e680b229&quot; alt=&quot;BrowserStack Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#backers&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/backers/bootstrap&quot; alt=&quot;Backers on Open Collective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#sponsors&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/sponsors/bootstrap&quot; alt=&quot;Sponsors on Open Collective&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What&#39;s included&lt;/h2&gt; 
&lt;p&gt;Within the download you&#39;ll find the following directories and files, logically grouping common assets and providing both compiled and minified variations. You&#39;ll see something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;bootstrap/
‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.rtl.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.rtl.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.rtl.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.rtl.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.rtl.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.rtl.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.rtl.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.rtl.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.rtl.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.rtl.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.rtl.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.rtl.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.rtl.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.rtl.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.rtl.min.css
‚îÇ   ‚îî‚îÄ‚îÄ bootstrap.rtl.min.css.map
‚îî‚îÄ‚îÄ js/
    ‚îú‚îÄ‚îÄ bootstrap.bundle.js
    ‚îú‚îÄ‚îÄ bootstrap.bundle.js.map
    ‚îú‚îÄ‚îÄ bootstrap.bundle.min.js
    ‚îú‚îÄ‚îÄ bootstrap.bundle.min.js.map
    ‚îú‚îÄ‚îÄ bootstrap.esm.js
    ‚îú‚îÄ‚îÄ bootstrap.esm.js.map
    ‚îú‚îÄ‚îÄ bootstrap.esm.min.js
    ‚îú‚îÄ‚îÄ bootstrap.esm.min.js.map
    ‚îú‚îÄ‚îÄ bootstrap.js
    ‚îú‚îÄ‚îÄ bootstrap.js.map
    ‚îú‚îÄ‚îÄ bootstrap.min.js
    ‚îî‚îÄ‚îÄ bootstrap.min.js.map
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We provide compiled CSS and JS (&lt;code&gt;bootstrap.*&lt;/code&gt;), as well as compiled and minified CSS and JS (&lt;code&gt;bootstrap.min.*&lt;/code&gt;). &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps&quot;&gt;source maps&lt;/a&gt; (&lt;code&gt;bootstrap.*.map&lt;/code&gt;) are available for use with certain browsers&#39; developer tools. Bundled JS files (&lt;code&gt;bootstrap.bundle.js&lt;/code&gt; and minified &lt;code&gt;bootstrap.bundle.min.js&lt;/code&gt;) include &lt;a href=&quot;https://popper.js.org/&quot;&gt;Popper&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Bugs and feature requests&lt;/h2&gt; 
&lt;p&gt;Have a bug or a feature request? Please first read the &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/.github/CONTRIBUTING.md#using-the-issue-tracker&quot;&gt;issue guidelines&lt;/a&gt; and search for existing and closed issues. If your problem or idea is not addressed yet, &lt;a href=&quot;https://github.com/twbs/bootstrap/issues/new&quot;&gt;please open a new issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Bootstrap&#39;s documentation, included in this repo in the root directory, is built with &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; and publicly hosted on GitHub Pages at &lt;a href=&quot;https://getbootstrap.com/&quot;&gt;https://getbootstrap.com/&lt;/a&gt;. The docs may also be run locally.&lt;/p&gt; 
&lt;p&gt;Documentation search is powered by &lt;a href=&quot;https://community.algolia.com/docsearch/&quot;&gt;Algolia&#39;s DocSearch&lt;/a&gt;. Working on our search? Be sure to set &lt;code&gt;debug: true&lt;/code&gt; in &lt;code&gt;site/assets/js/search.js&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Running documentation locally&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install the Node.js dependencies, including Hugo (the site builder).&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;npm run test&lt;/code&gt; (or a specific npm script) to rebuild distributed CSS and JavaScript files, as well as our docs assets.&lt;/li&gt; 
 &lt;li&gt;From the root &lt;code&gt;/bootstrap&lt;/code&gt; directory, run &lt;code&gt;npm run docs-serve&lt;/code&gt; in the command line.&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;http://localhost:9001/&lt;/code&gt; in your browser, and voil√†.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Learn more about using Hugo by reading its &lt;a href=&quot;https://gohugo.io/documentation/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Documentation for previous releases&lt;/h3&gt; 
&lt;p&gt;You can find all our previous releases docs on &lt;a href=&quot;https://getbootstrap.com/docs/versions/&quot;&gt;https://getbootstrap.com/docs/versions/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/twbs/bootstrap/releases&quot;&gt;Previous releases&lt;/a&gt; and their documentation are also available for download.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read through our &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/.github/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt;. Included are directions for opening issues, coding standards, and notes on development.&lt;/p&gt; 
&lt;p&gt;Moreover, if your pull request contains JavaScript patches or features, you must include &lt;a href=&quot;https://github.com/twbs/bootstrap/tree/main/js/tests&quot;&gt;relevant unit tests&lt;/a&gt;. All HTML and CSS should conform to the &lt;a href=&quot;https://github.com/mdo/code-guide&quot;&gt;Code Guide&lt;/a&gt;, maintained by &lt;a href=&quot;https://github.com/mdo&quot;&gt;Mark Otto&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Editor preferences are available in the &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/.editorconfig&quot;&gt;editor config&lt;/a&gt; for easy use in common text editors. Read more and download plugins at &lt;a href=&quot;https://editorconfig.org/&quot;&gt;https://editorconfig.org/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Get updates on Bootstrap&#39;s development and chat with the project maintainers and community members.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow &lt;a href=&quot;https://twitter.com/getbootstrap&quot;&gt;@getbootstrap on Twitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Read and subscribe to &lt;a href=&quot;https://blog.getbootstrap.com/&quot;&gt;The Official Bootstrap Blog&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Join &lt;a href=&quot;https://bootstrap-slack.herokuapp.com/&quot;&gt;the official Slack room&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Chat with fellow Bootstrappers in IRC. On the &lt;code&gt;irc.freenode.net&lt;/code&gt; server, in the &lt;code&gt;##bootstrap&lt;/code&gt; channel.&lt;/li&gt; 
 &lt;li&gt;Implementation help may be found at Stack Overflow (tagged &lt;a href=&quot;https://stackoverflow.com/questions/tagged/bootstrap-5&quot;&gt;&lt;code&gt;bootstrap-5&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;Developers should use the keyword &lt;code&gt;bootstrap&lt;/code&gt; on packages which modify or add to the functionality of Bootstrap when distributing through &lt;a href=&quot;https://www.npmjs.com/browse/keyword/bootstrap&quot;&gt;npm&lt;/a&gt; or similar delivery mechanisms for maximum discoverability.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Versioning&lt;/h2&gt; 
&lt;p&gt;For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under &lt;a href=&quot;https://semver.org/&quot;&gt;the Semantic Versioning guidelines&lt;/a&gt;. Sometimes we screw up, but we adhere to those rules whenever possible.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/twbs/bootstrap/releases&quot;&gt;the Releases section of our GitHub project&lt;/a&gt; for changelogs for each release version of Bootstrap. Release announcement posts on &lt;a href=&quot;https://blog.getbootstrap.com/&quot;&gt;the official Bootstrap blog&lt;/a&gt; contain summaries of the most noteworthy changes made in each release.&lt;/p&gt; 
&lt;h2&gt;Creators&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Mark Otto&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/mdo&quot;&gt;https://twitter.com/mdo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mdo&quot;&gt;https://github.com/mdo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Jacob Thornton&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/fat&quot;&gt;https://twitter.com/fat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fat&quot;&gt;https://github.com/fat&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://www.browserstack.com/&quot;&gt;BrowserStack&lt;/a&gt; for providing the infrastructure that allows us to test in real browsers!&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&quot;https://opencollective.com/bootstrap#sponsor&quot;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/0/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/0/avatar.svg&quot; alt=&quot;OC sponsor 0&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/1/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/1/avatar.svg&quot; alt=&quot;OC sponsor 1&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/2/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/2/avatar.svg&quot; alt=&quot;OC sponsor 2&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/3/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/3/avatar.svg&quot; alt=&quot;OC sponsor 3&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/4/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/4/avatar.svg&quot; alt=&quot;OC sponsor 4&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/5/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/5/avatar.svg&quot; alt=&quot;OC sponsor 5&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/6/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/6/avatar.svg&quot; alt=&quot;OC sponsor 6&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/7/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/7/avatar.svg&quot; alt=&quot;OC sponsor 7&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/8/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/8/avatar.svg&quot; alt=&quot;OC sponsor 8&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/9/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/9/avatar.svg&quot; alt=&quot;OC sponsor 9&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Backers&lt;/h2&gt; 
&lt;p&gt;Thank you to all our backers! üôè [&lt;a href=&quot;https://opencollective.com/bootstrap#backer&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/bootstrap#backers&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/backers.svg?width=890&quot; alt=&quot;Backers&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Copyright and license&lt;/h2&gt; 
&lt;p&gt;Code and documentation copyright 2011‚Äì2020 the &lt;a href=&quot;https://github.com/twbs/bootstrap/graphs/contributors&quot;&gt;Bootstrap Authors&lt;/a&gt; and &lt;a href=&quot;https://twitter.com&quot;&gt;Twitter, Inc.&lt;/a&gt; Code released under the &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/LICENSE&quot;&gt;MIT License&lt;/a&gt;. Docs released under &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simonwep/pickr</title>
      <link>https://github.com/Simonwep/pickr</link>
      <description>&lt;p&gt;üé® Flat, simple, multi-themed, responsive and hackable Color-Picker library. No dependencies, no jQuery. Compatible with all CSS Frameworks e.g. Bootstrap, Materialize. Supports alpha channel, rgba, hsla, hsva and more!&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Themes&lt;/li&gt; 
 &lt;li&gt;Simple usage&lt;/li&gt; 
 &lt;li&gt;Zero dependencies&lt;/li&gt; 
 &lt;li&gt;Multiple color representations&lt;/li&gt; 
 &lt;li&gt;Color comparison&lt;/li&gt; 
 &lt;li&gt;Opacity control&lt;/li&gt; 
 &lt;li&gt;Detail adjustments via. mouse-wheel&lt;/li&gt; 
 &lt;li&gt;Responsive and auto-positioning&lt;/li&gt; 
 &lt;li&gt;Supports touch devices&lt;/li&gt; 
 &lt;li&gt;Swatches for quick-selection&lt;/li&gt; 
 &lt;li&gt;Fully accessible and i18n&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Simonwep/pickr/master/#selection-through-a-shadow-dom&quot;&gt;Shadow-dom support&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Status of this project&lt;/h3&gt; 
&lt;p&gt;This project might continue to get important security- and bug-related updates but its &lt;em&gt;feature set&lt;/em&gt; is frozen, and it&#39;s highly unlikely that it&#39;ll get new features or enhancements.&lt;/p&gt; 
&lt;p&gt;The reason behind this decision is the way this tool has been build (monolithic, the core is one single file, everything is in plain JS etc.) which makes it incredible hard to maintain, tests become impossible at this stage without a complete rewrite, and the fun is gone at such a level of cramped complexity.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Personally I recommend building these UI-Related &quot;widgets&quot; directly into the app with the framework you&#39;re using which takes more time but in return gives you full power of how it should work and look like. Frameworks such as &lt;a href=&quot;https://preactjs.com/&quot;&gt;(p)react&lt;/a&gt;, &lt;a href=&quot;https://vuejs.org/&quot;&gt;vue&lt;/a&gt; and &lt;a href=&quot;https://svelte.dev/&quot;&gt;svelte&lt;/a&gt; will make it a breeze to develop such things within a day.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Themes&lt;/h3&gt; 
&lt;p&gt;|Classic|Monolith|Nano| |-------|--------|----| |&lt;img src=&quot;https://user-images.githubusercontent.com/30767528/59562615-01d35300-902f-11e9-9f07-44c9d16dbb99.png&quot; alt=&quot;Classic theme&quot;&gt;|&lt;img src=&quot;https://user-images.githubusercontent.com/30767528/59562603-c9cc1000-902e-11e9-9c84-1a606fa5f206.png&quot; alt=&quot;Monolith&quot;&gt;|&lt;img src=&quot;https://user-images.githubusercontent.com/30767528/59562578-8ec9dc80-902e-11e9-9882-2dacad5e6fa5.png&quot; alt=&quot;Nano&quot;&gt;|&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Nano uses css-grid thus it won&#39;t work in older browsers.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Node&lt;/h3&gt; 
&lt;p&gt;Note: The readme is always up-to-date with the latest commit. See &lt;a href=&quot;https://github.com/Simonwep/pickr/releases&quot;&gt;Releases&lt;/a&gt; for installation instructions regarding to the latest version.&lt;/p&gt; 
&lt;p&gt;Install via npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ npm install @simonwep/pickr
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install via yarn:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ yarn add @simonwep/pickr
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Include code and style:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;
// One of the following themes
import &#39;@simonwep/pickr/dist/themes/classic.min.css&#39;;   // &#39;classic&#39; theme
import &#39;@simonwep/pickr/dist/themes/monolith.min.css&#39;;  // &#39;monolith&#39; theme
import &#39;@simonwep/pickr/dist/themes/nano.min.css&#39;;      // &#39;nano&#39; theme

// Modern or es5 bundle (pay attention to the note below!)
import Pickr from &#39;@simonwep/pickr&#39;;
import Pickr from &#39;@simonwep/pickr/dist/pickr.es5.min&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Attention: The es5-bundle (e.g. legacy version) is quite big (around a triple of the modern bundle). Please take into consideration to use the modern version and add polyfills later to your final bundle! (Or better: give a hint to users that they should use the latest browsers). Browsers such as IE are &lt;strong&gt;not supported&lt;/strong&gt; (at least not officially).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Browser&lt;/h3&gt; 
&lt;p&gt;jsdelivr:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;
&amp;lt;!-- One of the following themes --&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/classic.min.css&quot;/&amp;gt; &amp;lt;!-- &#39;classic&#39; theme --&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/monolith.min.css&quot;/&amp;gt; &amp;lt;!-- &#39;monolith&#39; theme --&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/nano.min.css&quot;/&amp;gt; &amp;lt;!-- &#39;nano&#39; theme --&amp;gt;

&amp;lt;!-- Modern or es5 bundle --&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.es5.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Be sure to load the &lt;code&gt;pickr.min.js&lt;/code&gt; (or the es5 version) &lt;strong&gt;after&lt;/strong&gt; &lt;code&gt;pickr.min.css&lt;/code&gt;. Moreover the &lt;code&gt;script&lt;/code&gt; tag doesn&#39;t work with the &lt;code&gt;defer&lt;/code&gt; attribute.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Simple example, see optional options for more configuration.
const pickr = Pickr.create({
    el: &#39;.color-picker&#39;,
    theme: &#39;classic&#39;, // or &#39;monolith&#39;, or &#39;nano&#39;

    swatches: [
        &#39;rgba(244, 67, 54, 1)&#39;,
        &#39;rgba(233, 30, 99, 0.95)&#39;,
        &#39;rgba(156, 39, 176, 0.9)&#39;,
        &#39;rgba(103, 58, 183, 0.85)&#39;,
        &#39;rgba(63, 81, 181, 0.8)&#39;,
        &#39;rgba(33, 150, 243, 0.75)&#39;,
        &#39;rgba(3, 169, 244, 0.7)&#39;,
        &#39;rgba(0, 188, 212, 0.7)&#39;,
        &#39;rgba(0, 150, 136, 0.75)&#39;,
        &#39;rgba(76, 175, 80, 0.8)&#39;,
        &#39;rgba(139, 195, 74, 0.85)&#39;,
        &#39;rgba(205, 220, 57, 0.9)&#39;,
        &#39;rgba(255, 235, 59, 0.95)&#39;,
        &#39;rgba(255, 193, 7, 1)&#39;
    ],

    components: {

        // Main components
        preview: true,
        opacity: true,
        hue: true,

        // Input / output Options
        interaction: {
            hex: true,
            rgba: true,
            hsla: true,
            hsva: true,
            cmyk: true,
            input: true,
            clear: true,
            save: true
        }
    }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You can find more examples &lt;a href=&quot;https://raw.githubusercontent.com/Simonwep/pickr/master/EXAMPLES.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Events&lt;/h2&gt; 
&lt;p&gt;Since version &lt;code&gt;0.4.x&lt;/code&gt; Pickr is event-driven. Use the &lt;code&gt;on(event, cb)&lt;/code&gt; and &lt;code&gt;off(event, cb)&lt;/code&gt; functions to bind / unbind eventlistener.&lt;/p&gt; 
&lt;p&gt;| Event | Description | Arguments | | -------------- | ----------- | --------- | | &lt;code&gt;init&lt;/code&gt; | Initialization done - pickr can be used | &lt;code&gt;PickrInstance&lt;/code&gt; | | &lt;code&gt;hide&lt;/code&gt; | Pickr got closed | &lt;code&gt;PickrInstance&lt;/code&gt; | | &lt;code&gt;show&lt;/code&gt; | Pickr got opened | &lt;code&gt;PickrInstance&lt;/code&gt; | | &lt;code&gt;save&lt;/code&gt; | User clicked the save / clear button. Also fired on clear with &lt;code&gt;null&lt;/code&gt; as color. | &lt;code&gt;HSVaColorObject or null, PickrInstance&lt;/code&gt; | | &lt;code&gt;clear&lt;/code&gt; | User cleared the color. | &lt;code&gt;PickrInstance&lt;/code&gt; | | &lt;code&gt;change&lt;/code&gt; | Color has changed (but not saved). Also fired on &lt;code&gt;swatchselect&lt;/code&gt; | &lt;code&gt;HSVaColorObject, eventSource, PickrInstance&lt;/code&gt; | | &lt;code&gt;changestop&lt;/code&gt; | User stopped to change the color | &lt;code&gt;eventSource, PickrInstance&lt;/code&gt; | | &lt;code&gt;cancel&lt;/code&gt; | User clicked the cancel button (return to previous color). | &lt;code&gt;PickrInstance&lt;/code&gt; | | &lt;code&gt;swatchselect&lt;/code&gt; | User clicked one of the swatches | &lt;code&gt;HSVaColorObject, PickrInstance&lt;/code&gt; |&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Example:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;pickr.on(&#39;init&#39;, instance =&amp;gt; {
    console.log(&#39;Event: &quot;init&quot;&#39;, instance);
}).on(&#39;hide&#39;, instance =&amp;gt; {
    console.log(&#39;Event: &quot;hide&quot;&#39;, instance);
}).on(&#39;show&#39;, (color, instance) =&amp;gt; {
    console.log(&#39;Event: &quot;show&quot;&#39;, color, instance);
}).on(&#39;save&#39;, (color, instance) =&amp;gt; {
    console.log(&#39;Event: &quot;save&quot;&#39;, color, instance);
}).on(&#39;clear&#39;, instance =&amp;gt; {
    console.log(&#39;Event: &quot;clear&quot;&#39;, instance);
}).on(&#39;change&#39;, (color, source, instance) =&amp;gt; {
    console.log(&#39;Event: &quot;change&quot;&#39;, color, source, instance);
}).on(&#39;changestop&#39;, (source, instance) =&amp;gt; {
    console.log(&#39;Event: &quot;changestop&quot;&#39;, source, instance);
}).on(&#39;cancel&#39;, instance =&amp;gt; {
    console.log(&#39;Event: &quot;cancel&quot;&#39;, instance);
}).on(&#39;swatchselect&#39;, (color, instance) =&amp;gt; {
    console.log(&#39;Event: &quot;swatchselect&quot;&#39;, color, instance);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where &lt;code&gt;source&lt;/code&gt; can be&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;slider&lt;/code&gt; &lt;em&gt;- Any slider in the UI.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;input&lt;/code&gt; &lt;em&gt;- The user input field.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;swatch&lt;/code&gt; &lt;em&gt;- One of the swatches.&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Options&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const pickr = new Pickr({

    // Selector or element which will be replaced with the actual color-picker.
    // Can be a HTMLElement.
    el: &#39;.color-picker&#39;,

    // Where the pickr-app should be added as child.
    container: &#39;body&#39;,

    // Which theme you want to use. Can be &#39;classic&#39;, &#39;monolith&#39; or &#39;nano&#39;
    theme: &#39;classic&#39;,

    // Nested scrolling is currently not supported and as this would be really sophisticated to add this
    // it&#39;s easier to set this to true which will hide pickr if the user scrolls the area behind it.
    closeOnScroll: false,

    // Custom class which gets added to the pcr-app. Can be used to apply custom styles.
    appClass: &#39;custom-class&#39;,

    // Don&#39;t replace &#39;el&#39; Element with the pickr-button, instead use &#39;el&#39; as a button.
    // If true, appendToBody will also be automatically true.
    useAsButton: false,

    // Size of gap between pickr (widget) and the corresponding reference (button) in px
    padding: 8,

    // If true pickr won&#39;t be floating, and instead will append after the in el resolved element.
    // It&#39;s possible to hide it via .hide() anyway.
    inline: false,

    // If true, pickr will be repositioned automatically on page scroll or window resize.
    // Can be set to false to make custom positioning easier.
    autoReposition: true,

    // Defines the direction in which the knobs of hue and opacity can be moved.
    // &#39;v&#39; =&amp;gt; opacity- and hue-slider can both only moved vertically.
    // &#39;hv&#39; =&amp;gt; opacity-slider can be moved horizontally and hue-slider vertically.
    // Can be used to apply custom layouts
    sliders: &#39;v&#39;,

    // Start state. If true &#39;disabled&#39; will be added to the button&#39;s classlist.
    disabled: false,

    // If true, the user won&#39;t be able to adjust any opacity.
    // Opacity will be locked at 1 and the opacity slider will be removed.
    // The HSVaColor object also doesn&#39;t contain an alpha, so the toString() methods just
    // print HSV, HSL, RGB, HEX, etc.
    lockOpacity: false,

    // Precision of output string (only effective if components.interaction.input is true)
    outputPrecision: 0,

    // Defines change/save behavior:
    // - to keep current color in place until Save is pressed, set to `true`,
    // - to apply color to button and preview (save) in sync with each change
    //   (from picker or palette), set to `false`.
    comparison: true,

    // Default color. If you&#39;re using a named color such as red, white ... set
    // a value for defaultRepresentation too as there is no button for named-colors.
    default: &#39;#42445a&#39;,

    // Optional color swatches. When null, swatches are disabled.
    // Types are all those which can be produced by pickr e.g. hex(a), hsv(a), hsl(a), rgb(a), cmyk, and also CSS color names like &#39;magenta&#39;.
    // Example: swatches: [&#39;#F44336&#39;, &#39;#E91E63&#39;, &#39;#9C27B0&#39;, &#39;#673AB7&#39;],
    swatches: null,

    // Default color representation of the input/output textbox.
    // Valid options are `HEX`, `RGBA`, `HSVA`, `HSLA` and `CMYK`.
    defaultRepresentation: &#39;HEX&#39;,

    // Option to keep the color picker always visible.
    // You can still hide / show it via &#39;pickr.hide()&#39; and &#39;pickr.show()&#39;.
    // The save button keeps its functionality, so still fires the onSave event when clicked.
    showAlways: false,

    // Close pickr with a keypress.
    // Default is &#39;Escape&#39;. Can be the event key or code.
    // (see: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key)
    closeWithKey: &#39;Escape&#39;,

    // Defines the position of the color-picker.
    // Any combinations of top, left, bottom or right with one of these optional modifiers: start, middle, end
    // Examples: top-start / right-end
    // If clipping occurs, the color picker will automatically choose its position.
    // Pickr uses https://github.com/Simonwep/nanopop as positioning-engine.
    position: &#39;bottom-middle&#39;,

    // Enables the ability to change numbers in an input field with the scroll-wheel.
    // To use it set the cursor on a position where a number is and scroll, use ctrl to make steps of five
    adjustableNumbers: true,

    // Show or hide specific components.
    // By default only the palette (and the save button) is visible.
    components: {

        // Defines if the palette itself should be visible.
        // Will be overwritten with true if preview, opacity or hue are true
        palette: true,

        preview: true, // Display comparison between previous state and new color
        opacity: true, // Display opacity slider
        hue: true,     // Display hue slider

        // show or hide components on the bottom interaction bar.
        interaction: {

            // Buttons, if you disable one but use the format in default: or setColor() - set the representation-type too!
            hex: false,  // Display &#39;input/output format as hex&#39; button  (hexadecimal representation of the rgba value)
            rgba: false, // Display &#39;input/output format as rgba&#39; button (red green blue and alpha)
            hsla: false, // Display &#39;input/output format as hsla&#39; button (hue saturation lightness and alpha)
            hsva: false, // Display &#39;input/output format as hsva&#39; button (hue saturation value and alpha)
            cmyk: false, // Display &#39;input/output format as cmyk&#39; button (cyan mangenta yellow key )

            input: false, // Display input/output textbox which shows the selected color value.
                         // the format of the input is determined by defaultRepresentation,
                         // and can be changed by the user with the buttons set by hex, rgba, hsla, etc (above).
            cancel: false, // Display Cancel Button, resets the color to the previous state
            clear: false, // Display Clear Button; same as cancel, but keeps the window open
            save: false,  // Display Save Button,
        },
    },

    // Translations, these are the default values.
    i18n: {

        // Strings visible in the UI
       &#39;ui:dialog&#39;: &#39;color picker dialog&#39;,
       &#39;btn:toggle&#39;: &#39;toggle color picker dialog&#39;,
       &#39;btn:swatch&#39;: &#39;color swatch&#39;,
       &#39;btn:last-color&#39;: &#39;use previous color&#39;,
       &#39;btn:save&#39;: &#39;Save&#39;,
       &#39;btn:cancel&#39;: &#39;Cancel&#39;,
       &#39;btn:clear&#39;: &#39;Clear&#39;,

       // Strings used for aria-labels
       &#39;aria:btn:save&#39;: &#39;save and close&#39;,
       &#39;aria:btn:cancel&#39;: &#39;cancel and close&#39;,
       &#39;aria:btn:clear&#39;: &#39;clear and close&#39;,
       &#39;aria:input&#39;: &#39;color input field&#39;,
       &#39;aria:palette&#39;: &#39;color selection area&#39;,
       &#39;aria:hue&#39;: &#39;hue selection slider&#39;,
       &#39;aria:opacity&#39;: &#39;selection slider&#39;
    }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Selection through a Shadow-DOM&lt;/h2&gt; 
&lt;p&gt;Example setup:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;entry&quot;&amp;gt;
  #shadow-root
    &amp;lt;div class=&quot;innr&quot;&amp;gt;
       &amp;lt;div class=&quot;another&quot;&amp;gt;
         #shadow-root
           &amp;lt;div class=&quot;pickr&quot;&amp;gt;&amp;lt;/div&amp;gt;
       &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To select the &lt;code&gt;.pickr&lt;/code&gt; element you can use the custom &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; shadow-dom-selector in &lt;code&gt;el&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;el: &#39;.entry &amp;gt;&amp;gt; .innr .another &amp;gt;&amp;gt; .pickr&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Every &lt;code&gt;ShadowRoot&lt;/code&gt; of the query-result behind a &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; gets used in the next query selection. An alternative would be to provide the target-element itself as &lt;code&gt;el&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;The HSVaColor object&lt;/h2&gt; 
&lt;p&gt;As default color representation is hsva (&lt;code&gt;hue&lt;/code&gt;, &lt;code&gt;saturation&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;alpha&lt;/code&gt;) used, but you can also convert it to other formats as listed below.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;hsva.toHSVA() &lt;em&gt;- Converts the object to a hsva array.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;hsva.toHSLA() &lt;em&gt;- Converts the object to a hsla array.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;hsva.toRGBA() &lt;em&gt;- Converts the object to a rgba array.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;hsva.toHEXA() &lt;em&gt;- Converts the object to a hexa-decimal array.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;hsva.toCMYK() &lt;em&gt;- Converts the object to a cmyk array.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;hsva.clone() &lt;em&gt;- Clones the color object.&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;code&gt;toString()&lt;/code&gt; is overridden, so you can get a color representation string.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;hsva.toRGBA(); // Returns [r, g, b, a]
hsva.toRGBA().toString(); // Returns rgba(r, g, b, a) with highest precision
hsva.toRGBA().toString(3); // Returns rgba(r, g, b, a), rounded to the third decimal
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Methods&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;pickr.setHSVA(h&lt;code&gt;:Number&lt;/code&gt;,s&lt;code&gt;:Number&lt;/code&gt;,v&lt;code&gt;:Number&lt;/code&gt;,a&lt;code&gt;:Float&lt;/code&gt;, silent&lt;code&gt;:Boolean&lt;/code&gt;) &lt;em&gt;- Set an color, returns true if the color has been accepted.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.setColor(str: &lt;code&gt;:String | null&lt;/code&gt;, silent&lt;code&gt;:Boolean&lt;/code&gt;)&lt;code&gt;:Boolean&lt;/code&gt; &lt;em&gt;- Parses a string which represents a color (e.g. &lt;code&gt;#fff&lt;/code&gt;, &lt;code&gt;rgb(10, 156, 23)&lt;/code&gt;) or name e.g. &#39;magenta&#39;, returns true if the color has been accepted. &lt;code&gt;null&lt;/code&gt; will clear the color.&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If &lt;code&gt;silent&lt;/code&gt; is true (Default is false), the button won&#39;t change the current color.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;pickr.on(event&lt;code&gt;:String&lt;/code&gt;, cb&lt;code&gt;:Function&lt;/code&gt;)&lt;code&gt;:Pickr&lt;/code&gt; &lt;em&gt;- Appends an event listener to the given corresponding event-name (see section Events).&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.off(event&lt;code&gt;:String&lt;/code&gt;, cb&lt;code&gt;:Function&lt;/code&gt;)&lt;code&gt;:Pickr&lt;/code&gt; &lt;em&gt;- Removes an event listener from the given corresponding event-name (see section Events).&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.show()&lt;code&gt;:Pickr&lt;/code&gt; &lt;em&gt;- Shows the color-picker.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.hide()&lt;code&gt;:Pickr&lt;/code&gt; &lt;em&gt;- Hides the color-picker.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.disable()&lt;code&gt;:Pickr&lt;/code&gt; &lt;em&gt;- Disables pickr and adds the &lt;code&gt;disabled&lt;/code&gt; class to the button.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.enable()&lt;code&gt;:Pickr&lt;/code&gt; &lt;em&gt;- Enables pickr and removes the &lt;code&gt;disabled&lt;/code&gt; class from the button.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.isOpen()&lt;code&gt;:Pickr&lt;/code&gt; &lt;em&gt;- Returns true if the color picker is currently open.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.getRoot()&lt;code&gt;:Object&lt;/code&gt; &lt;em&gt;- Returns the dom-tree of pickr as tree-structure.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.getColor()&lt;code&gt;:HSVaColor&lt;/code&gt; &lt;em&gt;- Returns the current HSVaColor object.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.getSelectedColor()&lt;code&gt;:HSVaColor&lt;/code&gt; &lt;em&gt;- Returns the currently applied color.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.destroy() &lt;em&gt;- Destroys all functionality.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.destroyAndRemove() &lt;em&gt;- Destroys all functionality and removes the pickr element including the button.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.setColorRepresentation(type&lt;code&gt;:String&lt;/code&gt;)&lt;code&gt;:Boolean&lt;/code&gt; &lt;em&gt;- Change the current color-representation. Valid options are &lt;code&gt;HEX&lt;/code&gt;, &lt;code&gt;RGBA&lt;/code&gt;, &lt;code&gt;HSVA&lt;/code&gt;, &lt;code&gt;HSLA&lt;/code&gt; and &lt;code&gt;CMYK&lt;/code&gt;, returns false if type was invalid.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.getColorRepresentation()&lt;code&gt;:String&lt;/code&gt; &lt;em&gt;- Returns the currently used color-representation (eg. &lt;code&gt;HEXA&lt;/code&gt;, &lt;code&gt;RGBA&lt;/code&gt;...)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.applyColor(silent&lt;code&gt;:Boolean&lt;/code&gt;)&lt;code&gt;:Pickr&lt;/code&gt; &lt;em&gt;- Same as pressing the save button. If silent is true the &lt;code&gt;onSave&lt;/code&gt; event won&#39;t be called.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.addSwatch(color&lt;code&gt;:String&lt;/code&gt;)&lt;code&gt;:Boolean&lt;/code&gt; &lt;em&gt;- Adds a color to the swatch palette. Returns &lt;code&gt;true&lt;/code&gt; if the color has been successful added to the palette.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;pickr.removeSwatch(index&lt;code&gt;:Number&lt;/code&gt;)&lt;code&gt;:Boolean&lt;/code&gt;&lt;em&gt;- Removes a color from the swatch palette by its index, returns true if successful.&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Static methods&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Pickr&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;create(options&lt;code&gt;:Object&lt;/code&gt;)&lt;code&gt;:Pickr&lt;/code&gt; &lt;em&gt;- Creates a new instance.&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Pickr.utils&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;once(element&lt;code&gt;:HTMLElement&lt;/code&gt;, event&lt;code&gt;:String&lt;/code&gt;, fn&lt;code&gt;:Function&lt;/code&gt;[, options &lt;code&gt;:Object&lt;/code&gt;]) &lt;em&gt;- Attach an event handle which will be fired only once&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;on(elements&lt;code&gt;:HTMLElement(s)&lt;/code&gt;, events&lt;code&gt;:String(s)&lt;/code&gt;, fn&lt;code&gt;:Function&lt;/code&gt;[, options &lt;code&gt;:Object&lt;/code&gt;]) &lt;em&gt;- Attach an event handler function.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;off(elements&lt;code&gt;:HTMLElement(s)&lt;/code&gt;, event&lt;code&gt;:String(s)&lt;/code&gt;, fn&lt;code&gt;:Function&lt;/code&gt;[, options &lt;code&gt;:Object&lt;/code&gt;]) &lt;em&gt;- Remove an event handler.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;createElementFromString(html&lt;code&gt;:String&lt;/code&gt;)&lt;code&gt;:HTMLElement&lt;/code&gt; &lt;em&gt;- Creates an new HTML Element out of this string.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;eventPath(evt&lt;code&gt;:Event&lt;/code&gt;)&lt;code&gt;:[HTMLElement]&lt;/code&gt; &lt;em&gt;- A polyfill for the event-path event propery.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;createFromTemplate(str&lt;code&gt;:String&lt;/code&gt;) &lt;em&gt;- See &lt;a href=&quot;https://github.com/Simonwep/pickr/blob/master/src/js/lib/utils.js#L88&quot;&gt;inline doumentation&lt;/a&gt;.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;resolveElement(val&lt;code&gt;:String|HTMLElement&lt;/code&gt;) &lt;em&gt;- Resolves a &lt;code&gt;HTMLElement&lt;/code&gt;, supports &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; as shadow dom selector.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;adjustableInputNumbers(el&lt;code&gt;:InputElement&lt;/code&gt;, mapper&lt;code&gt;:Function&lt;/code&gt;) &lt;em&gt;- Creates the possibility to change the numbers in an inputfield via mouse scrolling. The mapper function takes three arguments: the matched number, an multiplier and the index of the match.&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Use this utils carefully, it&#39;s not for sure that they will stay forever!&lt;/p&gt; 
&lt;h2&gt;Static properties&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;version &lt;em&gt;- The current version.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;I18N_DEFAULTS &lt;em&gt;- i18n default values.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;DEFAULT_OPTIONS &lt;em&gt;- Default options (Do not override this property itself, only change properties of it!).&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;How do I initialize multiple pickr&#39;s? Can I access the instance via &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt;?&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;No, you can&#39;t. You need to keep track of your instance variables - pickr is (not yet) a web-component. The best option would be to create new elements via &lt;code&gt;document.createElement&lt;/code&gt; and directly pass it as &lt;code&gt;el&lt;/code&gt;. &lt;a href=&quot;https://jsfiddle.net/Simonwep/9ghk71c3/&quot;&gt;example&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;I want to use pickr in a form, how can I do that?&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can use &lt;code&gt;useAsButton: true&lt;/code&gt; and pass a reference (or selector) of your input-element as &lt;code&gt;el&lt;/code&gt;. Then you can update the input-element whenever a change was made. &lt;a href=&quot;https://jsfiddle.net/Simonwep/wL1zyqcd/&quot;&gt;example&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;I want to update options after mounting pickr, is that possible?&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Unfortunately not. The core-code of this project is rather old (over 2 years), and I made it in my early js-days - the widget is not able to dynamically re-render itself in that way. You have to destroy and re-initialize it.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you want to open a issue, create a Pull Request or simply want to know how you can run it on your local machine, please read the &lt;a href=&quot;https://github.com/Simonwep/pickr/blob/master/.github/CONTRIBUTING.md&quot;&gt;Contributing guide&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>badges/shields</title>
      <link>https://github.com/badges/shields</link>
      <description>&lt;p&gt;Concise, consistent, and legible badges in SVG and raster format&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is home to &lt;a href=&quot;https://shields.io/&quot;&gt;Shields.io&lt;/a&gt;, a service for concise, consistent, and legible badges in SVG and raster format, which can easily be included in GitHub readmes or any other web page. The service supports dozens of continuous integration services, package registries, distributions, app stores, social networks, code coverage services, and code analysis services. Every month it serves over 470 million images.&lt;/p&gt; 
&lt;p&gt;This repo hosts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://shields.io/&quot;&gt;Shields.io&lt;/a&gt; frontend and server code&lt;/li&gt; 
 &lt;li&gt;An &lt;a href=&quot;https://www.npmjs.com/package/badge-maker&quot;&gt;NPM library for generating badges&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/badges/shields/tree/master/badge-maker/README.md&quot;&gt;documentation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/badges/shields/tree/master/badge-maker/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/badges/shields/tree/master/spec&quot;&gt;badge design specification&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;code coverage percentage: &lt;img src=&quot;https://img.shields.io/badge/coverage-80%25-yellowgreen&quot; alt=&quot;coverage&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;stable release version: &lt;img src=&quot;https://img.shields.io/badge/version-1.2.3-blue&quot; alt=&quot;version&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;package manager release: &lt;img src=&quot;https://img.shields.io/badge/gem-2.2.0-blue&quot; alt=&quot;gem&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;status of third-party dependencies: &lt;img src=&quot;https://img.shields.io/badge/dependencies-out%20of%20date-orange&quot; alt=&quot;dependencies&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;static code analysis grade: &lt;img src=&quot;https://img.shields.io/badge/codacy-B-green&quot; alt=&quot;codacy&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://semver.org/&quot;&gt;SemVer&lt;/a&gt; version observance: &lt;img src=&quot;https://img.shields.io/badge/semver-2.0.0-blue&quot; alt=&quot;semver&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;amount of &lt;a href=&quot;https://liberapay.com/&quot;&gt;Liberapay&lt;/a&gt; donations per week: &lt;img src=&quot;https://img.shields.io/badge/receives-2.00%20USD%2Fweek-yellow&quot; alt=&quot;receives&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;Python package downloads: &lt;img src=&quot;https://img.shields.io/badge/downloads-13k%2Fmonth-brightgreen&quot; alt=&quot;downloads&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;Chrome Web Store extension rating: &lt;img src=&quot;https://img.shields.io/badge/rating-%E2%98%85%E2%98%85%E2%98%85%E2%98%85%E2%98%86-brightgreen&quot; alt=&quot;rating&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://uptimerobot.com&quot;&gt;Uptime Robot&lt;/a&gt; percentage: &lt;img src=&quot;https://img.shields.io/badge/uptime-100%25-brightgreen&quot; alt=&quot;uptime&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;http://shields.io/#your-badge&quot;&gt;Make your own badges!&lt;/a&gt; (Quick example: &lt;code&gt;https://img.shields.io/badge/left-right-f39f37&lt;/code&gt;)&lt;/p&gt; 
&lt;h3&gt;Quickstart&lt;/h3&gt; 
&lt;p&gt;Browse a &lt;a href=&quot;https://shields.io/&quot;&gt;complete list of badges&lt;/a&gt; and locate a particular badge by using the search bar or by browsing the categories. Click on the badge to fill in required data elements for that badge type (like your username or repo) and optionally customize (label, colors etc.). And it&#39;s ready for use!&lt;/p&gt; 
&lt;p&gt;Use the button at the bottom to copy your badge url or snippet, which can then be added to places like your GitHub readme files or other web pages.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Shields is a community project. We invite your participation through issues and pull requests! You can peruse the &lt;a href=&quot;https://raw.githubusercontent.com/badges/shields/master/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When adding or changing a service &lt;a href=&quot;https://github.com/badges/shields/blob/master/doc/service-tests.md&quot;&gt;please add tests&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This project has quite a backlog of suggestions! If you&#39;re new to the project, maybe you&#39;d like to open a pull request to address one of them.&lt;/p&gt; 
&lt;p&gt;You can read a &lt;a href=&quot;https://raw.githubusercontent.com/badges/shields/master/doc/TUTORIAL.md&quot;&gt;tutorial on how to add a badge&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/badges/shields/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/badges/shields/good%20first%20issue&quot; alt=&quot;GitHub issues by-label&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Node 12 or later. You can use the &lt;a href=&quot;https://nodejs.org/en/download/package-manager/&quot;&gt;package manager&lt;/a&gt; of your choice. Tests need to pass in Node 12 and 14.&lt;/li&gt; 
 &lt;li&gt;Clone this repository.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;npm ci&lt;/code&gt; to install the dependencies.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;npm start&lt;/code&gt; to start the badge server and the frontend dev server.&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;http://localhost:3000/&lt;/code&gt; to view the frontend.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;When server source files change, the badge server should automatically restart itself (using &lt;a href=&quot;https://nodemon.io/&quot;&gt;nodemon&lt;/a&gt;). When the frontend files change, the frontend dev server (&lt;code&gt;gatsby dev&lt;/code&gt;) should also automatically reload. However the badge definitions are built only before the server first starts. To regenerate those, either run &lt;code&gt;npm run defs&lt;/code&gt; or manually restart the server.&lt;/p&gt; 
&lt;p&gt;To debug a badge from the command line, run &lt;code&gt;npm run badge -- /npm/v/nock&lt;/code&gt;. It also works with full URLs like &lt;code&gt;npm run badge -- https://img.shields.io/npm/v/nock&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;npm run debug:server&lt;/code&gt; to start server in debug mode. &lt;a href=&quot;https://github.com/Microsoft/vscode-recipes/tree/master/nodemon&quot;&gt;This recipe&lt;/a&gt; shows how to debug Node.js application in &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Shields has experimental support for &lt;a href=&quot;https://www.gitpod.io/&quot;&gt;Gitpod&lt;/a&gt;, a pre-configured development environment that runs in your browser. To use Gitpod, click the button below and sign in with GitHub. Gitpod also offers a browser add-on, though it is not required. Please report any Gitpod bugs, questions, or suggestions in issue &lt;a href=&quot;https://github.com/badges/shields/issues/2772&quot;&gt;#2772&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitpod.io/#https://github.com/badges/shields&quot;&gt;&lt;img src=&quot;https://gitpod.io/button/open-in-gitpod.svg&quot; alt=&quot;Edit with Gitpod&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://glebbahmutov.com/blog/snapshot-testing/&quot;&gt;Snapshot tests&lt;/a&gt; ensure we don&#39;t inadvertently make changes that affect the SVG or JSON output. When deliberately changing the output, run &lt;code&gt;SNAPSHOT_DRY=1 npm run test:package&lt;/code&gt; to preview changes to the saved snapshots, and &lt;code&gt;SNAPSHOT_UPDATE=1 npm run test:package&lt;/code&gt; to update them.&lt;/p&gt; 
&lt;p&gt;The server can be configured to use &lt;a href=&quot;https://sentry.io/&quot;&gt;Sentry&lt;/a&gt; (&lt;a href=&quot;https://raw.githubusercontent.com/badges/shields/master/doc/self-hosting.md#sentry&quot;&gt;configuration&lt;/a&gt;) and &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt; (&lt;a href=&quot;https://raw.githubusercontent.com/badges/shields/master/doc/self-hosting.md#prometheus&quot;&gt;configuration&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Daily tests, including a full run of the service tests and overall code coverage, are run via &lt;a href=&quot;https://github.com/badges/daily-tests&quot;&gt;badges/daily-tests&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Hosting your own server&lt;/h2&gt; 
&lt;p&gt;There is documentation about &lt;a href=&quot;https://raw.githubusercontent.com/badges/shields/master/doc/self-hosting.md&quot;&gt;hosting your own server&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;History&lt;/h2&gt; 
&lt;p&gt;b.adge.me was the original website for this service. Heroku back then had a thing which made it hard to use a toplevel domain with it, hence the odd domain. It used code developed in 2013 from a library called &lt;a href=&quot;https://github.com/badges/gh-badges&quot;&gt;gh-badges&lt;/a&gt;, both developed by &lt;a href=&quot;https://github.com/espadrine&quot;&gt;Thadd√©e Tyl&lt;/a&gt;. The project merged with shields.io by making it use the b.adge.me code and closed b.adge.me.&lt;/p&gt; 
&lt;p&gt;The original badge specification was developed in 2013 by &lt;a href=&quot;https://github.com/olivierlacan&quot;&gt;Olivier Lacan&lt;/a&gt;. It was inspired by the Travis CI and similar badges (there were a lot fewer, back then). In 2014 Thadd√©e Tyl redesigned it with help from a Travis CI employee and convinced everyone to switch to it. The old design is what today is called the plastic style; the new one is the flat style.&lt;/p&gt; 
&lt;p&gt;You can read more about &lt;a href=&quot;https://github.com/h5bp/lazyweb-requests/issues/150&quot;&gt;the project&#39;s inception&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/badges/shields/master/spec/motivation.md&quot;&gt;the motivation of the SVG badge specification&lt;/a&gt;, and &lt;a href=&quot;https://raw.githubusercontent.com/badges/shields/master/spec/SPECIFICATION.md&quot;&gt;the specification itself&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Project leaders&lt;/h2&gt; 
&lt;p&gt;Maintainers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/calebcartwright&quot;&gt;calebcartwright&lt;/a&gt; (core team)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/chris48s&quot;&gt;chris48s&lt;/a&gt; (core team)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Daniel15&quot;&gt;Daniel15&lt;/a&gt; (core team)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/paulmelnikow&quot;&gt;paulmelnikow&lt;/a&gt; (core team)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/platan&quot;&gt;platan&lt;/a&gt; (core team)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PyvesB&quot;&gt;PyvesB&lt;/a&gt; (core team)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RedSparr0w&quot;&gt;RedSparr0w&lt;/a&gt; (core team)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Operations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/calebcartwright&quot;&gt;calebcartwright&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/chris48s&quot;&gt;chris48s&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/paulmelnikow&quot;&gt;paulmelnikow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PyvesB&quot;&gt;PyvesB&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Alumni:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/espadrine&quot;&gt;espadrine&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/olivierlacan&quot;&gt;olivierlacan&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Related projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/badges/poser&quot;&gt;poser PHP library&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/google/pybadges&quot;&gt;pybadges python library&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;All assets and code are under the &lt;a href=&quot;https://raw.githubusercontent.com/badges/shields/master/LICENSE&quot;&gt;CC0 LICENSE&lt;/a&gt; and in the public domain unless specified otherwise.&lt;/p&gt; 
&lt;p&gt;The assets in &lt;code&gt;logo/&lt;/code&gt; are trademarks of their respective companies and are under their terms and license.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Thanks to the people and companies who donate money, services or time to keep the project running. &lt;a href=&quot;https://shields.io/community&quot;&gt;https://shields.io/community&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ZHDeveloper/JD_Sign_Action</title>
      <link>https://github.com/ZHDeveloper/JD_Sign_Action</link>
      <description>&lt;p&gt;Âü∫‰∫égithub actionsÁöÑ‰∫¨‰∏úÁ≠æÂà∞„ÄÅÈ¢Ü‰∫¨Ë±Ü&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Âü∫‰∫égithub actionÁöÑ‰∫¨‰∏úËá™Âä®ÂåñÁ≠æÂà∞&lt;/h1&gt; 
&lt;h2&gt;‰ªãÁªç&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‰ΩøÁî®NobyDa ‚Äú‰∫¨‰∏úÂ§öÂêà‰∏ÄÁ≠æÂà∞ËÑöÊú¨‚Äù‰∏∫Âü∫Á°ÄÔºåÁßªÊ§çÂà∞github actionsËá™Âä®ÂåñÊâßË°å„ÄÇ&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Ëß¶ÂèëÊñπÂºè&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;ÁÇπ‰∫Æ&lt;code&gt;Star&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;ÂáåÊô®4ÁÇπÂÆöÊó∂ÊâßË°å&lt;/li&gt; 
 &lt;li&gt;Ëá™ÂÆö‰πâÔºö.github/workflows/work.yaml ÁºñËæë&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Ê≥®ÊÑèÈóÆÈ¢ò&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;ÈóÆÈ¢ò‰∏ÄÔºö&lt;a href=&quot;https://github.com/ZHDeveloper/JD_Sign_Action/issues/3&quot;&gt;È°πÁõÆForkÂêéÂÆöÊó∂‰ªªÂä°Ê≤°ÊúâÊâßË°å&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;1„ÄÅÂª∫ËÆÆ‰øÆÊîπREADME.mdÊèê‰∫§Ôºå‰ª•Ëß¶ÂèëÂÆöÊó∂‰ªªÂä°„ÄÇ&lt;/p&gt; 
  &lt;p&gt;2„ÄÅÂÆöÊó∂‰ªªÂä°ÁöÑÊó∂Èó¥ÊòØUTCÊó∂Èó¥ÔºåË∑ü‰∏≠ÂõΩÊó∂Èó¥Êúâ8Â∞èÊó∂ÁöÑÊó∂Â∑Æ„ÄÇ&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;ÈóÆÈ¢ò‰∫åÔºö‰∫¨‰∏úCookieÁöÑÊúâÊïàÊúü&lt;/strong&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;Â∞±ÊàëËá™Â∑±È°πÁõÆ‰∏≠ÁöÑ‰ΩøÁî®ÊÉÖÂÜµËÄåË®ÄÔºå‰∏Ä‰∏™ÊúàÊúâÊïàÊúü„ÄÇ&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;‰ΩøÁî®Áî®Ê≥ï&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;ÁÇπÂáªÂè≥‰∏äËßí &lt;code&gt;Fork&lt;/code&gt; È°πÁõÆÔºõ&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Secrets&lt;/code&gt; ‰∏≠Ê∑ªÂä†‰∫¨‰∏úCookie„ÄÅServerÈÖ±SCKEYÔºõ 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;JD_COOKIE&lt;/code&gt;ÔºöË¥¶Âè∑1Cookie&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;JD_DUAL_COOKIE&lt;/code&gt;ÔºöË¥¶Âè∑2Cookie(ÈÄâÂ°´)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PUSH_KEY&lt;/code&gt;ÔºöServerÈÖ±SCKEY&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;ÁÇπÂáª&lt;code&gt;Star&lt;/code&gt;Ôºå‰ªªÂä°‰ºöËá™Âä®ÊâßË°åÔºåËøêË°åËøõÂ∫¶ÂíåÁªìÊûúÂèØ‰ª•Âú®&lt;code&gt;Actions&lt;/code&gt;È°µÈù¢Êü•ÁúãÔºõ&lt;/li&gt; 
 &lt;li&gt;ÂΩì‰ªªÂä°ËøêË°åÂÆåÊàêÊó∂Ôºå‰ºöÂ∞ÜËøêË°åÁªìÊûúÂíåÈîôËØØ‰ø°ÊÅØÊâìÂåÖÂà∞&lt;code&gt;Artifacts&lt;/code&gt;ÔºåÂèØËá™Ë°å‰∏ãËΩΩÊü•ÁúãÔºõ&lt;/li&gt; 
 &lt;li&gt;Â¶ÇÊûúÈÖçÁΩÆ‰∫ÜServerÈÖ±ÔºåËøêË°åÁªìÊûú‰ºöÊé®ÈÄÅÂà∞ÂæÆ‰ø°Ôºõ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Ëé∑Âèñ‰∫¨‰∏úcookie&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;‰ΩøÁî®È°πÁõÆ‰∏≠ÁöÑChromeÊèí‰ª∂Ôºö&lt;code&gt;JDCookie&lt;/code&gt;Ôºõ&lt;/li&gt; 
 &lt;li&gt;Chrome‰∏≠ÊãìÂ±ïÁ®ãÂ∫èÂºÄÂêØ&lt;code&gt;ÂºÄÂèëËÄÖÊ®°Âºè&lt;/code&gt;Ôºõ&lt;/li&gt; 
 &lt;li&gt;ÁÇπÂáª&lt;code&gt;Âä†ËΩΩÂ∑≤Ëß£ÂéãÁöÑÊãìÂ±ïÁ®ãÂ∫è&lt;/code&gt;ÔºåÈÄâÊã©&lt;code&gt;JDCookie&lt;/code&gt;ÁõÆÂΩïÔºõ&lt;/li&gt; 
 &lt;li&gt;ÁôªÂΩï&lt;a href=&quot;https://bean.m.jd.com/&quot;&gt;È¢Ü‰∫¨Ë±Ü&lt;/a&gt;Ôºõ&lt;/li&gt; 
 &lt;li&gt;ÁÇπÂáª&lt;code&gt;JDCookie&lt;/code&gt;Âç≥ÂèØÊã∑Ë¥ù‰∫¨‰∏úcookieÔºõ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Ëé∑ÂèñServerÈÖ±SCKEY&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;github ÊéàÊùÉÁôªÂΩï&lt;a href=&quot;http://sc.ftqq.com/3.version&quot;&gt;ServerÈÖ±&lt;/a&gt;ÂÆòÁΩëÔºõ&lt;/li&gt; 
 &lt;li&gt;ËèúÂçïÊ†è&lt;code&gt;ÂæÆ‰ø°Êé®ÈÄÅ&lt;/code&gt;Êâ´ÊèèÁªëÂÆöÂæÆ‰ø°Ôºõ&lt;/li&gt; 
 &lt;li&gt;ËèúÂçïÊ†è&lt;code&gt;ÂèëÈÄÅÊ∂àÊÅØ&lt;/code&gt;Êã∑Ë¥ùSCKEYÔºõ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ÊïàÊûúÊà™Âõæ&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ZHDeveloper/JD_Sign_Action/master/images/WechatIMG3.jpeg&quot; alt=&quot;WechatIMG3&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ZHDeveloper/JD_Sign_Action/master/images/WechatIMG4.jpeg&quot; alt=&quot;WechatIMG4&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;ÂèÇËÄÉÈ°πÁõÆ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/NobyDa/Script/blob/master/JD-DailyBonus/JD_DailyBonus.js&quot;&gt;NobyDa/Script/JD-DailyBonus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ruicky/jd_sign_bot&quot;&gt;ruicky/jd-sign-bot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jerrykuku/luci-app-jd-dailybonus&quot;&gt;jerrykuku/luci-app-jd-dailybonus&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>electron-react-boilerplate/electron-react-boilerplate</title>
      <link>https://github.com/electron-react-boilerplate/electron-react-boilerplate</link>
      <description>&lt;p&gt;A Foundation for Scalable Cross-Platform Apps&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/electron-react-boilerplate/electron-react-boilerplate/actions&quot;&gt;&lt;img src=&quot;https://github.com/electron-react-boilerplate/electron-react-boilerplate/workflows/Test/badge.svg&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/electron-react-boilerplate/electron-react-boilerplate&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/electron-react-boilerplate/electron-react-boilerplate.svg&quot; alt=&quot;Dependency Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/electron-react-boilerplate/electron-react-boilerplate?type=dev&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/dev/electron-react-boilerplate/electron-react-boilerplate.svg?label=devDependencies&quot; alt=&quot;DevDependency Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/electron-react-boilerplate/electron-react-boilerplate/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/tag/electron-react-boilerplate/electron-react-boilerplate.svg?label=version&quot; alt=&quot;Github Tag&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/electron-react-boilerplate/electron-react-boilerplate/master/#backers&quot;&gt;&lt;img src=&quot;https://opencollective.com/electron-react-boilerplate/backers/badge.svg&quot; alt=&quot;OpenCollective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/electron-react-boilerplate/electron-react-boilerplate/master/#sponsors&quot;&gt;&lt;img src=&quot;https://opencollective.com/electron-react-boilerplate/sponsors/badge.svg&quot; alt=&quot;OpenCollective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/electron-react-boilerplate/electron-react-boilerplate/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues/electron-react-boilerplate/electron-react-boilerplate/good%20first%20issue.svg?label=good%20first%20issues&quot; alt=&quot;Good first issues open&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/tagged/electron-react-boilerplate&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/stackoverflow-electron_react_boilerplate-blue.svg&quot; alt=&quot;StackOverflow&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;If you have installation or compilation issues with this project, please see &lt;a href=&quot;https://github.com/electron-react-boilerplate/electron-react-boilerplate/issues/400&quot;&gt;our debugging guide&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;First, clone the repo via git and install dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone --depth 1 --single-branch https://github.com/electron-react-boilerplate/electron-react-boilerplate.git your-project-name
cd your-project-name
yarn
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Starting Development&lt;/h2&gt; 
&lt;p&gt;Start the app in the &lt;code&gt;dev&lt;/code&gt; environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Packaging for Production&lt;/h2&gt; 
&lt;p&gt;To package apps for the local platform:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn package
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Docs&lt;/h2&gt; 
&lt;p&gt;See our &lt;a href=&quot;https://electron-react-boilerplate.js.org/docs/installation&quot;&gt;docs and guides here&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Donations&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Donations will ensure the following:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;üî® Long term maintenance of the project&lt;/li&gt; 
 &lt;li&gt;üõ£ Progress on the &lt;a href=&quot;https://electron-react-boilerplate.js.org/docs/roadmap&quot;&gt;roadmap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üêõ Quick responses to bug reports and help requests&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Backers&lt;/h2&gt; 
&lt;p&gt;Support us with a monthly donation and help us continue our activities. [&lt;a href=&quot;https://opencollective.com/electron-react-boilerplate#backer&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Become a sponsor and get your logo on our README on Github with a link to your site. [&lt;a href=&quot;https://opencollective.com/electron-react-boilerplate-594#sponsor&quot;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Maintainers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/amilajack&quot;&gt;Amila Welihinda&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jooohhn&quot;&gt;John Tran&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/chentsulin&quot;&gt;C. T. Lin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jhen0409&quot;&gt;Jhen-Jie Hong&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT ¬© &lt;a href=&quot;https://github.com/electron-react-boilerplate&quot;&gt;Electron React Boilerplate&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ColorlibHQ/AdminLTE</title>
      <link>https://github.com/ColorlibHQ/AdminLTE</link>
      <description>&lt;p&gt;AdminLTE - Free admin dashboard template based on Bootstrap 4&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/admin-lte&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/admin-lte/latest.svg&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://packagist.org/packages/almasaeed2010/adminlte&quot;&gt;&lt;img src=&quot;https://img.shields.io/packagist/v/almasaeed2010/adminlte.svg&quot; alt=&quot;Packagist&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cdnjs.com/libraries/admin-lte&quot;&gt;&lt;img src=&quot;https://img.shields.io/cdnjs/v/admin-lte.svg&quot; alt=&quot;CDNJS&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitpod.io/from-referrer/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&quot; alt=&quot;Gitpod Ready-to-Code&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;AdminLTE&lt;/strong&gt; is a fully responsive administration template. Based on &lt;strong&gt;&lt;a href=&quot;https://getbootstrap.com/&quot;&gt;Bootstrap 4.5&lt;/a&gt;&lt;/strong&gt; framework and also the JS/jQuery plugin. Highly customizable and easy to use. Fits many screen resolutions from small mobile devices to large desktops.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Preview on &lt;a href=&quot;https://adminlte.io/themes/v3&quot;&gt;AdminLTE.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Looking for Premium Templates?&lt;/h2&gt; 
&lt;p&gt;AdminLTE.io just opened a new premium templates page. Hand picked to ensure the best quality and the most affordable prices. Visit &lt;a href=&quot;https://adminlte.io/premium&quot;&gt;https://adminlte.io/premium&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://adminlte.io/AdminLTE3.png&quot; alt=&quot;&amp;quot;AdminLTE Presentation&amp;quot;&quot; title=&quot;AdminLTE Presentation&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;AdminLTE&lt;/strong&gt; has been carefully coded with clear comments in all of its JS, SCSS and HTML files. SCSS has been used to increase code customizability.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;There are multiple ways to install AdminLTE.&lt;/p&gt; 
&lt;h3&gt;Download &amp;amp; Changelog:&lt;/h3&gt; 
&lt;p&gt;Download from GitHub latest release &lt;a href=&quot;https://github.com/ColorlibHQ/AdminLTE/releases/latest&quot;&gt;AdminLTE 3&lt;/a&gt;. Visit the &lt;a href=&quot;https://github.com/ColorlibHQ/AdminLTE/releases&quot;&gt;releases&lt;/a&gt; page to view the changelog. Legacy Releases are &lt;a href=&quot;https://github.com/ColorlibHQ/AdminLTE/releases/tag/v2.4.18&quot;&gt;AdminLTE 2&lt;/a&gt; / &lt;a href=&quot;https://github.com/ColorlibHQ/AdminLTE/releases/tag/1.3.1&quot;&gt;AdminLTE 1&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using The Command Line:&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Important Note&lt;/strong&gt;: To install it via npm/Yarn, you need at least Node.js 10 or higher.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Via npm&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install admin-lte@^3.0 --save
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Via Yarn&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add admin-lte@^3.0
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Via Composer&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require &quot;almasaeed2010/adminlte=~3.0&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Via Git&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Clone to your machine&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/ColorlibHQ/AdminLTE.git
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Visit the &lt;a href=&quot;https://adminlte.io/docs/3.1/&quot;&gt;online documentation&lt;/a&gt; for the most updated guide. Information will be added on a weekly basis.&lt;/p&gt; 
&lt;h2&gt;Browsers support&lt;/h2&gt; 
&lt;p&gt;| &lt;a href=&quot;http://godban.github.io/browsers-support-badges/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;IE / Edge | &lt;a href=&quot;http://godban.github.io/browsers-support-badges/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;Firefox | &lt;a href=&quot;http://godban.github.io/browsers-support-badges/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;Chrome | &lt;a href=&quot;http://godban.github.io/browsers-support-badges/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;Safari | &lt;a href=&quot;http://godban.github.io/browsers-support-badges/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;iOS Safari | &lt;a href=&quot;http://godban.github.io/browsers-support-badges/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;Samsung | &lt;a href=&quot;http://godban.github.io/browsers-support-badges/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;Opera | &lt;a href=&quot;http://godban.github.io/browsers-support-badges/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;Vivaldi | &lt;a href=&quot;http://godban.github.io/browsers-support-badges/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;Electron | | --------- | --------- | --------- | --------- | --------- | --------- | --------- | --------- | --------- | | IE10, IE11, Edge| last 2 versions| last 2 versions| last 2 versions| last 2 versions| last 2 versions| last 2 versions| last 2 versions| last 2 versions&lt;/p&gt; 
&lt;h2&gt;How to Contribute&lt;/h2&gt; 
&lt;p&gt;Contributions are always &lt;strong&gt;welcome and recommended&lt;/strong&gt;! Here is how for beginner&#39;s: &lt;a href=&quot;https://youtu.be/GbqSvJs-6W4&quot;&gt;Get started with open source click here&lt;/a&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Contribution Requirements :&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;When you contribute, you agree to give a non-exclusive license to AdminLTE.io to use that contribution in any context as we (AdminLTE.io) see appropriate.&lt;/li&gt; 
   &lt;li&gt;If you use content provided by another party, it must be appropriately licensed using an &lt;a href=&quot;https://opensource.org/licenses&quot;&gt;open source&lt;/a&gt; license.&lt;/li&gt; 
   &lt;li&gt;Contributions are only accepted through GitHub pull requests.&lt;/li&gt; 
   &lt;li&gt;Finally, contributed code must work in all supported browsers (see above for browser support).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Installation :&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Fork the repository (&lt;a href=&quot;https://help.github.com/articles/fork-a-repo/&quot;&gt;here is the guide&lt;/a&gt;).&lt;/li&gt; 
   &lt;li&gt;Clone to your machine&lt;/li&gt; 
  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/YOUR_USERNAME/AdminLTE.git
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a new branch&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Compile dist files (Development) :&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;To compile the dist files you need Node.js 10 or higher/npm (node package manager)&lt;/li&gt; 
   &lt;li&gt;Delete ./package-lock.json file&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt; (install npm deps)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;npm run dev&lt;/code&gt; (developer mode, autocompile with browsersync support for live demo)&lt;/li&gt; 
   &lt;li&gt;Make your changes only in ./buid Folder OR package.json OR ./dist/js/demo.js OR in any html files which nessary to contribute&lt;/li&gt; 
   &lt;li&gt;Do not changes in ./dist/css/ AND ./dist/js/ Because its compiled files&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;npm run production&lt;/code&gt; (compile css/js files and test every pages are perfectly working fine, before creating pull request)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create a pull request&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Online one-click setup for contributing&lt;/h3&gt; 
&lt;p&gt;You can use Gitpod(an online IDE which is free for Open Source) for working on issues or making Prs. With a single click it will launch a workspace and automatically:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;clone the &lt;code&gt;AdminLTE&lt;/code&gt; repo.&lt;/li&gt; 
 &lt;li&gt;install the dependencies.&lt;/li&gt; 
 &lt;li&gt;run &lt;code&gt;yarn dev&lt;/code&gt; to start the server.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitpod.io/from-referrer/&quot;&gt;&lt;img src=&quot;https://gitpod.io/button/open-in-gitpod.svg&quot; alt=&quot;Open in Gitpod&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Compile dist files&lt;/h3&gt; 
&lt;p&gt;To compile the dist files you need Node.js/npm, clone/download the repo then:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt; (install npm deps)&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Optional:&lt;/em&gt; &lt;code&gt;npm run dev&lt;/code&gt; (developer mode, autocompile with browsersync support for live demo)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npm run production&lt;/code&gt; (compile css/js files)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;AdminLTE is an open source project by &lt;a href=&quot;https://adminlte.io&quot;&gt;AdminLTE.io&lt;/a&gt; that is licensed under &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT&lt;/a&gt;. AdminLTE.io reserves the right to change the license of future releases.&lt;/p&gt; 
&lt;h2&gt;Image Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.pixeden.com/psd-web-elements/flat-responsive-showcase-psd&quot;&gt;Pixeden&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.graphicsfuel.com/2013/02/13-high-resolution-blur-backgrounds/&quot;&gt;Graphicsfuel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pickaface.net/&quot;&gt;Pickaface&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://unsplash.com/&quot;&gt;Unsplash&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://uifaces.com/&quot;&gt;Uifaces&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>iptv-org/iptv</title>
      <link>https://github.com/iptv-org/iptv</link>
      <description>&lt;p&gt;Collection of 5000+ publicly available IPTV channels from all over the world&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IPTV&lt;/h1&gt; 
&lt;p&gt;Collection of 5000+ publicly available IPTV channels from all over the world.&lt;/p&gt; 
&lt;p&gt;Internet Protocol television (IPTV) is the delivery of television content over Internet Protocol (IP) networks.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To watch IPTV you just need to paste this link &lt;code&gt;https://iptv-org.github.io/iptv/index.m3u&lt;/code&gt; to any player with support M3U-playlists.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iptv-org/iptv/master/preview.png&quot; alt=&quot;VLC Network Panel&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Also you can instead use one of these playlists:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;https://iptv-org.github.io/iptv/index.country.m3u&lt;/code&gt; (grouped by country)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;https://iptv-org.github.io/iptv/index.category.m3u&lt;/code&gt; (grouped by category)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;https://iptv-org.github.io/iptv/index.language.m3u&lt;/code&gt; (grouped by language)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Or select one of the playlists from the list below.&lt;/p&gt; 
&lt;h2&gt;Playlists by category&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Playlists by language&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Playlists by country&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;For Developers&lt;/h2&gt; 
&lt;p&gt;In addition to the above methods, you can also get a list of all available channels in JSON format.&lt;/p&gt; 
&lt;p&gt;To do this, you just have to make a GET request to:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;https://iptv-org.github.io/iptv/channels.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If successful, you should get the following response:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[
  ...
  {
    &quot;name&quot;: &quot;CNN&quot;,
    &quot;logo&quot;: &quot;https://i.imgur.com/ilZJT5s.png&quot;,
    &quot;url&quot;: &quot;http://ott-cdn.ucom.am/s27/index.m3u8&quot;,
    &quot;category&quot;: &quot;News&quot;,
    &quot;language&quot;: [
      {
        &quot;code&quot;: &quot;eng&quot;,
        &quot;name&quot;: &quot;English&quot;
      }
    ],
    &quot;country&quot;: {
      &quot;code&quot;: &quot;us&quot;,
      &quot;name&quot;: &quot;United States&quot;
    },
    &quot;tvg&quot;: {
      &quot;id&quot;: &quot;cnn.us&quot;,
      &quot;name&quot;: &quot;CNN&quot;,
      &quot;url&quot;: &quot;http://epg.streamstv.me/epg/guide-usa.xml.gz&quot;
    }
  },
  ...
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;p&gt;You can find links to various IPTV related resources in this repository &lt;a href=&quot;https://github.com/iptv-org/awesome-iptv&quot;&gt;iptv-org/awesome-iptv&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Please make sure to read the &lt;a href=&quot;https://raw.githubusercontent.com/iptv-org/iptv/master/.github/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt; before making a pull request.&lt;/p&gt; 
&lt;p&gt;If you find an error or have any suggestions on how to organize a playlist, please send an &lt;a href=&quot;https://github.com/iptv-org/iptv/issues&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Legal&lt;/h2&gt; 
&lt;p&gt;No video files are stored in this repository. The repository simply contains user-submitted links to publicly available video stream URLs, which to the best of our knowledge have been intentionally made publicly by the copyright holders. If any links in these playlists infringe on your rights as a copyright holder, they may be removed by sending a pull request or opening an issue.&lt;/p&gt; 
&lt;p&gt;However, note that we have &lt;strong&gt;no control&lt;/strong&gt; over the destination of the link, and just removing the link from the playlist will not remove its contents from the web. Note that linking does not directly infringe copyright because no copy is made on the site providing the link, and thus this is &lt;strong&gt;not&lt;/strong&gt; a valid reason to send a DMCA notice to GitHub. To remove this content from the web, you should contact the web host that&#39;s actually hosting the content (&lt;strong&gt;not&lt;/strong&gt; GitHub, nor the maintainers of this repository).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fossasia/open-event-frontend</title>
      <link>https://github.com/fossasia/open-event-frontend</link>
      <description>&lt;p&gt;The frontend for the Open Event API Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open Event Frontend&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fossasia/open-event-frontend/development/docs/images/Frontend_Branding.png&quot; alt=&quot;Open Event Frontend&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/fossasia/open-event-frontend/actions?query=workflow%3Aci&quot;&gt;&lt;img src=&quot;https://github.com/fossasia/open-event-frontend/workflows/CI/badge.svg?branch=development&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.netlify.com/sites/open-event/deploys&quot;&gt;&lt;img src=&quot;https://img.shields.io/netlify/89d57fdc-826c-400b-af13-c542e9513f62&quot; alt=&quot;Netlify&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.codacy.com/app/fossasia/open-event-frontend?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=fossasia/open-event-frontend&amp;amp;utm_campaign=Badge_Grade&quot;&gt;&lt;img src=&quot;https://api.codacy.com/project/badge/Grade/0d51cf60fc734d3699fd6eff6054e483&quot; alt=&quot;Codacy Badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/fossasia/open-event-frontend&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/fossasia/open-event-frontend/branch/development/graph/badge.svg&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://snyk.io/test/github/fossasia/open-event-frontend&quot;&gt;&lt;img src=&quot;https://snyk.io/test/github/fossasia/open-event-frontend/badge.svg&quot; alt=&quot;Known Vulnerabilities&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hosted.weblate.org/projects/open-event/frontend/&quot;&gt;&lt;img src=&quot;https://hosted.weblate.org/widgets/open-event/-/frontend/svg-badge.svg&quot; alt=&quot;Weblate&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/fossasia/open-event-frontend&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-on%20gitter-ff006f.svg?style=flat-square&quot; alt=&quot;Gitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://groups.google.com/forum/#!forum/open-event&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Mailing-List-red.svg&quot; alt=&quot;Mailing&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/eventyay&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/eventyay.svg?style=social&amp;amp;label=Follow&amp;amp;maxAge=2592000?style=flat-square&quot; alt=&quot;Twitter Follow&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The front end for the &lt;strong&gt;Open Event Server&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://heroku.com/deploy&quot;&gt;&lt;img src=&quot;https://www.herokucdn.com/deploy/button.svg&quot; alt=&quot;Deploy&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;API Documentation:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Every installation of the &lt;strong&gt;Open Event Server&lt;/strong&gt; project includes API docs, (e.g. here on the test install &lt;a href=&quot;https://open-event-api.herokuapp.com&quot;&gt;https://open-event-api.herokuapp.com&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;A hosted version of the API docs is available in the &lt;code&gt;gh-pages&lt;/code&gt; branch of the &lt;strong&gt;Open Event Server&lt;/strong&gt; repository at &lt;a href=&quot;http://dev.eventyay.com/api/v1&quot;&gt;http://dev.eventyay.com/api/v1&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;p&gt;Please join our &lt;a href=&quot;https://groups.google.com/forum/#!forum/open-event&quot;&gt;Mailing list&lt;/a&gt; or &lt;a href=&quot;https://gitter.im/fossasia/open-event-frontend&quot;&gt;chat channel&lt;/a&gt; to get in touch with the developers.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;The Open Event Frontend can be easily deployed on a variety of platforms. Detailed platform specific instructions have been provided below.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/fossasia/open-event-frontend/development/docs/installation/local.md&quot;&gt;Local Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/fossasia/open-event-frontend/development/docs/installation/Publish-to-GitHub-Pages.md&quot;&gt;Publish to GitHub Pages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/fossasia/open-event-frontend/development/docs/installation/docker.md&quot;&gt;Running in Docker&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Running / Development&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/370458?speed=5&amp;amp;autoplay=1&quot;&gt;Click to see installation video&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Please follow &lt;a href=&quot;https://raw.githubusercontent.com/fossasia/open-event-frontend/development/docs/installation/local.md#steps&quot;&gt;installation steps&lt;/a&gt; listed above carefully before running&lt;/p&gt; 
&lt;p&gt;Unfortunately, no one reads the note above, so please just run the following commands when setting up for the first time:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cp .env.example .env&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;yarn l10n:generate&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Running:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;yarn start&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Visit your app at &lt;a href=&quot;http://localhost:4200&quot;&gt;http://localhost:4200&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Code Generators&lt;/h3&gt; 
&lt;p&gt;Make use of the many generators for code, try &lt;code&gt;ember help generate&lt;/code&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;Running Tests&lt;/h3&gt; 
&lt;p&gt;This project has acceptance, integration and unit tests located inside the &lt;code&gt;tests/&lt;/code&gt; folder.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;yarn test&lt;/code&gt; - CLI output&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;yarn test --server&lt;/code&gt; - Live browser preview and console access&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Building&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;yarn build&lt;/code&gt; (development)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;yarn build -prod&lt;/code&gt; (production)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Deployments, Docker images and Releases&lt;/h2&gt; 
&lt;h3&gt;Deployments&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Master branch&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The master branch of open-event-frontend gets deployed in a production environment at &lt;a href=&quot;https://eventyay.com&quot;&gt;https://eventyay.com&lt;/a&gt; It consumes the API exposed by master branch deployment of open event server, hosted at &lt;a href=&quot;https://api.eventyay.com&quot;&gt;https://api.eventyay.com&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Development branch&lt;/h4&gt; 
&lt;p&gt;The &lt;strong&gt;development&lt;/strong&gt; branch of open-event-frontend gets deployed at &lt;a href=&quot;https://open-event-frontend.now.sh/&quot;&gt;https://open-event-frontend.now.sh/&lt;/a&gt; It consumes the API exposed by development branch of open event server, hosted at &lt;a href=&quot;https://open-event-api-dev.herokuapp.com&quot;&gt;https://open-event-api-dev.herokuapp.com&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Release Cycle&lt;/h3&gt; 
&lt;p&gt;Stable versions will be released periodically, starting from version 1.0.0 when open-event-frontend went into production. Version names will follow &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Docker Hub Images&lt;/h3&gt; 
&lt;p&gt;Docker images hosted on &lt;a href=&quot;https://cloud.docker.com/u/eventyay/repository/docker/eventyay/open-event-frontend&quot;&gt;open-event-frontend repository&lt;/a&gt; under eventyay organisation on docker hub are updated for each push on master and development branch. Separate tags for each version release are also maintained. They are as follows:&lt;/p&gt; 
&lt;p&gt;| Branch/Release | Image | | --------------- | ---------------------------------------- | | Master | eventyay/open-event-frontend:latest | | Development | eventyay/open-event-frontend:development | | Version(vx.y.z) | eventyay/open-event-frontend:vx.y.z |&lt;/p&gt; 
&lt;h2&gt;Further Reading / Useful Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://emberjs.com/&quot;&gt;ember.js&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://ember-cli.com/&quot;&gt;ember-cli&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://semantic-ui.com/&quot;&gt;Semantic UI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://semantic-org.github.io/Semantic-UI-Ember/&quot;&gt;Semantic-UI-Ember&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Development Browser Extensions&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi&quot;&gt;ember inspector for chrome&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/&quot;&gt;ember inspector for firefox&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions Best Practices&lt;/h2&gt; 
&lt;h3&gt;Commits&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Write clear meaningful git commit messages (Do read &lt;a href=&quot;https://chris.beams.io/posts/git-commit/&quot;&gt;https://chris.beams.io/posts/git-commit/&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Make sure your PR&#39;s description contains GitHub&#39;s special keyword references that automatically close the related issue when the PR is merged. (More info at &lt;a href=&quot;https://github.com/blog/1506-closing-issues-via-pull-requests&quot;&gt;https://github.com/blog/1506-closing-issues-via-pull-requests&lt;/a&gt; )&lt;/li&gt; 
 &lt;li&gt;When you make very minor changes to a PR of yours (like for example fixing a failing Travis build or some small style corrections or minor changes requested by reviewers) make sure you squash your commits afterward so that you don&#39;t have an absurd number of commits for a very small fix. (Learn how to squash at &lt;a href=&quot;https://davidwalsh.name/squash-commits-git&quot;&gt;https://davidwalsh.name/squash-commits-git&lt;/a&gt; )&lt;/li&gt; 
 &lt;li&gt;When you&#39;re submitting a PR for a UI-related issue, it would be really awesome if you add a screenshot of your change or a link to a deployment where it can be tested out along with your PR. It makes it very easy for the reviewers and you&#39;ll also get reviews quicker.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Feature Requests and Bug Reports&lt;/h3&gt; 
&lt;p&gt;When you file a feature request or when you are submitting a bug report to the &lt;a href=&quot;https://github.com/fossasia/open-event-frontend/issues&quot;&gt;issue tracker&lt;/a&gt;, make sure you add steps to reproduce it. Especially if that bug is some weird/rare one.&lt;/p&gt; 
&lt;h3&gt;Join the development&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Before you join development, please set up the project on your local machine, run it and go through the application completely. Press on any button you can find and see where it leads to. Explore. (Don&#39;t worry ... Nothing will happen to the app or to you due to the exploring :wink: Only thing that will happen is, you&#39;ll be more familiar with what is where and might even get some cool ideas on how to improve various aspects of the app.)&lt;/li&gt; 
 &lt;li&gt;If you would like to work on an issue, drop in a comment at the issue. If it is already assigned to someone, but there is no sign of any work being done, please feel free to drop in a comment so that the issue can be assigned to you if the previous assignee has dropped it entirely.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is currently licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/fossasia/open-event-frontend/development/LICENSE&quot;&gt;Apache License version 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To obtain the software under a different license, Please contact &lt;strong&gt;&lt;a href=&quot;https://blog.fossasia.org/contact/&quot;&gt;FOSSASIA&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ZerioDev/Music-bot</title>
      <link>https://github.com/ZerioDev/Music-bot</link>
      <description>&lt;p&gt;A complete code to download for a music bot. Using a module (discord-player).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Music-bot&lt;/h1&gt; 
&lt;p&gt;A complete code to download for a music bot. Using a module (discord-player) üéß&lt;/p&gt; 
&lt;p&gt;Looking for a code for a music bot ? This fully open source code is made for your project !&lt;/p&gt; 
&lt;p&gt;If you need help with this project, to get support faster you can join the help server by just clicking &lt;a href=&quot;https://discord.gg/5cGSYV8ZZj&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;‚ö° Installation&lt;/h3&gt; 
&lt;p&gt;Well, let&#39;s start by downloading the code. Go to the folder &lt;code&gt;config&lt;/code&gt; then the file &lt;code&gt;config.json&lt;/code&gt;. For the bot to be able to start, please complete the file with your credentials as follows :&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
    &quot;game&quot;: &quot;GAME&quot;,
    &quot;prefix&quot;: &quot;PREFIX&quot;,
    &quot;token_bot&quot;: &quot;TOKEN&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Reminder :&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;game&lt;/code&gt;, the status of the bot.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prefix&lt;/code&gt;, the prefix that will be set to use the bot.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;token_bot&lt;/code&gt;, the token of the bot available on the &lt;a href=&quot;https://discordapp.com/developers/applications&quot;&gt;Discord Developers&lt;/a&gt; section.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To customize the emojis go to the file &lt;code&gt;emojis.json&lt;/code&gt;. Emojis are already defined by default but you can modify them if you wish.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
    &quot;music&quot;: &quot;:musical_note:&quot;,
    &quot;queue&quot;: &quot;:bar_chart:&quot;,
    &quot;error&quot;: &quot;:x:&quot;,
    &quot;success&quot;: &quot;:white_check_mark:&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the console, type &lt;code&gt;npm install&lt;/code&gt; to install all dependencies.&lt;/p&gt; 
&lt;p&gt;To start the bot :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;#With Node
node index.js

#With pm2
pm2 start index.js --name &quot;MusicBot&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All you have to do is turn on your bot !&lt;/p&gt; 
&lt;h3&gt;üéµ Music commands&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;play &amp;lt;name&amp;gt;, play music in a voice channel.
pause, pause the current music.
resume, puts the current music back on.
queue, see the next songs.
clear-queue, delete the next music.
shuffle, to mix the queue.
nowplaying, see music in progress.
loop, to enable or disable the repeat function.
volume &amp;lt;1 - 100&amp;gt;, change the volume.
skip, skip to next music.
stop, stop all music.
filter &amp;lt;filter&amp;gt;, add / remove filter.
w-filters, see filters.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;üí° General commands&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;ping, see the bot latency.
help, see the list of available commands.
debug, see number of voice connections.
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;üèì Utilities (to change the code)&lt;/h3&gt; 
&lt;p&gt;Find all the functions available on the official code &lt;a href=&quot;https://github.com/Androz2091/discord-player&quot;&gt;right here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This is used with &lt;a href=&quot;https://www.npmjs.com/package/discord.js&quot;&gt;discord.js&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/discord-player&quot;&gt;discord-player&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>karlhadwen/netflix</title>
      <link>https://github.com/karlhadwen/netflix</link>
      <description>&lt;p&gt;Subscribe to my YouTube channel: https://bit.ly/CognitiveSurge - Building Netflix Using React&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Building Netflix from Scratch Using React (Custom Hooks, Context, Portals), Firebase, Compound &amp;amp; Styled Components (10 Hour Tutorial Here: https://www.youtube.com/watch?v=x_EEwGe-a9o)&lt;/h2&gt; 
&lt;p&gt;This application (a Netflix clone) was built using React (Custom Hooks, Context), Firebase &amp;amp; Styled Components. I have built the following pages within this application: sign in, sign up, browse &amp;amp; lastly the homepage. There are four different pages, some using protected routes with auth listeners. Firebase firestore handles all the data and that data is retrieved using a custom hook; authentication is used on all pages, which is handled by Firebase as well.&lt;/p&gt; 
&lt;p&gt;I used compound components (just a design pattern) to build my components, and there&#39;s over 10 examples as to how these are used. The styling is all handled via styled components. Using compound components made my actual dumb components really easy to test.&lt;/p&gt; 
&lt;p&gt;Subscribe to my YouTube channel here: http://bit.ly/CognitiveSurge where I build projects like this! And don&#39;t forget, you can contribute to this project (highly encouraged!).&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/karlhadwen/netflix/master/netflix-preview.png?raw=true&quot; alt=&quot;Preview&quot;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sudheerj/javascript-interview-questions</title>
      <link>https://github.com/sudheerj/javascript-interview-questions</link>
      <description>&lt;p&gt;List of 1000 JavaScript Interview Questions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Interview Questions &amp;amp; Answers&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Click :star:if you like the project. Pull Requests are highly appreciated. Follow me &lt;a href=&quot;https://twitter.com/SudheerJonna&quot;&gt;@SudheerJonna&lt;/a&gt; for technical updates.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Go to &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#coding-exercise&quot;&gt;Coding Exercise&lt;/a&gt; for coding specific questions&lt;/p&gt; 
&lt;h2&gt;Downloading PDF/Epub formats&lt;/h2&gt; 
&lt;p&gt;You can download the PDF and Epub version of this repository from the latest run on the &lt;a href=&quot;https://github.com/sudheerj/JavaScript-Interview-Questions/actions&quot;&gt;actions tab&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;The questions provided in this repository are the summary of frequently asked questions across numerous companies. We cannot guarantee that these questions will actually be asked during your interview process, nor should you focus on memorizing all of them. The primary purpose is for you to get a sense of what some companies might ask ‚Äî do not get discouraged if you don&#39;t know the answer to all of them ‚Å†‚Äî that is ok!&lt;/p&gt; 
&lt;p&gt;Good luck with your interview üòä&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;p&gt;| No. | Questions | |---- | --------- |1 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-possible-ways-to-create-objects-in-javascript&quot;&gt;What are the possible ways to create objects in JavaScript&lt;/a&gt; | |2 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-prototype-chain&quot;&gt;What is prototype chain&lt;/a&gt;| |3 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-call-apply-and-bind&quot;&gt;What is the difference between Call, Apply and Bind&lt;/a&gt;| |4 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-json-and-its-common-operations&quot;&gt;What is JSON and its common operations&lt;/a&gt;| |5 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-array-slice-method&quot;&gt;What is the purpose of the array slice method&lt;/a&gt;| |6 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-array-splice-method&quot;&gt;What is the purpose of the array splice method&lt;/a&gt;| |7 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-slice-and-splice&quot;&gt;What is the difference between slice and splice&lt;/a&gt;| |8 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-compare-object-and-map&quot;&gt;How do you compare Object and Map&lt;/a&gt;| |9 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-==-and-===-operators&quot;&gt;What is the difference between == and === operators&lt;/a&gt;| |10 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-lambda-or-arrow-functions&quot;&gt;What are lambda or arrow functions&lt;/a&gt;| |11 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-first-class-function&quot;&gt;What is a first class function&lt;/a&gt;| |12 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-first-order-function&quot;&gt;What is a first order function&lt;/a&gt;| |13 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-higher-order-function&quot;&gt;What is a higher order function&lt;/a&gt;| |14 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-unary-function&quot;&gt;What is a unary function&lt;/a&gt;| |15 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-currying-function&quot;&gt;What is the currying function&lt;/a&gt;| |16 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-pure-function&quot;&gt;What is a pure function&lt;/a&gt;| |17 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-let-keyword&quot;&gt;What is the purpose of the let keyword&lt;/a&gt;| |18 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-let-and-var&quot;&gt;What is the difference between let and var&lt;/a&gt;| |19 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-reason-to-choose-the-name-let-as-a-keyword&quot;&gt;What is the reason to choose the name let as a keyword&lt;/a&gt;| |20 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-redeclare-variables-in-switch-block-without-an-error&quot;&gt;How do you redeclare variables in switch block without an error&lt;/a&gt;| |21 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-temporal-dead-zone&quot;&gt;What is the Temporal Dead Zone&lt;/a&gt;| |22 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-iife(immediately-invoked-function-expression)&quot;&gt;What is IIFE(Immediately Invoked Function Expression)&lt;/a&gt;| |23 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-benefit-of-using-modules&quot;&gt;What is the benefit of using modules&lt;/a&gt;| |24 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-memoization&quot;&gt;What is memoization&lt;/a&gt;| |25 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-hoisting&quot;&gt;What is Hoisting&lt;/a&gt;| |26 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-classes-in-es6&quot;&gt;What are classes in ES6&lt;/a&gt;| |27 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-closures&quot;&gt;What are closures&lt;/a&gt;| |28 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-modules&quot;&gt;What are modules&lt;/a&gt;| |29 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-modules&quot;&gt;Why do you need modules&lt;/a&gt;| |30 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-scope-in-javascript&quot;&gt;What is scope in javascript&lt;/a&gt;| |31 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-service-worker&quot;&gt;What is a service worker&lt;/a&gt;| |32 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-manipulate-dom-using-a-service-worker&quot;&gt;How do you manipulate DOM using a service worker&lt;/a&gt;| |33 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-reuse-information-across-service-worker-restarts&quot;&gt;How do you reuse information across service worker restarts&lt;/a&gt;| |34 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-indexeddb&quot;&gt;What is IndexedDB&lt;/a&gt;| |35 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-web-storage&quot;&gt;What is web storage&lt;/a&gt;| |36 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-post-message&quot;&gt;What is a post message&lt;/a&gt;| |37 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-cookie&quot;&gt;What is a cookie&lt;/a&gt;| |38 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-a-cookie&quot;&gt;Why do you need a Cookie&lt;/a&gt;| |39 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-options-in-a-cookie&quot;&gt;What are the options in a cookie&lt;/a&gt;| |40 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-delete-a-cookie&quot;&gt;How do you delete a cookie&lt;/a&gt;| |41 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#What-are-the-differences-between-cookie-local-storage-and-session-storage&quot;&gt;What are the differences between cookie, local storage and session storage&lt;/a&gt;| |42 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-main-difference-between-localstorage-and-sessionstorage&quot;&gt;What is the main difference between localStorage and sessionStorage&lt;/a&gt;| |43 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-access-web-storage&quot;&gt;How do you access web storage&lt;/a&gt;| |44 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-methods-available-on-session-storage&quot;&gt;What are the methods available on session storage&lt;/a&gt;| |45 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-storage-event-and-its-event-handler&quot;&gt;What is a storage event and its event handler&lt;/a&gt;| |46 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-web-storage&quot;&gt;Why do you need web storage&lt;/a&gt;| |47 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-web-storage-browser-support&quot;&gt;How do you check web storage browser support&lt;/a&gt;| |48 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-web-workers-browser-support&quot;&gt;How do you check web workers browser support&lt;/a&gt;| |49 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#give-an-example-of-web-worker&quot;&gt;Give an example of web worker&lt;/a&gt;| |50 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-restrictions-of-web-workers-on-dom&quot;&gt;What are the restrictions of web workers on DOM&lt;/a&gt;| |51 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-promise&quot;&gt;What is a promise&lt;/a&gt;| |52 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-a-promise&quot;&gt;Why do you need a promise&lt;/a&gt;| |53 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-three-states-of-promise&quot;&gt;What are the three states of promise&lt;/a&gt;| |54 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-callback-function&quot;&gt;What is a callback function&lt;/a&gt;| |55 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-we-need-callbacks&quot;&gt;Why do we need callbacks&lt;/a&gt;| |56 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-callback-hell&quot;&gt;What is a callback hell&lt;/a&gt;| |57 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-server-sent-events&quot;&gt;What is server-sent events&lt;/a&gt;| |58 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-receive-server-sent-event-notifications&quot;&gt;How do you receive server-sent event notifications&lt;/a&gt;| |59 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-browser-support-for-server-sent-events&quot;&gt;How do you check browser support for server-sent events&lt;/a&gt;| |60 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-events-available-for-server-sent-events&quot;&gt;What are the events available for server sent events&lt;/a&gt;| |61 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-main-rules-of-promise&quot;&gt;What are the main rules of promise&lt;/a&gt;| |62 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-callback-in-callback&quot;&gt;What is callback in callback&lt;/a&gt;| |63 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-promise-chaining&quot;&gt;What is promise chaining&lt;/a&gt;| |64 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-promise.all&quot;&gt;What is promise.all&lt;/a&gt;| |65 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-race-method-in-promise&quot;&gt;What is the purpose of race method in promise&lt;/a&gt;| |66 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-strict-mode-in-javascript&quot;&gt;What is a strict mode in javascript&lt;/a&gt;| |67 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-strict-mode&quot;&gt;Why do you need strict mode&lt;/a&gt;| |68 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-declare-strict-mode&quot;&gt;How do you declare strict mode&lt;/a&gt;| |69 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-double-exclamation&quot;&gt;What is the purpose of double exclamation&lt;/a&gt;| |70 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-delete-operator&quot;&gt;What is the purpose of delete operator&lt;/a&gt;| |71 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-typeof-operator&quot;&gt;What is typeof operator&lt;/a&gt;| |72 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-undefined-property&quot;&gt;What is undefined property&lt;/a&gt;| |73 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-null-value&quot;&gt;What is null value&lt;/a&gt;| |74 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-null-and-undefined&quot;&gt;What is the difference between null and undefined&lt;/a&gt;| |75 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#What-is-eval&quot;&gt;What is eval&lt;/a&gt;| |76 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-window-and-document&quot;&gt;What is the difference between window and document&lt;/a&gt;| |77 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-access-history-in-javascript&quot;&gt;How do you access history in javascript&lt;/a&gt;| |78 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-javascript-data-types&quot;&gt;What are the javascript data types&lt;/a&gt;| |79 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-isnan&quot;&gt;What is isNaN&lt;/a&gt;| |80 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-undeclared-and-undefined-variables&quot;&gt;What are the differences between undeclared and undefined variables&lt;/a&gt;| |81 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-global-variables&quot;&gt;What are global variables&lt;/a&gt;| |82 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-problems-with-global-variables&quot;&gt;What are the problems with global variables&lt;/a&gt;| |83 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-nan-property&quot;&gt;What is NaN property&lt;/a&gt;| |84 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-isfinite-function&quot;&gt;What is the purpose of isFinite function&lt;/a&gt; |85 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-flow&quot;&gt;What is an event flow&lt;/a&gt;| |86 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-event-bubbling&quot;&gt;What is event bubbling&lt;/a&gt;| |87 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-event-capturing&quot;&gt;What is event capturing&lt;/a&gt;| |88 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-submit-a-form-using-javascript&quot;&gt;How do you submit a form using JavaScript&lt;/a&gt;| |89 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-find-operating-system-details&quot;&gt;How do you find operating system details&lt;/a&gt;| |90 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-document-load-and-domcontentloaded-events&quot;&gt;What is the difference between document load and DOMContentLoaded events&lt;/a&gt;| |91 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-native,-host-and-user-objects&quot;&gt;What is the difference between native, host and user objects&lt;/a&gt;| |92 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-tools-or-techniques-used-for-debugging-javascript-code&quot;&gt;What are the tools or techniques used for debugging JavaScript code&lt;/a&gt;| |93 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-pros-and-cons-of-promises-over-callbacks&quot;&gt;What are the pros and cons of promises over callbacks&lt;/a&gt;| |94 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-an-attribute-and-a-property&quot;&gt;What is the difference between an attribute and a property&lt;/a&gt;| |95 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-same-origin-policy&quot;&gt;What is same-origin policy&lt;/a&gt;| |96 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-void-0&quot;&gt;What is the purpose of void 0&lt;/a&gt;| |97 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-javascript-a-compiled-or-interpreted-language&quot;&gt;Is JavaScript a compiled or interpreted language&lt;/a&gt;| |98 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-javascript-a-case-sensitive-language&quot;&gt;Is JavaScript a case-sensitive language&lt;/a&gt;| |99 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-there-any-relation-between-java-and-javascript&quot;&gt;Is there any relation between Java and JavaScript&lt;/a&gt;| |100| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-events&quot;&gt;What are events&lt;/a&gt;| |101| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#who-created-javascript&quot;&gt;Who created javascript&lt;/a&gt;| |102| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-use-of-preventdefault-method&quot;&gt;What is the use of preventDefault method&lt;/a&gt;| |103| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-use-of-stoppropagation-method&quot;&gt;What is the use of stopPropagation method&lt;/a&gt;| |104| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-steps-involved-in-return-false&quot;&gt;What are the steps involved in return false&lt;/a&gt;| |105| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-bom&quot;&gt;What is BOM&lt;/a&gt;| |106| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-use-of-settimeout&quot;&gt;What is the use of setTimeout&lt;/a&gt;| |107| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-use-of-setinterval&quot;&gt;What is the use of setInterval&lt;/a&gt;| |108| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-is-javascript-treated-as-single-threaded&quot;&gt;Why is JavaScript treated as Single threaded&lt;/a&gt;| |109| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-delegation&quot;&gt;What is an event delegation&lt;/a&gt;| |110| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-ecmascript&quot;&gt;What is ECMAScript&lt;/a&gt;| |111| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-json&quot;&gt;What is JSON&lt;/a&gt;| |112| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-syntax-rules-of-json&quot;&gt;What are the syntax rules of JSON&lt;/a&gt;| |113| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-json-stringify&quot;&gt;What is the purpose JSON stringify&lt;/a&gt;| |114| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-parse-json-string&quot;&gt;How do you parse JSON string&lt;/a&gt;| |115| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-json&quot;&gt;Why do you need JSON&lt;/a&gt;| |116| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-pwas?&quot;&gt;What are PWAs&lt;/a&gt;| |117| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-cleartimeout-method&quot;&gt;What is the purpose of clearTimeout method&lt;/a&gt;| |118| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-clearinterval-method&quot;&gt;What is the purpose of clearInterval method&lt;/a&gt;| |119| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-redirect-new-page-in-javascript&quot;&gt;How do you redirect new page in javascript&lt;/a&gt;| |120| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-whether-a-string-contains-a-substring&quot;&gt;How do you check whether a string contains a substring&lt;/a&gt;| |121| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-validate-an-email-in-javascript&quot;&gt;How do you validate an email in javascript&lt;/a&gt;| |122| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-current-url-with-javascript&quot;&gt;How do you get the current url with javascript&lt;/a&gt;| |123| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-various-url-properties-of-location-object&quot;&gt;What are the various url properties of location object&lt;/a&gt;| |124| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-get-query-string-values-in-javascript&quot;&gt;How do get query string values in javascript&lt;/a&gt;| |125| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-if-a-key-exists-in-an-object&quot;&gt;How do you check if a key exists in an object&lt;/a&gt;| |126| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-loop-through-or-enumerate-javascript-object&quot;&gt;How do you loop through or enumerate javascript object&lt;/a&gt;| |127| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-test-for-an-empty-object&quot;&gt;How do you test for an empty object&lt;/a&gt;| |128| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-arguments-object&quot;&gt;What is an arguments object&lt;/a&gt;| |129| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-make-first-letter-of-the-string-in-an-uppercase&quot;&gt;How do you make first letter of the string in an uppercase&lt;/a&gt;| |130| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-pros-and-cons-of-for-loop&quot;&gt;What are the pros and cons of for loop&lt;/a&gt;| |131| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-display-the-current-date-in-javascript&quot;&gt;How do you display the current date in javascript&lt;/a&gt;| |132| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-compare-two-date-objects&quot;&gt;How do you compare two date objects&lt;/a&gt;| |133| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-if-a-string-starts-with-another-string&quot;&gt;How do you check if a string starts with another string&lt;/a&gt;| |134| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-trim-a-string-in-javascript&quot;&gt;How do you trim a string in javascript&lt;/a&gt;| |135| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-add-a-key-value-pair-in-javascript&quot;&gt;How do you add a key value pair in javascript&lt;/a&gt;| |136| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-the-&#39;!--&#39;-notation-represents-a-special-operator&quot;&gt;Is the &#39;!--&#39; notation represents a special operator&lt;/a&gt;| |137| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-assign-default-values-to-variables&quot;&gt;How do you assign default values to variables&lt;/a&gt;| |138| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-multiline-strings&quot;&gt;How do you define multiline strings&lt;/a&gt;| |139| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-app-shell-model&quot;&gt;What is an app shell model&lt;/a&gt;| |140| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-we-define-properties-for-functions&quot;&gt;Can we define properties for functions&lt;/a&gt;| |141| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-way-to-find-the-number-of-parameters-expected-by-a-function&quot;&gt;What is the way to find the number of parameters expected by a function&lt;/a&gt;| |142| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-polyfill&quot;&gt;What is a polyfill&lt;/a&gt;| |143| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-break-and-continue-statements&quot;&gt;What are break and continue statements&lt;/a&gt;| |144| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-js-labels&quot;&gt;What are js labels&lt;/a&gt;| |145| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-benefits-of-keeping-declarations-at-the-top&quot;&gt;What are the benefits of keeping declarations at the top&lt;/a&gt;| |146| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-benefits-of-initializing-variables&quot;&gt;What are the benefits of initializing variables&lt;/a&gt;| |147| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-recommendations-to-create-new-object&quot;&gt;What are the recommendations to create new object&lt;/a&gt;| |148| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-json-arrays&quot;&gt;How do you define JSON arrays&lt;/a&gt;| |149| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-generate-random-integers&quot;&gt;How do you generate random integers&lt;/a&gt;| |150| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-you-write-a-random-integers-function-to-print-integers-with-in-a-range&quot;&gt;Can you write a random integers function to print integers with in a range&lt;/a&gt;| |151| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-tree-shaking&quot;&gt;What is tree shaking&lt;/a&gt;| |152| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-need-of-tree-shaking&quot;&gt;What is the need of tree shaking&lt;/a&gt;| |153| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-it-recommended-to-use-eval&quot;&gt;Is it recommended to use eval&lt;/a&gt;| |154| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-regular-expression&quot;&gt;What is a Regular Expression&lt;/a&gt;| |155| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-string-methods-available-in-regular-expression&quot;&gt;What are the string methods available in Regular expression&lt;/a&gt;| |156| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-modifiers-in-regular-expression&quot;&gt;What are modifiers in regular expression&lt;/a&gt;| |157| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-regular-expression-patterns&quot;&gt;What are regular expression patterns&lt;/a&gt;| |158| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-regexp-object&quot;&gt;What is a RegExp object&lt;/a&gt;| |159| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-search-a-string-for-a-pattern&quot;&gt;How do you search a string for a pattern&lt;/a&gt;| |160| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-exec-method&quot;&gt;What is the purpose of exec method&lt;/a&gt;| |161| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-change-style-of-a-html-element&quot;&gt;How do you change style of a HTML element&lt;/a&gt;| |162| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-would-be-the-result-of-1+2+&#39;3&#39;&quot;&gt;What would be the result of 1+2+&#39;3&#39;&lt;/a&gt;| |163| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-debugger-statement&quot;&gt;What is a debugger statement&lt;/a&gt;| |164| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-breakpoints-indebugging&quot;&gt;What is the purpose of breakpoints in debugging&lt;/a&gt;| |165| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-i-use-reserved-words-as-identifiers&quot;&gt;Can I use reserved words as identifiers&lt;/a&gt;| |166| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-a-mobile-browser&quot;&gt;How do you detect a mobile browser&lt;/a&gt;| |167| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-a-mobile-browser-without-regexp&quot;&gt;How do you detect a mobile browser without regexp&lt;/a&gt;| |168| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-image-width-and-height-using-js&quot;&gt;How do you get the image width and height using JS&lt;/a&gt;| |169| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-make-synchronous-http-request&quot;&gt;How do you make synchronous HTTP request&lt;/a&gt;| |170| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-make-asynchronous-http-request&quot;&gt;How do you make asynchronous HTTP request&lt;/a&gt;| |171| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-convert-date-to-another-timezone-in-javascript&quot;&gt;How do you convert date to another timezone in javascript&lt;/a&gt;| |172| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-properties-used-to-get-size-of-window&quot;&gt;What are the properties used to get size of window&lt;/a&gt;| |173| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-conditional-operator-in-javascript&quot;&gt;What is a conditional operator in javascript&lt;/a&gt;| |174| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#Can-you-apply-chaining-on-conditional-operator&quot;&gt;Can you apply chaining on conditional operator&lt;/a&gt;| |175| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-ways-to-execute-javascript-after-page-load&quot;&gt;What are the ways to execute javascript after page load&lt;/a&gt;| |176| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-proto-and-prototype&quot;&gt;What is the difference between proto and prototype&lt;/a&gt;| |177| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#give-an-example-where-do-you-really-need-semicolon&quot;&gt;Give an example where do you really need semicolon&lt;/a&gt;| |178| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-freeze-method&quot;&gt;What is a freeze method&lt;/a&gt;| |179| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-freeze-method&quot;&gt;What is the purpose of freeze method&lt;/a&gt;| |180| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-i-need-to-use-freeze-method&quot;&gt;Why do I need to use freeze method&lt;/a&gt;| |181| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-a-browser-language-preference&quot;&gt;How do you detect a browser language preference&lt;/a&gt;| |182| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-convert-string-to-title-case-with-javascript&quot;&gt;How to convert string to title case with javascript&lt;/a&gt;| |183| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-javascript-disabled-in-the-page&quot;&gt;How do you detect javascript disabled in the page&lt;/a&gt;| |184| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-various-operators-supported-by-javascript&quot;&gt;What are various operators supported by javascript&lt;/a&gt;| |185| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-rest-parameter&quot;&gt;What is a rest parameter&lt;/a&gt;| |186| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-if-you-do-not-use-rest-parameter-as-a-last-argument&quot;&gt;What happens if you do not use rest parameter as a last argument&lt;/a&gt;| |187| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-bitwise-operators-available-in-javascript&quot;&gt;What are the bitwise operators available in javascript&lt;/a&gt;| |188| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-spread-operator&quot;&gt;What is a spread operator&lt;/a&gt;| |189| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-determine-whether-object-is-frozen-or-not&quot;&gt;How do you determine whether object is frozen or not&lt;/a&gt;| |190| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-determine-two-values-same-or-not-using-object&quot;&gt;How do you determine two values same or not using object&lt;/a&gt;| |191| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-using-object-is-method&quot;&gt;What is the purpose of using object is method&lt;/a&gt;| |192| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-copy-properties-from-one-object-to-other&quot;&gt;How do you copy properties from one object to other&lt;/a&gt;| |193| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-applications-of-assign-method&quot;&gt;What are the applications of assign method&lt;/a&gt;| |194| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-proxy-object&quot;&gt;What is a proxy object&lt;/a&gt;| |195| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-seal-method&quot;&gt;What is the purpose of seal method&lt;/a&gt;| |196| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-applications-of-seal-method&quot;&gt;What are the applications of seal method&lt;/a&gt;| |197| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-freeze-and-seal-methods&quot;&gt;What are the differences between freeze and seal methods&lt;/a&gt;| |198| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-determine-if-an-object-is-sealed-or-not&quot;&gt;How do you determine if an object is sealed or not&lt;/a&gt;| |199| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-enumerable-key-and-value-pairs&quot;&gt;How do you get enumerable key and value pairs&lt;/a&gt;| |200| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-main-difference-between-object.values-and-object.entries-method&quot;&gt;What is the main difference between Object.values and Object.entries method&lt;/a&gt;| |201| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-can-you-get-the-list-of-keys-of-any-object&quot;&gt;How can you get the list of keys of any object&lt;/a&gt;| |202| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-an-object-with-prototype&quot;&gt;How do you create an object with prototype&lt;/a&gt;| |203| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-weakset&quot;&gt;What is a WeakSet&lt;/a&gt;| |204| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-weakset-and-set&quot;&gt;What are the differences between WeakSet and Set&lt;/a&gt;| |205| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#list-down-the-collection-of-methods-available-on-weakset&quot;&gt;List down the collection of methods available on WeakSet&lt;/a&gt;| |206| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-weakmap&quot;&gt;What is a WeakMap&lt;/a&gt;| |207| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-weakmap-and-map&quot;&gt;What are the differences between WeakMap and Map&lt;/a&gt;| |208| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#list-down-the-collection-of-methods-available-on-weakmap&quot;&gt;List down the collection of methods available on WeakMap&lt;/a&gt;| |209| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-uneval&quot;&gt;What is the purpose of uneval&lt;/a&gt;| |210| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-encode-an-url&quot;&gt;How do you encode an URL&lt;/a&gt;| |211| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-decode-an-url&quot;&gt;How do you decode an URL&lt;/a&gt;| |212| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-print-the-contents-of-web-page&quot;&gt;How do you print the contents of web page&lt;/a&gt;| |213| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-uneval-and-eval&quot;&gt;What is the difference between uneval and eval&lt;/a&gt;| |214| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-anonymous-function&quot;&gt;What is an anonymous function&lt;/a&gt;| |215| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-precedence-order-between-local-and-global-variables&quot;&gt;What is the precedence order between local and global variables&lt;/a&gt;| |216| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-javascript-accessors&quot;&gt;What are javascript accessors&lt;/a&gt;| |217| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-property-on-object-constructor&quot;&gt;How do you define property on Object constructor&lt;/a&gt;| |218| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-get-and-defineproperty&quot;&gt;What is the difference between get and defineProperty&lt;/a&gt;| |219| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-advantages-of-getters-and-setters&quot;&gt;What are the advantages of Getters and Setters&lt;/a&gt;| |220| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-i-add-getters-and-setters-using-defineproperty-method&quot;&gt;Can I add getters and setters using defineProperty method&lt;/a&gt;| |221| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-switch-case&quot;&gt;What is the purpose of switch-case&lt;/a&gt;| |222| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-conventions-to-be-followed-for-the-usage-of-swtich-case&quot;&gt;What are the conventions to be followed for the usage of swtich case&lt;/a&gt;| |223| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-primitive-data-types&quot;&gt;What are primitive data types&lt;/a&gt;| |224| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-ways-to-access-object-properties&quot;&gt;What are the different ways to access object properties&lt;/a&gt;| |225| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-function-parameter-rules&quot;&gt;What are the function parameter rules&lt;/a&gt;| |226| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-error-object&quot;&gt;What is an error object&lt;/a&gt;| |227| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#when-you-get-a-syntax-error&quot;&gt;When you get a syntax error&lt;/a&gt;| |228| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-error-names-from-error-object&quot;&gt;What are the different error names from error object&lt;/a&gt;| |229| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-various-statements-in-error-handling&quot;&gt;What are the various statements in error handling&lt;/a&gt;| |230| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-two-types-of-loops-in-javascript&quot;&gt;What are the two types of loops in javascript&lt;/a&gt;| |231| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-nodejs&quot;&gt;What is nodejs&lt;/a&gt;| |232| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-intl-object&quot;&gt;What is an Intl object&lt;/a&gt;| |233| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-perform-language-specific-date-and-time-formatting&quot;&gt;How do you perform language specific date and time formatting&lt;/a&gt;| |234| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-iterator&quot;&gt;What is an Iterator&lt;/a&gt;| |235| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-does-synchronous-iteration-works&quot;&gt;How does synchronous iteration works&lt;/a&gt;| |236| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-loop&quot;&gt;What is an event loop&lt;/a&gt;| |237| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-call-stack&quot;&gt;What is call stack&lt;/a&gt;| |238| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-queue&quot;&gt;What is an event queue&lt;/a&gt;| |239| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-decorator&quot;&gt;What is a decorator&lt;/a&gt;| |240| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-properties-of-intl-object&quot;&gt;What are the properties of Intl object&lt;/a&gt;| |241| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-unary-operator&quot;&gt;What is an Unary operator&lt;/a&gt;| |242| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-sort-elements-in-an-array&quot;&gt;How do you sort elements in an array&lt;/a&gt;| |243| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-comparefunction-while-sorting-arrays&quot;&gt;What is the purpose of compareFunction while sorting arrays&lt;/a&gt;| |244| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-reversing-an-array&quot;&gt;How do you reversing an array&lt;/a&gt;| |245| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-find-min-and-max-value-in-an-array&quot;&gt;How do you find min and max value in an array&lt;/a&gt;| |246| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-find-min-and-max-values-without--math-functions&quot;&gt;How do you find min and max values without Math functions&lt;/a&gt;| |247| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-empty-statement-and-purpose-of-it&quot;&gt;What is an empty statement and purpose of it&lt;/a&gt;| |248| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-meta-data-of-a-module&quot;&gt;How do you get meta data of a module&lt;/a&gt;| |249| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-comma-operator&quot;&gt;What is a comma operator&lt;/a&gt;| |250| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-advantage-of-a-comma-operator&quot;&gt;What is the advantage of a comma operator&lt;/a&gt;| |251| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-typescript&quot;&gt;What is typescript&lt;/a&gt;| |252| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-javascript-and-typescript&quot;&gt;What are the differences between javascript and typescript&lt;/a&gt;| |253| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-advantages-of-typescript-over-javascript&quot;&gt;What are the advantages of typescript over javascript&lt;/a&gt;| |254| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-object-initializer&quot;&gt;What is an object initializer&lt;/a&gt;| |255| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-constructor-method&quot;&gt;What is a constructor method&lt;/a&gt;| |256| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-if-you-write-constructor-more-than-once-in-a-class&quot;&gt;What happens if you write constructor more than once in a class&lt;/a&gt;| |257| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-call-the-constructor-of-a-parent-class&quot;&gt;How do you call the constructor of a parent class&lt;/a&gt;| |258| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-prototype-of-an-object&quot;&gt;How do you get the prototype of an object&lt;/a&gt;| |259| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-if-i-pass-string-type-for-getprototype-method&quot;&gt;What happens If I pass string type for getPrototype method&lt;/a&gt;| |260| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-set-prototype-of-one-object-to-another&quot;&gt;How do you set prototype of one object to another&lt;/a&gt;| |261| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-whether-an-object-can-be-extendable-or-not&quot;&gt;How do you check whether an object can be extendable or not&lt;/a&gt;| |262| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-prevent-an-object-to-extend&quot;&gt;How do you prevent an object to extend&lt;/a&gt;| |263| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-ways-to-make-an-object-non-extensible&quot;&gt;What are the different ways to make an object non-extensible&lt;/a&gt;| |264| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-multiple-properties-on-an-object&quot;&gt;How do you define multiple properties on an object&lt;/a&gt;| |265| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-mean-in-javascript&quot;&gt;What is MEAN in javascript&lt;/a&gt;| |266| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-obfuscation-in-javascript&quot;&gt;What Is Obfuscation in javascript&lt;/a&gt;| |267| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-obfuscation&quot;&gt;Why do you need Obfuscation&lt;/a&gt;| |268| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-minification&quot;&gt;What is Minification&lt;/a&gt;| |269| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-advantages-of-minification&quot;&gt;What are the advantages of minification&lt;/a&gt;| |270| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-obfuscation-and-encryption&quot;&gt;What are the differences between Obfuscation and Encryption&lt;/a&gt;| |271| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-common-tools-used-for-minification&quot;&gt;What are the common tools used for minification&lt;/a&gt;| |272| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-perform-form-validation-using-javascript&quot;&gt;How do you perform form validation using javascript&lt;/a&gt;| |273| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-perform-form-validation-without-javascript&quot;&gt;How do you perform form validation without javascript&lt;/a&gt;| |274| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-dom-methods-available-for-constraint-validation&quot;&gt;What are the DOM methods available for constraint validation&lt;/a&gt;| |275| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-available-constraint-validation-dom-properties&quot;&gt;What are the available constraint validation DOM properties&lt;/a&gt;| |276| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-list-of-validity-properties&quot;&gt;What are the list of validity properties&lt;/a&gt;| |277| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#give-an-example-usage-of-rangeoverflow-property&quot;&gt;Give an example usage of rangeOverflow property&lt;/a&gt;| |278| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-enums-feature-available-in-javascript&quot;&gt;Is enums feature available in javascript&lt;/a&gt;| |279| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#What-is-an-enum&quot;&gt;What is an enum&lt;/a&gt;| |280| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-list-all-properties-of-an-object&quot;&gt;How do you list all properties of an object&lt;/a&gt;| |281| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-property-descriptors-of-an-object&quot;&gt;How do you get property descriptors of an object&lt;/a&gt;| |282| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-attributes-provided-by-a-property-descriptor&quot;&gt;What are the attributes provided by a property descriptor&lt;/a&gt;| |283| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-extend-classes&quot;&gt;How do you extend classes&lt;/a&gt;| |284| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-i-modify-the-url-without-reloading-the-page&quot;&gt;How do I modify the url without reloading the page&lt;/a&gt;| |285| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-whether-an-array-includes-a-particular-value-or-not&quot;&gt;How do you check whether an array includes a particular value or not&lt;/a&gt;| |286| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-compare-scalar-arrays&quot;&gt;How do you compare scalar arrays&lt;/a&gt;| |287| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-get-the-value-from-get-parameters&quot;&gt;How to get the value from get parameters&lt;/a&gt;| |288| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-print-numbers-with-commas-as-thousand-separators&quot;&gt;How do you print numbers with commas as thousand separators&lt;/a&gt;| |289| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-java-and-javascript&quot;&gt;What is the difference between java and javascript&lt;/a&gt;| |290| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-javascript-supports-namespace&quot;&gt;Is javascript supports namespace&lt;/a&gt;| |291| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-declare-namespace&quot;&gt;How do you declare namespace&lt;/a&gt;| |292| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-invoke-javascript-code-in-an-iframe-from-parent-page&quot;&gt;How do you invoke javascript code in an iframe from parent page&lt;/a&gt;| |293| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-get-the-timezone-offset-from-date&quot;&gt;How do get the timezone offset from date&lt;/a&gt;| |294| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-load-css-and-js-files-dynamically&quot;&gt;How do you load CSS and JS files dynamically&lt;/a&gt;| |295| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-methods-to-find-html-elements-in-dom&quot;&gt;What are the different methods to find HTML elements in DOM&lt;/a&gt;| |296| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-jquery&quot;&gt;What is jQuery&lt;/a&gt;| |297| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-v8-javascript-engine&quot;&gt;What is V8 JavaScript engine&lt;/a&gt;| |298| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-we-call-javascript-as-dynamic-language&quot;&gt;Why do we call javascript as dynamic language&lt;/a&gt;| |299| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-void-operator&quot;&gt;What is a void operator&lt;/a&gt;| |300| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-set-the-cursor-to-wait&quot;&gt;How to set the cursor to wait&lt;/a&gt;| |301| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-an-infinite-loop&quot;&gt;How do you create an infinite loop&lt;/a&gt;| |302| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-to-avoid-with-statement&quot;&gt;Why do you need to avoid with statement&lt;/a&gt;| |303| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-for-loops&quot;&gt;What is the output of below for loops&lt;/a&gt;| |304| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#list-down-some-of-the-features-of-es6&quot;&gt;List down some of the features of ES6&lt;/a&gt;| |305| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-es6&quot;&gt;What is ES6&lt;/a&gt;| |306| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-I-redeclare-let-and-const-variables&quot;&gt;Can I redeclare let and const variables&lt;/a&gt;| |307| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-const-variable-makes-the-value-immutable&quot;&gt;Is const variable makes the value immutable&lt;/a&gt;| |308| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-default-parameters&quot;&gt;What are default parameters&lt;/a&gt;| |309| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-template-literals&quot;&gt;What are template literals&lt;/a&gt;| |310| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-write-multi-line-strings-in-template-literals&quot;&gt;How do you write multi-line strings in template literals&lt;/a&gt;| |311| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-nesting-templates&quot;&gt;What are nesting templates&lt;/a&gt;| |312| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-tagged-templates&quot;&gt;What are tagged templates&lt;/a&gt;| |313| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-raw-strings&quot;&gt;What are raw strings&lt;/a&gt;| |314| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-destructuring-assignment&quot;&gt;What is destructuring assignment&lt;/a&gt;| |315| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-default-values-in-destructuring-assignment&quot;&gt;What are default values in destructuring assignment&lt;/a&gt;| |316| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-swap-variables-in-destructuring-assignment&quot;&gt;How do you swap variables in destructuring assignment&lt;/a&gt;| |317| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-enhanced-object-literals&quot;&gt;What are enhanced object literals&lt;/a&gt;| |318| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-dynamic-imports&quot;&gt;What are dynamic imports&lt;/a&gt;| |319| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-use-cases-for-dynamic-imports&quot;&gt;What are the use cases for dynamic imports&lt;/a&gt;| |320| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-typed-arrays&quot;&gt;What are typed arrays&lt;/a&gt;| |321| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-advantages-of-module-loaders&quot;&gt;What are the advantages of module loaders&lt;/a&gt;| |322| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-collation&quot;&gt;What is collation&lt;/a&gt;| |323| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-for...of-statement&quot;&gt;What is for...of statement&lt;/a&gt;| |324| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-spread-operator-array&quot;&gt;What is the output of below spread operator array&lt;/a&gt;| |325| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-postmessage-secure&quot;&gt;Is PostMessage secure&lt;/a&gt;| |326| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-problems-with-postmessage-target-origin-as-wildcard&quot;&gt;What are the problems with postmessage target origin as wildcard&lt;/a&gt;| |327| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-avoid-receiving-postmessages-from-attackers&quot;&gt;How do you avoid receiving postMessages from attackers&lt;/a&gt;| |328| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-i-avoid-using-postmessages-completely&quot;&gt;Can I avoid using postMessages completely&lt;/a&gt;| |329| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-postmessages-synchronous&quot;&gt;Is postMessages synchronous&lt;/a&gt;| |330| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-paradigm-is-javascript&quot;&gt;What paradigm is Javascript&lt;/a&gt;| |331| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-internal-and-external-javascript&quot;&gt;What is the difference between internal and external javascript&lt;/a&gt;| |332| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-javascript-faster-than-server-side-script&quot;&gt;Is JavaScript faster than server side script&lt;/a&gt;| |333| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-status-of-a-checkbox&quot;&gt;How do you get the status of a checkbox&lt;/a&gt;| |334| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-double-tilde-operator&quot;&gt;What is the purpose of double tilde operator&lt;/a&gt;| |335| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-convert-character-to-ascii-code&quot;&gt;How do you convert character to ASCII code&lt;/a&gt;| |336| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-arraybuffer&quot;&gt;What is ArrayBuffer&lt;/a&gt;| |337| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-string-expression&quot;&gt;What is the output of below string expression&lt;/a&gt;| |338| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-error-object&quot;&gt;What is the purpose of Error object&lt;/a&gt;| |339| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-evalerror-object&quot;&gt;What is the purpose of EvalError object&lt;/a&gt;| |340| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-list-of-cases-error-thrown-from-non-strict-mode-to-strict-mode&quot;&gt;What are the list of cases error thrown from non-strict mode to strict mode&lt;/a&gt;| |341| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-all-objects-have-prototypes&quot;&gt;Is all objects have prototypes&lt;/a&gt;| |342| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-a-parameter-and-an-argument&quot;&gt;What is the difference between a parameter and an argument&lt;/a&gt;| |343| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-some-method-in-arrays&quot;&gt;What is the purpose of some method in arrays&lt;/a&gt;| |344| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-combine-two-or-more-arrays&quot;&gt;How do you combine two or more arrays&lt;/a&gt;| |345| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-shallow-and-deep-copy&quot;&gt;What is the difference between Shallow and Deep copy&lt;/a&gt;| |346| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-specific-number-of-copies-of-a-string&quot;&gt;How do you create specific number of copies of a string&lt;/a&gt;| |347| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-return-all-matching-strings-against-a-regular-expression&quot;&gt;How do you return all matching strings against a regular expression&lt;/a&gt;| |348| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-trim-a-string-at-the-beginning-or-ending&quot;&gt;How do you trim a string at the beginning or ending&lt;/a&gt;| |349| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-console-statement-with-unary-operator&quot;&gt;What is the output of below console statement with unary operator&lt;/a&gt;| |350| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#does-javascript-uses-mixins&quot;&gt;Does javascript uses mixins&lt;/a&gt;| |351| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-thunk-function&quot;&gt;What is a thunk function&lt;/a&gt;| |352| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-asynchronous-thunks&quot;&gt;What are asynchronous thunks&lt;/a&gt;| |353| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-function-calls&quot;&gt;What is the output of below function calls&lt;/a&gt;| |354| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-remove-all-line-breaks-from-a-string&quot;&gt;How to remove all line breaks from a string&lt;/a&gt;| |355| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-reflow-and-repaint&quot;&gt;What is the difference between reflow and repaint&lt;/a&gt;| |356| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-with-negating-an-array&quot;&gt;What happens with negating an array&lt;/a&gt;| |357| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-if-we-add-two-arrays&quot;&gt;What happens if we add two arrays&lt;/a&gt;| |358| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-prepend-additive-operator-on-falsy-values&quot;&gt;What is the output of prepend additive operator on falsy values&lt;/a&gt;| |359| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-self-string-using-special-characters&quot;&gt;How do you create self string using special characters&lt;/a&gt;| |360| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-remove-falsy-values-from-an-array&quot;&gt;How do you remove falsy values from an array&lt;/a&gt;| |361| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-unique-values-of-an-array&quot;&gt;How do you get unique values of an array&lt;/a&gt;| |362| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-destructuring-aliases&quot;&gt;What is destructuring aliases&lt;/a&gt;| |363| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-map-the-array-values-without-using-map-method&quot;&gt;How do you map the array values without using map method&lt;/a&gt;| |364| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-empty-an-array&quot;&gt;How do you empty an array&lt;/a&gt;| |365| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-rounding-numbers-to-certain-decimals&quot;&gt;How do you rounding numbers to certain decimals&lt;/a&gt;| |366| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-easiest-way-to-convert-an-array-to-an-object&quot;&gt;What is the easiest way to convert an array to an object&lt;/a&gt;| |367| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-an-array-with-some-data&quot;&gt;How do you create an array with some data&lt;/a&gt;| |368| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-placeholders-from-console-object&quot;&gt;What are the placeholders from console object&lt;/a&gt;| |369| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-it-possible-to-add-css-to-console-messages&quot;&gt;Is it possible to add CSS to console messages&lt;/a&gt;| |370| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-dir-method-of-console-object&quot;&gt;What is the purpose of dir method of console object&lt;/a&gt;| |371| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-it-possible-to-debug-html-elements-in-console&quot;&gt;Is it possible to debug HTML elements in console&lt;/a&gt;| |372| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-display-data-in-a-tabular-format-using-console-object&quot;&gt;How do you display data in a tabular format using console object&lt;/a&gt;| |373| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-verify-that-an-argument-is-a-number-or-not&quot;&gt;How do you verify that an argument is a Number or not&lt;/a&gt;| |374| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-copy-to-clipboard-button&quot;&gt;How do you create copy to clipboard button&lt;/a&gt;| |375| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-shortcut-to-get-timestamp&quot;&gt;What is the shortcut to get timestamp&lt;/a&gt;| |376| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-flattening-multi-dimensional-arrays&quot;&gt;How do you flattening multi dimensional arrays&lt;/a&gt;| |377| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-easiest-multi-condition-checking&quot;&gt;What is the easiest multi condition checking&lt;/a&gt;| |378| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-capture-browser-back-button&quot;&gt;How do you capture browser back button&lt;/a&gt;| |379| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-disable-right-click-in-the-web-page&quot;&gt;How do you disable right click in the web page&lt;/a&gt;| |380| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-wrapper-objects&quot;&gt;What are wrapper objects&lt;/a&gt;| |381| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-ajax&quot;&gt;What is AJAX&lt;/a&gt;| |382| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-ways-to-deal-with-asynchronous-code&quot;&gt;What are the different ways to deal with Asynchronous Code&lt;/a&gt;| |383| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-cancel-a-fetch-request&quot;&gt;How to cancel a fetch request&lt;/a&gt;| |384| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-web-speech-api&quot;&gt;What is web speech API&lt;/a&gt;| |385| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-minimum-timeout-throttling&quot;&gt;What is minimum timeout throttling&lt;/a&gt;| |386| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-implement-zero-timeout-in-modern-browsers&quot;&gt;How do you implement zero timeout in modern browsers&lt;/a&gt;| |387| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-tasks-in-event-loop&quot;&gt;What are tasks in event loop&lt;/a&gt;| |388| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-microtasks&quot;&gt;What are microtasks&lt;/a&gt;| |389| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-different-event-loops&quot;&gt;What are different event loops&lt;/a&gt;| |390| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-queuemicrotask&quot;&gt;What is the purpose of queueMicrotask&lt;/a&gt;| |391| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-use-javascript-libraries-in-typescript-file&quot;&gt;How do you use javascript libraries in typescript file&lt;/a&gt;| |392| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-promises-and-observables&quot;&gt;What are the differences between promises and observables&lt;/a&gt;| |393| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-heap&quot;&gt;What is heap&lt;/a&gt;| |394| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-table&quot;&gt;What is an event table&lt;/a&gt;| |395| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-microtask-queue&quot;&gt;What is a microTask queue&lt;/a&gt;| |396| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-shim-and-polyfill&quot;&gt;What is the difference between shim and polyfill&lt;/a&gt;| |397| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-primitive-or-non-primitive-value-type&quot;&gt;How do you detect primitive or non primitive value type&lt;/a&gt;| |398| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-babel&quot;&gt;What is babel&lt;/a&gt;| |399| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-node.js-completely-single-threaded&quot;&gt;Is Node.js completely single threaded&lt;/a&gt;| |400| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-common-use-cases-of-observables&quot;&gt;What are the common use cases of observables&lt;/a&gt;| |401| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-rxjs&quot;&gt;What is RxJS&lt;/a&gt;| |402| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-function-constructor-and-function-declaration&quot;&gt;What is the difference between Function constructor and function declaration&lt;/a&gt;| |403| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-short-circuit-condition&quot;&gt;What is a Short circuit condition&lt;/a&gt;| |404| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-easiest-way-to-resize-an-array&quot;&gt;What is the easiest way to resize an array&lt;/a&gt;| |405| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-observable&quot;&gt;What is an observable&lt;/a&gt;| |406| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-function-and-class-declarations&quot;&gt;What is the difference between function and class declarations&lt;/a&gt;| |407| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-async-function&quot;&gt;What is an async function&lt;/a&gt;| |408| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-prevent-promises-swallowing-errors&quot;&gt;How do you prevent promises swallowing errors&lt;/a&gt;| |409| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-deno&quot;&gt;What is deno&lt;/a&gt;| |410| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-make-an-object-iterable-in-javascript&quot;&gt;How do you make an object iterable in javascript&lt;/a&gt;| |411| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-proper-tail-call&quot;&gt;What is a Proper Tail Call&lt;/a&gt;| |412| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-an-object-is-a-promise-or-not&quot;&gt;How do you check an object is a promise or not&lt;/a&gt;| |413| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-detect-if-a-function-is-called-as-constructor&quot;&gt;How to detect if a function is called as constructor&lt;/a&gt;| |414| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-arguments-object-and-rest-parameter&quot;&gt;What are the differences between arguments object and rest parameter&lt;/a&gt;| |415| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-spread-operator-and-rest-parameter&quot;&gt;What are the differences between spread operator and rest parameter&lt;/a&gt;| |416| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-kinds-of-generators&quot;&gt;What are the different kinds of generators&lt;/a&gt;| |417| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-built-in-iterables&quot;&gt;What are the built-in iterables&lt;/a&gt;| |418| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-for...of-and-for...in-statements&quot;&gt;What are the differences between for...of and for...in statements&lt;/a&gt;| |419| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-instance-and-non-instance-properties&quot;&gt;How do you define instance and non-instance properties&lt;/a&gt;| |420| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-isnan-and-number.isnan&quot;&gt;What is the difference between isNaN and Number.isNaN?&lt;/a&gt;|&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible ways to create objects in JavaScript&lt;/h3&gt; &lt;p&gt;There are many ways to create objects in javascript as below&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Object constructor:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The simplest way to create an empty object is using the Object constructor. Currently this approach is not recommended.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var object = new Object();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Object&#39;s create method:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The create method of Object creates a new object by passing the prototype object as a parameter&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var object = Object.create(null);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Object literal syntax:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The object literal syntax is equivalent to create method when it passes null as parameter&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var object = {};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Function constructor:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create any function and apply the new operator to create object instances,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Person(name){
   var object = {};
   object.name=name;
   object.age=21;
   return object;
}
var object = new Person(&quot;Sudheer&quot;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Function constructor with prototype:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This is similar to function constructor but it uses prototype for their properties and methods,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Person(){}
Person.prototype.name = &quot;Sudheer&quot;;
var object = new Person();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is equivalent to an instance created with an object create method with a function prototype and then call that function with an instance and parameters as arguments.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function func {};

new func(x, y, z);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;(OR)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Create a new instance using function prototype.
var newInstance = Object.create(func.prototype)

// Call the function
var result = func.call(newInstance, x, y, z),

// If the result is a non-null object then use it otherwise just use the new instance.
console.log(result &amp;amp;&amp;amp; typeof result === &#39;object&#39; ? result : newInstance);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;ES6 Class syntax:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;ES6 introduces class feature to create the objects&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Person {
   constructor(name) {
      this.name = name;
   }
}

var object = new Person(&quot;Sudheer&quot;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Singleton pattern:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way one can ensure that they don&#39;t accidentally create multiple instances.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var object = new function(){
   this.name = &quot;Sudheer&quot;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a prototype chain&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Prototype chaining&lt;/strong&gt; is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language. The prototype on object instance is available through &lt;strong&gt;Object.getPrototypeOf(object)&lt;/strong&gt; or &lt;strong&gt;proto&lt;/strong&gt; property whereas prototype on constructors function is available through object.prototype.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/prototype_chain.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Call, Apply and Bind&lt;/h3&gt; &lt;p&gt;The difference between Call, Apply and Bind can be explained with below examples,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Call:&lt;/strong&gt; The call() method invokes a function with a given &lt;code&gt;this&lt;/code&gt; value and arguments provided one by one&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var employee1 = {firstName: &#39;John&#39;, lastName: &#39;Rodson&#39;};
var employee2 = {firstName: &#39;Jimmy&#39;, lastName: &#39;Baily&#39;};

function invite(greeting1, greeting2) {
    console.log(greeting1 + &#39; &#39; + this.firstName + &#39; &#39; + this.lastName+ &#39;, &#39;+ greeting2);
}

invite.call(employee1, &#39;Hello&#39;, &#39;How are you?&#39;); // Hello John Rodson, How are you?
invite.call(employee2, &#39;Hello&#39;, &#39;How are you?&#39;); // Hello Jimmy Baily, How are you?
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Apply:&lt;/strong&gt; Invokes the function and allows you to pass in arguments as an array&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var employee1 = {firstName: &#39;John&#39;, lastName: &#39;Rodson&#39;};
var employee2 = {firstName: &#39;Jimmy&#39;, lastName: &#39;Baily&#39;};

function invite(greeting1, greeting2) {
    console.log(greeting1 + &#39; &#39; + this.firstName + &#39; &#39; + this.lastName+ &#39;, &#39;+ greeting2);
}

invite.apply(employee1, [&#39;Hello&#39;, &#39;How are you?&#39;]); // Hello John Rodson, How are you?
invite.apply(employee2, [&#39;Hello&#39;, &#39;How are you?&#39;]); // Hello Jimmy Baily, How are you?
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;bind:&lt;/strong&gt; returns a new function, allowing you to pass in an array and any number of arguments&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var employee1 = {firstName: &#39;John&#39;, lastName: &#39;Rodson&#39;};
var employee2 = {firstName: &#39;Jimmy&#39;, lastName: &#39;Baily&#39;};

function invite(greeting1, greeting2) {
    console.log(greeting1 + &#39; &#39; + this.firstName + &#39; &#39; + this.lastName+ &#39;, &#39;+ greeting2);
}

var inviteEmployee1 = invite.bind(employee1);
var inviteEmployee2 = invite.bind(employee2);
inviteEmployee1(&#39;Hello&#39;, &#39;How are you?&#39;); // Hello John Rodson, How are you?
inviteEmployee2(&#39;Hello&#39;, &#39;How are you?&#39;); // Hello Jimmy Baily, How are you?
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Call and apply are pretty interchangeable. Both execute the current function immediately. You need to decide whether it‚Äôs easier to send in an array or a comma separated list of arguments. You can remember by treating Call is for comma (separated list) and Apply is for Array. Whereas Bind creates a new function that will have &lt;code&gt;this&lt;/code&gt; set to the first parameter passed to bind().&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is JSON and its common operations&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;JSON&lt;/strong&gt; is a text-based data format following JavaScript object syntax, which was popularized by &lt;code&gt;Douglas Crockford&lt;/code&gt;. It is useful when you want to transmit data across a network and it is basically just a text file with an extension of .json, and a MIME type of application/json &lt;strong&gt;Parsing:&lt;/strong&gt; Converting a string to a native object&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;JSON.parse(text)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Stringification: **converting a native object to a string so it can be transmitted across the network&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;JSON.stringify(object)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the array slice method&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;slice()&lt;/strong&gt; method returns the selected elements in an array as a new array object. It selects the elements starting at the given start argument, and ends at the given optional end argument without including the last element. If you omit the second argument then it selects till the end. Some of the examples of this method are,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let arrayIntegers = [1, 2, 3, 4, 5];
let arrayIntegers1 = arrayIntegers.slice(0,2); // returns [1,2]
let arrayIntegers2 = arrayIntegers.slice(2,3); // returns [3]
let arrayIntegers3 = arrayIntegers.slice(4); //returns [5]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Slice method won&#39;t mutate the original array but it returns the subset as a new array.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the array splice method&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;splice()&lt;/strong&gt; method is used either adds/removes items to/from an array, and then returns the removed item. The first argument specifies the array position for insertion or deletion whereas the option second argument indicates the number of elements to be deleted. Each additional argument is added to the array. Some of the examples of this method are,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let arrayIntegersOriginal1 = [1, 2, 3, 4, 5];
let arrayIntegersOriginal2 = [1, 2, 3, 4, 5];
let arrayIntegersOriginal3 = [1, 2, 3, 4, 5];

let arrayIntegers1 = arrayIntegersOriginal1.splice(0,2); // returns [1, 2]; original array: [3, 4, 5]
let arrayIntegers2 = arrayIntegersOriginal2.splice(3); // returns [4, 5]; original array: [1, 2, 3]
let arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;); //returns [4]; original array: [1, 2, 3, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 5]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Splice method modifies the original array and returns the deleted array.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between slice and splice&lt;/h3&gt; &lt;p&gt;Some of the major difference in a tabular form&lt;/p&gt; &lt;p&gt;| Slice | Splice | |---- | --------- | Doesn&#39;t modify the original array(immutable) | Modifies the original array(mutable) | | Returns the subset of original array | Returns the deleted elements as array | | Used to pick the elements from array | Used to insert or delete elements to/from array|&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you compare Object and Map&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Objects&lt;/strong&gt; are similar to &lt;strong&gt;Maps&lt;/strong&gt; in that both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Due to this reason, Objects have been used as Maps historically. But there are important differences that make using a Map preferable in certain cases.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The keys of an Object are Strings and Symbols, whereas they can be any value for a Map, including functions, objects, and any primitive.&lt;/li&gt; 
   &lt;li&gt;The keys in Map are ordered while keys added to Object are not. Thus, when iterating over it, a Map object returns keys in order of insertion.&lt;/li&gt; 
   &lt;li&gt;You can get the size of a Map easily with the size property, while the number of properties in an Object must be determined manually.&lt;/li&gt; 
   &lt;li&gt;A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its keys in some fashion and iterating over them.&lt;/li&gt; 
   &lt;li&gt;An Object has a prototype, so there are default keys in the map that could collide with your keys if you&#39;re not careful. As of ES5 this can be bypassed by using map = Object.create(null), but this is seldom done.&lt;/li&gt; 
   &lt;li&gt;A Map may perform better in scenarios involving frequent addition and removal of key pairs.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between == and === operators&lt;/h3&gt; &lt;p&gt;JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.&lt;/li&gt; 
   &lt;li&gt;Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value. There are two special cases in this, 
    &lt;ol&gt; 
     &lt;li&gt;NaN is not equal to anything, including NaN.&lt;/li&gt; 
     &lt;li&gt;Positive and negative zeros are equal to one another.&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt;Two Boolean operands are strictly equal if both are true or both are false.&lt;/li&gt; 
   &lt;li&gt;Two objects are strictly equal if they refer to the same Object.&lt;/li&gt; 
   &lt;li&gt;Null and Undefined types are not equal with ===, but equal with ==. i.e, null===undefined --&amp;gt; false but null==undefined --&amp;gt; true&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Some of the example which covers the above cases,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;0 == false   // true
0 === false  // false
1 == &quot;1&quot;     // true
1 === &quot;1&quot;    // false
null == undefined // true
null === undefined // false
&#39;0&#39; == false // true
&#39;0&#39; === false // false
[]==[] or []===[] //false, refer different objects in memory
{}=={} or {}==={} //false, refer different objects in memory
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are lambda or arrow functions&lt;/h3&gt; &lt;p&gt;An arrow function is a shorter syntax for a function expression and does not have its own &lt;strong&gt;this, arguments, super, or new.target&lt;/strong&gt;. These functions are best suited for non-method functions, and they cannot be used as constructors.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a first class function&lt;/h3&gt; &lt;p&gt;In Javascript, functions are first class objects. First-class functions means when functions in that language are treated like any other variable.&lt;/p&gt; &lt;p&gt;For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. For example, in the below example, handler functions assigned to a listener&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const handler = () =&amp;gt; console.log (&#39;This is a click handler function&#39;);
document.addEventListener (&#39;click&#39;, handler);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a first order function&lt;/h3&gt; &lt;p&gt;First-order function is a function that doesn‚Äôt accept another function as an argument and doesn‚Äôt return a function as its return value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const firstOrder = () =&amp;gt; console.log (&#39;I am a first order function!&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a higher order function&lt;/h3&gt; &lt;p&gt;Higher-order function is a function that accepts another function as an argument or returns a function as a return value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const firstOrderFunc = () =&amp;gt; console.log (&#39;Hello I am a First order function&#39;);
const higherOrder = ReturnFirstOrderFunc =&amp;gt; ReturnFirstOrderFunc ();
higherOrder (firstOrderFunc);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a unary function&lt;/h3&gt; &lt;p&gt;Unary function (i.e. monadic) is a function that accepts exactly one argument. Let us take an example of unary function. It stands for a single argument accepted by a function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const unaryFunction = a =&amp;gt; console.log (a + 10); // Add 10 to the given argument and display the value
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the currying function&lt;/h3&gt; &lt;p&gt;Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument. Currying is named after a mathematician Haskell Curry. By applying currying, a n-ary function turns it into a unary function. Let&#39;s take an example of n-ary function and how it turns into a currying function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const multiArgFunction = (a, b, c) =&amp;gt; a + b + c;
const curryUnaryFunction = a =&amp;gt; b =&amp;gt; c =&amp;gt; a + b + c;
curryUnaryFunction (1); // returns a function: b =&amp;gt; c =&amp;gt;  1 + b + c
curryUnaryFunction (1) (2); // returns a function: c =&amp;gt; 3 + c
curryUnaryFunction (1) (2) (3); // returns the number 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Curried functions are great to improve code reusability and functional composition.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a pure function&lt;/h3&gt; &lt;p&gt;A &lt;strong&gt;Pure function&lt;/strong&gt; is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments &#39;n&#39; number of times and &#39;n&#39; number of places in the application then it will always return the same value. Let&#39;s take an example to see the difference between pure and impure functions,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Impure
let numberArray = [];
const impureAddNumber = number =&amp;gt; numberArray.push (number);
//Pure
const pureAddNumber = number =&amp;gt; argNumberArray =&amp;gt;
  argNumberArray.concat ([number]);

//Display the results
console.log (impureAddNumber (6)); // returns 1
console.log (numberArray); // returns [6]
console.log (pureAddNumber (7) (numberArray)); // returns [6, 7]
console.log (numberArray); // returns [6]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As per above code snippets, Push function is impure itself by altering the array and returning an push number index which is independent of parameter value. Whereas Concat on the other hand takes the array and concatenates it with the other array producing a whole new array without side effects. Also, the return value is a concatenation of the previous array. Remember that Pure functions are important as they simplify unit testing without any side effects and no need for dependency injection. They also avoid tight coupling and make it harder to break your application by not having any side effects. These principles are coming together with &lt;strong&gt;Immutability&lt;/strong&gt; concept of ES6 by giving preference to &lt;strong&gt;const&lt;/strong&gt; over &lt;strong&gt;let&lt;/strong&gt; usage.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the let keyword&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;let&lt;/code&gt; statement declares a &lt;strong&gt;block scope local variable&lt;/strong&gt;. Hence the variables defined with let keyword are limited in scope to the block, statement, or expression on which it is used. Whereas variables declared with the var keyword used to define a variable globally, or locally to an entire function regardless of block scope. Let&#39;s take an example to demonstrate the usage,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let counter = 30;
if (counter === 30) {
  let counter = 31;
  console.log(counter); // 31
}
console.log(counter); // 30 (because if block variable won&#39;t exist here)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between let and var&lt;/h3&gt; &lt;p&gt;You can list out the differences in a tabular format&lt;/p&gt; &lt;p&gt;| var | let | |---- | --------- | It is been available from the beginning of JavaScript | Introduced as part of ES6 | | It has function scope | It has block scope | | Variables will be hoisted | Hoisted but not initialized |&lt;/p&gt; &lt;p&gt;Let&#39;s take an example to see the difference,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function userDetails(username) {
   if(username) {
     console.log(salary); // undefined(due to hoisting)
     console.log(age); // error: age is not defined
     let age = 30;
     var salary = 10000;
   }
   console.log(salary); //10000 (accessible to due function scope)
   console.log(age); //error: age is not defined(due to block scope)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the reason to choose the name let as a keyword&lt;/h3&gt; &lt;p&gt;Let is a mathematical statement that was adopted by early programming languages like Scheme and Basic. It has been borrowed from dozens of other languages that use let already as a traditional keyword as close to var as possible.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you redeclare variables in switch block without an error&lt;/h3&gt; &lt;p&gt;If you try to redeclare variables in a &lt;code&gt;switch block&lt;/code&gt; then it will cause errors because there is only one block. For example, the below code block throws a syntax error as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let counter = 1;
switch(x) {
  case 0:
    let name;
    break;

  case 1:
    let name; // SyntaxError for redeclaration.
    break;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To avoid this error, you can create a nested block inside a case clause and create a new block scoped lexical environment.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let counter = 1;
    switch(x) {
      case 0: {
        let name;
        break;
      }
      case 1: {
        let name; // No SyntaxError for redeclaration.
        break;
      }
    }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the Temporal Dead Zone&lt;/h3&gt; &lt;p&gt;The Temporal Dead Zone is a behavior in JavaScript that occurs when declaring a variable with the let and const keywords, but not with var. In ECMAScript 6, accessing a let or const variable before its declaration (within its scope) causes a ReferenceError. The time span when that happens, between the creation of a variable‚Äôs binding and its declaration, is called the temporal dead zone. Let&#39;s see this behavior with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function somemethod() {
  console.log(counter1); // undefined
  console.log(counter2); // ReferenceError
  var counter1 = 1;
  let counter2 = 2;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is IIFE(Immediately Invoked Function Expression)&lt;/h3&gt; &lt;p&gt;IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The signature of it would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(function ()
    {
      // logic here
    }
 )
();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. i.e, If you try to access variables with IIFE then it throws an error as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(function ()
        {
          var message = &quot;IIFE&quot;;
          console.log(message);
        }
 )
();
console.log(message); //Error: message is not defined
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of using modules&lt;/h3&gt; &lt;p&gt;There are a lot of benefits to using modules in favour of a sprawling. Some of the benefits are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Maintainability&lt;/li&gt; 
   &lt;li&gt;Reusability&lt;/li&gt; 
   &lt;li&gt;Namespacing&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is memoization&lt;/h3&gt; &lt;p&gt;Memoization is a programming technique which attempts to increase a function‚Äôs performance by caching its previously computed results. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. Otherwise the function is executed and then the result is added to the cache. Let&#39;s take an example of adding function with memoization,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const memoizAddition = () =&amp;gt; {
  let cache = {};
 return (value) =&amp;gt; {
  if (value in cache) {
   console.log(&#39;Fetching from cache&#39;);
   return cache[value]; // Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.
  }
  else {
   console.log(&#39;Calculating result&#39;);
   let result = value + 20;
   cache[value] = result;
   return result;
  }
 }
}
// returned function from memoizAddition
const addition = memoizAddition();
console.log(addition(20)); //output: 40 calculated
console.log(addition(20)); //output: 40 cached
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is Hoisting&lt;/h3&gt; &lt;p&gt;Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution. Remember that JavaScript only hoists declarations, not initialisation. Let&#39;s take a simple example of variable hoisting,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(message); //output : undefined
var message = &#39;The variable Has been hoisted&#39;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code looks like as below to the interpreter,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var message;
console.log(message);
message = &#39;The variable Has been hoisted&#39;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are classes in ES6&lt;/h3&gt; &lt;p&gt;In ES6, Javascript classes are primarily syntactic sugar over JavaScript‚Äôs existing prototype-based inheritance. For example, the prototype based inheritance written in function expression as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Bike(model,color) {
    this.model = model;
    this.color = color;
}

Bike.prototype.getDetails = function() {
    return this.model + &#39; bike has&#39; + this.color + &#39; color&#39;;
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas ES6 classes can be defined as an alternative&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Bike{
  constructor(color, model) {
    this.color= color;
    this.model= model;
  }

  getDetails() {
    return this.model + &#39; bike has&#39; + this.color + &#39; color&#39;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are closures&lt;/h3&gt; &lt;p&gt;A closure is the combination of a function and the lexical environment within which that function was declared. i.e, It is an inner function that has access to the outer or enclosing function‚Äôs variables. The closure has three scope chains&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Own scope where variables defined between its curly brackets&lt;/li&gt; 
   &lt;li&gt;Outer function‚Äôs variables&lt;/li&gt; 
   &lt;li&gt;Global variables Let&#39;s take an example of closure concept,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Welcome(name){
  var greetingInfo = function(message){
   console.log(message+&#39; &#39;+name);
  }
return greetingInfo;
}
var myFunction = Welcome(&#39;John&#39;);
myFunction(&#39;Welcome &#39;); //Output: Welcome John
myFunction(&#39;Hello Mr.&#39;); //output: Hello Mr.John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As per the above code, the inner function(greetingInfo) has access to the variables in the outer function scope(Welcome) even after the outer function has returned.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are modules&lt;/h3&gt; &lt;p&gt;Modules refer to small units of independent, reusable code and also act as the foundation of many JavaScript design patterns. Most of the JavaScript modules export an object literal, a function, or a constructor&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need modules&lt;/h3&gt; &lt;p&gt;Below are the list of benefits using modules in javascript ecosystem&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Maintainability&lt;/li&gt; 
   &lt;li&gt;Reusability&lt;/li&gt; 
   &lt;li&gt;Namespacing&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is scope in javascript&lt;/h3&gt; &lt;p&gt;Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a service worker&lt;/h3&gt; &lt;p&gt;A Service worker is basically a script (JavaScript file) that runs in the background, separate from a web page and provides features that don&#39;t need a web page or user interaction. Some of the major features of service workers are Rich offline experiences(offline first web application development), periodic background syncs, push notifications, intercept and handle network requests and programmatically managing a cache of responses.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you manipulate DOM using a service worker&lt;/h3&gt; &lt;p&gt;Service worker can&#39;t access the DOM directly. But it can communicate with the pages it controls by responding to messages sent via the &lt;code&gt;postMessage&lt;/code&gt; interface, and those pages can manipulate the DOM.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you reuse information across service worker restarts&lt;/h3&gt; &lt;p&gt;The problem with service worker is that it gets terminated when not in use, and restarted when it&#39;s next needed, so you cannot rely on global state within a service worker&#39;s &lt;code&gt;onfetch&lt;/code&gt; and &lt;code&gt;onmessage&lt;/code&gt; handlers. In this case, service workers will have access to IndexedDB API in order to persist and reuse across restarts.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is IndexedDB&lt;/h3&gt; &lt;p&gt;IndexedDB is a low-level API for client-side storage of larger amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is web storage&lt;/h3&gt; &lt;p&gt;Web storage is an API that provides a mechanism by which browsers can store key/value pairs locally within the user&#39;s browser, in a much more intuitive fashion than using cookies. The web storage provides two mechanisms for storing data on the client.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Local storage:&lt;/strong&gt; It stores data for current origin with no expiration date.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Session storage:&lt;/strong&gt; It stores data for one session and the data is lost when the browser tab is closed.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a post message&lt;/h3&gt; &lt;p&gt;Post message is a method that enables cross-origin communication between Window objects.(i.e, between a page and a pop-up that it spawned, or between a page and an iframe embedded within it). Generally, scripts on different pages are allowed to access each other if and only if the pages follow same-origin policy(i.e, pages share the same protocol, port number, and host).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a Cookie&lt;/h3&gt; &lt;p&gt;A cookie is a piece of data that is stored on your computer to be accessed by your browser. Cookies are saved as key/value pairs. For example, you can create a cookie named username as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.cookie = &quot;username=John&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/cookie.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need a Cookie&lt;/h3&gt; &lt;p&gt;Cookies are used to remember information about the user profile(such as username). It basically involves two steps,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;When a user visits a web page, the user profile can be stored in a cookie.&lt;/li&gt; 
   &lt;li&gt;Next time the user visits the page, the cookie remembers the user profile.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the options in a cookie&lt;/h3&gt; &lt;p&gt;There are few below options available for a cookie,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;By default, the cookie is deleted when the browser is closed but you can change this behavior by setting expiry date (in UTC time).&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.cookie = &quot;username=John; expires=Sat, 8 Jun 2019 12:00:00 UTC&quot;;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;By default, the cookie belongs to a current page. But you can tell the browser what path the cookie belongs to using a path parameter.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.cookie = &quot;username=John; path=/services&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you delete a cookie&lt;/h3&gt; &lt;p&gt;You can delete a cookie by setting the expiry date as a passed date. You don&#39;t need to specify a cookie value in this case. For example, you can delete a username cookie in the current page as below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.cookie = &quot;username=; expires=Fri, 07 Jun 2019 00:00:00 UTC; path=/;&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You should define the cookie path option to ensure that you delete the right cookie. Some browsers doesn&#39;t allow to delete a cookie unless you specify a path parameter.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between cookie, local storage and session storage&lt;/h3&gt; &lt;p&gt;Below are some of the differences between cookie, local storage and session storage,&lt;/p&gt; &lt;p&gt;| Feature | Cookie | Local storage | Session storage | |---- | --------- | ----- | ----- | | Accessed on client or server side | Both server-side &amp;amp; client-side | client-side only | client-side only | | Lifetime | As configured using Expires option | until deleted | until tab is closed | | SSL support | Supported | Not supported | Not supported | | Maximum data size | 4KB | 5 MB | 5MB |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main difference between localStorage and sessionStorage&lt;/h3&gt; &lt;p&gt;LocalStorage is the same as SessionStorage but it persists the data even when the browser is closed and reopened(i.e it has no expiration time) whereas in sessionStorage data gets cleared when the page session ends.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access web storage&lt;/h3&gt; &lt;p&gt;The Window object implements the &lt;code&gt;WindowLocalStorage&lt;/code&gt; and &lt;code&gt;WindowSessionStorage&lt;/code&gt; objects which has &lt;code&gt;localStorage&lt;/code&gt;(window.localStorage) and &lt;code&gt;sessionStorage&lt;/code&gt;(window.sessionStorage) properties respectively. These properties create an instance of the Storage object, through which data items can be set, retrieved and removed for a specific domain and storage type (session or local). For example, you can read and write on local storage objects as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;localStorage.setItem(&#39;logo&#39;, document.getElementById(&#39;logo&#39;).value);
localStorage.getItem(&#39;logo&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the methods available on session storage&lt;/h3&gt; &lt;p&gt;The session storage provided methods for reading, writing and clearing the session data&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Save data to sessionStorage
sessionStorage.setItem(&#39;key&#39;, &#39;value&#39;);

// Get saved data from sessionStorage
let data = sessionStorage.getItem(&#39;key&#39;);

// Remove saved data from sessionStorage
sessionStorage.removeItem(&#39;key&#39;);

// Remove all saved data from sessionStorage
sessionStorage.clear();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a storage event and its event handler&lt;/h3&gt; &lt;p&gt;The StorageEvent is an event that fires when a storage area has been changed in the context of another document. Whereas onstorage property is an EventHandler for processing storage events. The syntax would be as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; window.onstorage = functionRef;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s take the example usage of onstorage event handler which logs the storage key and it&#39;s values&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.onstorage = function(e) {
  console.log(&#39;The &#39; + e.key +
    &#39; key has been changed from &#39; + e.oldValue +
    &#39; to &#39; + e.newValue + &#39;.&#39;);
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need web storage&lt;/h3&gt; &lt;p&gt;Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance. Also, the information is never transferred to the server. Hence this is a more recommended approach than Cookies.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check web storage browser support&lt;/h3&gt; &lt;p&gt;You need to check browser support for localStorage and sessionStorage before using web storage,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (typeof(Storage) !== &quot;undefined&quot;) {
  // Code for localStorage/sessionStorage.
} else {
  // Sorry! No Web Storage support..
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check web workers browser support&lt;/h3&gt; &lt;p&gt;You need to check browser support for web workers before using it&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (typeof(Worker) !== &quot;undefined&quot;) {
  // code for Web worker support.
} else {
  // Sorry! No Web Worker support..
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example of a web worker&lt;/h3&gt; &lt;p&gt;You need to follow below steps to start using web workers for counting example&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Create a Web Worker File: You need to write a script to increment the count value. Let&#39;s name it as counter.js&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let i = 0;

function timedCount() {
  i = i + 1;
  postMessage(i);
  setTimeout(&quot;timedCount()&quot;,500);
}

timedCount();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here postMessage() method is used to post a message back to the HTML page&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Create a Web Worker Object: You can create a web worker object by checking for browser support. Let&#39;s name this file as web_worker_example.js&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (typeof(w) == &quot;undefined&quot;) {
  w = new Worker(&quot;counter.js&quot;);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and we can receive messages from web worker&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;w.onmessage = function(event){
  document.getElementById(&quot;message&quot;).innerHTML = event.data;
};
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Terminate a Web Worker: Web workers will continue to listen for messages (even after the external script is finished) until it is terminated. You can use the terminate() method to terminate listening to the messages.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;w.terminate();
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Reuse the Web Worker: If you set the worker variable to undefined you can reuse the code&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;w = undefined;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the restrictions of web workers on DOM&lt;/h3&gt; &lt;p&gt;WebWorkers don&#39;t have access to below javascript objects since they are defined in an external files&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Window object&lt;/li&gt; 
   &lt;li&gt;Document object&lt;/li&gt; 
   &lt;li&gt;Parent object&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a promise&lt;/h3&gt; &lt;p&gt;A promise is an object that may produce a single value some time in the future with either a resolved value or a reason that it‚Äôs not resolved(for example, network error). It will be in one of the 3 possible states: fulfilled, rejected, or pending.&lt;/p&gt; &lt;p&gt;The syntax of Promise creation looks like below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    const promise = new Promise(function(resolve, reject) {
      // promise description
    })
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The usage of a promise would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const promise = new Promise(resolve =&amp;gt; {
  setTimeout(() =&amp;gt; {
    resolve(&quot;I&#39;m a Promise!&quot;);
  }, 5000);
}, reject =&amp;gt; {

});

promise.then(value =&amp;gt; console.log(value));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The action flow of a promise will be as below,&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/promises.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need a promise&lt;/h3&gt; &lt;p&gt;Promises are used to handle asynchronous operations. They provide an alternative approach for callbacks by reducing the callback hell and writing the cleaner code.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the three states of promise&lt;/h3&gt; &lt;p&gt;Promises have three states:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Pending:&lt;/strong&gt; This is an initial state of the Promise before an operation begins&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Fulfilled:&lt;/strong&gt; This state indicates that the specified operation was completed.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Rejected:&lt;/strong&gt; This state indicates that the operation did not complete. In this case an error value will be thrown.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a callback function&lt;/h3&gt; &lt;p&gt;A callback function is a function passed into another function as an argument. This function is invoked inside the outer function to complete an action. Let&#39;s take a simple example of how to use callback function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function callbackFunction(name) {
  console.log(&#39;Hello &#39; + name);
}

function outerFunction(callback) {
  let name = prompt(&#39;Please enter your name.&#39;);
  callback(name);
}

outerFunction(callbackFunction);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do we need callbacks&lt;/h3&gt; &lt;p&gt;The callbacks are needed because javascript is an event driven language. That means instead of waiting for a response javascript will keep executing while listening for other events. Let&#39;s take an example with the first function invoking an API call(simulated by setTimeout) and the next function which logs the message.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function firstFunction(){
  // Simulate a code delay
  setTimeout( function(){
    console.log(&#39;First function called&#39;);
  }, 1000 );
}
function secondFunction(){
  console.log(&#39;Second function called&#39;);
}
firstFunction();
secondFunction();

Output
// Second function called
// First function called
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As observed from the output, javascript didn&#39;t wait for the response of the first function and the remaining code block got executed. So callbacks are used in a way to make sure that certain code doesn‚Äôt execute until the other code finishes execution.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a callback hell&lt;/h3&gt; &lt;p&gt;Callback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing with asynchronous logic. The callback hell looks like below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async1(function(){
    async2(function(){
        async3(function(){
            async4(function(){
                ....
            });
        });
    });
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are server-sent events&lt;/h3&gt; &lt;p&gt;Server-sent events (SSE) is a server push technology enabling a browser to receive automatic updates from a server via HTTP connection without resorting to polling. These are a one way communications channel - events flow from server to client only. This has been used in Facebook/Twitter updates, stock price updates, news feeds etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you receive server-sent event notifications&lt;/h3&gt; &lt;p&gt;The EventSource object is used to receive server-sent event notifications. For example, you can receive messages from server as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if(typeof(EventSource) !== &quot;undefined&quot;) {
  var source = new EventSource(&quot;sse_generator.js&quot;);
  source.onmessage = function(event) {
    document.getElementById(&quot;output&quot;).innerHTML += event.data + &quot;&amp;lt;br&amp;gt;&quot;;
  };
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check browser support for server-sent events&lt;/h3&gt; &lt;p&gt;You can perform browser support for server-sent events before using it as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if(typeof(EventSource) !== &quot;undefined&quot;) {
  // Server-sent events supported. Let&#39;s have some code here!
} else {
  // No server-sent events supported
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the events available for server sent events&lt;/h3&gt; &lt;p&gt;Below are the list of events available for server sent events | Event | Description | |---- | --------- | onopen | It is used when a connection to the server is opened | | onmessage | This event is used when a message is received | | onerror | It happens when an error occurs|&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main rules of promise&lt;/h3&gt; &lt;p&gt;A promise must follow a specific set of rules,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;A promise is an object that supplies a standard-compliant &lt;code&gt;.then()&lt;/code&gt; method&lt;/li&gt; 
   &lt;li&gt;A pending promise may transition into either fulfilled or rejected state&lt;/li&gt; 
   &lt;li&gt;A fulfilled or rejected promise is settled and it must not transition into any other state.&lt;/li&gt; 
   &lt;li&gt;Once a promise is settled, the value must not change.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is callback in callback&lt;/h3&gt; &lt;p&gt;You can nest one callback inside in another callback to execute the actions sequentially one by one. This is known as callbacks in callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;loadScript(&#39;/script1.js&#39;, function(script) {
   console.log(&#39;first script is loaded&#39;);

  loadScript(&#39;/script2.js&#39;, function(script) {

    console.log(&#39;second script is loaded&#39;);

    loadScript(&#39;/script3.js&#39;, function(script) {

        console.log(&#39;third script is loaded&#39;);
      // after all scripts are loaded
    });

  })

});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is promise chaining&lt;/h3&gt; &lt;p&gt;The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. Let&#39;s take an example of promise chaining for calculating the final result,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;new Promise(function(resolve, reject) {

  setTimeout(() =&amp;gt; resolve(1), 1000);

}).then(function(result) {

  console.log(result); // 1
  return result * 2;

}).then(function(result) {

  console.log(result); // 2
  return result * 3;

}).then(function(result) {

  console.log(result); // 6
  return result * 4;

});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above handlers, the result is passed to the chain of .then() handlers with the below work flow,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The initial promise resolves in 1 second,&lt;/li&gt; 
   &lt;li&gt;After that &lt;code&gt;.then&lt;/code&gt; handler is called by logging the result(1) and then return a promise with the value of result * 2.&lt;/li&gt; 
   &lt;li&gt;After that the value passed to the next &lt;code&gt;.then&lt;/code&gt; handler by logging the result(2) and return a promise with result * 3.&lt;/li&gt; 
   &lt;li&gt;Finally the value passed to the last &lt;code&gt;.then&lt;/code&gt; handler by logging the result(6) and return a promise with result * 4.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is promise.all&lt;/h3&gt; &lt;p&gt;Promise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise.all([Promise1, Promise2, Promise3]) .then(result) =&amp;gt; {   console.log(result) }) .catch(error =&amp;gt; console.log(`Error in promises ${error}`))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remember that the order of the promises(output the result) is maintained as per input order.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the race method in promise&lt;/h3&gt; &lt;p&gt;Promise.race() method will return the promise instance which is firstly resolved or rejected. Let&#39;s take an example of race() method where promise2 is resolved first&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var promise1 = new Promise(function(resolve, reject) {
    setTimeout(resolve, 500, &#39;one&#39;);
});
var promise2 = new Promise(function(resolve, reject) {
    setTimeout(resolve, 100, &#39;two&#39;);
});

Promise.race([promise1, promise2]).then(function(value) {
  console.log(value); // &quot;two&quot; // Both promises will resolve, but promise2 is faster
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a strict mode in javascript&lt;/h3&gt; &lt;p&gt;Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a ‚Äústrict‚Äù operating context. This way it prevents certain actions from being taken and throws more exceptions. The literal expression &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; instructs the browser to use the javascript code in the Strict mode.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need strict mode&lt;/h3&gt; &lt;p&gt;Strict mode is useful to write &quot;secure&quot; JavaScript by notifying &quot;bad syntax&quot; into real errors. For example, it eliminates accidentally creating a global variable by throwing an error and also throws an error for assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you declare strict mode&lt;/h3&gt; &lt;p&gt;The strict mode is declared by adding &quot;use strict&quot;; to the beginning of a script or a function. If declared at the beginning of a script, it has global scope.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;use strict&quot;;
x = 3.14; // This will cause an error because x is not declared
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and if you declare inside a function, it has local scope&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;x = 3.14;       // This will not cause an error.
myFunction();

function myFunction() {
  &quot;use strict&quot;;
  y = 3.14;   // This will cause an error
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of double exclamation&lt;/h3&gt; &lt;p&gt;The double exclamation or negation(!!) ensures the resulting type is a boolean. If it was falsey (e.g. 0, null, undefined, etc.), it will be false, otherwise, true. For example, you can test IE version using this expression as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let isIE8 = false;
isIE8 = !! navigator.userAgent.match(/MSIE 8.0/);
console.log(isIE8); // returns true or false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don&#39;t use this expression then it returns the original value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(navigator.userAgent.match(/MSIE 8.0/));  // returns either an Array or null
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The expression !! is not an operator, but it is just twice of ! operator.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the delete operator&lt;/h3&gt; &lt;p&gt;The delete keyword is used to delete the property as well as its value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var user= {name: &quot;John&quot;, age:20};
delete user.age;

console.log(user); // {name: &quot;John&quot;}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the typeof operator&lt;/h3&gt; &lt;p&gt;You can use the JavaScript typeof operator to find the type of a JavaScript variable. It returns the type of a variable or an expression.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;typeof &quot;John Abraham&quot;     // Returns &quot;string&quot;
typeof (1 + 2)        // Returns &quot;number&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is undefined property&lt;/h3&gt; &lt;p&gt;The undefined property indicates that a variable has not been assigned a value, or not declared at all. The type of undefined value is undefined too.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var user;    // Value is undefined, type is undefined
console.log(typeof(user)) //undefined
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Any variable can be emptied by setting the value to undefined.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;user = undefined
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is null value&lt;/h3&gt; &lt;p&gt;The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values. The type of null value is object. You can empty the variable by setting the value to null.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var user = null;
console.log(typeof(user)) //object
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between null and undefined&lt;/h3&gt; &lt;p&gt;Below are the main differences between null and undefined,&lt;/p&gt; &lt;p&gt;| Null | Undefined | |---- | -----------| | It is an assignment value which indicates that variable points to no object. | It is not an assignment value where a variable has been declared but has not yet been assigned a value. | | Type of null is object | Type of undefined is undefined | | The null value is a primitive value that represents the null, empty, or non-existent reference. | The undefined value is a primitive value used when a variable has not been assigned a value.| | Indicates the absence of a value for a variable | Indicates absence of variable itself | | Converted to zero (0) while performing primitive operations | Converted to NaN while performing primitive operations |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is eval&lt;/h3&gt; &lt;p&gt;The eval() function evaluates JavaScript code represented as a string. The string can be a JavaScript expression, variable, statement, or sequence of statements.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(eval(&#39;1 + 2&#39;)); //  3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between window and document&lt;/h3&gt; &lt;p&gt;Below are the main differences between window and document,&lt;/p&gt; &lt;p&gt;| Window | Document | |---- | --------- | It is the root level element in any web page | It is the direct child of the window object. This is also known as Document Object Model(DOM) | | By default window object is available implicitly in the page | You can access it via window.document or document. | | It has methods like alert(), confirm() and properties like document, location | It provides methods like getElementById, getElementByTagName, createElement etc |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access history in javascript&lt;/h3&gt; &lt;p&gt;The window.history object contains the browser&#39;s history. You can load previous and next URLs in the history using back() and next() methods.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function goBack() {
  window.history.back()
}
function goForward() {
  window.history.forward()
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also access history without window prefix.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the javascript data types&lt;/h3&gt; &lt;p&gt;Below are the list of javascript data types available&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Number&lt;/li&gt; 
   &lt;li&gt;String&lt;/li&gt; 
   &lt;li&gt;Boolean&lt;/li&gt; 
   &lt;li&gt;Object&lt;/li&gt; 
   &lt;li&gt;Undefined&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is isNaN&lt;/h3&gt; &lt;p&gt;The isNaN() function is used to determine whether a value is an illegal number (Not-a-Number) or not. i.e, This function returns true if the value equates to NaN. Otherwise it returns false.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;isNaN(&#39;Hello&#39;) //true
isNaN(&#39;100&#39;) //false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between undeclared and undefined variables&lt;/h3&gt; &lt;p&gt;Below are the major differences between undeclared and undefined variables,&lt;/p&gt; &lt;p&gt;| undeclared | undefined | |---- | --------- | These variables do not exist in a program and are not declared | These variables declared in the program but have not assigned any value | | If you try to read the value of an undeclared variable, then a runtime error is encountered | If you try to read the value of an undefined variable, an undefined value is returned. |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are global variables&lt;/h3&gt; &lt;p&gt;Global variables are those that are available throughout the length of the code without any scope. The var keyword is used to declare a local variable but if you omit it then it will become global variable&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;msg = &quot;Hello&quot; // var is missing, it becomes global variable
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the problems with global variables&lt;/h3&gt; &lt;p&gt;The problem with global variables is the conflict of variable names of local and global scope. It is also difficult to debug and test the code that relies on global variables.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is NaN property&lt;/h3&gt; &lt;p&gt;The NaN property is a global property that represents &quot;Not-a-Number&quot; value. i.e, It indicates that a value is not a legal number. It is very rare to use NaN in a program but it can be used as return value for few cases&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Math.sqrt(-1)
parseInt(&quot;Hello&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of isFinite function&lt;/h3&gt; &lt;p&gt;The isFinite() function is used to determine whether a number is a finite, legal number. It returns false if the value is +infinity, -infinity, or NaN (Not-a-Number), otherwise it returns true.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;isFinite(Infinity);  // false
isFinite(NaN);       // false
isFinite(-Infinity); // false

isFinite(100);         // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event flow&lt;/h3&gt; &lt;p&gt;Event flow is the order in which event is received on the web page. When you click an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event for each of its parent elements first, starting at the top with the global window object. There are two ways of event flow&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Top to Bottom(Event Capturing)&lt;/li&gt; 
   &lt;li&gt;Bottom to Top (Event Bubbling)&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is event bubbling&lt;/h3&gt; &lt;p&gt;Event bubbling is a type of event propagation where the event first triggers on the innermost target element, and then successively triggers on the ancestors (parents) of the target element in the same nesting hierarchy till it reaches the outermost DOM element.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is event capturing&lt;/h3&gt; &lt;p&gt;Event capturing is a type of event propagation where the event is first captured by the outermost element, and then successively triggers on the descendants (children) of the target element in the same nesting hierarchy till it reaches the innermost DOM element.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you submit a form using JavaScript&lt;/h3&gt; &lt;p&gt;You can submit a form using JavaScript use document.form[0].submit(). All the form input&#39;s information is submitted using onsubmit event handler&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function submit() {
    document.form[0].submit();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you find operating system details&lt;/h3&gt; &lt;p&gt;The window.navigator object contains information about the visitor&#39;s browser OS details. Some of the OS properties are available under platform property,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(navigator.platform);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between document load and DOMContentLoaded events&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;DOMContentLoaded&lt;/code&gt; event is fired when the initial HTML document has been completely loaded and parsed, without waiting for assets(stylesheets, images, and subframes) to finish loading. Whereas The load event is fired when the whole page has loaded, including all dependent resources(stylesheets, images).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between native, host and user objects&lt;/h3&gt; &lt;p&gt;&lt;code&gt;Native objects&lt;/code&gt; are objects that are part of the JavaScript language defined by the ECMAScript specification. For example, String, Math, RegExp, Object, Function etc core objects defined in the ECMAScript spec. &lt;code&gt;Host objects&lt;/code&gt; are objects provided by the browser or runtime environment (Node). For example, window, XmlHttpRequest, DOM nodes etc are considered as host objects. &lt;code&gt;User objects&lt;/code&gt; are objects defined in the javascript code. For example, User objects created for profile information.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the tools or techniques used for debugging JavaScript code&lt;/h3&gt; &lt;p&gt;You can use below tools or techniques for debugging javascript&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Chrome Devtools&lt;/li&gt; 
   &lt;li&gt;debugger statement&lt;/li&gt; 
   &lt;li&gt;Good old console.log statement&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the pros and cons of promises over callbacks&lt;/h3&gt; &lt;p&gt;Below are the list of pros and cons of promises over callbacks,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It avoids callback hell which is unreadable&lt;/li&gt; 
   &lt;li&gt;Easy to write sequential asynchronous code with .then()&lt;/li&gt; 
   &lt;li&gt;Easy to write parallel asynchronous code with Promise.all()&lt;/li&gt; 
   &lt;li&gt;Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors/exceptions)&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It makes little complex code&lt;/li&gt; 
   &lt;li&gt;You need to load a polyfill if ES6 is not supported&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between an attribute and a property&lt;/h3&gt; &lt;p&gt;Attributes are defined on the HTML markup whereas properties are defined on the DOM. For example, the below HTML element has 2 attributes type and value,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;input type=&quot;text&quot; value=&quot;Name:&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can retrieve the attribute value as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const input = document.querySelector(&#39;input&#39;);
console.log(input.getAttribute(&#39;value&#39;)); // Good morning
console.log(input.value); // Good morning
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And after you change the value of the text field to &quot;Good evening&quot;, it becomes like&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(input.getAttribute(&#39;value&#39;)); // Good morning
console.log(input.value); // Good evening
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is same-origin policy&lt;/h3&gt; &lt;p&gt;The same-origin policy is a policy that prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. If you enable this policy then it prevents a malicious script on one page from obtaining access to sensitive data on another web page using Document Object Model(DOM).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of void 0&lt;/h3&gt; &lt;p&gt;Void(0) is used to prevent the page from refreshing. This will be helpful to eliminate the unwanted side-effect, because it will return the undefined primitive value. It is commonly used for HTML documents that use href=&quot;JavaScript:Void(0);&quot; within an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element. i.e, when you click a link, the browser loads a new page or refreshes the same page. But this behavior will be prevented using this expression. For example, the below link notify the message without reloading the page&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;a href=&quot;JavaScript:void(0);&quot; onclick=&quot;alert(&#39;Well done!&#39;)&quot;&amp;gt;Click Me!&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is JavaScript a compiled or interpreted language&lt;/h3&gt; &lt;p&gt;JavaScript is an interpreted language, not a compiled language. An interpreter in the browser reads over the JavaScript code, interprets each line, and runs it. Nowadays modern browsers use a technology known as Just-In-Time (JIT) compilation, which compiles JavaScript to executable bytecode just as it is about to run.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is JavaScript a case-sensitive language&lt;/h3&gt; &lt;p&gt;Yes, JavaScript is a case sensitive language. The language keywords, variables, function &amp;amp; object names, and any other identifiers must always be typed with a consistent capitalization of letters.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is there any relation between Java and JavaScript&lt;/h3&gt; &lt;p&gt;No, they are entirely two different programming languages and have nothing to do with each other. But both of them are Object Oriented Programming languages and like many other languages, they follow similar syntax for basic features(if, else, for, switch, break, continue etc).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are events&lt;/h3&gt; &lt;p&gt;Events are &quot;things&quot; that happen to HTML elements. When JavaScript is used in HTML pages, JavaScript can &lt;code&gt;react&lt;/code&gt; on these events. Some of the examples of HTML events are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Web page has finished loading&lt;/li&gt; 
   &lt;li&gt;Input field was changed&lt;/li&gt; 
   &lt;li&gt;Button was clicked&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let&#39;s describe the behavior of click event for button element,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
 &amp;lt;head&amp;gt;
   &amp;lt;script&amp;gt;
     function greeting() {
       alert(&#39;Hello! Good morning&#39;);
     }
   &amp;lt;/script&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
   &amp;lt;button type=&quot;button&quot; onclick=&quot;greeting()&quot;&amp;gt;Click me&amp;lt;/button&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Who created javascript&lt;/h3&gt; &lt;p&gt;JavaScript was created by Brendan Eich in 1995 during his time at Netscape Communications. Initially it was developed under the name &lt;code&gt;Mocha&lt;/code&gt;, but later the language was officially called &lt;code&gt;LiveScript&lt;/code&gt; when it first shipped in beta releases of Netscape.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of preventDefault method&lt;/h3&gt; &lt;p&gt;The preventDefault() method cancels the event if it is cancelable, meaning that the default action or behaviour that belongs to the event will not occur. For example, prevent form submission when clicking on submit button and prevent opening the page URL when clicking on hyperlink are some common use cases.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&quot;link&quot;).addEventListener(&quot;click&quot;, function(event){
 event.preventDefault();
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remember that not all events are cancelable.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of stopPropagation method&lt;/h3&gt; &lt;p&gt;The stopPropagation method is used to stop the event from bubbling up the event chain. For example, the below nested divs with stopPropagation method prevents default event propagation when clicking on nested div(Div1)&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;p&amp;gt;Click DIV1 Element&amp;lt;/p&amp;gt;
&amp;lt;div onclick=&quot;secondFunc()&quot;&amp;gt;DIV 2
  &amp;lt;div onclick=&quot;firstFunc(event)&quot;&amp;gt;DIV 1&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
function firstFunc(event) {
  alert(&quot;DIV 1&quot;);
  event.stopPropagation();
}

function secondFunc() {
  alert(&quot;DIV 2&quot;);
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the steps involved in return false usage&lt;/h3&gt; &lt;p&gt;The return false statement in event handlers performs the below steps,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;First it stops the browser&#39;s default action or behaviour.&lt;/li&gt; 
   &lt;li&gt;It prevents the event from propagating the DOM&lt;/li&gt; 
   &lt;li&gt;Stops callback execution and returns immediately when called.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is BOM&lt;/h3&gt; &lt;p&gt;The Browser Object Model (BOM) allows JavaScript to &quot;talk to&quot; the browser. It consists of the objects navigator, history, screen, location and document which are children of the window. The Browser Object Model is not standardized and can change based on different browsers.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/bom.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of setTimeout&lt;/h3&gt; &lt;p&gt;The setTimeout() method is used to call a function or evaluate an expression after a specified number of milliseconds. For example, let&#39;s log a message after 2 seconds using setTimeout method,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;setTimeout(function(){ console.log(&quot;Good morning&quot;); }, 2000);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of setInterval&lt;/h3&gt; &lt;p&gt;The setInterval() method is used to call a function or evaluate an expression at specified intervals (in milliseconds). For example, let&#39;s log a message after 2 seconds using setInterval method,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;setInterval(function(){ console.log(&quot;Good morning&quot;); }, 2000);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why is JavaScript treated as Single threaded&lt;/h3&gt; &lt;p&gt;JavaScript is a single-threaded language. Because the language specification does not allow the programmer to write code so that the interpreter can run parts of it in parallel in multiple threads or processes. Whereas languages like java, go, C++ can make multi-threaded and multi-process programs.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event delegation&lt;/h3&gt; &lt;p&gt;Event delegation is a technique for listening to events where you delegate a parent element as the listener for all of the events that happen inside it.&lt;/p&gt; &lt;p&gt;For example, if you wanted to detect field changes in inside a specific form, you can use event delegation technique,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var form = document.querySelector(&#39;#registration-form&#39;);

// Listen for changes to fields inside the form
form.addEventListener(&#39;input&#39;, function (event) {

// Log the field that was changed
console.log(event.target);

}, false);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is ECMAScript&lt;/h3&gt; &lt;p&gt;ECMAScript is the scripting language that forms the basis of JavaScript. ECMAScript standardized by the ECMA International standards organization in the ECMA-262 and ECMA-402 specifications. The first edition of ECMAScript was released in 1997.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is JSON&lt;/h3&gt; &lt;p&gt;JSON (JavaScript Object Notation) is a lightweight format that is used for data interchanging. It is based on a subset of JavaScript language in the way objects are built in JavaScript.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the syntax rules of JSON&lt;/h3&gt; &lt;p&gt;Below are the list of syntax rules of JSON&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The data is in name/value pairs&lt;/li&gt; 
   &lt;li&gt;The data is separated by commas&lt;/li&gt; 
   &lt;li&gt;Curly braces hold objects&lt;/li&gt; 
   &lt;li&gt;Square brackets hold arrays&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose JSON stringify&lt;/h3&gt; &lt;p&gt;When sending data to a web server, the data has to be in a string format. You can achieve this by converting JSON object into a string using stringify() method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var userJSON = {&#39;name&#39;: &#39;John&#39;, age: 31}
var userString = JSON.stringify(user);
console.log(userString); //&quot;{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:31}&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you parse JSON string&lt;/h3&gt; &lt;p&gt;When receiving the data from a web server, the data is always in a string format. But you can convert this string value to a javascript object using parse() method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var userString = &#39;{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:31}&#39;;
var userJSON = JSON.parse(userString);
console.log(userJSON);// {name: &quot;John&quot;, age: 31}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need JSON&lt;/h3&gt; &lt;p&gt;When exchanging data between a browser and a server, the data can only be text. Since JSON is text only, it can easily be sent to and from a server, and used as a data format by any programming language.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are PWAs&lt;/h3&gt; &lt;p&gt;Progressive web applications (PWAs) are a type of mobile app delivered through the web, built using common web technologies including HTML, CSS and JavaScript. These PWAs are deployed to servers, accessible through URLs, and indexed by search engines.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of clearTimeout method&lt;/h3&gt; &lt;p&gt;The clearTimeout() function is used in javascript to clear the timeout which has been set by setTimeout()function before that. i.e, The return value of setTimeout() function is stored in a variable and it‚Äôs passed into the clearTimeout() function to clear the timer.&lt;/p&gt; &lt;p&gt;For example, the below setTimeout method is used to display the message after 3 seconds. This timeout can be cleared by the clearTimeout() method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script&amp;gt;
var msg;
function greeting() {
   alert(&#39;Good morning&#39;);
}
function start() {
  msg =setTimeout(greeting, 3000);

}

function stop() {
    clearTimeout(msg);
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of clearInterval method&lt;/h3&gt; &lt;p&gt;The clearInterval() function is used in javascript to clear the interval which has been set by setInterval() function. i.e, The return value returned by setInterval() function is stored in a variable and it‚Äôs passed into the clearInterval() function to clear the interval.&lt;/p&gt; &lt;p&gt;For example, the below setInterval method is used to display the message for every 3 seconds. This interval can be cleared by the clearInterval() method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script&amp;gt;
var msg;
function greeting() {
   alert(&#39;Good morning&#39;);
}
function start() {
  msg = setInterval(greeting, 3000);

}

function stop() {
    clearInterval(msg);
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you redirect new page in javascript&lt;/h3&gt; &lt;p&gt;In vanilla javascript, you can redirect to a new page using the &lt;code&gt;location&lt;/code&gt; property of window object. The syntax would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function redirect() {
   window.location.href = &#39;newPage.html&#39;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check whether a string contains a substring&lt;/h3&gt; &lt;p&gt;There are 3 possible ways to check whether a string contains a substring or not,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using includes:&lt;/strong&gt; ES6 provided &lt;code&gt;String.prototype.includes&lt;/code&gt; method to test a string contains a substring&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var mainString = &quot;hello&quot;, subString = &quot;hell&quot;;
mainString.includes(subString)
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using indexOf:&lt;/strong&gt; In an ES5 or older environment, you can use &lt;code&gt;String.prototype.indexOf&lt;/code&gt; which returns the index of a substring. If the index value is not equal to -1 then it means the substring exists in the main string.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var mainString = &quot;hello&quot;, subString = &quot;hell&quot;;
mainString.indexOf(subString) !== -1
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using RegEx:&lt;/strong&gt; The advanced solution is using Regular expression&#39;s test method(&lt;code&gt;RegExp.test&lt;/code&gt;), which allows for testing for against regular expressions&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var mainString = &quot;hello&quot;, regex = &quot;/hell/&quot;;
regex.test(mainString)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you validate an email in javascript&lt;/h3&gt; &lt;p&gt;You can validate an email in javascript using regular expressions. It is recommended to do validations on the server side instead of the client side. Because the javascript can be disabled on the client side.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function validateEmail(email) {
    var re = /^(([^&amp;lt;&amp;gt;()\[\]\\.,;:\s@&quot;]+(\.[^&amp;lt;&amp;gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The above regular expression accepts unicode characters.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the current url with javascript&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;window.location.href&lt;/code&gt; expression to get the current url path and you can use the same expression for updating the URL too. You can also use &lt;code&gt;document.URL&lt;/code&gt; for read-only purposes but this solution has issues in FF.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(&#39;location.href&#39;, window.location.href); // Returns full URL
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the various url properties of location object&lt;/h3&gt; &lt;p&gt;The below &lt;code&gt;Location&lt;/code&gt; object properties can be used to access URL components of the page,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;href - The entire URL&lt;/li&gt; 
   &lt;li&gt;protocol - The protocol of the URL&lt;/li&gt; 
   &lt;li&gt;host - The hostname and port of the URL&lt;/li&gt; 
   &lt;li&gt;hostname - The hostname of the URL&lt;/li&gt; 
   &lt;li&gt;port - The port number in the URL&lt;/li&gt; 
   &lt;li&gt;pathname - The path name of the URL&lt;/li&gt; 
   &lt;li&gt;search - The query portion of the URL&lt;/li&gt; 
   &lt;li&gt;hash - The anchor portion of the URL&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do get query string values in javascript&lt;/h3&gt; &lt;p&gt;You can use URLSearchParams to get query string values in javascript. Let&#39;s see an example to get the client code value from URL query string,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const urlParams = new URLSearchParams(window.location.search);
const clientCode = urlParams.get(&#39;clientCode&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check if a key exists in an object&lt;/h3&gt; &lt;p&gt;You can check whether a key exists in an object or not using three approaches,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using in operator:&lt;/strong&gt; You can use the in operator whether a key exists in an object or not&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;key&quot; in obj
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and If you want to check if a key doesn&#39;t exist, remember to use parenthesis,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;!(&quot;key&quot; in obj)
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using hasOwnProperty method:&lt;/strong&gt; You can use &lt;code&gt;hasOwnProperty&lt;/code&gt; to particularly test for properties of the object instance (and not inherited properties)&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;obj.hasOwnProperty(&quot;key&quot;) // true
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using undefined comparison:&lt;/strong&gt; If you access a non-existing property from an object, the result is undefined. Let‚Äôs compare the properties against undefined to determine the existence of the property.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = {
  name: &#39;John&#39;
};

console.log(user.name !== undefined);     // true
console.log(user.nickName !== undefined); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you loop through or enumerate javascript object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;for-in&lt;/code&gt; loop to loop through javascript object. You can also make sure that the key you get is an actual property of an object, and doesn&#39;t come from the prototype using &lt;code&gt;hasOwnProperty&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var object = {
    &quot;k1&quot;: &quot;value1&quot;,
    &quot;k2&quot;: &quot;value2&quot;,
    &quot;k3&quot;: &quot;value3&quot;
};

for (var key in object) {
    if (object.hasOwnProperty(key)) {
        console.log(key + &quot; -&amp;gt; &quot; + object[key]); // k1 -&amp;gt; value1 ...
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you test for an empty object&lt;/h3&gt; &lt;p&gt;There are different solutions based on ECMAScript versions&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using Object entries(ECMA 7+):&lt;/strong&gt; You can use object entries length along with constructor type.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object.entries(obj).length === 0 &amp;amp;&amp;amp; obj.constructor === Object // Since date object length is 0, you need to check constructor check as well
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using Object keys(ECMA 5+):&lt;/strong&gt; You can use object keys length along with constructor type.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object.keys(obj).length === 0 &amp;amp;&amp;amp; obj.constructor === Object // Since date object length is 0, you need to check constructor check as well
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using for-in with hasOwnProperty(Pre-ECMA 5):&lt;/strong&gt; You can use a for-in loop along with hasOwnProperty.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isEmpty(obj) {
  for(var prop in obj) {
    if(obj.hasOwnProperty(prop)) {
      return false;
    }
  }

  return JSON.stringify(obj) === JSON.stringify({});
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an arguments object&lt;/h3&gt; &lt;p&gt;The arguments object is an Array-like object accessible inside functions that contains the values of the arguments passed to that function. For example, let&#39;s see how to use arguments object inside sum function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function sum() {
    var total = 0;
    for (var i = 0, len = arguments.length; i &amp;lt; len; ++i) {
        total += arguments[i];
    }
    return total;
}

sum(1, 2, 3) // returns 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can&#39;t apply array methods on arguments object. But you can convert into a regular array as below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var argsArray = Array.prototype.slice.call(arguments);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make first letter of the string in an uppercase&lt;/h3&gt; &lt;p&gt;You can create a function which uses a chain of string methods such as charAt, toUpperCase and slice methods to generate a string with the first letter in uppercase.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the pros and cons of for loop&lt;/h3&gt; &lt;p&gt;The for-loop is a commonly used iteration syntax in javascript. It has both pros and cons ####Pros&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Works on every environment&lt;/li&gt; 
   &lt;li&gt;You can use break and continue flow control statements&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;####Cons&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Too verbose&lt;/li&gt; 
   &lt;li&gt;Imperative&lt;/li&gt; 
   &lt;li&gt;You might face one-by-off errors&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you display the current date in javascript&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;new Date()&lt;/code&gt; to generate a new Date object containing the current date and time. For example, let&#39;s display the current date in mm/dd/yyyy&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var today = new Date();
var dd = String(today.getDate()).padStart(2, &#39;0&#39;);
var mm = String(today.getMonth() + 1).padStart(2, &#39;0&#39;); //January is 0!
var yyyy = today.getFullYear();

today = mm + &#39;/&#39; + dd + &#39;/&#39; + yyyy;
document.write(today);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you compare two date objects&lt;/h3&gt; &lt;p&gt;You need to use date.getTime() method to compare date values instead of comparison operators (==, !=, ===, and !== operators)&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var d1 = new Date();
var d2 = new Date(d1);
console.log(d1.getTime() === d2.getTime()); //True
console.log(d1 === d2); // False
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check if a string starts with another string&lt;/h3&gt; &lt;p&gt;You can use ECMAScript 6&#39;s &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; method to check if a string starts with another string or not. But it is not yet supported in all browsers. Let&#39;s see an example to see this usage,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;Good morning&quot;.startsWith(&quot;Good&quot;); // true
&quot;Good morning&quot;.startsWith(&quot;morning&quot;); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you trim a string in javascript&lt;/h3&gt; &lt;p&gt;JavaScript provided a trim method on string types to trim any whitespaces present at the beginning or ending of the string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;  Hello World   &quot;.trim(); //Hello World
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If your browser(&amp;lt;IE9) doesn&#39;t support this method then you can use below polyfill.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (!String.prototype.trim) {
    (function() {
        // Make sure we trim BOM and NBSP
        var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
        String.prototype.trim = function() {
            return this.replace(rtrim, &#39;&#39;);
        };
    })();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you add a key value pair in javascript&lt;/h3&gt; &lt;p&gt;There are two possible solutions to add new properties to an object. Let&#39;s take a simple object to explain these solutions.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var object = {
    key1: value1,
    key2: value2
};
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using dot notation:&lt;/strong&gt; This solution is useful when you know the name of the property&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;object.key3 = &quot;value3&quot;;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using square bracket notation:&lt;/strong&gt; This solution is useful when the name of the property is dynamically determined.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;obj[&quot;key3&quot;] = &quot;value3&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is the !-- notation represents a special operator&lt;/h3&gt; &lt;p&gt;No,that&#39;s not a special operator. But it is a combination of 2 standard operators one after the other,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;A logical not (!)&lt;/li&gt; 
   &lt;li&gt;A prefix decrement (--)&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;At first, the value decremented by one and then tested to see if it is equal to zero or not for determining the truthy/falsy value.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you assign default values to variables&lt;/h3&gt; &lt;p&gt;You can use the logical or operator &lt;code&gt;||&lt;/code&gt; in an assignment expression to provide a default value. The syntax looks like as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var a = b || c;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As per the above expression, variable &#39;a &#39;will get the value of &#39;c&#39; only if &#39;b&#39; is falsy (if is null, false, undefined, 0, empty string, or NaN), otherwise &#39;a&#39; will get the value of &#39;b&#39;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define multiline strings&lt;/h3&gt; &lt;p&gt;You can define multiline string literals using the &#39;&#39; character followed by line terminator.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var str = &quot;This is a \
very lengthy \
sentence!&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But if you have a space after the &#39;&#39; character, the code will look exactly the same, but it will raise a SyntaxError.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an app shell model&lt;/h3&gt; &lt;p&gt;An application shell (or app shell) architecture is one way to build a Progressive Web App that reliably and instantly loads on your users&#39; screens, similar to what you see in native applications. It is useful for getting some initial HTML to the screen fast without a network.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can we define properties for functions&lt;/h3&gt; &lt;p&gt;Yes, We can define properties for functions because functions are also objects.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fn = function(x) {
   //Function code goes here
}

fn.name = &quot;John&quot;;

fn.profile = function(y) {
  //Profile code goes here
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the way to find the number of parameters expected by a function&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;function.length&lt;/code&gt; syntax to find the number of parameters expected by a function. Let&#39;s take an example of &lt;code&gt;sum&lt;/code&gt; function to calculate the sum of numbers,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function sum(num1, num2, num3, num4){
    return num1 + num2 + num3 + num4;
}
sum.length // 4 is the number of parameters expected.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a polyfill&lt;/h3&gt; &lt;p&gt;A polyfill is a piece of JS code used to provide modern functionality on older browsers that do not natively support it. For example, Silverlight plugin polyfill can be used to mimic the functionality of an HTML Canvas element on Microsoft Internet Explorer 7.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are break and continue statements&lt;/h3&gt; &lt;p&gt;The break statement is used to &quot;jump out&quot; of a loop. i.e, It breaks the loop and continues executing the code after the loop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (i = 0; i &amp;lt; 10; i++) {
  if (i === 5) { break; }
  text += &quot;Number: &quot; + i + &quot;&amp;lt;br&amp;gt;&quot;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The continue statement is used to &quot;jump over&quot; one iteration in the loop. i.e, It breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (i = 0; i &amp;lt; 10; i++) {
    if (i === 5) { continue; }
    text += &quot;Number: &quot; + i + &quot;&amp;lt;br&amp;gt;&quot;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are js labels&lt;/h3&gt; &lt;p&gt;The label statement allows us to name loops and blocks in JavaScript. We can then use these labels to refer back to the code later. For example, the below code with labels avoids printing the numbers when they are same,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var i, j;

loop1:
for (i = 0; i &amp;lt; 3; i++) {
   loop2:
   for (j = 0; j &amp;lt; 3; j++) {
      if (i === j) {
         continue loop1;
      }
      console.log(&#39;i = &#39; + i + &#39;, j = &#39; + j);
   }
}

// Output is:
//   &quot;i = 1, j = 0&quot;
//   &quot;i = 2, j = 0&quot;
//   &quot;i = 2, j = 1&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of keeping declarations at the top&lt;/h3&gt; &lt;p&gt;It is recommended to keep all declarations at the top of each script or function. The benefits of doing this are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Gives cleaner code&lt;/li&gt; 
   &lt;li&gt;It provides a single place to look for local variables&lt;/li&gt; 
   &lt;li&gt;Easy to avoid unwanted global variables&lt;/li&gt; 
   &lt;li&gt;It reduces the possibility of unwanted re-declarations&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of initializing variables&lt;/h3&gt; &lt;p&gt;It is recommended to initialize variables because of the below benefits,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It gives cleaner code&lt;/li&gt; 
   &lt;li&gt;It provides a single place to initialize variables&lt;/li&gt; 
   &lt;li&gt;Avoid undefined values in the code&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the recommendations to create new object&lt;/h3&gt; &lt;p&gt;It is recommended to avoid creating new objects using &lt;code&gt;new Object()&lt;/code&gt;. Instead you can initialize values based on it&#39;s type to create the objects.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Assign {} instead of new Object()&lt;/li&gt; 
   &lt;li&gt;Assign &quot;&quot; instead of new String()&lt;/li&gt; 
   &lt;li&gt;Assign 0 instead of new Number()&lt;/li&gt; 
   &lt;li&gt;Assign false instead of new Boolean()&lt;/li&gt; 
   &lt;li&gt;Assign [] instead of new Array()&lt;/li&gt; 
   &lt;li&gt;Assign /()/ instead of new RegExp()&lt;/li&gt; 
   &lt;li&gt;Assign function (){} instead of new Function()&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;You can define them as an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var v1 = {};
var v2 = &quot;&quot;;
var v3 = 0;
var v4 = false;
var v5 = [];
var v6 = /()/;
var v7 = function(){};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define JSON arrays&lt;/h3&gt; &lt;p&gt;JSON arrays are written inside square brackets and arrays contain javascript objects. For example, the JSON array of users would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;users&quot;:[
  {&quot;firstName&quot;:&quot;John&quot;, &quot;lastName&quot;:&quot;Abrahm&quot;},
  {&quot;firstName&quot;:&quot;Anna&quot;, &quot;lastName&quot;:&quot;Smith&quot;},
  {&quot;firstName&quot;:&quot;Shane&quot;, &quot;lastName&quot;:&quot;Warn&quot;}
]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you generate random integers&lt;/h3&gt; &lt;p&gt;You can use Math.random() with Math.floor() to return random integers. For example, if you want generate random integers between 1 to 10, the multiplication factor should be 10,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Math.floor(Math.random() * 10) + 1;     // returns a random integer from 1 to 10
Math.floor(Math.random() * 100) + 1;     // returns a random integer from 1 to 100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can you write a random integers function to print integers with in a range&lt;/h3&gt; &lt;p&gt;Yes, you can create a proper random function to return a random number between min and max (both included)&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function randomInteger(min, max) {
  return Math.floor(Math.random() * (max - min + 1) ) + min;
}
randomInteger(1, 100); // returns a random integer from 1 to 100
randomInteger(1, 1000); // returns a random integer from 1 to 1000
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is tree shaking&lt;/h3&gt; &lt;p&gt;Tree shaking is a form of dead code elimination. It means that unused modules will not be included in the bundle during the build process and for that it relies on the static structure of ES2015 module syntax,( i.e. import and export). Initially this has been popularized by the ES2015 module bundler &lt;code&gt;rollup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the need of tree shaking&lt;/h3&gt; &lt;p&gt;Tree Shaking can significantly reduce the code size in any application. i.e, The less code we send over the wire the more performant the application will be. For example, if we just want to create a ‚ÄúHello World‚Äù Application using SPA frameworks then it will take around a few MBs, but by tree shaking it can bring down the size to just a few hundred KBs. Tree shaking is implemented in Rollup and Webpack bundlers.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is it recommended to use eval&lt;/h3&gt; &lt;p&gt;No, it allows arbitrary code to be run which causes a security problem. As we know that the eval() function is used to run text as code. In most of the cases, it should not be necessary to use it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a Regular Expression&lt;/h3&gt; &lt;p&gt;A regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for searching data in a text. These can be used to perform all types of text search and text replace operations. Let&#39;s see the syntax format now,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;/pattern/modifiers;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For example, the regular expression or search pattern with case-insensitive username would be,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;/John/i
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the string methods available in Regular expression&lt;/h3&gt; &lt;p&gt;Regular Expressions has two string methods: search() and replace(). The search() method uses an expression to search for a match, and returns the position of the match.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var msg = &quot;Hello John&quot;;
var n = msg.search(/John/i); // 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The replace() method is used to return a modified string where the pattern is replaced.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var msg = &quot;Hello John&quot;;
var n = msg.replace(/John/i, &quot;Buttler&quot;); // Hello Buttler
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are modifiers in regular expression&lt;/h3&gt; &lt;p&gt;Modifiers can be used to perform case-insensitive and global searches. Let&#39;s list down some of the modifiers,&lt;/p&gt; &lt;p&gt;| Modifier | Description | |---- | --------- | i | Perform case-insensitive matching | | g | Perform a global match rather than stops at first match | | m | Perform multiline matching|&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of global modifier,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var text = &quot;Learn JS one by one&quot;;
var pattern = /one/g;
var result = text.match(pattern); // one,one
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are regular expression patterns&lt;/h3&gt; &lt;p&gt;Regular Expressions provide a group of patterns in order to match characters. Basically they are categorized into 3 types,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Brackets:&lt;/strong&gt; These are used to find a range of characters. For example, below are some use cases, 
    &lt;ol&gt; 
     &lt;li&gt;[abc]: Used to find any of the characters between the brackets(a,b,c)&lt;/li&gt; 
     &lt;li&gt;[0-9]: Used to find any of the digits between the brackets&lt;/li&gt; 
     &lt;li&gt;(a|b): Used to find any of the alternatives separated with |&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Metacharacters:&lt;/strong&gt; These are characters with a special meaning For example, below are some use cases, 
    &lt;ol&gt; 
     &lt;li&gt;\d: Used to find a digit&lt;/li&gt; 
     &lt;li&gt;\s: Used to find a whitespace character&lt;/li&gt; 
     &lt;li&gt;\b: Used to find a match at the beginning or ending of a word&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Quantifiers:&lt;/strong&gt; These are useful to define quantities For example, below are some use cases, 
    &lt;ol&gt; 
     &lt;li&gt;n+: Used to find matches for any string that contains at least one n&lt;/li&gt; 
     &lt;li&gt;n*: Used to find matches for any string that contains zero or more occurrences of n&lt;/li&gt; 
     &lt;li&gt;n?: Used to find matches for any string that contains zero or one occurrences of n&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a RegExp object&lt;/h3&gt; &lt;p&gt;RegExp object is a regular expression object with predefined properties and methods. Let&#39;s see the simple usage of RegExp object,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var regexp = new RegExp(&#39;\\w+&#39;);
console.log(regexp);
// expected output: /\w+/
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you search a string for a pattern&lt;/h3&gt; &lt;p&gt;You can use the test() method of regular expression in order to search a string for a pattern, and return true or false depending on the result.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var pattern = /you/;
console.log(pattern.test(&quot;How are you?&quot;)); //true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of exec method&lt;/h3&gt; &lt;p&gt;The purpose of exec method is similar to test method but it executes a search for a match in a specified string and returns a result array, or null instead of returning true/false.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var pattern = /you/;
console.log(pattern.exec(&quot;How are you?&quot;)); //[&quot;you&quot;, index: 8, input: &quot;How are you?&quot;, groups: undefined]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you change the style of a HTML element&lt;/h3&gt; &lt;p&gt;You can change inline style or classname of a HTML element using javascript&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using style property:&lt;/strong&gt; You can modify inline style using style property&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&quot;title&quot;).style.fontSize = &quot;30px&quot;;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using ClassName property:&lt;/strong&gt; It is easy to modify element class using className property&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; document.getElementById(&quot;title&quot;).style.className = &quot;custom-title&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What would be the result of 1+2+&#39;3&#39;&lt;/h3&gt; &lt;p&gt;The output is going to be &lt;code&gt;33&lt;/code&gt;. Since &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; are numeric values, the result of the first two digits is going to be a numeric value &lt;code&gt;3&lt;/code&gt;. The next digit is a string type value because of that the addition of numeric value &lt;code&gt;3&lt;/code&gt; and string type value &lt;code&gt;3&lt;/code&gt; is just going to be a concatenation value &lt;code&gt;33&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a debugger statement&lt;/h3&gt; &lt;p&gt;The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect. For example, in the below function a debugger statement has been inserted. So execution is paused at the debugger statement just like a breakpoint in the script source.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getProfile() {
// code goes here
debugger;
// code goes here
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of breakpoints in debugging&lt;/h3&gt; &lt;p&gt;You can set breakpoints in the javascript code once the debugger statement is executed and the debugger window pops up. At each breakpoint, javascript will stop executing, and let you examine the JavaScript values. After examining values, you can resume the execution of code using the play button.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can I use reserved words as identifiers&lt;/h3&gt; &lt;p&gt;No, you cannot use the reserved words as variables, labels, object or function names. Let&#39;s see one simple example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var else = &quot;hello&quot;; // Uncaught SyntaxError: Unexpected token else
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect a mobile browser&lt;/h3&gt; &lt;p&gt;You can use regex which returns a true or false value depending on whether or not the user is browsing with a mobile.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.mobilecheck = function() {
  var mobileCheck = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) mobileCheck = true;})(navigator.userAgent||navigator.vendor||window.opera);
  return mobileCheck;
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect a mobile browser without regexp&lt;/h3&gt; &lt;p&gt;You can detect mobile browsers by simply running through a list of devices and checking if the useragent matches anything. This is an alternative solution for RegExp usage,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function detectmob() {
 if( navigator.userAgent.match(/Android/i)
 || navigator.userAgent.match(/webOS/i)
 || navigator.userAgent.match(/iPhone/i)
 || navigator.userAgent.match(/iPad/i)
 || navigator.userAgent.match(/iPod/i)
 || navigator.userAgent.match(/BlackBerry/i)
 || navigator.userAgent.match(/Windows Phone/i)
 ){
    return true;
  }
 else {
    return false;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the image width and height using JS&lt;/h3&gt; &lt;p&gt;You can programmatically get the image and check the dimensions(width and height) using Javascript.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var img = new Image();
img.onload = function() {
  console.log(this.width + &#39;x&#39; + this.height);
}
img.src = &#39;http://www.google.com/intl/en_ALL/images/logo.gif&#39;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make synchronous HTTP request&lt;/h3&gt; &lt;p&gt;Browsers provide an XMLHttpRequest object which can be used to make synchronous HTTP requests from JavaScript&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function httpGet(theUrl)
{
    var xmlHttpReq = new XMLHttpRequest();
    xmlHttpReq.open( &quot;GET&quot;, theUrl, false ); // false for synchronous request
    xmlHttpReq.send( null );
    return xmlHttpReq.responseText;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make asynchronous HTTP request&lt;/h3&gt; &lt;p&gt;Browsers provide an XMLHttpRequest object which can be used to make asynchronous HTTP requests from JavaScript by passing the 3rd parameter as true.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function httpGetAsync(theUrl, callback)
{
    var xmlHttpReq = new XMLHttpRequest();
    xmlHttpReq.onreadystatechange = function() {
        if (xmlHttpReq.readyState == 4 &amp;amp;&amp;amp; xmlHttpReq.status == 200)
            callback(xmlHttpReq.responseText);
    }
    xmlHttp.open(&quot;GET&quot;, theUrl, true); // true for asynchronous
    xmlHttp.send(null);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you convert date to another timezone in javascript&lt;/h3&gt; &lt;p&gt;You can use the toLocaleString() method to convert dates in one timezone to another. For example, let&#39;s convert current date to British English timezone as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(event.toLocaleString(&#39;en-GB&#39;, { timeZone: &#39;UTC&#39; })); //29/06/2019, 09:56:00
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the properties used to get size of window&lt;/h3&gt; &lt;p&gt;You can use innerWidth, innerHeight, clientWidth, clientHeight properties of windows, document element and document body objects to find the size of a window. Let&#39;s use them combination of these properties to calculate the size of a window or document,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var width = window.innerWidth
|| document.documentElement.clientWidth
|| document.body.clientWidth;

var height = window.innerHeight
|| document.documentElement.clientHeight
|| document.body.clientHeight;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a conditional operator in javascript&lt;/h3&gt; &lt;p&gt;The conditional (ternary) operator is the only JavaScript operator that takes three operands which acts as a shortcut for if statements.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var isAuthenticated = false;
console.log(isAuthenticated ? &#39;Hello, welcome&#39; : &#39;Sorry, you are not authenticated&#39;); //Sorry, you are not authenticated
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can you apply chaining on conditional operator&lt;/h3&gt; &lt;p&gt;Yes, you can apply chaining on conditional operators similar to if ‚Ä¶ else if‚Äà‚Ä¶ else if ‚Ä¶ else chain. The syntax is going to be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function traceValue(someParam) {
    return condition1 ? value1
         : condition2 ? value2
         : condition3 ? value3
         : value4;
}

// The above conditional operator is equivalent to:

function traceValue(someParam) {
    if (condition1) { return value1; }
    else if (condition2) { return value2; }
    else if (condition3) { return value3; }
    else { return value4; }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the ways to execute javascript after page load&lt;/h3&gt; &lt;p&gt;You can execute javascript after page load in many different ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;window.onload:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.onload = function ...
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;document.onload:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.onload = function ...
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;body onload:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;body onload=&quot;script();&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between proto and prototype&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;__proto__&lt;/code&gt; object is the actual object that is used in the lookup chain to resolve methods, etc. Whereas &lt;code&gt;prototype&lt;/code&gt; is the object that is used to build &lt;code&gt;__proto__&lt;/code&gt; when you create an object with new&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;( new Employee ).__proto__ === Employee.prototype;
( new Employee ).prototype === undefined;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example where do you really need semicolon&lt;/h3&gt; &lt;p&gt;It is recommended to use semicolons after every statement in JavaScript. For example, in the below case it throws an error &quot;.. is not a function&quot; at runtime due to missing semicolon.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// define a function
var fn = function () {
    //...
} // semicolon missing at this line

// then execute some code inside a closure
(function () {
    //...
})();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and it will be interpreted as&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fn = function () {
    //...
}(function () {
    //...
})();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this case, we are passing the second function as an argument to the first function and then trying to call the result of the first function call as a function. Hence, the second function will fail with a &quot;... is not a function&quot; error at runtime.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a freeze method&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;freeze()&lt;/strong&gt; method is used to freeze an object. Freezing an object does not allow adding new properties to an object,prevents from removing and prevents changing the enumerability, configurability, or writability of existing properties. i.e, It returns the passed object and does not create a frozen copy.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const obj = {
  prop: 100
};

Object.freeze(obj);
obj.prop = 200; // Throws an error in strict mode

console.log(obj.prop); //100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It causes a TypeError if the argument passed is not an object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of freeze method&lt;/h3&gt; &lt;p&gt;Below are the main benefits of using freeze method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is used for freezing objects and arrays.&lt;/li&gt; 
   &lt;li&gt;It is used to make an object immutable.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do I need to use freeze method&lt;/h3&gt; &lt;p&gt;In the Object-oriented paradigm, an existing API contains certain elements that are not intended to be extended, modified, or re-used outside of their current context. Hence it works as the &lt;code&gt;final&lt;/code&gt; keyword which is used in various languages.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect a browser language preference&lt;/h3&gt; &lt;p&gt;You can use navigator object to detect a browser language preference as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var language = navigator.languages &amp;amp;&amp;amp; navigator.languages[0] || // Chrome / Firefox
               navigator.language ||   // All browsers
               navigator.userLanguage; // IE &amp;lt;= 10

console.log(language);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to convert string to title case with javascript&lt;/h3&gt; &lt;p&gt;Title case means that the first letter of each word is capitalized. You can convert a string to title case using the below function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    function toTitleCase(str) {
        return str.replace(
            /\w\S*/g,
            function(txt) {
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            }
        );
    }
    toTitleCase(&quot;good morning john&quot;); // Good Morning John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect javascript disabled in the page&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; tag to detect javascript disabled or not. The code block inside &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; gets executed when JavaScript is disabled, and is typically used to display alternative content when the page generated in JavaScript.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script type=&quot;javascript&quot;&amp;gt;
    // JS related code goes here
&amp;lt;/script&amp;gt;
&amp;lt;noscript&amp;gt;
    &amp;lt;a href=&quot;next_page.html?noJS=true&quot;&amp;gt;JavaScript is disabled in the page. Please click Next Page&amp;lt;/a&amp;gt;
&amp;lt;/noscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are various operators supported by javascript&lt;/h3&gt; &lt;p&gt;An operator is capable of manipulating(mathematical and logical computations) a certain value or operand. There are various operators supported by JavaScript as below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Arithmetic Operators:&lt;/strong&gt; Includes + (Addition),‚Äì (Subtraction), * (Multiplication), / (Division), % (Modulus), + + (Increment) and ‚Äì ‚Äì (Decrement)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Comparison Operators:&lt;/strong&gt; Includes = =(Equal),!= (Not Equal), ===(Equal with type), &amp;gt; (Greater than),&amp;gt; = (Greater than or Equal to),&amp;lt; (Less than),&amp;lt;= (Less than or Equal to)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Logical Operators:&lt;/strong&gt; Includes &amp;amp;&amp;amp;(Logical AND),||(Logical OR),!(Logical NOT)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Assignment Operators:&lt;/strong&gt; Includes = (Assignment Operator), += (Add and Assignment Operator), ‚Äì = (Subtract and Assignment Operator), *= (Multiply and Assignment), /= (Divide and Assignment), %= (Modules and Assignment)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Ternary Operators:&lt;/strong&gt; It includes conditional(: ?) Operator&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;typeof Operator:&lt;/strong&gt; It uses to find type of variable. The syntax looks like &lt;code&gt;typeof variable&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a rest parameter&lt;/h3&gt; &lt;p&gt;Rest parameter is an improved way to handle function parameters which allows us to represent an indefinite number of arguments as an array. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function f(a, b, ...theArgs) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For example, let&#39;s take a sum example to calculate on dynamic number of parameters,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function total(‚Ä¶args){
let sum = 0;
for(let i of args){
sum+=i;
}
return sum;
}
console.log(fun(1,2)); //3
console.log(fun(1,2,3)); //6
console.log(fun(1,2,3,4)); //13
console.log(fun(1,2,3,4,5)); //15
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Rest parameter is added in ES2015 or ES6&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens if you do not use rest parameter as a last argument&lt;/h3&gt; &lt;p&gt;The rest parameter should be the last argument, as its job is to collect all the remaining arguments into an array. For example, if you define a function like below it doesn‚Äôt make any sense and will throw an error.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function someFunc(a,‚Ä¶b,c){
//You code goes here
return;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the bitwise operators available in javascript&lt;/h3&gt; &lt;p&gt;Below are the list of bitwise logical operators used in JavaScript&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Bitwise AND ( &amp;amp; )&lt;/li&gt; 
   &lt;li&gt;Bitwise OR ( | )&lt;/li&gt; 
   &lt;li&gt;Bitwise XOR ( ^ )&lt;/li&gt; 
   &lt;li&gt;Bitwise NOT ( ~ )&lt;/li&gt; 
   &lt;li&gt;Left Shift ( &amp;lt;&amp;lt; )&lt;/li&gt; 
   &lt;li&gt;Sign Propagating Right Shift ( &amp;gt;&amp;gt; )&lt;/li&gt; 
   &lt;li&gt;Zero fill Right Shift ( &amp;gt;&amp;gt;&amp;gt; )&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a spread operator&lt;/h3&gt; &lt;p&gt;Spread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. Let&#39;s take an example to see this behavior,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function calculateSum(x, y, z) {
  return x + y + z;
}

const numbers = [1, 2, 3];

console.log(calculateSum(...numbers)); // 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you determine whether object is frozen or not&lt;/h3&gt; &lt;p&gt;Object.isFrozen() method is used to determine if an object is frozen or not.An object is frozen if all of the below conditions hold true,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If it is not extensible.&lt;/li&gt; 
   &lt;li&gt;If all of its properties are non-configurable.&lt;/li&gt; 
   &lt;li&gt;If all its data properties are non-writable. The usage is going to be as follows,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const object = {
   property: &#39;Welcome JS world&#39;
};
Object.freeze(object);
console.log(Object.isFrozen(object));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you determine two values same or not using object&lt;/h3&gt; &lt;p&gt;The Object.is() method determines whether two values are the same value. For example, the usage with different types of values would be,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object.is(&#39;hello&#39;, &#39;hello&#39;);     // true
Object.is(window, window);   // true
Object.is([], []) // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Two values are the same if one of the following holds:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;both undefined&lt;/li&gt; 
   &lt;li&gt;both null&lt;/li&gt; 
   &lt;li&gt;both true or both false&lt;/li&gt; 
   &lt;li&gt;both strings of the same length with the same characters in the same order&lt;/li&gt; 
   &lt;li&gt;both the same object (means both object have same reference)&lt;/li&gt; 
   &lt;li&gt;both numbers and both +0 both -0 both NaN both non-zero and both not NaN and both have the same value.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of using object is method&lt;/h3&gt; &lt;p&gt;Some of the applications of Object&#39;s &lt;code&gt;is&lt;/code&gt; method are follows,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is used for comparison of two strings.&lt;/li&gt; 
   &lt;li&gt;It is used for comparison of two numbers.&lt;/li&gt; 
   &lt;li&gt;It is used for comparing the polarity of two numbers.&lt;/li&gt; 
   &lt;li&gt;It is used for comparison of two objects.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you copy properties from one object to other&lt;/h3&gt; &lt;p&gt;You can use the Object.assign() method which is used to copy the values and properties from one or more source objects to a target object. It returns the target object which has properties and values copied from the target object. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object.assign(target, ...sources)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s take example with one source and one target object,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const target = { a: 1, b: 2 };
const source = { b: 3, c: 4 };

const returnedTarget = Object.assign(target, source);

console.log(target); // { a: 1, b: 3, c: 4 }

console.log(returnedTarget); // { a: 1, b: 3, c: 4 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As observed in the above code, there is a common property(&lt;code&gt;b&lt;/code&gt;) from source to target so it&#39;s value has been overwritten.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the applications of assign method&lt;/h3&gt; &lt;p&gt;Below are the some of main applications of Object.assign() method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is used for cloning an object.&lt;/li&gt; 
   &lt;li&gt;It is used to merge objects with the same properties.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a proxy object&lt;/h3&gt; &lt;p&gt;The Proxy object is used to define custom behavior for fundamental operations such as property lookup, assignment, enumeration, function invocation, etc. The syntax would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var p = new Proxy(target, handler);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s take an example of proxy object,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var handler = {
    get: function(obj, prop) {
        return prop in obj ?
            obj[prop] :
            100;
    }
};

var p = new Proxy({}, handler);
p.a = 10;
p.b = null;

console.log(p.a, p.b); // 10, null
console.log(&#39;c&#39; in p, p.c); // false, 100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code, it uses &lt;code&gt;get&lt;/code&gt; handler which define the behavior of the proxy when an operation is performed on it&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of seal method&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;Object.seal()&lt;/strong&gt; method is used to seal an object, by preventing new properties from being added to it and marking all existing properties as non-configurable. But values of present properties can still be changed as long as they are writable. Let&#39;s see the below example to understand more about seal() method&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const object = {
    property: &#39;Welcome JS world&#39;
 };
 Object.seal(object);
 object.property = &#39;Welcome to object world&#39;;
 console.log(Object.isSealed(object)); // true
 delete object.property; // You cannot delete when sealed
 console.log(object.property); //Welcome to object world
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the applications of seal method&lt;/h3&gt; &lt;p&gt;Below are the main applications of Object.seal() method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is used for sealing objects and arrays.&lt;/li&gt; 
   &lt;li&gt;It is used to make an object immutable.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between freeze and seal methods&lt;/h3&gt; &lt;p&gt;If an object is frozen using the Object.freeze() method then its properties become immutable and no changes can be made in them whereas if an object is sealed using the Object.seal() method then the changes can be made in the existing properties of the object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you determine if an object is sealed or not&lt;/h3&gt; &lt;p&gt;The Object.isSealed() method is used to determine if an object is sealed or not. An object is sealed if all of the below conditions hold true&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If it is not extensible.&lt;/li&gt; 
   &lt;li&gt;If all of its properties are non-configurable.&lt;/li&gt; 
   &lt;li&gt;If it is not removable (but not necessarily non-writable). Let&#39;s see it in the action&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const object = {
property: &#39;Hello, Good morning&#39;
};

Object.seal(object); // Using seal() method to seal the object

console.log(Object.isSealed(object));      // checking whether the object is sealed or not
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get enumerable key and value pairs&lt;/h3&gt; &lt;p&gt;The Object.entries() method is used to return an array of a given object&#39;s own enumerable string-keyed property [key, value] pairs, in the same order as that provided by a for...in loop. Let&#39;s see the functionality of object.entries() method in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const object = {
  a: &#39;Good morning&#39;,
  b: 100
};

for (let [key, value] of Object.entries(object)) {
  console.log(`${key}: ${value}`); // a: &#39;Good morning&#39;
                                   // b: 100
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The order is not guaranteed as object defined.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main difference between Object.values and Object.entries method&lt;/h3&gt; &lt;p&gt;The Object.values() method&#39;s behavior is similar to Object.entries() method but it returns an array of values instead [key,value] pairs.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const object = {
   a: &#39;Good morning&#39;,
   b: 100
 };

 for (let value of Object.values(object)) {
   console.log(`${value}`); // &#39;Good morning&#39;
                                100
 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How can you get the list of keys of any object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.keys()&lt;/code&gt; method which is used to return an array of a given object&#39;s own property names, in the same order as we get with a normal loop. For example, you can get the keys of a user object,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = {
  name: &#39;John&#39;,
  gender: &#39;male&#39;,
  age: 40
};

console.log(Object.keys(user)); //[&#39;name&#39;, &#39;gender&#39;, &#39;age&#39;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create an object with prototype&lt;/h3&gt; &lt;p&gt;The Object.create() method is used to create a new object with the specified prototype object and properties. i.e, It uses an existing object as the prototype of the newly created object. It returns a new object with the specified prototype object and properties.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const user = {
   name: &#39;John&#39;,
   printInfo: function () {
     console.log(`My name is ${this.name}.`);
   }
 };

 const admin = Object.create(user);

 admin.name = &quot;Nick&quot;; // Remember that &quot;name&quot; is a property set on &quot;admin&quot; but not on &quot;user&quot; object

 admin.printInfo(); // My name is Nick
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a WeakSet&lt;/h3&gt; &lt;p&gt;WeakSet is used to store a collection of weakly(weak references) held objects. The syntax would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;new WeakSet([iterable]);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s see the below example to explain it&#39;s behavior,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var ws = new WeakSet();
var user = {};
ws.add(user);
ws.has(user);    // true
ws.delete(user); // removes user from the set
ws.has(user);    // false, user has been removed
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between WeakSet and Set&lt;/h3&gt; &lt;p&gt;The main difference is that references to objects in Set are strong while references to objects in WeakSet are weak. i.e, An object in WeakSet can be garbage collected if there is no other reference to it. Other differences are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Sets can store any value Whereas WeakSets can store only collections of objects&lt;/li&gt; 
   &lt;li&gt;WeakSet does not have size property unlike Set&lt;/li&gt; 
   &lt;li&gt;WeakSet does not have methods such as clear, keys, values, entries, forEach.&lt;/li&gt; 
   &lt;li&gt;WeakSet is not iterable.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;List down the collection of methods available on WeakSet&lt;/h3&gt; &lt;p&gt;Below are the list of methods available on WeakSet,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;add(value): A new object is appended with the given value to the weakset&lt;/li&gt; 
   &lt;li&gt;delete(value): Deletes the value from the WeakSet collection.&lt;/li&gt; 
   &lt;li&gt;has(value): It returns true if the value is present in the WeakSet Collection, otherwise it returns false.&lt;/li&gt; 
   &lt;li&gt;length(): It returns the length of weakSetObject Let&#39;s see the functionality of all the above methods in an example,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var weakSetObject = new WeakSet();
var firstObject = {};
var secondObject = {};
// add(value)
weakSetObject.add(firstObject);
weakSetObject.add(secondObject);
console.log(weakSetObject.has(firstObject)); //true
console.log(weakSetObject.length()); //2
weakSetObject.delete(secondObject);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a WeakMap&lt;/h3&gt; &lt;p&gt;The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. In this case, keys must be objects and the values can be arbitrary values. The syntax is looking like as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;new WeakMap([iterable])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s see the below example to explain it&#39;s behavior,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; var ws = new WeakMap();
 var user = {};
 ws.set(user);
 ws.has(user);    // true
 ws.delete(user); // removes user from the map
 ws.has(user);    // false, user has been removed
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between WeakMap and Map&lt;/h3&gt; &lt;p&gt;The main difference is that references to key objects in Map are strong while references to key objects in WeakMap are weak. i.e, A key object in WeakMap can be garbage collected if there is no other reference to it. Other differences are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Maps can store any key type Whereas WeakMaps can store only collections of key objects&lt;/li&gt; 
   &lt;li&gt;WeakMap does not have size property unlike Map&lt;/li&gt; 
   &lt;li&gt;WeakMap does not have methods such as clear, keys, values, entries, forEach.&lt;/li&gt; 
   &lt;li&gt;WeakMap is not iterable.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;List down the collection of methods available on WeakMap&lt;/h3&gt; &lt;p&gt;Below are the list of methods available on WeakMap,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;set(key, value): Sets the value for the key in the WeakMap object. Returns the WeakMap object.&lt;/li&gt; 
   &lt;li&gt;delete(key): Removes any value associated to the key.&lt;/li&gt; 
   &lt;li&gt;has(key): Returns a Boolean asserting whether a value has been associated to the key in the WeakMap object or not.&lt;/li&gt; 
   &lt;li&gt;get(key): Returns the value associated to the key, or undefined if there is none. Let&#39;s see the functionality of all the above methods in an example,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var weakMapObject = new WeakMap();
var firstObject = {};
var secondObject = {};
// set(key, value)
weakMapObject.set(firstObject, &#39;John&#39;);
weakMapObject.set(secondObject, 100);
console.log(weakMapObject.has(firstObject)); //true
console.log(weakMapObject.get(firstObject)); // John
weakMapObject.delete(secondObject);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of uneval&lt;/h3&gt; &lt;p&gt;The uneval() is an inbuilt function which is used to create a string representation of the source code of an Object. It is a top-level function and is not associated with any object. Let&#39;s see the below example to know more about it&#39;s functionality,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var a = 1;
uneval(a); // returns a String containing 1
uneval(function user() {}); // returns &quot;(function user(){})&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you encode an URL&lt;/h3&gt; &lt;p&gt;The encodeURI() function is used to encode complete URI which has special characters except (, / ? : @ &amp;amp; = + $ #) characters.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var uri = &#39;https://mozilla.org/?x=—à–µ–ª–ª—ã&#39;;
var encoded = encodeURI(uri);
console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you decode an URL&lt;/h3&gt; &lt;p&gt;The decodeURI() function is used to decode a Uniform Resource Identifier (URI) previously created by encodeURI().&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; var uri = &#39;https://mozilla.org/?x=—à–µ–ª–ª—ã&#39;;
 var encoded = encodeURI(uri);
 console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B
try {
  console.log(decodeURI(encoded)); // &quot;https://mozilla.org/?x=—à–µ–ª–ª—ã&quot;
} catch(e) { // catches a malformed URI
  console.error(e);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you print the contents of web page&lt;/h3&gt; &lt;p&gt;The window object provided a print() method which is used to print the contents of the current window. It opens a Print dialog box which lets you choose between various printing options. Let&#39;s see the usage of print method in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;   &amp;lt;input type=&quot;button&quot; value=&quot;Print&quot; onclick=&quot;window.print()&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In most browsers, it will block while the print dialog is open.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between uneval and eval&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;uneval&lt;/code&gt; function returns the source of a given object; whereas the &lt;code&gt;eval&lt;/code&gt; function does the opposite, by evaluating that source code in a different memory area. Let&#39;s see an example to clarify the difference,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var msg = uneval(function greeting() { return &#39;Hello, Good morning&#39;; });
var greeting = eval(msg);
greeting(); // returns &quot;Hello, Good morning&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an anonymous function&lt;/h3&gt; &lt;p&gt;An anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function (optionalParameters) {
  //do something
}

const myFunction = function(){ //Anonymous function assigned to a variable
  //do something
};

[1, 2, 3].map(function(element){ //Anonymous function used as a callback function
  //do something
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s see the above anonymous function in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var x = function (a, b) {return a * b};
var z = x(5, 10);
console.log(z); // 50
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the precedence order between local and global variables&lt;/h3&gt; &lt;p&gt;A local variable takes precedence over a global variable with the same name. Let&#39;s see this behavior in an example.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var msg = &quot;Good morning&quot;;
function greeting() {
   msg = &quot;Good Evening&quot;;
   console.log(msg);
}
greeting();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are javascript accessors&lt;/h3&gt; &lt;p&gt;ECMAScript 5 introduced javascript object accessors or computed properties through getters and setters. Getters uses the &lt;code&gt;get&lt;/code&gt; keyword whereas Setters uses the &lt;code&gt;set&lt;/code&gt; keyword.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var user = {
  firstName: &quot;John&quot;,
  lastName : &quot;Abraham&quot;,
  language : &quot;en&quot;,
  get lang() {
    return this.language;
  }
  set lang(lang) {
  this.language = lang;
  }
};
console.log(user.lang); // getter access lang as en
user.lang = &#39;fr&#39;;
console.log(user.lang); // setter used to set lang as fr
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define property on Object constructor&lt;/h3&gt; &lt;p&gt;The Object.defineProperty() static method is used to define a new property directly on an object, or modify an existing property on an object, and returns the object. Let&#39;s see an example to know how to define property,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const newObject = {};

Object.defineProperty(newObject, &#39;newProperty&#39;, {
  value: 100,
  writable: false
});

console.log(newObject.newProperty); // 100

newObject.newProperty = 200; // It throws an error in strict mode due to writable setting

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between get and defineProperty&lt;/h3&gt; &lt;p&gt;Both have similar results until unless you use classes. If you use &lt;code&gt;get&lt;/code&gt; the property will be defined on the prototype of the object whereas using &lt;code&gt;Object.defineProperty()&lt;/code&gt; the property will be defined on the instance it is applied to.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of Getters and Setters&lt;/h3&gt; &lt;p&gt;Below are the list of benefits of Getters and Setters,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;They provide simpler syntax&lt;/li&gt; 
   &lt;li&gt;They are used for defining computed properties, or accessors in JS.&lt;/li&gt; 
   &lt;li&gt;Useful to provide equivalence relation between properties and methods&lt;/li&gt; 
   &lt;li&gt;They can provide better data quality&lt;/li&gt; 
   &lt;li&gt;Useful for doing things behind the scenes with the encapsulated logic.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can I add getters and setters using defineProperty method&lt;/h3&gt; &lt;p&gt;Yes, You can use the &lt;code&gt;Object.defineProperty()&lt;/code&gt; method to add Getters and Setters. For example, the below counter object uses increment, decrement, add and subtract properties,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var obj = {counter : 0};

// Define getters
Object.defineProperty(obj, &quot;increment&quot;, {
  get : function () {this.counter++;}
});
Object.defineProperty(obj, &quot;decrement&quot;, {
  get : function () {this.counter--;}
});

// Define setters
Object.defineProperty(obj, &quot;add&quot;, {
  set : function (value) {this.counter += value;}
});
Object.defineProperty(obj, &quot;subtract&quot;, {
  set : function (value) {this.counter -= value;}
});

obj.add = 10;
obj.subtract = 5;
console.log(obj.increment); //6
console.log(obj.decrement); //5
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of switch-case&lt;/h3&gt; &lt;p&gt;The switch case statement in JavaScript is used for decision making purposes. In a few cases, using the switch case statement is going to be more convenient than if-else statements. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;switch (expression)
{
    case value1:
        statement1;
        break;
    case value2:
        statement2;
        break;
    .
    .
    case valueN:
        statementN;
        break;
    default:
        statementDefault;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above multi-way branch statement provides an easy way to dispatch execution to different parts of code based on the value of the expression.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the conventions to be followed for the usage of switch case&lt;/h3&gt; &lt;p&gt;Below are the list of conventions should be taken care,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The expression can be of type either number or string.&lt;/li&gt; 
   &lt;li&gt;Duplicate values are not allowed for the expression.&lt;/li&gt; 
   &lt;li&gt;The default statement is optional. If the expression passed to switch does not match with any case value then the statement within default case will be executed.&lt;/li&gt; 
   &lt;li&gt;The break statement is used inside the switch to terminate a statement sequence.&lt;/li&gt; 
   &lt;li&gt;The break statement is optional. But if it is omitted, the execution will continue on into the next case.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are primitive data types&lt;/h3&gt; &lt;p&gt;A primitive data type is data that has a primitive value (which has no properties or methods). There are 5 types of primitive data types.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;string&lt;/li&gt; 
   &lt;li&gt;number&lt;/li&gt; 
   &lt;li&gt;boolean&lt;/li&gt; 
   &lt;li&gt;null&lt;/li&gt; 
   &lt;li&gt;undefined&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to access object properties&lt;/h3&gt; &lt;p&gt;There are 3 possible ways for accessing the property of an object.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Dot notation:&lt;/strong&gt; It uses dot for accessing the properties&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;objectName.property
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Square brackets notation:&lt;/strong&gt; It uses square brackets for property access&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;objectName[&quot;property&quot;]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Expression notation:&lt;/strong&gt; It uses expression in the square brackets&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;objectName[expression]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the function parameter rules&lt;/h3&gt; &lt;p&gt;JavaScript functions follow below rules for parameters,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The function definitions do not specify data types for parameters.&lt;/li&gt; 
   &lt;li&gt;Do not perform type checking on the passed arguments.&lt;/li&gt; 
   &lt;li&gt;Do not check the number of arguments received. i.e, The below function follows the above rules,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function functionName(parameter1, parameter2, parameter3) {
  console.log(parameter1); // 1
}
functionName(1);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an error object&lt;/h3&gt; &lt;p&gt;An error object is a built in error object that provides error information when an error occurs. It has two properties: name and message. For example, the below function logs error details,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  greeting(&quot;Welcome&quot;);
}
catch(err) {
  console.log(err.name + &quot;&amp;lt;br&amp;gt;&quot; + err.message);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;When you get a syntax error&lt;/h3&gt; &lt;p&gt;A SyntaxError is thrown if you try to evaluate code with a syntax error. For example, the below missing quote for the function parameter throws a syntax error&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  eval(&quot;greeting(&#39;welcome)&quot;);   // Missing &#39; will produce an error
}
catch(err) {
  console.log(err.name);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different error names from error object&lt;/h3&gt; &lt;p&gt;There are 6 different types of error names returned from error object, | Error Name | Description | |---- | --------- | EvalError | An error has occurred in the eval() function | | RangeError | An error has occurred with a number &quot;out of range&quot; | | ReferenceError | An error due to an illegal reference| | SyntaxError | An error due to a syntax error| | TypeError | An error due to a type error | | URIError | An error due to encodeURI() |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the various statements in error handling&lt;/h3&gt; &lt;p&gt;Below are the list of statements used in an error handling,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;try:&lt;/strong&gt; This statement is used to test a block of code for errors&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;catch:&lt;/strong&gt; This statement is used to handle the error&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;throw:&lt;/strong&gt; This statement is used to create custom errors.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;finally:&lt;/strong&gt; This statement is used to execute code after try and catch regardless of the result.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the two types of loops in javascript&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Entry Controlled loops:&lt;/strong&gt; In this kind of loop type, the test condition is tested before entering the loop body. For example, For Loop and While Loop comes under this category.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Exit Controlled Loops:&lt;/strong&gt; In this kind of loop type, the test condition is tested or evaluated at the end of the loop body. i.e, the loop body will execute at least once irrespective of test condition true or false. For example, do-while loop comes under this category.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is nodejs&lt;/h3&gt; &lt;p&gt;Node.js is a server-side platform built on Chrome&#39;s JavaScript runtime for easily building fast and scalable network applications. It is an event-based, non-blocking, asynchronous I/O runtime that uses Google&#39;s V8 JavaScript engine and libuv library.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an Intl object&lt;/h3&gt; &lt;p&gt;The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. It provides access to several constructors and language sensitive functions.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you perform language specific date and time formatting&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; object which is a constructor for objects that enable language-sensitive date and time formatting. Let&#39;s see this behavior with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var date = new Date(Date.UTC(2019, 07, 07, 3, 0, 0));
console.log(new Intl.DateTimeFormat(&#39;en-GB&#39;).format(date)); // 07/08/2019
console.log(new Intl.DateTimeFormat(&#39;en-AU&#39;).format(date)); // 07/08/2019
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an Iterator&lt;/h3&gt; &lt;p&gt;An iterator is an object which defines a sequence and a return value upon its termination. It implements the Iterator protocol with a &lt;code&gt;next()&lt;/code&gt; method which returns an object with two properties: &lt;code&gt;value&lt;/code&gt; (the next value in the sequence) and &lt;code&gt;done&lt;/code&gt; (which is true if the last value in the sequence has been consumed).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How does synchronous iteration works&lt;/h3&gt; &lt;p&gt;Synchronous iteration was introduced in ES6 and it works with below set of components,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Iterable:&lt;/strong&gt; It is an object which can be iterated over via a method whose key is Symbol.iterator. &lt;strong&gt;Iterator:&lt;/strong&gt; It is an object returned by invoking &lt;code&gt;[Symbol.iterator]()&lt;/code&gt; on an iterable. This iterator object wraps each iterated element in an object and returns it via &lt;code&gt;next()&lt;/code&gt; method one by one. &lt;strong&gt;IteratorResult:&lt;/strong&gt; It is an object returned by &lt;code&gt;next()&lt;/code&gt; method. The object contains two properties; the &lt;code&gt;value&lt;/code&gt; property contains an iterated element and the &lt;code&gt;done&lt;/code&gt; property determines whether the element is the last element or not.&lt;/p&gt; &lt;p&gt;Let&#39;s demonstrate synchronous iteration with an array as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const iterable = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];
const iterator = iterable[Symbol.iterator]();
console.log(iterator.next());  // { value: &#39;one&#39;, done: false }
console.log(iterator.next());  // { value: &#39;two&#39;, done: false }
console.log(iterator.next());  // { value: &#39;three&#39;, done: false }
console.log(iterator.next());  // { value: &#39;undefined, done: true }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event loop&lt;/h3&gt; &lt;p&gt;The Event Loop is a queue of callback functions. When an async function executes, the callback function is pushed into the queue. The JavaScript engine doesn&#39;t start processing the event loop until the async function has finished executing the code. &lt;strong&gt;Note:&lt;/strong&gt; It allows Node.js to perform non-blocking I/O operations even though JavaScript is single-threaded.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is call stack&lt;/h3&gt; &lt;p&gt;Call Stack is a data structure for javascript interpreters to keep track of function calls in the program. It has two major actions,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Whenever you call a function for its execution, you are pushing it to the stack.&lt;/li&gt; 
   &lt;li&gt;Whenever the execution is completed, the function is popped out of the stack.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let&#39;s take an example and it&#39;s state representation in a diagram format&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hungry() {
   eatFruits();
}
function eatFruits() {
   return &quot;I&#39;m eating fruits&quot;;
}

// Invoke the `hungry` function
hungry();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code processed in a call stack as below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Add the &lt;code&gt;hungry()&lt;/code&gt; function to the call stack list and execute the code.&lt;/li&gt; 
   &lt;li&gt;Add the &lt;code&gt;eatFruits()&lt;/code&gt; function to the call stack list and execute the code.&lt;/li&gt; 
   &lt;li&gt;Delete the &lt;code&gt;eatFruits()&lt;/code&gt; function from our call stack list.&lt;/li&gt; 
   &lt;li&gt;Delete the &lt;code&gt;hungry()&lt;/code&gt; function from the call stack list since there are no items anymore.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/call-stack.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event queue&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a decorator&lt;/h3&gt; &lt;p&gt;A decorator is an expression that evaluates to a function and that takes the target, name, and decorator descriptor as arguments. Also, it optionally returns a decorator descriptor to install on the target object. Let&#39;s define admin decorator for user class at design time,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function admin(isAdmin) {
   return function(target) {
       target.isAdmin = isAdmin;
   }
}

@admin(true)
class User() {
}
console.log(User.isAdmin); //true

 @admin(false)
 class User() {
 }
 console.log(User.isAdmin); //false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the properties of Intl object&lt;/h3&gt; &lt;p&gt;Below are the list of properties available on Intl object,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Collator:&lt;/strong&gt; These are the objects that enable language-sensitive string comparison.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;DateTimeFormat:&lt;/strong&gt; These are the objects that enable language-sensitive date and time formatting.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;ListFormat:&lt;/strong&gt; These are the objects that enable language-sensitive list formatting.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;NumberFormat:&lt;/strong&gt; Objects that enable language-sensitive number formatting.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;PluralRules:&lt;/strong&gt; Objects that enable plural-sensitive formatting and language-specific rules for plurals.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;RelativeTimeFormat:&lt;/strong&gt; Objects that enable language-sensitive relative time formatting.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an Unary operator&lt;/h3&gt; &lt;p&gt;The unary(+) operator is used to convert a variable to a number.If the variable cannot be converted, it will still become a number but with the value NaN. Let&#39;s see this behavior in an action.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var x = &quot;100&quot;;
var y = + x;
console.log(typeof x, typeof y); // string, number

var a = &quot;Hello&quot;;
var b = + a;
console.log(typeof a, typeof b, b); // string, number, NaN
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you sort elements in an array&lt;/h3&gt; &lt;p&gt;The sort() method is used to sort the elements of an array in place and returns the sorted array. The example usage would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var months = [&quot;Aug&quot;, &quot;Sep&quot;, &quot;Jan&quot;, &quot;June&quot;];
months.sort();
console.log(months); //  [&quot;Aug&quot;, &quot;Jan&quot;, &quot;June&quot;, &quot;Sep&quot;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of compareFunction while sorting arrays&lt;/h3&gt; &lt;p&gt;The compareFunction is used to define the sort order. If omitted, the array elements are converted to strings, then sorted according to each character&#39;s Unicode code point value. Let&#39;s take an example to see the usage of compareFunction,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let numbers = [1, 2, 5, 3, 4];
numbers.sort((a, b) =&amp;gt; b - a);
console.log(numbers); // [5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you reversing an array&lt;/h3&gt; &lt;p&gt;You can use the reverse() method to reverse the elements in an array. This method is useful to sort an array in descending order. Let&#39;s see the usage of reverse() method in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let numbers = [1, 2, 5, 3, 4];
numbers.sort((a, b) =&amp;gt; b - a);
numbers.reverse();
console.log(numbers); // [1, 2, 3, 4 ,5]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you find min and max value in an array&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;Math.min&lt;/code&gt; and &lt;code&gt;Math.max&lt;/code&gt; methods on array variables to find the minimum and maximum elements within an array. Let&#39;s create two functions to find the min and max value with in an array,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var marks = [50, 20, 70, 60, 45, 30];
function findMin(arr) {
  return Math.min.apply(null, arr);
}
function findMax(arr) {
  return Math.max.apply(null, arr);
}

console.log(findMin(marks));
console.log(findMax(marks));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you find min and max values without Math functions&lt;/h3&gt; &lt;p&gt;You can write functions which loop through an array comparing each value with the lowest value or highest value to find the min and max values. Let&#39;s create those functions to find min and max values,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; var marks = [50, 20, 70, 60, 45, 30];
 function findMin(arr) {
   var length = arr.length
   var min = Infinity;
   while (length--) {
     if (arr[length] &amp;lt; min) {
       min = arr[len];
     }
   }
   return min;
 }

 function findMax(arr) {
   var length = arr.length
   var max = -Infinity;
   while (len--) {
     if (arr[length] &amp;gt; max) {
       max = arr[length];
     }
   }
   return max;
 }

 console.log(findMin(marks));
 console.log(findMax(marks));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an empty statement and purpose of it&lt;/h3&gt; &lt;p&gt;The empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. Since there is no action with an empty statement you might think that it&#39;s usage is quite less, but the empty statement is occasionally useful when you want to create a loop that has an empty body. For example, you can initialize an array with zero values as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Initialize an array a
for(int i=0; i &amp;lt; a.length; a[i++] = 0) ;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get metadata of a module&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;import.meta&lt;/code&gt; object which is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the current module, such as the module&#39;s URL. In browsers, you might get different meta data than NodeJS.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script type=&quot;module&quot; src=&quot;welcome-module.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
console.log(import.meta); // { url: &quot;file:///home/user/welcome-module.js&quot; }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a comma operator&lt;/h3&gt; &lt;p&gt;The comma operator is used to evaluate each of its operands from left to right and returns the value of the last operand. This is totally different from comma usage within arrays, objects, and function arguments and parameters. For example, the usage for numeric expressions would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var x = 1;
x = (x++, x);

console.log(x); // 2
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the advantage of a comma operator&lt;/h3&gt; &lt;p&gt;It is normally used to include multiple expressions in a location that requires a single expression. One of the common usages of this comma operator is to supply multiple parameters in a &lt;code&gt;for&lt;/code&gt; loop. For example, the below for loop uses multiple expressions in a single location using comma operator,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (var a = 0, b =10; a &amp;lt;= 10; a++, b--)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also use the comma operator in a return statement where it processes before returning.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myFunction() {
   var a = 1;
   return (a += 10, a); // 11
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is typescript&lt;/h3&gt; &lt;p&gt;TypeScript is a typed superset of JavaScript created by Microsoft that adds optional types, classes, async/await, and many other features, and compiles to plain JavaScript. Angular built entirely in TypeScript and used as a primary language. You can install it globally as&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g typescript
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s see a simple example of TypeScript usage,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;function greeting(name: string): string {
   return &quot;Hello, &quot; + name;
}

let user = &quot;Sudheer&quot;;

console.log(greeting(user));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The greeting method allows only string type as argument.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between javascript and typescript&lt;/h3&gt; &lt;p&gt;Below are the list of differences between javascript and typescript,&lt;/p&gt; &lt;p&gt;| feature | typescript | javascript | |---- | --------- | ---- | Language paradigm | Object oriented programming language | Scripting language | | Typing support | Supports static typing | It has dynamic typing | | Modules | Supported | Not supported | | Interface | It has interfaces concept | Doesn&#39;t support interfaces | | Optional parameters | Functions support optional parameters | No support of optional parameters for functions |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of typescript over javascript&lt;/h3&gt; &lt;p&gt;Below are some of the advantages of typescript over javascript,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;TypeScript is able to find compile time errors at the development time only and it makes sures less runtime errors. Whereas javascript is an interpreted language.&lt;/li&gt; 
   &lt;li&gt;TypeScript is strongly-typed or supports static typing which allows for checking type correctness at compile time. This is not available in javascript.&lt;/li&gt; 
   &lt;li&gt;TypeScript compiler can compile the .ts files into ES3,ES4 and ES5 unlike ES6 features of javascript which may not be supported in some browsers.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an object initializer&lt;/h3&gt; &lt;p&gt;An object initializer is an expression that describes the initialization of an Object. The syntax for this expression is represented as a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). This is also known as literal notation. It is one of the ways to create an object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var initObject = {a: &#39;John&#39;, b: 50, c: {}};

console.log(initObject.a); // John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a constructor method&lt;/h3&gt; &lt;p&gt;The constructor method is a special method for creating and initializing an object created within a class. If you do not specify a constructor method, a default constructor is used. The example usage of constructor would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Employee {
  constructor() {
    this.name = &quot;John&quot;;
  }
}

var employeeObject = new Employee();

console.log(employeeObject.name); // John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens if you write constructor more than once in a class&lt;/h3&gt; &lt;p&gt;The &quot;constructor&quot; in a class is a special method and it should be defined only once in a class. i.e, If you write a constructor method more than once in a class it will throw a &lt;code&gt;SyntaxError&lt;/code&gt; error.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; class Employee {
   constructor() {
     this.name = &quot;John&quot;;
   }
   constructor() {   //  Uncaught SyntaxError: A class may only have one constructor
     this.age = 30;
   }
 }

 var employeeObject = new Employee();

 console.log(employeeObject.name);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you call the constructor of a parent class&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;super&lt;/code&gt; keyword to call the constructor of a parent class. Remember that &lt;code&gt;super()&lt;/code&gt; must be called before using &#39;this&#39; reference. Otherwise it will cause a reference error. Let&#39;s the usage of it,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Square extends Rectangle {
  constructor(length) {
    super(length, length);
    this.name = &#39;Square&#39;;
  }

  get area() {
    return this.width * this.height;
  }

  set area(value) {
    this.area = value;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the prototype of an object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt; method to return the prototype of the specified object. i.e. The value of the internal &lt;code&gt;prototype&lt;/code&gt; property. If there are no inherited properties then &lt;code&gt;null&lt;/code&gt; value is returned.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const newPrototype = {};
const newObject = Object.create(newPrototype);

console.log(Object.getPrototypeOf(newObject) === newPrototype); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens If I pass string type for getPrototype method&lt;/h3&gt; &lt;p&gt;In ES5, it will throw a TypeError exception if the obj parameter isn&#39;t an object. Whereas in ES2015, the parameter will be coerced to an &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// ES5
Object.getPrototypeOf(&#39;James&#39;); // TypeError: &quot;James&quot; is not an object
// ES2015
Object.getPrototypeOf(&#39;James&#39;); // String.prototype
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you set prototype of one object to another&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; method that sets the prototype (i.e., the internal &lt;code&gt;Prototype&lt;/code&gt; property) of a specified object to another object or null. For example, if you want to set prototype of a square object to rectangle object would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object.setPrototypeOf(Square.prototype, Rectangle.prototype);
Object.setPrototypeOf({}, null);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check whether an object can be extendable or not&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.isExtensible()&lt;/code&gt; method is used to determine if an object is extendable or not. i.e, Whether it can have new properties added to it or not.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const newObject = {};
console.log(Object.isExtensible(newObject)); //true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; By default, all the objects are extendable. i.e, The new properties can be added or modified.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you prevent an object to extend&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.preventExtensions()&lt;/code&gt; method is used to prevent new properties from ever being added to an object. In other words, it prevents future extensions to the object. Let&#39;s see the usage of this property,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const newObject = {};
Object.preventExtensions(newObject); // NOT extendable

try {
  Object.defineProperty(newObject, &#39;newProperty&#39;, { // Adding new property
    value: 100
  });
} catch (e) {
  console.log(e); // TypeError: Cannot define property newProperty, object is not extensible
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to make an object non-extensible&lt;/h3&gt; &lt;p&gt;You can mark an object non-extensible in 3 ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Object.preventExtensions&lt;/li&gt; 
   &lt;li&gt;Object.seal&lt;/li&gt; 
   &lt;li&gt;Object.freeze&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var newObject = {};

Object.preventExtensions(newObject); // Prevent objects are non-extensible
Object.isExtensible(newObject); // false

var sealedObject = Object.seal({}); // Sealed objects are non-extensible
Object.isExtensible(sealedObject); // false

var frozenObject = Object.freeze({}); // Frozen objects are non-extensible
Object.isExtensible(frozenObject); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define multiple properties on an object&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.defineProperties()&lt;/code&gt; method is used to define new or modify existing properties directly on an object and returning the object. Let&#39;s define multiple properties on an empty object,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const newObject = {};

Object.defineProperties(newObject, {
  newProperty1: {
    value: &#39;John&#39;,
    writable: true
  },
  newProperty2: {}
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is MEAN in javascript&lt;/h3&gt; &lt;p&gt;The MEAN (MongoDB, Express, AngularJS, and Node.js) stack is the most popular open-source JavaScript software tech stack available for building dynamic web apps where you can write both the server-side and client-side halves of the web project entirely in JavaScript.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What Is Obfuscation in javascript&lt;/h3&gt; &lt;p&gt;Obfuscation is the deliberate act of creating obfuscated javascript code(i.e, source or machine code) that is difficult for humans to understand. It is something similar to encryption, but a machine can understand the code and execute it. Let&#39;s see the below function before Obfuscation,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function greeting() {
   console.log(&#39;Hello, welcome to JS world&#39;);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And after the code Obfuscation, it would be appeared as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;eval(function(p,a,c,k,e,d){e=function(c){return c};if(!&#39;&#39;.replace(/^/,String)){while(c--){d[c]=k[c]||c}k=[function(e){return d[e]}];e=function(){return&#39;\\w+&#39;};c=1};while(c--){if(k[c]){p=p.replace(new RegExp(&#39;\\b&#39;+e(c)+&#39;\\b&#39;,&#39;g&#39;),k[c])}}return p}(&#39;2 1(){0.3(\&#39;4, 7 6 5 8\&#39;)}&#39;,9,9,&#39;console|greeting|function|log|Hello|JS|to|welcome|world&#39;.split(&#39;|&#39;),0,{}))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need Obfuscation&lt;/h3&gt; &lt;p&gt;Below are the few reasons for Obfuscation,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The Code size will be reduced. So data transfers between server and client will be fast.&lt;/li&gt; 
   &lt;li&gt;It hides the business logic from outside world and protects the code from others&lt;/li&gt; 
   &lt;li&gt;Reverse engineering is highly difficult&lt;/li&gt; 
   &lt;li&gt;The download time will be reduced&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is Minification&lt;/h3&gt; &lt;p&gt;Minification is the process of removing all unnecessary characters(empty spaces are removed) and variables will be renamed without changing it&#39;s functionality. It is also a type of obfuscation .&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of minification&lt;/h3&gt; &lt;p&gt;Normally it is recommended to use minification for heavy traffic and intensive requirements of resources. It reduces file sizes with below benefits,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Decreases loading times of a web page&lt;/li&gt; 
   &lt;li&gt;Saves bandwidth usages&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between Obfuscation and Encryption&lt;/h3&gt; &lt;p&gt;Below are the main differences between Obfuscation and Encryption,&lt;/p&gt; &lt;p&gt;| Feature | Obfuscation | Encryption | |---- | --------- | ---- | Definition | Changing the form of any data in any other form | Changing the form of information to an unreadable format by using a key | | A key to decode | It can be decoded without any key | It is required | | Target data format | It will be converted to a complex form | Converted into an unreadable format |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the common tools used for minification&lt;/h3&gt; &lt;p&gt;There are many online/offline tools to minify the javascript files,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Google&#39;s Closure Compiler&lt;/li&gt; 
   &lt;li&gt;UglifyJS2&lt;/li&gt; 
   &lt;li&gt;jsmin&lt;/li&gt; 
   &lt;li&gt;javascript-minifier.com/&lt;/li&gt; 
   &lt;li&gt;prettydiff.com&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you perform form validation using javascript&lt;/h3&gt; &lt;p&gt;JavaScript can be used to perform HTML form validation. For example, if the form field is empty, the function needs to notify, and return false, to prevent the form being submitted. Lets&#39; perform user login in an html form,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form name=&quot;myForm&quot; onsubmit=&quot;return validateForm()&quot; method=&quot;post&quot;&amp;gt;
User name: &amp;lt;input type=&quot;text&quot; name=&quot;uname&quot;&amp;gt;
&amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And the validation on user login is below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function validateForm() {
  var x = document.forms[&quot;myForm&quot;][&quot;uname&quot;].value;
  if (x == &quot;&quot;) {
    alert(&quot;The username shouldn&#39;t be empty&quot;);
    return false;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you perform form validation without javascript&lt;/h3&gt; &lt;p&gt;You can perform HTML form validation automatically without using javascript. The validation enabled by applying the &lt;code&gt;required&lt;/code&gt; attribute to prevent form submission when the input is empty.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form method=&quot;post&quot;&amp;gt;
  &amp;lt;input type=&quot;text&quot; name=&quot;uname&quot; required&amp;gt;
  &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Automatic form validation does not work in Internet Explorer 9 or earlier.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the DOM methods available for constraint validation&lt;/h3&gt; &lt;p&gt;The below DOM methods are available for constraint validation on an invalid input,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;checkValidity(): It returns true if an input element contains valid data.&lt;/li&gt; 
   &lt;li&gt;setCustomValidity(): It is used to set the validationMessage property of an input element. Let&#39;s take an user login form with DOM validations&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myFunction() {
  var userName = document.getElementById(&quot;uname&quot;);
  if (!userName.checkValidity()) {
    document.getElementById(&quot;message&quot;).innerHTML = userName.validationMessage;
  } else {
    document.getElementById(&quot;message&quot;).innerHTML = &quot;Entered a valid username&quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the available constraint validation DOM properties&lt;/h3&gt; &lt;p&gt;Below are the list of some of the constraint validation DOM properties available,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;validity: It provides a list of boolean properties related to the validity of an input element.&lt;/li&gt; 
   &lt;li&gt;validationMessage: It displays the message when the validity is false.&lt;/li&gt; 
   &lt;li&gt;willValidate: It indicates if an input element will be validated or not.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the list of validity properties&lt;/h3&gt; &lt;p&gt;The validity property of an input element provides a set of properties related to the validity of data.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;customError: It returns true, if a custom validity message is set.&lt;/li&gt; 
   &lt;li&gt;patternMismatch: It returns true, if an element&#39;s value does not match its pattern attribute.&lt;/li&gt; 
   &lt;li&gt;rangeOverflow: It returns true, if an element&#39;s value is greater than its max attribute.&lt;/li&gt; 
   &lt;li&gt;rangeUnderflow: It returns true, if an element&#39;s value is less than its min attribute.&lt;/li&gt; 
   &lt;li&gt;stepMismatch: It returns true, if an element&#39;s value is invalid according to step attribute.&lt;/li&gt; 
   &lt;li&gt;tooLong: It returns true, if an element&#39;s value exceeds its maxLength attribute.&lt;/li&gt; 
   &lt;li&gt;typeMismatch: It returns true, if an element&#39;s value is invalid according to type attribute.&lt;/li&gt; 
   &lt;li&gt;valueMissing: It returns true, if an element with a required attribute has no value.&lt;/li&gt; 
   &lt;li&gt;valid: It returns true, if an element&#39;s value is valid.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example usage of rangeOverflow property&lt;/h3&gt; &lt;p&gt;If an element&#39;s value is greater than its max attribute then rangeOverflow property returns true. For example, the below form submission throws an error if the value is more than 100,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input id=&quot;age&quot; type=&quot;number&quot; max=&quot;100&quot;&amp;gt;
&amp;lt;button onclick=&quot;myOverflowFunction()&quot;&amp;gt;OK&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myOverflowFunction() {
  if (document.getElementById(&quot;age&quot;).validity.rangeOverflow) {
    alert(&quot;The mentioned age is not allowed&quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is enums feature available in javascript&lt;/h3&gt; &lt;p&gt;No, javascript does not natively support enums. But there are different kinds of solutions to simulate them even though they may not provide exact equivalents. For example, you can use freeze or seal on object,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var DaysEnum = Object.freeze({&quot;monday&quot;:1, &quot;tuesday&quot;:2, &quot;wednesday&quot;:3, ...})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an enum&lt;/h3&gt; &lt;p&gt;An enum is a type restricting variables to one value from a predefined set of constants. JavaScript has no enums but typescript provides built-in enum support.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;enum Color {
 RED, GREEN, BLUE
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you list all properties of an object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; method which returns an array of all properties found directly in a given object. Let&#39;s the usage of it in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const newObject = {
  a: 1,
  b: 2,
  c: 3
};

console.log(Object.getOwnPropertyNames(newObject));  [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get property descriptors of an object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.getOwnPropertyDescriptors()&lt;/code&gt; method which returns all own property descriptors of a given object. The example usage of this method is below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const newObject = {
   a: 1,
   b: 2,
   c: 3
 };
const descriptorsObject = Object.getOwnPropertyDescriptors(newObject);
console.log(descriptorsObject.a.writable); //true
console.log(descriptorsObject.a.configurable); //true
console.log(descriptorsObject.a.enumerable); //true
console.log(descriptorsObject.a.value); // 1
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the attributes provided by a property descriptor&lt;/h3&gt; &lt;p&gt;A property descriptor is a record which has the following attributes&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;value: The value associated with the property&lt;/li&gt; 
   &lt;li&gt;writable: Determines whether the value associated with the property can be changed or not&lt;/li&gt; 
   &lt;li&gt;configurable: Returns true if the type of this property descriptor can be changed and if the property can be deleted from the corresponding object.&lt;/li&gt; 
   &lt;li&gt;enumerable: Determines whether the property appears during enumeration of the properties on the corresponding object or not.&lt;/li&gt; 
   &lt;li&gt;set: A function which serves as a setter for the property&lt;/li&gt; 
   &lt;li&gt;get: A function which serves as a getter for the property&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you extend classes&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;extends&lt;/code&gt; keyword is used in class declarations/expressions to create a class which is a child of another class. It can be used to subclass custom classes as well as built-in objects. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class ChildClass extends ParentClass { ... }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s take an example of Square subclass from Polygon parent class,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; class Square extends Rectangle {
   constructor(length) {
     super(length, length);
     this.name = &#39;Square&#39;;
   }

   get area() {
     return this.width * this.height;
   }

   set area(value) {
     this.area = value;
   }
 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do I modify the url without reloading the page&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;window.location.url&lt;/code&gt; property will be helpful to modify the url but it reloads the page. HTML5 introduced the &lt;code&gt;history.pushState()&lt;/code&gt; and &lt;code&gt;history.replaceState()&lt;/code&gt; methods, which allow you to add and modify history entries, respectively. For example, you can use pushState as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.history.pushState(&#39;page2&#39;, &#39;Title&#39;, &#39;/page2.html&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check whether an array includes a particular value or not&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Array#includes()&lt;/code&gt; method is used to determine whether an array includes a particular value among its entries by returning either true or false. Let&#39;s see an example to find an element(numeric and string) within an array.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var numericArray = [1, 2, 3, 4];
console.log(numericArray.includes(3)); // true

var stringArray = [&#39;green&#39;, &#39;yellow&#39;, &#39;blue&#39;];
console.log(stringArray.includes(&#39;blue&#39;)); //true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you compare scalar arrays&lt;/h3&gt; &lt;p&gt;You can use length and every method of arrays to compare two scalar(compared directly using ===) arrays. The combination of these expressions can give the expected result,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayFirst = [1,2,3,4,5];
const arraySecond = [1,2,3,4,5];
console.log(arrayFirst.length === arraySecond.length &amp;amp;&amp;amp; arrayFirst.every((value, index) =&amp;gt; value === arraySecond[index])); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you would like to compare arrays irrespective of order then you should sort them before,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayFirst = [2,3,1,4,5];
const arraySecond = [1,2,3,4,5];
console.log(arrayFirst.length === arraySecond.length &amp;amp;&amp;amp; arrayFirst.sort().every((value, index) =&amp;gt; value === arraySecond[index])); //true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to get the value from get parameters&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;new URL()&lt;/code&gt; object accepts the url string and &lt;code&gt;searchParams&lt;/code&gt; property of this object can be used to access the get parameters. Remember that you may need to use polyfill or &lt;code&gt;window.location&lt;/code&gt; to access the URL in older browsers(including IE).&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let urlString = &quot;http://www.some-domain.com/about.html?x=1&amp;amp;y=2&amp;amp;z=3&quot;; //window.location.href
let url = new URL(urlString);
let parameterZ = url.searchParams.get(&quot;z&quot;);
console.log(parameterZ); // 3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you print numbers with commas as thousand separators&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Number.prototype.toLocaleString()&lt;/code&gt; method which returns a string with a language-sensitive representation such as thousand separator,currency etc of this number.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function convertToThousandFormat(x){
  return x.toLocaleString(); // 12,345.679
}

console.log(convertToThousandFormat(12345.6789));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between java and javascript&lt;/h3&gt; &lt;p&gt;Both are totally unrelated programming languages and no relation between them. Java is statically typed, compiled, runs on its own VM. Whereas Javascript is dynamically typed, interpreted, and runs in a browser and nodejs environments. Let&#39;s see the major differences in a tabular format, | Feature | Java | JavaScript | |---- | ---- | ----- | Typed | It&#39;s a strongly typed language | It&#39;s a dynamic typed language | | Paradigm | Object oriented programming | Prototype based programming | | Scoping | Block scoped | Function-scoped | | Concurrency | Thread based | event based | | Memory | Uses more memory | Uses less memory. Hence it will be used for web pages |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is javascript supports namespace&lt;/h3&gt; &lt;p&gt;JavaScript doesn‚Äôt support namespace by default. So if you create any element(function, method, object, variable) then it becomes global and pollutes the global namespace. Let&#39;s take an example of defining two functions without any namespace,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function func1() {
    console.log(&quot;This is a first definition&quot;);

}
function func1() {
    console.log(&quot;This is a second definition&quot;);
}
func1(); // This is a second definition
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It always calls the second function definition. In this case, namespace will solve the name collision problem.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you declare namespace&lt;/h3&gt; &lt;p&gt;Even though JavaScript lacks namespaces, we can use Objects , IIFE to create namespaces.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using Object Literal Notation:&lt;/strong&gt; Let&#39;s wrap variables and functions inside an Object literal which acts as a namespace. After that you can access them using object notation&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var namespaceOne = {
   function func1() {
       console.log(&quot;This is a first definition&quot;);
   }
}
var namespaceTwo = {
     function func1() {
         console.log(&quot;This is a second definition&quot;);
     }
 }
namespaceOne.func1(); // This is a first definition
namespaceTwo.func1(); // This is a second definition
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using IIFE (Immediately invoked function expression):&lt;/strong&gt; The outer pair of parentheses of IIFE creates a local scope for all the code inside of it and makes the anonymous function a function expression. Due to that, you can create the same function in two different function expressions to act as a namespace.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(function() {
 function fun1(){
   console.log(&quot;This is a first definition&quot;);
   } fun1();
}());

(function() {
    function fun1(){
       console.log(&quot;This is a second definition&quot;);
   } fun1();
 }());
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using a block and a let/const declaration:&lt;/strong&gt; In ECMAScript 6, you can simply use a block and a let declaration to restrict the scope of a variable to a block.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; {
  let myFunction= function fun1(){
  console.log(&quot;This is a first definition&quot;);
  }
  myFunction();
 }
  //myFunction(): ReferenceError: myFunction is not defined.

 {
  let myFunction= function fun1(){
  console.log(&quot;This is a second definition&quot;);
  }
  myFunction();
 }
  //myFunction(): ReferenceError: myFunction is not defined.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you invoke javascript code in an iframe from parent page&lt;/h3&gt; &lt;p&gt;Initially iFrame needs to be accessed using either &lt;code&gt;document.getElementBy&lt;/code&gt; or &lt;code&gt;window.frames&lt;/code&gt;. After that &lt;code&gt;contentWindow&lt;/code&gt; property of iFrame gives the access for targetFunction&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;targetFrame&#39;).contentWindow.targetFunction();
window.frames[0].frameElement.contentWindow.targetFunction(); // Accessing iframe this way may not work in latest versions chrome and firefox

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do get the timezone offset from date&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;getTimezoneOffset&lt;/code&gt; method of the date object. This method returns the time zone difference, in minutes, from current locale (host system settings) to UTC&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var offset = new Date().getTimezoneOffset();
console.log(offset); // -480
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you load CSS and JS files dynamically&lt;/h3&gt; &lt;p&gt;You can create both link and script elements in the DOM and append them as child to head tag. Let&#39;s create a function to add script and style resources as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function loadAssets(filename, filetype) {
  if (filetype == &quot;css&quot;) { // External CSS file
       var fileReference = document.createElement(&quot;link&quot;)
       fileReference.setAttribute(&quot;rel&quot;, &quot;stylesheet&quot;);
       fileReference.setAttribute(&quot;type&quot;, &quot;text/css&quot;);
       fileReference.setAttribute(&quot;href&quot;, filename);
  } else if (filetype == &quot;js&quot;) { // External JavaScript file
       var fileReference = document.createElement(&#39;script&#39;);
       fileReference.setAttribute(&quot;type&quot;, &quot;text/javascript&quot;);
       fileReference.setAttribute(&quot;src&quot;, filename);
  }
  if (typeof fileReference != &quot;undefined&quot;)
       document.getElementsByTagName(&quot;head&quot;)[0].appendChild(fileReference)
 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different methods to find HTML elements in DOM&lt;/h3&gt; &lt;p&gt;If you want to access any element in an HTML page, you need to start with accessing the document object. Later you can use any of the below methods to find the HTML element,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;document.getElementById(id): It finds an element by Id&lt;/li&gt; 
   &lt;li&gt;document.getElementsByTagName(name): It finds an element by tag name&lt;/li&gt; 
   &lt;li&gt;document.getElementsByClassName(name): It finds an element by class name&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is jQuery&lt;/h3&gt; &lt;p&gt;jQuery is a popular cross-browser JavaScript library that provides Document Object Model (DOM) traversal, event handling, animations and AJAX interactions by minimizing the discrepancies across browsers. It is widely famous with its philosophy of ‚ÄúWrite less, do more‚Äù. For example, you can display welcome message on the page load using jQuery as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){ // It selects the document and apply the function on page load
    alert(&#39;Welcome to jQuery world&#39;);
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can download it from jquery&#39;s official site or install it from CDNs, like google.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is V8 JavaScript engine&lt;/h3&gt; &lt;p&gt;V8 is an open source high-performance JavaScript engine used by the Google Chrome browser, written in C++. It is also being used in the node.js project. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later, macOS 10.12+, and Linux systems that use x64, IA-32, ARM, or MIPS processors. &lt;strong&gt;Note:&lt;/strong&gt; It can run standalone, or can be embedded into any C++ application.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do we call javascript as dynamic language&lt;/h3&gt; &lt;p&gt;JavaScript is a loosely typed or a dynamic language because variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned/reassigned with values of all types.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let age = 50;    // age is a number now
age  = &#39;old&#39;; // age is a string now
age  = true;  // age is a boolean
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a void operator&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;void&lt;/code&gt; operator evaluates the given expression and then returns undefined(i.e, without returning value). The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;void (expression)
void expression
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s display a message without any redirections or reloads&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;a href=&quot;javascript:void(alert(&#39;Welcome to JS world&#39;))&quot;&amp;gt;Click here to see a message&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This operator is often used to obtain the undefined primitive value, using &quot;void(0)&quot;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to set the cursor to wait&lt;/h3&gt; &lt;p&gt;The cursor can be set to wait in JavaScript by using the property &quot;cursor&quot;. Let&#39;s perform this behavior on page load using the below function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myFunction() {
window.document.body.style.cursor = &quot;wait&quot;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and this function invoked on page load&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body onload=&quot;myFunction()&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create an infinite loop&lt;/h3&gt; &lt;p&gt;You can create infinite loops using for and while loops without using any expressions. The for loop construct or syntax is better approach in terms of ESLint and code optimizer tools,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (;;) {}
while(true) {
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need to avoid with statement&lt;/h3&gt; &lt;p&gt;JavaScript&#39;s with statement was intended to provide a shorthand for writing recurring accesses to objects. So it can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. Let&#39;s take an example where it is used to avoid redundancy when accessing an object several times.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;a.b.c.greeting   = &#39;welcome&#39;;
a.b.c.age = 32;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using &lt;code&gt;with&lt;/code&gt; it turns this into:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;with(a.b.c) {
        greeting   = &quot;welcome&quot;;
        age = 32;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But this &lt;code&gt;with&lt;/code&gt; statement creates performance problems since one cannot predict whether an argument will refer to a real variable or to a property inside the with argument.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below for loops&lt;/h3&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (var i = 0; i &amp;lt; 4; i++) { // global scope
  setTimeout(() =&amp;gt; console.log(i));
}

for (let i = 0; i &amp;lt; 4; i++) { // block scope
  setTimeout(() =&amp;gt; console.log(i));
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the above for loops is 4 4 4 4 and 0 1 2 3 &lt;strong&gt;Explanation:&lt;/strong&gt; Due to the event queue/loop of javascript, the &lt;code&gt;setTimeout&lt;/code&gt; callback function is called after the loop has been executed. Since the variable i is declared with the &lt;code&gt;var&lt;/code&gt; keyword it became a global variable and the value was equal to 4 using iteration when the time setTimeout function is invoked. Hence, the output of the first loop is &lt;code&gt;4 4 4 4&lt;/code&gt;. Whereas in the second loop, the variable i is declared as the &lt;code&gt;let&lt;/code&gt; keyword it becomes a block scoped variable and it holds a new value(0, 1 ,2 3) for each iteration. Hence, the output of the first loop is &lt;code&gt;0 1 2 3&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;List down some of the features of ES6&lt;/h3&gt; &lt;p&gt;Below are the list of some new features of ES6,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Support for constants or immutable variables&lt;/li&gt; 
   &lt;li&gt;Block-scope support for variables, constants and functions&lt;/li&gt; 
   &lt;li&gt;Arrow functions&lt;/li&gt; 
   &lt;li&gt;Default parameters&lt;/li&gt; 
   &lt;li&gt;Rest and Spread Parameters&lt;/li&gt; 
   &lt;li&gt;Template Literals&lt;/li&gt; 
   &lt;li&gt;Multi-line Strings&lt;/li&gt; 
   &lt;li&gt;Destructuring Assignment&lt;/li&gt; 
   &lt;li&gt;Enhanced Object Literals&lt;/li&gt; 
   &lt;li&gt;Promises&lt;/li&gt; 
   &lt;li&gt;Classes&lt;/li&gt; 
   &lt;li&gt;Modules&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is ES6&lt;/h3&gt; &lt;p&gt;ES6 is the sixth edition of the javascript language and it was released in June 2015. It was initially known as ECMAScript 6 (ES6) and later renamed to ECMAScript 2015. Almost all the modern browsers support ES6 but for the old browsers there are many transpilers, like Babel.js etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can I redeclare let and const variables&lt;/h3&gt; &lt;p&gt;No, you cannot redeclare let and const variables. If you do, it throws below error&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Uncaught SyntaxError: Identifier &#39;someVariable&#39; has already been declared
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The variable declaration with &lt;code&gt;var&lt;/code&gt; keyword refers to a function scope and the variable is treated as if it were declared at the top of the enclosing scope due to hoisting feature. So all the multiple declarations contributing to the same hoisted variable without any error. Let&#39;s take an example of re-declaring variables in the same scope for both var and let/const variables.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var name = &#39;John&#39;;
function myFunc() {
    var name = &#39;Nick&#39;;
    var name = &#39;Abraham&#39;; // Re-assigned in the same function block
    alert(name); // Abraham
}
myFunc();
alert(name); // John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The block-scoped multi-declaration throws syntax error,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let name = &#39;John&#39;;
function myFunc() {
    let name = &#39;Nick&#39;;
    let name = &#39;Abraham&#39;; // Uncaught SyntaxError: Identifier &#39;name&#39; has already been declared
    alert(name);
}

myFunc();
alert(name);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is const variable makes the value immutable&lt;/h3&gt; &lt;p&gt;No, the const variable doesn&#39;t make the value immutable. But it disallows subsequent assignments(i.e, You can declare with assignment but can&#39;t assign another value later)&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const userList = [];
userList.push(&#39;John&#39;); // Can mutate even though it can&#39;t re-assign
console.log(userList); // [&#39;John&#39;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are default parameters&lt;/h3&gt; &lt;p&gt;In E5, we need to depend on logical OR operators to handle default values of function parameters. Whereas in ES6, Default function parameters feature allows parameters to be initialized with default values if no value or undefined is passed. Let&#39;s compare the behavior with an examples,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//ES5
var calculateArea = function(height, width) {
   height =  height || 50;
   width = width || 60;

   return width * height;
}
console.log(calculateArea()); //300
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The default parameters makes the initialization more simpler,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//ES6
var calculateArea = function(height = 50, width = 60) {
   return width * height;
}

console.log(calculateArea()); //300
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are template literals&lt;/h3&gt; &lt;p&gt;Template literals or template strings are string literals allowing embedded expressions. These are enclosed by the back-tick (`) character instead of double or single quotes. In E6, this feature enables using dynamic expressions as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var greeting = `Welcome to JS World, Mr. ${firstName} ${lastName}.`
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In ES5, you need break string like below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var greeting = &#39;Welcome to JS World, Mr. &#39; + firstName + &#39; &#39; + lastName.`
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can use multi-line strings and string interpolation features with template literals.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you write multi-line strings in template literals&lt;/h3&gt; &lt;p&gt;In ES5, you would have to use newline escape characters(&#39;\n&#39;) and concatenation symbols(+) in order to get multi-line strings.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(&#39;This is string sentence 1\n&#39; +
&#39;This is string sentence 2&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in ES6, You don&#39;t need to mention any newline sequence character,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(`This is string sentence
&#39;This is string sentence 2`);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are nesting templates&lt;/h3&gt; &lt;p&gt;The nesting template is a feature supported within template literals syntax to allow inner backticks inside a placeholder ${ } within the template. For example, the below nesting template is used to display the icons based on user permissions whereas outer template checks for platform type,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const iconStyles = `icon ${ isMobilePlatform() ? &#39;&#39; :
 `icon-${user.isAuthorized ? &#39;submit&#39; : &#39;disabled&#39;}` }`;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can write the above use case without nesting template features as well. However, the nesting template feature is more compact and readable.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Without nesting templates
 const iconStyles = `icon ${ isMobilePlatform() ? &#39;&#39; :
  (user.isAuthorized ? &#39;icon-submit&#39; : &#39;icon-disabled&#39;}`;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are tagged templates&lt;/h3&gt; &lt;p&gt;Tagged templates are the advanced form of templates in which tags allow you to parse template literals with a function. The tag function accepts the first parameter as an array of strings and remaining parameters as expressions. This function can also return manipulated strings based on parameters. Let&#39;s see the usage of this tagged template behavior of an IT professional skill set in an organization,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var user1 = &#39;John&#39;;
var skill1 = &#39;JavaScript&#39;;
var experience1 = 15;

var user2 = &#39;Kane&#39;;
var skill2 = &#39;JavaScript&#39;;
var experience2 = 5;

function myInfoTag(strings, userExp, experienceExp, skillExp) {
  var str0 = strings[0]; // &quot;Mr/Ms. &quot;
  var str1 = strings[1]; // &quot; is a/an &quot;
  var str2 = strings[2]; // &quot;in&quot;

  var expertiseStr;
  if (experienceExp &amp;gt; 10){
    expertiseStr = &#39;expert developer&#39;;
  } else if(skillExp &amp;gt; 5 &amp;amp;&amp;amp; skillExp &amp;lt;= 10) {
    expertiseStr = &#39;senior developer&#39;;
  } else {
    expertiseStr = &#39;junior developer&#39;;
  }

  return ${str0}${userExp}${str1}${expertiseStr}${str2}${skillExp};
}

var output1 = myInfoTag`Mr/Ms. ${ user1 } is a/an ${ experience1 } in ${skill1}`;
var output2 = myInfoTag`Mr/Ms. ${ user2 } is a/an ${ experience2 } in ${skill2}`;

console.log(output1);// Mr/Ms. John is a/an expert developer in JavaScript
console.log(output2);// Mr/Ms. Kane is a/an junior developer in JavaScript
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are raw strings&lt;/h3&gt; &lt;p&gt;ES6 provides a raw strings feature using the &lt;code&gt;String.raw()&lt;/code&gt; method which is used to get the raw string form of template strings. This feature allows you to access the raw strings as they were entered, without processing escape sequences. For example, the usage would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var calculationString = String.raw `The sum of numbers is \n${1+2+3+4}!`;
console.log(calculationString); // The sum of numbers is 10
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don&#39;t use raw strings, the newline character sequence will be processed by displaying the output in multiple lines&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var calculationString = `The sum of numbers is \n${1+2+3+4}!`;
console.log(calculationString);
// The sum of numbers is
// 10
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Also, the raw property is available on the first argument to the tag function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function tag(strings) {
   console.log(strings.raw[0]);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is destructuring assignment&lt;/h3&gt; &lt;p&gt;The destructuring assignment is a JavaScript expression that makes it possible to unpack values from arrays or properties from objects into distinct variables. Let&#39;s get the month values from an array using destructuring assignment&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var [one, two, three] = [&#39;JAN&#39;, &#39;FEB&#39;, &#39;MARCH&#39;];

console.log(one); // &quot;JAN&quot;
console.log(two); // &quot;FEB&quot;
console.log(three); // &quot;MARCH&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and you can get user properties of an object using destructuring assignment,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var {name, age} = {name: &#39;John&#39;, age: 32};

console.log(name); // John
console.log(age); // 32
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are default values in destructuring assignment&lt;/h3&gt; &lt;p&gt;A variable can be assigned a default value when the value unpacked from the array or object is undefined during destructuring assignment. It helps to avoid setting default values separately for each assignment. Let&#39;s take an example for both arrays and object use cases,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Arrays destructuring:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var x, y, z;

[x=2, y=4, z=6] = [10];
console.log(x); // 10
console.log(y); // 4
console.log(z); // 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Objects destructuring:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var {x=2, y=4, z=6} = {x: 10};

console.log(x); // 10
console.log(y); // 4
console.log(z); // 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you swap variables in destructuring assignment&lt;/h3&gt; &lt;p&gt;If you don&#39;t use destructuring assignment, swapping two values requires a temporary variable. Whereas using a destructuring feature, two variable values can be swapped in one destructuring expression. Let&#39;s swap two number variables in array destructuring assignment,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var x = 10, y = 20;

[x, y] = [y, x];
console.log(x); // 20
console.log(y); // 10
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are enhanced object literals&lt;/h3&gt; &lt;p&gt;Object literals make it easy to quickly create objects with properties inside the curly braces. For example, it provides shorter syntax for common object property definition as below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//ES6
var x = 10, y = 20
obj = { x, y }
console.log(obj); // {x: 10, y:20}
//ES5
var x = 10, y = 20
obj = { x : x, y : y}
console.log(obj); // {x: 10, y:20}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are dynamic imports&lt;/h3&gt; &lt;p&gt;The dynamic imports using &lt;code&gt;import()&lt;/code&gt; function syntax allows us to load modules on demand by using promises or the async/await syntax. Currently this feature is in &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;stage4 proposal&lt;/a&gt;. The main advantage of dynamic imports is reduction of our bundle&#39;s sizes, the size/payload response of our requests and overall improvements in the user experience. The syntax of dynamic imports would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import(&#39;./Module&#39;).then(Module =&amp;gt; Module.method());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the use cases for dynamic imports&lt;/h3&gt; &lt;p&gt;Below are some of the use cases of using dynamic imports over static imports,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Import a module on-demand or conditionally. For example, if you want to load a polyfill on legacy browser&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (isLegacyBrowser()) {
    import(¬∑¬∑¬∑)
    .then(¬∑¬∑¬∑);
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Compute the module specifier at runtime. For example, you can use it for internationalization.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import(`messages_${getLocale()}.js`).then(¬∑¬∑¬∑);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Import a module from within a regular script instead a module.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are typed arrays&lt;/h3&gt; &lt;p&gt;Typed arrays are array-like objects from ECMAScript 6 API for handling binary data. JavaScript provides 8 Typed array types,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Int8Array: An array of 8-bit signed integers&lt;/li&gt; 
   &lt;li&gt;Int16Array: An array of 16-bit signed integers&lt;/li&gt; 
   &lt;li&gt;Int32Array: An array of 32-bit signed integers&lt;/li&gt; 
   &lt;li&gt;Uint8Array: An array of 8-bit unsigned integers&lt;/li&gt; 
   &lt;li&gt;Uint16Array: An array of 16-bit unsigned integers&lt;/li&gt; 
   &lt;li&gt;Uint32Array: An array of 32-bit unsigned integers&lt;/li&gt; 
   &lt;li&gt;Float32Array: An array of 32-bit floating point numbers&lt;/li&gt; 
   &lt;li&gt;Float64Array: An array of 64-bit floating point numbers&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;For example, you can create an array of 8-bit signed integers as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = new Int8Array();
// You can pre-allocate n bytes
const bytes = 1024
const a = new Int8Array(bytes)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of module loaders&lt;/h3&gt; &lt;p&gt;The module loaders provides the below features,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Dynamic loading&lt;/li&gt; 
   &lt;li&gt;State isolation&lt;/li&gt; 
   &lt;li&gt;Global namespace isolation&lt;/li&gt; 
   &lt;li&gt;Compilation hooks&lt;/li&gt; 
   &lt;li&gt;Nested virtualization&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is collation&lt;/h3&gt; &lt;p&gt;Collation is used for sorting a set of strings and searching within a set of strings. It is parameterized by locale and aware of Unicode. Let&#39;s take comparison and sorting features,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Comparison:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var list = [ &quot;√§&quot;, &quot;a&quot;, &quot;z&quot; ]; // In German,  &quot;√§&quot; sorts with &quot;a&quot; Whereas in Swedish, &quot;√§&quot; sorts after &quot;z&quot;
var l10nDE = new Intl.Collator(&quot;de&quot;);
var l10nSV = new Intl.Collator(&quot;sv&quot;);
console.log(l10nDE.compare(&quot;√§&quot;, &quot;z&quot;) === -1); // true
console.log(l10nSV.compare(&quot;√§&quot;, &quot;z&quot;) === +1); // true
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Sorting:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var list = [ &quot;√§&quot;, &quot;a&quot;, &quot;z&quot; ]; // In German,  &quot;√§&quot; sorts with &quot;a&quot; Whereas in Swedish, &quot;√§&quot; sorts after &quot;z&quot;
var l10nDE = new Intl.Collator(&quot;de&quot;);
var l10nSV = new Intl.Collator(&quot;sv&quot;);
console.log(list.sort(l10nDE.compare)) // [ &quot;a&quot;, &quot;√§&quot;, &quot;z&quot; ]
console.log(list.sort(l10nSV.compare)) // [ &quot;a&quot;, &quot;z&quot;, &quot;√§&quot; ]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is for...of statement&lt;/h3&gt; &lt;p&gt;The for...of statement creates a loop iterating over iterable objects or elements such as built-in String, Array, Array-like objects (like arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. The basic usage of for...of statement on arrays would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let arrayIterable = [10, 20, 30, 40, 50];

for (let value of arrayIterable) {
  value ++;
  console.log(value); // 11 21 31 41 51
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below spread operator array&lt;/h3&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[...&#39;John Resig&#39;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the array is [&#39;J&#39;, &#39;o&#39;, &#39;h&#39;, &#39;n&#39;, &#39;&#39;, &#39;R&#39;, &#39;e&#39;, &#39;s&#39;, &#39;i&#39;, &#39;g&#39;] &lt;strong&gt;Explanation:&lt;/strong&gt; The string is an iterable type and the spread operator within an array maps every character of an iterable to one element. Hence, each character of a string becomes an element within an Array.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is PostMessage secure&lt;/h3&gt; &lt;p&gt;Yes, postMessages can be considered very secure as long as the programmer/developer is careful about checking the origin and source of an arriving message. But if you try to send/receive a message without verifying its source will create cross-site scripting attacks.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the problems with postmessage target origin as wildcard&lt;/h3&gt; &lt;p&gt;The second argument of postMessage method specifies which origin is allowed to receive the message. If you use the wildcard ‚Äú*‚Äù as an argument then any origin is allowed to receive the message. In this case, there is no way for the sender window to know if the target window is at the target origin when sending the message. If the target window has been navigated to another origin, the other origin would receive the data. Hence, this may lead to XSS vulnerabilities.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;targetWindow.postMessage(message, &#39;*&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you avoid receiving postMessages from attackers&lt;/h3&gt; &lt;p&gt;Since the listener listens for any message, an attacker can trick the application by sending a message from the attacker‚Äôs origin, which gives an impression that the receiver received the message from the actual sender‚Äôs window. You can avoid this issue by validating the origin of the message on the receiver&#39;s end using the ‚Äúmessage.origin‚Äù attribute. For examples, let&#39;s check the sender&#39;s origin &lt;a href=&quot;http://www.some-sender.com&quot;&gt;http://www.some-sender.com&lt;/a&gt; on receiver side &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/www.some-receiver.com&quot;&gt;www.some-receiver.com&lt;/a&gt;,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Listener on http://www.some-receiver.com/
window.addEventListener(&quot;message&quot;, function(message){
    if(/^http://www\.some-sender\.com$/.test(message.origin)){
         console.log(&#39;You received the data from valid sender&#39;, message.data);
   }
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can I avoid using postMessages completely&lt;/h3&gt; &lt;p&gt;You cannot avoid using postMessages completely(or 100%). Even though your application doesn‚Äôt use postMessage considering the risks, a lot of third party scripts use postMessage to communicate with the third party service. So your application might be using postMessage without your knowledge.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is postMessages synchronous&lt;/h3&gt; &lt;p&gt;The postMessages are synchronous in IE8 browser but they are asynchronous in IE9 and all other modern browsers (i.e, IE9+, Firefox, Chrome, Safari).Due to this asynchronous behaviour, we use a callback mechanism when the postMessage is returned.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What paradigm is Javascript&lt;/h3&gt; &lt;p&gt;JavaScript is a multi-paradigm language, supporting imperative/procedural programming, Object-Oriented Programming and functional programming. JavaScript supports Object-Oriented Programming with prototypical inheritance.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between internal and external javascript&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Internal JavaScript:&lt;/strong&gt; It is the source code within the script tag. &lt;strong&gt;External JavaScript:&lt;/strong&gt; The source code is stored in an external file(stored with .js extension) and referred with in the tag.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is JavaScript faster than server side script&lt;/h3&gt; &lt;p&gt;Yes, JavaScript is faster than server side script. Because JavaScript is a client-side script it does not require any web server‚Äôs help for its computation or calculation. So JavaScript is always faster than any server-side script like ASP, PHP, etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the status of a checkbox&lt;/h3&gt; &lt;p&gt;You can apply the &lt;code&gt;checked&lt;/code&gt; property on the selected checkbox in the DOM. If the value is &lt;code&gt;True&lt;/code&gt; means the checkbox is checked otherwise it is unchecked. For example, the below HTML checkbox element can be access using javascript as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;input type=&quot;checkbox&quot; name=&quot;checkboxname&quot; value=&quot;Agree&quot;&amp;gt; Agree the conditions&amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(document.getElementById(‚Äòcheckboxname‚Äô).checked); // true or false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of double tilde operator&lt;/h3&gt; &lt;p&gt;The double tilde operator(~~) is known as double NOT bitwise operator. This operator is going to be a quicker substitute for Math.floor().&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you convert character to ASCII code&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;String.prototype.charCodeAt()&lt;/code&gt; method to convert string characters to ASCII numbers. For example, let&#39;s find ASCII code for the first letter of &#39;ABC&#39; string,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;ABC&quot;.charCodeAt(0) // returns 65
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas &lt;code&gt;String.fromCharCode()&lt;/code&gt; method converts numbers to equal ASCII characters.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;String.fromCharCode(65,66,67); // returns &#39;ABC&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is ArrayBuffer&lt;/h3&gt; &lt;p&gt;An ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You can create it as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let buffer = new ArrayBuffer(16); // create a buffer of length 16
alert(buffer.byteLength); // 16
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To manipulate an ArrayBuffer, we need to use a ‚Äúview‚Äù object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Create a DataView referring to the buffer
 let view = new DataView(buffer);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below string expression&lt;/h3&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(&quot;Welcome to JS world&quot;[0])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the above expression is &quot;W&quot;. &lt;strong&gt;Explanation:&lt;/strong&gt; The bracket notation with specific index on a string returns the character at a specific location. Hence, it returns the character &quot;W&quot; of the string. Since this is not supported in IE7 and below versions, you may need to use the .charAt() method to get the desired result.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of Error object&lt;/h3&gt; &lt;p&gt;The Error constructor creates an error object and the instances of error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. The syntax of error object would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;new Error([message[, fileName[, lineNumber]]])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can throw user defined exceptions or errors using Error object in try...catch block as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  if(withdraw &amp;gt; balance)
  throw new Error(&quot;Oops! You don&#39;t have enough balance&quot;);
} catch (e) {
  console.log(e.name + &#39;: &#39; + e.message);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of EvalError object&lt;/h3&gt; &lt;p&gt;The EvalError object indicates an error regarding the global &lt;code&gt;eval()&lt;/code&gt; function. Even though this exception is not thrown by JavaScript anymore, the EvalError object remains for compatibility. The syntax of this expression would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;new EvalError([message[, fileName[, lineNumber]]])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can throw EvalError with in try...catch block as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  throw new EvalError(&#39;Eval function error&#39;, &#39;someFile.js&#39;, 100);
} catch (e) {
  console.log(e.message, e.name, e.fileName);              // &quot;Eval function error&quot;, &quot;EvalError&quot;, &quot;someFile.js&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the list of cases error thrown from non-strict mode to strict mode&lt;/h3&gt; &lt;p&gt;When you apply &#39;use strict&#39;; syntax, some of the below cases will throw a SyntaxError before executing the script&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;When you use Octal syntax&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var n = 022;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Using &lt;code&gt;with&lt;/code&gt; statement&lt;/li&gt; 
   &lt;li&gt;When you use delete operator on a variable name&lt;/li&gt; 
   &lt;li&gt;Using eval or arguments as variable or function argument name&lt;/li&gt; 
   &lt;li&gt;When you use newly reserved keywords&lt;/li&gt; 
   &lt;li&gt;When you declare a function in a block&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (someCondition) { function f() {} }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Hence, the errors from above cases are helpful to avoid errors in development/production environments.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is all objects have prototypes&lt;/h3&gt; &lt;p&gt;No. All objects have prototypes except for the base object which is created by the user, or an object that is created using the new keyword.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between a parameter and an argument&lt;/h3&gt; &lt;p&gt;Parameter is the variable name of a function definition whereas an argument represents the value given to a function when it is invoked. Let&#39;s explain this with a simple function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myFunction(parameter1, parameter2, parameter3) {
  console.log(arguments[0]) // &quot;argument1&quot;
  console.log(arguments[1]) // &quot;argument2&quot;
  console.log(arguments[2]) // &quot;argument3&quot;
}
myFunction(&quot;argument1&quot;, &quot;argument2&quot;, &quot;argument3&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of some method in arrays&lt;/h3&gt; &lt;p&gt;The some() method is used to test whether at least one element in the array passes the test implemented by the provided function. The method returns a boolean value. Let&#39;s take an example to test for any odd elements,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var array = [1, 2, 3, 4, 5, 6 ,7, 8, 9, 10];

var odd = element ==&amp;gt; element % 2 !== 0;

console.log(array.some(odd)); // true (the odd element exists)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you combine two or more arrays&lt;/h3&gt; &lt;p&gt;The concat() method is used to join two or more arrays by returning a new array containing all the elements. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;array1.concat(array2, array3, ..., arrayX)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s take an example of array&#39;s concatenation with veggies and fruits arrays,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  var veggies = [&quot;Tomato&quot;, &quot;Carrot&quot;, &quot;Cabbage&quot;];
  var fruits = [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Pears&quot;];
  var veggiesAndFruits = veggies.concat(fruits);
  console.log(veggiesAndFruits); // Tomato, Carrot, Cabbage, Apple, Orange, Pears
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Shallow and Deep copy&lt;/h3&gt; &lt;p&gt;There are two ways to copy an object,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Shallow Copy:&lt;/strong&gt; Shallow copy is a bitwise copy of an object. A new object is created that has an exact copy of the values in the original object. If any of the fields of the object are references to other objects, just the reference addresses are copied i.e., only the memory address is copied.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var empDetails = {
  name: &quot;John&quot;, age: 25, expertise: &quot;Software Developer&quot;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to create a duplicate&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var empDetailsShallowCopy = empDetails    //Shallow copying!
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;if we change some property value in the duplicate one like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;empDetailsShallowCopy.name = &quot;Johnson&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above statement will also change the name of &lt;code&gt;empDetails&lt;/code&gt;, since we have a shallow copy. That means we&#39;re losing the original data as well.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Deep copy:&lt;/strong&gt; A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var empDetails = {
  name: &quot;John&quot;, age: 25, expertise: &quot;Software Developer&quot;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Create a deep copy by using the properties from the original object into new variable&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var empDetailsDeepCopy = {
  name: empDetails.name,
  age: empDetails.age,
  expertise: empDetails.expertise
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now if you change &lt;code&gt;empDetailsDeepCopy.name&lt;/code&gt;, it will only affect &lt;code&gt;empDetailsDeepCopy&lt;/code&gt; &amp;amp; not &lt;code&gt;empDetails&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create specific number of copies of a string&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;repeat()&lt;/code&gt; method is used to construct and return a new string which contains the specified number of copies of the string on which it was called, concatenated together. Remember that this method has been added to the ECMAScript 2015 specification. Let&#39;s take an example of Hello string to repeat it 4 times,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&#39;Hello&#39;.repeat(4);  // &#39;HelloHelloHelloHello&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you return all matching strings against a regular expression&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;matchAll()&lt;/code&gt; method can be used to return an iterator of all results matching a string against a regular expression. For example, the below example returns an array of matching string results against a regular expression,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let regexp = /Hello(\d?))/g;
let greeting = &#39;Hello1Hello2Hello3&#39;;

let greetingList = [...greeting.matchAll(regexp)];

console.log(greetingList[0]); //Hello1
console.log(greetingList[1]); //Hello2
console.log(greetingList[2]); //Hello3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you trim a string at the beginning or ending&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;trim&lt;/code&gt; method of string prototype is used to trim on both sides of a string. But if you want to trim especially at the beginning or ending of the string then you can use &lt;code&gt;trimStart/trimLeft&lt;/code&gt; and &lt;code&gt;trimEnd/trimRight&lt;/code&gt; methods. Let&#39;s see an example of these methods on a greeting message,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var greeting = &#39;   Hello, Goodmorning!   &#39;;

console.log(greeting); // &quot;   Hello, Goodmorning!   &quot;
console.log(greeting.trimStart()); // &quot;Hello, Goodmorning!   &quot;
console.log(greeting.trimLeft()); // &quot;Hello, Goodmorning!   &quot;

console.log(greeting.trimEnd()); // &quot;   Hello, Goodmorning!&quot;
console.log(greeting.trimRight()); // &quot;   Hello, Goodmorning!&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below console statement with unary operator&lt;/h3&gt; &lt;p&gt;Let&#39;s take console statement with unary operator as given below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(+ &#39;Hello&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the above console log statement returns NaN. Because the element is prefixed by the unary operator and the JavaScript interpreter will try to convert that element into a number type. Since the conversion fails, the value of the statement results in NaN value.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Does javascript uses mixins&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a thunk function&lt;/h3&gt; &lt;p&gt;A thunk is just a function which delays the evaluation of the value. It doesn‚Äôt take any arguments but gives the value whenever you invoke the thunk. i.e, It is used not to execute now but it will be sometime in the future. Let&#39;s take a synchronous example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const add = (x,y) =&amp;gt; x + y;

const thunk = () =&amp;gt; add(2,3);

thunk() // 5
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are asynchronous thunks&lt;/h3&gt; &lt;p&gt;The asynchronous thunks are useful to make network requests. Let&#39;s see an example of network requests,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function fetchData(fn){
  fetch(&#39;https://jsonplaceholder.typicode.com/todos/1&#39;)
  .then(response =&amp;gt; response.json())
  .then(json =&amp;gt; fn(json))
}

const asyncThunk = function (){
   return fetchData(function getData(data){
      console.log(data)
  })
}

asyncThunk()
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;getData&lt;/code&gt; function won&#39;t be called immediately but it will be invoked only when the data is available from API endpoint. The setTimeout function is also used to make our code asynchronous. The best real time example is redux state management library which uses the asynchronous thunks to delay the actions to dispatch.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below function calls&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Code snippet:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const circle = {
  radius: 20,
  diameter() {
    return this.radius * 2;
  },
  perimeter: () =&amp;gt; 2 * Math.PI * this.radius
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;console.log(circle.diameter()); console.log(circle.perimeter());&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The output is 40 and NaN. Remember that diameter is a regular function, whereas the value of perimeter is an arrow function. The &lt;code&gt;this&lt;/code&gt; keyword of a regular function(i.e, diameter) refers to the surrounding scope which is a class(i.e, Shape object). Whereas this keyword of perimeter function refers to the surrounding scope which is a window object. Since there is no radius property on window objects it returns an undefined value and the multiple of number value returns NaN value.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to remove all line breaks from a string&lt;/h3&gt; &lt;p&gt;The easiest approach is using regular expressions to detect and replace newlines in the string. In this case, we use replace function along with string to replace with, which in our case is an empty string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function remove_linebreaks( var message ) {
    return message.replace( /[\r\n]+/gm, &quot;&quot; );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above expression, g and m are for global and multiline flags.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between reflow and repaint&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;repaint&lt;/em&gt; occurs when changes are made which affect the visibility of an element, but not its layout. Examples of this include outline, visibility, or background color. A &lt;em&gt;reflow&lt;/em&gt; involves changes that affect the layout of a portion of the page (or the whole page). Resizing the browser window, changing the font, content changing (such as user typing text), using JavaScript methods involving computed styles, adding or removing elements from the DOM, and changing an element&#39;s classes are a few of the things that can trigger reflow. Reflow of an element causes the subsequent reflow of all child and ancestor elements as well as any elements following it in the DOM.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens with negating an array&lt;/h3&gt; &lt;p&gt;Negating an array with &lt;code&gt;!&lt;/code&gt; character will coerce the array into a boolean. Since Arrays are considered to be truthy So negating it will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(![]); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens if we add two arrays&lt;/h3&gt; &lt;p&gt;If you add two arrays together, it will convert them both to strings and concatenate them. For example, the result of adding arrays would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log([&#39;a&#39;] + [&#39;b&#39;]);  // &quot;ab&quot;
console.log([] + []); // &quot;&quot;
console.log(![] + []); // &quot;false&quot;, because ![] returns false.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of prepend additive operator on falsy values&lt;/h3&gt; &lt;p&gt;If you prepend the additive(+) operator on falsy values(null, undefined, NaN, false, &quot;&quot;), the falsy value converts to a number value zero. Let&#39;s display them on browser console as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(+null); // 0
console.log(+undefined);// NaN
console.log(+false); // 0
console.log(+NaN); // NaN
console.log(+&quot;&quot;); // 0
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create self string using special characters&lt;/h3&gt; &lt;p&gt;The self string can be formed with the combination of &lt;code&gt;[]()!+&lt;/code&gt; characters. You need to remember the below conventions to achieve this pattern.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Since Arrays are truthful values, negating the arrays will produce false: ![] === false&lt;/li&gt; 
   &lt;li&gt;As per JavaScript coercion rules, the addition of arrays together will toString them: [] + [] === &quot;&quot;&lt;/li&gt; 
   &lt;li&gt;Prepend an array with + operator will convert an array to false, the negation will make it true and finally converting the result will produce value &#39;1&#39;: +(!(+[])) === 1&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;By applying the above rules, we can derive below conditions&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;![] + [] === &quot;false&quot;
+!+[] === 1
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now the character pattern would be created as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;      s               e               l               f
 ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^

 (![] + [])[3] + (![] + [])[4] + (![] + [])[2] + (![] + [])[0]
 ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^
(![] + [])[+!+[]+!+[]+!+[]] +
(![] + [])[+!+[]+!+[]+!+[]+!+[]] +
(![] + [])[+!+[]+!+[]] +
(![] + [])[+[]]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
(![]+[])[+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]]+(![]+[])[+[]]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you remove falsy values from an array&lt;/h3&gt; &lt;p&gt;You can apply the filter method on the array by passing Boolean as a parameter. This way it removes all falsy values(0, undefined, null, false and &quot;&quot;) from the array.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const myArray = [false, null, 1,5, undefined]
myArray.filter(Boolean); // [1, 5] // is same as myArray.filter(x =&amp;gt; x);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get unique values of an array&lt;/h3&gt; &lt;p&gt;You can get unique values of an array with the combination of &lt;code&gt;Set&lt;/code&gt; and rest expression/spread(...) syntax.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log([...new Set([1, 2, 4, 4, 3])]); // [1, 2, 4, 3]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is destructuring aliases&lt;/h3&gt; &lt;p&gt;Sometimes you would like to have a destructured variable with a different name than the property name. In that case, you&#39;ll use a &lt;code&gt;: newName&lt;/code&gt; to specify a name for the variable. This process is called destructuring aliases.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const obj = { x: 1 };
// Grabs obj.x as as { otherName }
const { x: otherName } = obj;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you map the array values without using map method&lt;/h3&gt; &lt;p&gt;You can map the array values without using the &lt;code&gt;map&lt;/code&gt; method by just using the &lt;code&gt;from&lt;/code&gt; method of Array. Let&#39;s map city names from Countries array,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const countries = [
    { name: &#39;India&#39;, capital: &#39;Delhi&#39; },
    { name: &#39;US&#39;, capital: &#39;Washington&#39; },
    { name: &#39;Russia&#39;, capital: &#39;Moscow&#39; },
    { name: &#39;Singapore&#39;, capital: &#39;Singapore&#39; },
    { name: &#39;China&#39;, capital: &#39;Beijing&#39; },
    { name: &#39;France&#39;, capital: &#39;Paris&#39; },
];

const cityNames = Array.from(countries, ({ capital}) =&amp;gt; capital);
console.log(cityNames); // [&#39;Delhi, &#39;Washington&#39;, &#39;Moscow&#39;, &#39;Singapore&#39;, &#39;Beijing&#39;, &#39;Paris&#39;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you empty an array&lt;/h3&gt; &lt;p&gt;You can empty an array quickly by setting the array length to zero.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let cities = [&#39;Singapore&#39;, &#39;Delhi&#39;, &#39;London&#39;];
cities.length = 0; // cities becomes []
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you rounding numbers to certain decimals&lt;/h3&gt; &lt;p&gt;You can round numbers to a certain number of decimals using &lt;code&gt;toFixed&lt;/code&gt; method from native javascript.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let pie = 3.141592653;
pie = pie.toFixed(3); // 3.142
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the easiest way to convert an array to an object&lt;/h3&gt; &lt;p&gt;You can convert an array to an object with the same data using spread(...) operator.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fruits = [&quot;banana&quot;, &quot;apple&quot;, &quot;orange&quot;, &quot;watermelon&quot;];
var fruitsObject = {...fruits};
console.log(fruitsObject); // {0: &quot;banana&quot;, 1: &quot;apple&quot;, 2: &quot;orange&quot;, 3: &quot;watermelon&quot;}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create an array with some data&lt;/h3&gt; &lt;p&gt;You can create an array with some data or an array with the same values using &lt;code&gt;fill&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var newArray = new Array(5).fill(&quot;0&quot;);
console.log(newArray); // [&quot;0&quot;, &quot;0&quot;, &quot;0&quot;, &quot;0&quot;, &quot;0&quot;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the placeholders from console object&lt;/h3&gt; &lt;p&gt;Below are the list of placeholders available from console object,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;%o ‚Äî It takes an object,&lt;/li&gt; 
   &lt;li&gt;%s ‚Äî It takes a string,&lt;/li&gt; 
   &lt;li&gt;%d ‚Äî It is used for a decimal or integer These placeholders can be represented in the console.log as below&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = { &quot;name&quot;:&quot;John&quot;, &quot;id&quot;: 1, &quot;city&quot;: &quot;Delhi&quot;};
console.log(&quot;Hello %s, your details %o are available in the object form&quot;, &quot;John&quot;, user); // Hello John, your details {name: &quot;John&quot;, id: 1, city: &quot;Delhi&quot;} are available in object
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to add CSS to console messages&lt;/h3&gt; &lt;p&gt;Yes, you can apply CSS styles to console messages similar to html text on the web page.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(&#39;%c The text has blue color, with large font and red background&#39;, &#39;color: blue; font-size: x-large; background: red&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The text will be displayed as below, &lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/console-css.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All CSS styles can be applied to console messages.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of dir method of console object&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;console.dir()&lt;/code&gt; is used to display an interactive list of the properties of the specified JavaScript object as JSON.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = { &quot;name&quot;:&quot;John&quot;, &quot;id&quot;: 1, &quot;city&quot;: &quot;Delhi&quot;};
console.dir(user);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The user object displayed in JSON representation &lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/console-dir.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to debug HTML elements in console&lt;/h3&gt; &lt;p&gt;Yes, it is possible to get and debug HTML elements in the console just like inspecting elements.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const element = document.getElementsByTagName(&quot;body&quot;)[0];
console.log(element);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It prints the HTML element in the console,&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/console-html.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you display data in a tabular format using console object&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;console.table()&lt;/code&gt; is used to display data in the console in a tabular format to visualize complex arrays or objects.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const users = [{ &quot;name&quot;:&quot;John&quot;, &quot;id&quot;: 1, &quot;city&quot;: &quot;Delhi&quot;}, { &quot;name&quot;:&quot;Max&quot;, &quot;id&quot;: 2, &quot;city&quot;: &quot;London&quot;}, { &quot;name&quot;:&quot;Rod&quot;, &quot;id&quot;: 3, &quot;city&quot;: &quot;Paris&quot;} ];
console.table(users);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The data visualized in a table format,&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/console-table.png&quot; alt=&quot;Screenshot&quot;&gt; &lt;strong&gt;Not:&lt;/strong&gt; Remember that &lt;code&gt;console.table()&lt;/code&gt; is not supported in IE.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you verify that an argument is a Number or not&lt;/h3&gt; &lt;p&gt;The combination of IsNaN and isFinite methods are used to confirm whether an argument is a number or not.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isNumber(n){
    return !isNaN(parseFloat(n)) &amp;amp;&amp;amp; isFinite(n);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create copy to clipboard button&lt;/h3&gt; &lt;p&gt;You need to select the content(using .select() method) of the input element and execute the copy command with execCommand (i.e, execCommand(&#39;copy&#39;)). You can also execute other system commands like cut and paste.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.querySelector(&quot;#copy-button&quot;).onclick = function() {
  // Select the content
  document.querySelector(&quot;#copy-input&quot;).select();
  // Copy to the clipboard
  document.execCommand(&#39;copy&#39;);
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the shortcut to get timestamp&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;new Date().getTime()&lt;/code&gt; to get the current timestamp. There is an alternative shortcut to get the value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(+new Date());
console.log(Date.now());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you flattening multi dimensional arrays&lt;/h3&gt; &lt;p&gt;Flattening bi-dimensional arrays is trivial with Spread operator.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const biDimensionalArr = [11, [22, 33], [44, 55], [66, 77], 88, 99];
const flattenArr = [].concat(...biDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can make it work with multi-dimensional arrays by recursive calls,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function flattenMultiArray(arr) {
    const flattened = [].concat(...arr);
    return flattened.some(item =&amp;gt; Array.isArray(item)) ? flattenMultiArray(flattened) : flattened;
 }
const multiDimensionalArr = [11, [22, 33], [44, [55, 66, [77, [88]], 99]]];
const flatArr = flattenMultiArray(multiDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the easiest multi condition checking&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;indexOf&lt;/code&gt; to compare input with multiple values instead of checking each value as one condition.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Verbose approach
if (input === &#39;first&#39; || input === 1 || input === &#39;second&#39; || input === 2) {
  someFunction();
}
// Shortcut
if ([&#39;first&#39;, 1, &#39;second&#39;, 2].indexOf(input) !== -1) {
  someFunction();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you capture browser back button&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;window.onbeforeunload&lt;/code&gt; method is used to capture browser back button events. This is helpful to warn users about losing the current data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; window.onbeforeunload = function() {
    alert(&quot;You work will be lost&quot;);
 };
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you disable right click in the web page&lt;/h3&gt; &lt;p&gt;The right click on the page can be disabled by returning false from the &lt;code&gt;oncontextmenu&lt;/code&gt; attribute on the body element.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body oncontextmenu=&quot;return false;&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are wrapper objects&lt;/h3&gt; &lt;p&gt;Primitive Values like string,number and boolean don&#39;t have properties and methods but they are temporarily converted or coerced to an object(Wrapper object) when you try to perform actions on them. For example, if you apply toUpperCase() method on a primitive string value, it does not throw an error but returns uppercase of the string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let name = &quot;john&quot;;

console.log(name.toUpperCase());  // Behind the scenes treated as console.log(new String(name).toUpperCase());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;i.e, Every primitive except null and undefined have Wrapper Objects and the list of wrapper objects are String,Number,Boolean,Symbol and BigInt.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is AJAX&lt;/h3&gt; &lt;p&gt;AJAX stands for Asynchronous JavaScript and XML and it is a group of related technologies(HTML, CSS, JavaScript, XMLHttpRequest API etc) used to display data asynchronously. i.e. We can send data to the server and get data from the server without reloading the web page.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to deal with Asynchronous Code&lt;/h3&gt; &lt;p&gt;Below are the list of different ways to deal with Asynchronous code.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Callbacks&lt;/li&gt; 
   &lt;li&gt;Promises&lt;/li&gt; 
   &lt;li&gt;Async/await&lt;/li&gt; 
   &lt;li&gt;Third-party libraries such as async.js,bluebird etc&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to cancel a fetch request&lt;/h3&gt; &lt;p&gt;Until a few days back, One shortcoming of native promises is no direct way to cancel a fetch request. But the new &lt;code&gt;AbortController&lt;/code&gt; from js specification allows you to use a signal to abort one or multiple fetch calls. The basic flow of cancelling a fetch request would be as below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Create an &lt;code&gt;AbortController&lt;/code&gt; instance&lt;/li&gt; 
   &lt;li&gt;Get the signal property of an instance and pass the signal as a fetch option for signal&lt;/li&gt; 
   &lt;li&gt;Call the AbortController&#39;s abort property to cancel all fetches that use that signal For example, let&#39;s pass the same signal to multiple fetch calls will cancel all requests with that signal,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const controller = new AbortController();
const { signal } = controller;

fetch(&quot;http://localhost:8000&quot;, { signal }).then(response =&amp;gt; {
    console.log(`Request 1 is complete!`);
}).catch(e =&amp;gt; {
    if(e.name === &quot;AbortError&quot;) {
        // We know it&#39;s been canceled!
    }
});

fetch(&quot;http://localhost:8000&quot;, { signal }).then(response =&amp;gt; {
    console.log(`Request 2 is complete!`);
}).catch(e =&amp;gt; {
     if(e.name === &quot;AbortError&quot;) {
         // We know it&#39;s been canceled!
      }
});

// Wait 2 seconds to abort both requests
setTimeout(() =&amp;gt; controller.abort(), 2000);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is web speech API&lt;/h3&gt; &lt;p&gt;Web speech API is used to enable modern browsers recognize and synthesize speech(i.e, voice data into web apps). This API has been introduced by W3C Community in the year 2012. It has two main parts,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;SpeechRecognition (Asynchronous Speech Recognition or Speech-to-Text):&lt;/strong&gt; It provides the ability to recognize voice context from an audio input and respond accordingly. This is accessed by the &lt;code&gt;SpeechRecognition&lt;/code&gt; interface. The below example shows on how to use this API to get text from speech,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;  // webkitSpeechRecognition for Chrome and SpeechRecognition for FF
const recognition = new window.SpeechRecognition();
recognition.onresult = (event) =&amp;gt; { // SpeechRecognitionEvent type
  const speechToText = event.results[0][0].transcript;
  console.log(speechToText);
}
recognition.start();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this API, browser is going to ask you for permission to use your microphone&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;SpeechSynthesis (Text-to-Speech):&lt;/strong&gt; It provides the ability to recognize voice context from an audio input and respond. This is accessed by the &lt;code&gt;SpeechSynthesis&lt;/code&gt; interface. For example, the below code is used to get voice/speech from text,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if(&#39;speechSynthesis&#39; in window){
    var speech = new SpeechSynthesisUtterance(&#39;Hello World!&#39;);
    speech.lang = &#39;en-US&#39;;
    window.speechSynthesis.speak(speech);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above examples can be tested on chrome(33+) browser&#39;s developer console. &lt;strong&gt;Note:&lt;/strong&gt; This API is still a working draft and only available in Chrome and Firefox browsers(ofcourse Chrome only implemented the specification) &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is minimum timeout throttling&lt;/h3&gt; &lt;p&gt;Both browser and NodeJS javascript environments throttles with a minimum delay that is greater than 0ms. That means even though setting a delay of 0ms will not happen instantaneously. &lt;strong&gt;Browsers:&lt;/strong&gt; They have a minimum delay of 4ms. This throttle occurs when successive calls are triggered due to callback nesting(certain depth) or after a certain number of successive intervals. Note: The older browsers have a minimum delay of 10ms. &lt;strong&gt;Nodejs:&lt;/strong&gt; They have a minimum delay of 1ms. This throttle happens when the delay is larger than 2147483647 or less than 1. The best example to explain this timeout throttling behavior is the order of below code snippet.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function runMeFirst() {
    console.log(&#39;My script is initialized&#39;);
}
setTimeout(runMeFirst, 0);
console.log(&#39;Script loaded&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and the output would be in&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;Script loaded
My script is initialized
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don&#39;t use &lt;code&gt;setTimeout&lt;/code&gt;, the order of logs will be sequential.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function runMeFirst() {
   console.log(&#39;My script is initialized&#39;);
}
runMeFirst();
console.log(&#39;Script loaded&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and the output is,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;My script is initialized
Script loaded
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you implement zero timeout in modern browsers&lt;/h3&gt; &lt;p&gt;You can&#39;t use setTimeout(fn, 0) to execute the code immediately due to minimum delay of greater than 0ms. But you can use window.postMessage() to achieve this behavior.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are tasks in event loop&lt;/h3&gt; &lt;p&gt;A task is any javascript code/program which is scheduled to be run by the standard mechanisms such as initially starting to run a program, run an event callback, or an interval or timeout being fired. All these tasks are scheduled on a task queue. Below are the list of use cases to add tasks to the task queue,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;When a new javascript program is executed directly from console or running by the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element, the task will be added to the task queue.&lt;/li&gt; 
   &lt;li&gt;When an event fires, the event callback added to task queue&lt;/li&gt; 
   &lt;li&gt;When a setTimeout or setInterval is reached, the corresponding callback added to task queue&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is microtask&lt;/h3&gt; &lt;p&gt;Microtask is the javascript code which needs to be executed immediately after the currently executing task/microtask is completed. They are kind of blocking in nature. i.e, The main thread will be blocked until the microtask queue is empty. The main sources of microtasks are Promise.resolve, Promise.reject, MutationObservers, IntersectionObservers etc&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All of these microtasks are processed in the same turn of the event loop. &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are different event loops&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of queueMicrotask&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you use javascript libraries in typescript file&lt;/h3&gt; &lt;p&gt;It is known that not all JavaScript libraries or frameworks have TypeScript declaration files. But if you still want to use libraries or frameworks in our TypeScript files without getting compilation errors, the only solution is &lt;code&gt;declare&lt;/code&gt; keyword along with a variable declaration. For example, let&#39;s imagine you have a library called &lt;code&gt;customLibrary&lt;/code&gt; that doesn‚Äôt have a TypeScript declaration and have a namespace called &lt;code&gt;customLibrary&lt;/code&gt; in the global namespace. You can use this library in typescript code as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;declare var customLibrary;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the runtime, typescript will provide the type to the &lt;code&gt;customLibrary&lt;/code&gt; variable as &lt;code&gt;any&lt;/code&gt; type. The another alternative without using declare keyword is below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var customLibrary: any;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between promises and observables&lt;/h3&gt; &lt;p&gt;Some of the major difference in a tabular form&lt;/p&gt; &lt;p&gt;| Promises | Observables | |---- | --------- | Emits only a single value at a time | Emits multiple values over a period of time(stream of values ranging from 0 to multiple) | | Eager in nature; they are going to be called immediately | Lazy in nature; they require subscription to be invoked | | Promise is always asynchronous even though it resolved immediately | Observable can be either synchronous or asynchronous| | Doesn&#39;t provide any operators | Provides operators such as map, forEach, filter, reduce, retry, and retryWhen etc | | Cannot be canceled | Canceled by using unsubscribe() method |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is heap&lt;/h3&gt; &lt;p&gt;Heap(Or memory heap) is the memory location where objects are stored when we define variables. i.e, This is the place where all the memory allocations and de-allocation take place. Both heap and call-stack are two containers of JS runtime. Whenever runtime comes across variables and function declarations in the code it stores them in the Heap.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/heap.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event table&lt;/h3&gt; &lt;p&gt;Event Table is a data structure that stores and keeps track of all the events which will be executed asynchronously like after some time interval or after the resolution of some API requests. i.e Whenever you call a setTimeout function or invoke async operation, it is added to the Event Table. It doesn&#39;t not execute functions on it‚Äôs own. The main purpose of the event table is to keep track of events and send them to the Event Queue as shown in the below diagram.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/event-table.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a microTask queue&lt;/h3&gt; &lt;p&gt;Microtask Queue is the new queue where all the tasks initiated by promise objects get processed before the callback queue. The microtasks queue are processed before the next rendering and painting jobs. But if these microtasks are running for a long time then it leads to visual degradation.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between shim and polyfill&lt;/h3&gt; &lt;p&gt;A shim is a library that brings a new API to an older environment, using only the means of that environment. It isn&#39;t necessarily restricted to a web application. For example, es5-shim.js is used to emulate ES5 features on older browsers (mainly pre IE9). Whereas polyfill is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively. In a simple sentence, A polyfill is a shim for a browser API.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect primitive or non primitive value type&lt;/h3&gt; &lt;p&gt;In JavaScript, primitive types include boolean, string, number, BigInt, null, Symbol and undefined. Whereas non-primitive types include the Objects. But you can easily identify them with the below function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myPrimitive = 30;
var myNonPrimitive = {};
function isPrimitive(val) {
    return Object(val) !== val;
}

isPrimitive(myPrimitive);
isPrimitive(myNonPrimitive);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the value is a primitive data type, the Object constructor creates a new wrapper object for the value. But If the value is a non-primitive data type (an object), the Object constructor will give the same object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is babel&lt;/h3&gt; &lt;p&gt;Babel is a JavaScript transpiler to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Some of the main features are listed below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Transform syntax&lt;/li&gt; 
   &lt;li&gt;Polyfill features that are missing in your target environment (using @babel/polyfill)&lt;/li&gt; 
   &lt;li&gt;Source code transformations (or codemods)&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is Node.js completely single threaded&lt;/h3&gt; &lt;p&gt;Node is a single thread, but some of the functions included in the Node.js standard library(e.g, fs module functions) are not single threaded. i.e, Their logic runs outside of the Node.js single thread to improve the speed and performance of a program.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the common use cases of observables&lt;/h3&gt; &lt;p&gt;Some of the most common use cases of observables are web sockets with push notifications, user input changes, repeating intervals, etc&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is RxJS&lt;/h3&gt; &lt;p&gt;RxJS (Reactive Extensions for JavaScript) is a library for implementing reactive programming using observables that makes it easier to compose asynchronous or callback-based code. It also provides utility functions for creating and working with observables.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Function constructor and function declaration&lt;/h3&gt; &lt;p&gt;The functions which are created with &lt;code&gt;Function constructor&lt;/code&gt; do not create closures to their creation contexts but they are always created in the global scope. i.e, the function can access its own local variables and global scope variables only. Whereas function declarations can access outer function variables(closures) too.&lt;/p&gt; &lt;p&gt;Let&#39;s see this difference with an example,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Function Constructor:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var a = 100;
function createFunction() {
    var a = 200;
    return new Function(&#39;return a;&#39;);
}
console.log(createFunction()()); // 100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Function declaration:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var a = 100;
function createFunction() {
    var a = 200;
    return function func() {
        return a;
    }
}
console.log(createFunction()()); // 200
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a Short circuit condition&lt;/h3&gt; &lt;p&gt;Short circuit conditions are meant for condensed way of writing simple if statements. Let&#39;s demonstrate the scenario using an example. If you would like to login to a portal with an authentication condition, the expression would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (authenticate) {
   loginToPorta();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since the javascript logical operators evaluated from left to right, the above expression can be simplified using &amp;amp;&amp;amp; logical operator&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;authenticate &amp;amp;&amp;amp; loginToPorta();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the easiest way to resize an array&lt;/h3&gt; &lt;p&gt;The length property of an array is useful to resize or empty an array quickly. Let&#39;s apply length property on number array to resize the number of elements from 5 to 2,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var array = [1, 2, 3, 4, 5];
console.log(array.length); // 5

array.length = 2;
console.log(array.length); // 2
console.log(array); // [1,2]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and the array can be emptied too&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var array = [1, 2, 3, 4, 5];
array.length = 0;
console.log(array.length); // 0
console.log(array); // []
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an observable&lt;/h3&gt; &lt;p&gt;An Observable is basically a function that can return a stream of values either synchronously or asynchronously to an observer over time. The consumer can get the value by calling &lt;code&gt;subscribe()&lt;/code&gt; method. Let&#39;s look at a simple example of an Observable&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { Observable } from &#39;rxjs&#39;;

const observable = new Observable(observer =&amp;gt; {
  setTimeout(() =&amp;gt; {
    observer.next(&#39;Message from a Observable!&#39;);
  }, 3000);
});

observable.subscribe(value =&amp;gt; console.log(value));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/observables.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Observables are not part of the JavaScript language yet but they are being proposed to be added to the language&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between function and class declarations&lt;/h3&gt; &lt;p&gt;The main difference between function declarations and class declarations is &lt;code&gt;hoisting&lt;/code&gt;. The function declarations are hoisted but not class declarations.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Classes:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = new User(); // ReferenceError

class User {}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Constructor Function:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const user = new User(); // No error

 function User() {
 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an async function&lt;/h3&gt; &lt;p&gt;An async function is a function declared with the &lt;code&gt;async&lt;/code&gt; keyword which enables asynchronous, promise-based behavior to be written in a cleaner style by avoiding promise chains. These functions can contain zero or more &lt;code&gt;await&lt;/code&gt; expressions.&lt;/p&gt; &lt;p&gt;Let&#39;s take a below async function example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async function logger() {

  let data = await fetch(&#39;http://someapi.com/users&#39;); // pause until fetch returns
  console.log(data)
}
logger();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is basically syntax sugar over ES2015 promises and generators.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you prevent promises swallowing errors&lt;/h3&gt; &lt;p&gt;While using asynchronous code, JavaScript‚Äôs ES6 promises can make your life a lot easier without having callback pyramids and error handling on every second line. But Promises have some pitfalls and the biggest one is swallowing errors by default.&lt;/p&gt; &lt;p&gt;Let&#39;s say you expect to print an error to the console for all the below cases,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise.resolve(&#39;promised value&#39;).then(function() {
      throw new Error(&#39;error&#39;);
});

Promise.reject(&#39;error value&#39;).catch(function() {
      throw new Error(&#39;error&#39;);
});

new Promise(function(resolve, reject) {
      throw new Error(&#39;error&#39;);
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But there are many modern JavaScript environments that won&#39;t print any errors. You can fix this problem in different ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add catch block at the end of each chain:&lt;/strong&gt; You can add catch block to the end of each of your promise chains&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise.resolve(&#39;promised value&#39;).then(function() {
    throw new Error(&#39;error&#39;);
}).catch(function(error) {
  console.error(error.stack);
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But it is quite difficult to type for each promise chain and verbose too.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add done method:&lt;/strong&gt; You can replace first solution&#39;s then and catch blocks with done method&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise.resolve(&#39;promised value&#39;).done(function() {
    throw new Error(&#39;error&#39;);
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s say you want to fetch data using HTTP and later perform processing on the resulting data asynchronously. You can write &lt;code&gt;done&lt;/code&gt; block as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getDataFromHttp()
  .then(function(result) {
    return processDataAsync(result);
  })
  .done(function(processed) {
    displayData(processed);
  });
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In future, if the processing library API changed to synchronous then you can remove &lt;code&gt;done&lt;/code&gt; block as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; getDataFromHttp()
   .then(function(result) {
     return displayData(processDataAsync(result));
   })
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and then you forgot to add &lt;code&gt;done&lt;/code&gt; block to &lt;code&gt;then&lt;/code&gt; block leads to silent errors.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Extend ES6 Promises by Bluebird:&lt;/strong&gt; Bluebird extends the ES6 Promises API to avoid the issue in the second solution. This library has a ‚Äúdefault‚Äù onRejection handler which will print all errors from rejected Promises to stderr. After installation, you can process unhandled rejections&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise.onPossiblyUnhandledRejection(function(error){
    throw error;
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and discard a rejection, just handle it with an empty catch&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise.reject(&#39;error value&#39;).catch(function() {});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is deno&lt;/h3&gt; &lt;p&gt;Deno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 JavaScript engine and the Rust programming language.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make an object iterable in javascript&lt;/h3&gt; &lt;p&gt;By default, plain objects are not iterable. But you can make the object iterable by defining a &lt;code&gt;Symbol.iterator&lt;/code&gt; property on it.&lt;/p&gt; &lt;p&gt;Let&#39;s demonstrate this with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const collection = {
  one: 1,
  two: 2,
  three: 3,
  [Symbol.iterator]() {
    const values = Object.keys(this);
    let i = 0;
    return {
      next: () =&amp;gt; {
        return {
          value: this[values[i++]],
          done: i &amp;gt; values.length
        }
      }
    };
  }
};

const iterator = collection[Symbol.iterator]();

console.log(iterator.next());    // ‚Üí {value: 1, done: false}
console.log(iterator.next());    // ‚Üí {value: 2, done: false}
console.log(iterator.next());    // ‚Üí {value: 3, done: false}
console.log(iterator.next());    // ‚Üí {value: undefined, done: true}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above process can be simplified using a generator function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const collection = {
   one: 1,
   two: 2,
   three: 3,
   [Symbol.iterator]: function * () {
     for (let key in this) {
       yield this[key];
     }
   }
 };
 const iterator = collection[Symbol.iterator]();
 console.log(iterator.next());    // {value: 1, done: false}
 console.log(iterator.next());    // {value: 2, done: false}
 console.log(iterator.next());    // {value: 3, done: false}
 console.log(iterator.next());    // {value: undefined, done: true}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a Proper Tail Call&lt;/h3&gt; &lt;p&gt;First, we should know about tail call before talking about &quot;Proper Tail Call&quot;. A tail call is a subroutine or function call performed as the final action of a calling function. Whereas &lt;strong&gt;Proper tail call(PTC)&lt;/strong&gt; is a technique where the program or code will not create additional stack frames for a recursion when the function call is a tail call.&lt;/p&gt; &lt;p&gt;For example, the below classic or head recursion of factorial function relies on stack for each step. Each step need to be processed upto &lt;code&gt;n * factorial(n - 1)&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function factorial(n) {
  if (n === 0) {
    return 1
  }
  return n * factorial(n - 1)
}
console.log(factorial(5)); //120
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But if you use Tail recursion functions, they keep passing all the necessary data it needs down the recursion without relying on the stack.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function factorial(n, acc = 1) {
  if (n === 0) {
    return acc
  }
  return factorial(n - 1, n * acc)
}
console.log(factorial(5)); //120
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above pattern returns the same output as the first one. But the accumulator keeps track of total as an argument without using stack memory on recursive calls.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check an object is a promise or not&lt;/h3&gt; &lt;p&gt;If you don&#39;t know if a value is a promise or not, wrapping the value as &lt;code&gt;Promise.resolve(value)&lt;/code&gt; which returns a promise&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;   function isPromise(object){
      if(Promise &amp;amp;&amp;amp; Promise.resolve){
      return Promise.resolve(object) == object;
      }else{
      throw &quot;Promise not supported in your environment&quot;
      }
   }

   var i = 1;
   var promise = new Promise(function(resolve,reject){
      resolve()
   });

   console.log(isPromise(i)); // false
   console.log(isPromise(p)); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Another way is to check for &lt;code&gt;.then()&lt;/code&gt; handler type&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isPromise(value) {
   return Boolean(value &amp;amp;&amp;amp; typeof value.then === &#39;function&#39;);
}
var i = 1;
var promise = new Promise(function(resolve,reject){
   resolve()
});

console.log(isPromise(i)) // false
console.log(isPromise(promise)); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to detect if a function is called as constructor&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;new.target&lt;/code&gt; pseudo-property to detect whether a function was called as a constructor(using the new operator) or as a regular function call.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If a constructor or function invoked using the new operator, new.target returns a reference to the constructor or function.&lt;/li&gt; 
   &lt;li&gt;For function calls, new.target is undefined.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Myfunc() {
   if (new.target) {
      console.log(&#39;called with new&#39;);
   } else {
      console.log(&#39;not called with new&#39;);
   }
}

new Myfunc(); // called with new
Myfunc(); // not called with new
Myfunc.call({}); not called with new
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between arguments object and rest parameter&lt;/h3&gt; &lt;p&gt;There are three main differences between arguments object and rest parameters&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The arguments object is an array-like but not an array. Whereas the rest parameters are array instances.&lt;/li&gt; 
   &lt;li&gt;The arguments object does not support methods such as sort, map, forEach, or pop. Whereas these methods can be used in rest parameters.&lt;/li&gt; 
   &lt;li&gt;The rest parameters are only the ones that haven‚Äôt been given a separate name, while the arguments object contains all arguments passed to the function&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between spread operator and rest parameter&lt;/h3&gt; &lt;p&gt;Rest parameter collects all remaining elements into an array. Whereas Spread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. i.e, Rest parameter is opposite to the spread operator.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different kinds of generators&lt;/h3&gt; &lt;p&gt;There are five kinds of generators,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator function declaration:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; function* myGenFunc() {
      yield 1;
      yield 2;
      yield 3;
 }
 const genObj = myGenFunc();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator function expressions:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const myGenFunc = function* () {
       yield 1;
       yield 2;
       yield 3;
};
const genObj = myGenFunc();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator method definitions in object literals:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const myObj = {
     * myGeneratorMethod() {
        yield 1;
        yield 2;
        yield 3;
     }
 };
 const genObj = myObj.myGeneratorMethod();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator method definitions in class:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  class MyClass {
     * myGeneratorMethod() {
        yield 1;
        yield 2;
        yield 3;
     }
  }
  const myObject = new MyClass();
  const genObj = myObject.myGeneratorMethod();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator as a computed property:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const SomeObj = {
  *[Symbol.iterator] () {
    yield 1;
    yield 2;
    yield 3;
  }
}

console.log(Array.from(SomeObj)); // [ 1, 2, 3 ]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the built-in iterables&lt;/h3&gt; &lt;p&gt;Below are the list of built-in iterables in javascript,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Arrays and TypedArrays&lt;/li&gt; 
   &lt;li&gt;Strings: Iterate over each character or Unicode code-points&lt;/li&gt; 
   &lt;li&gt;Maps: iterate over its key-value pairs&lt;/li&gt; 
   &lt;li&gt;Sets: iterates over their elements&lt;/li&gt; 
   &lt;li&gt;arguments: An array-like special variable in functions&lt;/li&gt; 
   &lt;li&gt;DOM collection such as NodeList&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between for...of and for...in statements&lt;/h3&gt; &lt;p&gt;Both for...in and for...of statements iterate over js data structures. The only difference is over what they iterate:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;for..in iterates over all enumerable property keys of an object&lt;/li&gt; 
   &lt;li&gt;for..of iterates over the values of an iterable object.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let&#39;s explain this difference with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];

arr.newProp = &#39;newVlue&#39;;

// key are the property keys
for (let key in arr) {
  console.log(key);
}

// value are the property values
for (let value of arr) {
  console.log(value);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since for..in loop iterates over the keys of the object, the first loop logs 0, 1, 2 and newProp while iterating over the array object. The for..of loop iterates over the values of a arr data structure and logs a, b, c in the console.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define instance and non-instance properties&lt;/h3&gt; &lt;p&gt;The Instance properties must be defined inside of class methods. For example, name and age properties defined insider constructor as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But Static(class) and prototype data properties must be defined outside of the ClassBody declaration. Let&#39;s assign the age value for Person class as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Person.staticAge = 30;
Person.prototype.prototypeAge = 40;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between isNaN and Number.isNaN?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;isNaN&lt;/strong&gt;: The global function &lt;code&gt;isNaN&lt;/code&gt; converts the argument to a Number and returns true if the resulting value is NaN.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Number.isNaN&lt;/strong&gt;: This method does not convert the argument. But it returns true when the type is a Number and value is NaN.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let&#39;s see the difference with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;isNaN(‚Äòhello‚Äô);   // true
Number.isNaN(&#39;hello&#39;); // false
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Coding Exercise&lt;/h3&gt; 
&lt;h4&gt;1. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var car = new Vehicle(&quot;Honda&quot;, &quot;white&quot;, &quot;2010&quot;, &quot;UK&quot;);
console.log(car);

function Vehicle(model, color, year, country) {
    this.model = model;
    this.color = color;
    this.year = year;
    this.country = country;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Undefined&lt;/li&gt; 
 &lt;li&gt;2: ReferenceError&lt;/li&gt; 
 &lt;li&gt;3: null&lt;/li&gt; 
 &lt;li&gt;4: {model: &quot;Honda&quot;, color: &quot;white&quot;, year: &quot;2010&quot;, country: &quot;UK&quot;}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The function declarations are hoisted similar to any variables. So the placement for &lt;code&gt;Vehicle&lt;/code&gt; function declaration doesn&#39;t make any difference.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;2. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function foo() {
    let x = y = 0;
    x++;
    y++;
    return x;
}

console.log(foo(), typeof x, typeof y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, undefined and undefined&lt;/li&gt; 
 &lt;li&gt;2: ReferenceError: X is not defined&lt;/li&gt; 
 &lt;li&gt;3: 1, undefined and number&lt;/li&gt; 
 &lt;li&gt;4: 1, number and number&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;Of course the return value of &lt;code&gt;foo()&lt;/code&gt; is 1 due to the increment operator. But the statement &lt;code&gt;let x = y = 0&lt;/code&gt; declares a local variable x. Whereas y declared as a global variable accidentally. This statement is equivalent to,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; let x;
 window.y = 0;
 x = window.y;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since the block scoped variable x is undefined outside of the function, the type will be undefined too. Whereas the global variable &lt;code&gt;y&lt;/code&gt; is available outside the function, the value is 0 and type is number.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;3. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function main(){
   console.log(&#39;A&#39;);
   setTimeout(
      function print(){ console.log(&#39;B&#39;); }
   ,0);
   console.log(&#39;C&#39;);
}
main();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: A, B and C&lt;/li&gt; 
 &lt;li&gt;2: B, A and C&lt;/li&gt; 
 &lt;li&gt;3: A and C&lt;/li&gt; 
 &lt;li&gt;4: A, C and B&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The statements order is based on the event loop mechanism. The order of statements follows the below order,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;At first, the main function is pushed to the stack.&lt;/li&gt; 
 &lt;li&gt;Then the browser pushes the fist statement of the main function( i.e, A&#39;s console.log) to the stack, executing and popping out immediately.&lt;/li&gt; 
 &lt;li&gt;But &lt;code&gt;setTimeout&lt;/code&gt; statement moved to Browser API to apply the delay for callback.&lt;/li&gt; 
 &lt;li&gt;In the meantime, C&#39;s console.log added to stack, executed and popped out.&lt;/li&gt; 
 &lt;li&gt;The callback of &lt;code&gt;setTimeout&lt;/code&gt; moved from Browser API to message queue.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;main&lt;/code&gt; function popped out from stack because there are no statements to execute&lt;/li&gt; 
 &lt;li&gt;The callback moved from message queue to the stack since the stack is empty.&lt;/li&gt; 
 &lt;li&gt;The console.log for B is added to the stack and display on the console.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;4. What is the output of below equality check&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(0.1 + 0.2 === 0.3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: false&lt;/li&gt; 
 &lt;li&gt;2: true&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;This is due to the float point math problem. Since the floating point numbers are encoded in binary format, the addition operations on them lead to rounding errors. Hence, the comparison of floating points doesn&#39;t give expected results. You can find more details about the explanation here &lt;a href=&quot;https://0.30000000000000004.com/&quot;&gt;0.30000000000000004.com/&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;5. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var y = 1;
  if (function f(){}) {
    y += typeof f;
  }
  console.log(y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1function&lt;/li&gt; 
 &lt;li&gt;2: 1object&lt;/li&gt; 
 &lt;li&gt;3: ReferenceError&lt;/li&gt; 
 &lt;li&gt;4: 1undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The main points in the above code snippets are,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;You can see function expression instead function declaration inside if statement. So it always returns true.&lt;/li&gt; 
 &lt;li&gt;Since it is not declared(or assigned) anywhere, f is undefined and typeof f is undefined too.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;In other words, it is same as&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var y = 1;
  if (&#39;foo&#39;) {
    y += typeof f;
  }
  console.log(y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It returns 1object for MS Edge browser&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;6. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function foo() {
  return
  {
    message: &quot;Hello World&quot;
  };
}
console.log(foo());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Hello World&lt;/li&gt; 
 &lt;li&gt;2: Object {message: &quot;Hello World&quot;}&lt;/li&gt; 
 &lt;li&gt;3: Undefined&lt;/li&gt; 
 &lt;li&gt;4: SyntaxError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;This is a semicolon issue. Normally semicolons are optional in JavaScript. So if there are any statements(in this case, return) missing semicolon, it is automatically inserted immediately. Hence, the function returned as undefined.&lt;/p&gt; 
&lt;p&gt;Whereas if the opening curly brace is along with the return keyword then the function is going to be returned as expected.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function foo() {
  return {
    message: &quot;Hello World&quot;
  };
}
console.log(foo()); // {message: &quot;Hello World&quot;}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;7. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myChars = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]
delete myChars[0];
console.log(myChars);
console.log(myChars[0]);
console.log(myChars.length);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [empty, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], empty, 3&lt;/li&gt; 
 &lt;li&gt;2: [null, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], empty, 3&lt;/li&gt; 
 &lt;li&gt;3: [empty, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], undefined, 4&lt;/li&gt; 
 &lt;li&gt;4: [null, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], undefined, 4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;The &lt;code&gt;delete&lt;/code&gt; operator will delete the object property but it will not reindex the array or change its length. So the number or elements or length of the array won&#39;t be changed. If you try to print myChars then you can observe that it doesn&#39;t set an undefined value, rather the property is removed from the array. The newer versions of Chrome use &lt;code&gt;empty&lt;/code&gt; instead of &lt;code&gt;undefined&lt;/code&gt; to make the difference a bit clearer.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;8. What is the output of below code in latest Chrome&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var array1 = new Array(3);
console.log(array1);

var array2 = [];
array2[2] = 100;
console.log(array2);

var array3 = [,,,];
console.log(array3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [undefined √ó 3], [undefined √ó 2, 100], [undefined √ó 3]&lt;/li&gt; 
 &lt;li&gt;2: [empty √ó 3], [empty √ó 2, 100], [empty √ó 3]&lt;/li&gt; 
 &lt;li&gt;3: [null √ó 3], [null √ó 2, 100], [null √ó 3]&lt;/li&gt; 
 &lt;li&gt;4: [], [100], []&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;The latest chrome versions display &lt;code&gt;sparse array&lt;/code&gt;(they are filled with holes) using this empty x n notation. Whereas the older versions have undefined x n notation. &lt;strong&gt;Note:&lt;/strong&gt; The latest version of FF displays &lt;code&gt;n empty slots&lt;/code&gt; notation.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;9. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const obj = {
  prop1: function() { return 0 },
  prop2() { return 1 },
  [&#39;prop&#39; + 3]() { return 2 }
}

console.log(obj.prop1());
console.log(obj.prop2());
console.log(obj.prop3());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 0, 1, 2&lt;/li&gt; 
 &lt;li&gt;2: 0, { return 1 }, 2&lt;/li&gt; 
 &lt;li&gt;3: 0, { return 1 }, { return 2 }&lt;/li&gt; 
 &lt;li&gt;4: 0, 1, undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;ES6 provides method definitions and property shorthands for objects. So both prop2 and prop3 are treated as regular function values.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;10. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(1 &amp;lt; 2 &amp;lt; 3);
console.log(3 &amp;gt; 2 &amp;gt; 1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: true, true&lt;/li&gt; 
 &lt;li&gt;2: true, false&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError, SyntaxError,&lt;/li&gt; 
 &lt;li&gt;4: false, false&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;The important point is that if the statement contains the same operators(e.g, &amp;lt; or &amp;gt;) then it can be evaluated from left to right. The first statement follows the below order,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;console.log(1 &amp;lt; 2 &amp;lt; 3);&lt;/li&gt; 
 &lt;li&gt;console.log(true &amp;lt; 3);&lt;/li&gt; 
 &lt;li&gt;console.log(1 &amp;lt; 3); // True converted as &lt;code&gt;1&lt;/code&gt; during comparison&lt;/li&gt; 
 &lt;li&gt;True&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Whereas the second statement follows the below order,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;console.log(3 &amp;gt; 2 &amp;gt; 1);&lt;/li&gt; 
 &lt;li&gt;console.log(true &amp;gt; 1);&lt;/li&gt; 
 &lt;li&gt;console.log(1 &amp;gt; 1); // False converted as &lt;code&gt;0&lt;/code&gt; during comparison&lt;/li&gt; 
 &lt;li&gt;False&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;11. What is the output of below code in non-strict mode&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function printNumbers(first, second, first) {
  console.log(first, second, first);
}
printNumbers(1, 2, 3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, 2, 3&lt;/li&gt; 
 &lt;li&gt;2: 3, 2, 3&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError: Duplicate parameter name not allowed in this context&lt;/li&gt; 
 &lt;li&gt;4: 1, 2, 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;In non-strict mode, the regular JavaScript functions allow duplicate named parameters. The above code snippet has duplicate parameters on 1st and 3rd parameters. The value of the first parameter is mapped to the third argument which is passed to the function. Hence, the 3rd argument overrides the first parameter.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In strict mode, duplicate parameters will throw a Syntax Error.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;12. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const printNumbersArrow = (first, second, first) =&amp;gt; {
  console.log(first, second, first);
}
printNumbersArrow(1, 2, 3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, 2, 3&lt;/li&gt; 
 &lt;li&gt;2: 3, 2, 3&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError: Duplicate parameter name not allowed in this context&lt;/li&gt; 
 &lt;li&gt;4: 1, 2, 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;Unlike regular functions, the arrow functions doesn&#39;t not allow duplicate parameters in either strict or non-strict mode. So you can see &lt;code&gt;SyntaxError&lt;/code&gt; in the console.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;13. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrowFunc = () =&amp;gt; arguments.length;
console.log(arrowFunc(1, 2, 3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: ReferenceError: arguments is not defined&lt;/li&gt; 
 &lt;li&gt;2: 3&lt;/li&gt; 
 &lt;li&gt;3: undefined&lt;/li&gt; 
 &lt;li&gt;4: null&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;Arrow functions do not have an &lt;code&gt;arguments, super, this, or new.target&lt;/code&gt; bindings. So any reference to &lt;code&gt;arguments&lt;/code&gt; variable tries to resolve to a binding in a lexically enclosing environment. In this case, the arguments variable is not defined outside of the arrow function. Hence, you will receive a reference error.&lt;/p&gt; 
&lt;p&gt;Where as the normal function provides the number of arguments passed to the function&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const func = function () {
                    return arguments.length;
                    }
console.log(func(1, 2, 3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But If you still want to use an arrow function then rest operator on arguments provides the expected arguments&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrowFunc = (...args) =&amp;gt; args.length;
console.log(arrowFunc(1, 2, 3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;14. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log( String.prototype.trimLeft.name === &#39;trimLeft&#39; );
console.log( String.prototype.trimLeft.name === &#39;trimStart&#39; );
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True, False&lt;/li&gt; 
 &lt;li&gt;2: False, True&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;In order to be consistent with functions like &lt;code&gt;String.prototype.padStart&lt;/code&gt;, the standard method name for trimming the whitespaces is considered as &lt;code&gt;trimStart&lt;/code&gt;. Due to web web compatibility reasons, the old method name &#39;trimLeft&#39; still acts as an alias for &#39;trimStart&#39;. Hence, the prototype for &#39;trimLeft&#39; is always &#39;trimStart&#39;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;15. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(Math.max());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: undefined&lt;/li&gt; 
 &lt;li&gt;2: Infinity&lt;/li&gt; 
 &lt;li&gt;3: 0&lt;/li&gt; 
 &lt;li&gt;4: -Infinity&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;-Infinity is the initial comparant because almost every other value is bigger. So when no arguments are provided, -Infinity is going to be returned. &lt;strong&gt;Note:&lt;/strong&gt; Zero number of arguments is a valid case.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;16. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(10 == [10]);
console.log(10 == [[[[[[[10]]]]]]]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True, True&lt;/li&gt; 
 &lt;li&gt;2: True, False&lt;/li&gt; 
 &lt;li&gt;3: False, False&lt;/li&gt; 
 &lt;li&gt;4: False, True&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;As per the comparison algorithm in the ECMAScript specification(ECMA-262), the above expression converted into JS as below&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;10 === Number([10].valueOf().toString()) // 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So it doesn&#39;t matter about number brackets([]) around the number, it is always converted to a number in the expression.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;17. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(10 + &#39;10&#39;);
console.log(10 - &#39;10&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 20, 0&lt;/li&gt; 
 &lt;li&gt;2: 1010, 0&lt;/li&gt; 
 &lt;li&gt;3: 1010, 10-10&lt;/li&gt; 
 &lt;li&gt;4: NaN, NaN&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;The concatenation operator(+) is applicable for both number and string types. So if any operand is string type then both operands concatenated as strings. Whereas subtract(-) operator tries to convert the operands as number type.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;18. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log([0] == false);
if([0]) {
console.log(&quot;I&#39;m True&quot;);
} else {
console.log(&quot;I&#39;m False&quot;);
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True, I&#39;m True&lt;/li&gt; 
 &lt;li&gt;2: True, I&#39;m False&lt;/li&gt; 
 &lt;li&gt;3: False, I&#39;m True&lt;/li&gt; 
 &lt;li&gt;4: False, I&#39;m False&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;In comparison operators, the expression &lt;code&gt;[0]&lt;/code&gt; converted to Number([0].valueOf().toString()) which is resolved to false. Whereas &lt;code&gt;[0]&lt;/code&gt; just becomes a truthy value without any conversion because there is no comparison operator.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;19. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log([1, 2] + [3, 4]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [1,2,3,4]&lt;/li&gt; 
 &lt;li&gt;2: [1,2][3,4]&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: 1,23,4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The + operator is not meant or defined for arrays. So it converts arrays into strings and concatenates them.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;20. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const numbers = new Set([1, 1, 2, 3, 4]);
console.log(numbers);

const browser = new Set(&#39;Firefox);
console.log(browser);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: {1, 2, 3, 4}, {&quot;F&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;f&quot;, &quot;o&quot;, &quot;x&quot;}&lt;/li&gt; 
 &lt;li&gt;2: {1, 2, 3, 4}, {&quot;F&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;o&quot;, &quot;x&quot;}&lt;/li&gt; 
 &lt;li&gt;3: [1, 2, 3, 4], [&quot;F&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;o&quot;, &quot;x&quot;]&lt;/li&gt; 
 &lt;li&gt;4: {1, 1, 2, 3, 4}, {&quot;F&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;f&quot;, &quot;o&quot;, &quot;x&quot;}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;Since &lt;code&gt;Set&lt;/code&gt; object is a collection of unique values, it won&#39;t allow duplicate values in the collection. At the same time, it is case sensitive data structure.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;21. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(NaN === NaN);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True&lt;/li&gt; 
 &lt;li&gt;2: False&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;JavaScript follows IEEE 754 spec standards. As per this spec, NaNs are never equal for floating-point numbers.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;22. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let numbers = [1, 2, 3, 4, NaN];
console.log(numbers.indexOf(NaN));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 4&lt;/li&gt; 
 &lt;li&gt;2: NaN&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: -1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The &lt;code&gt;indexOf&lt;/code&gt; uses strict equality operator(===) internally and &lt;code&gt;NaN === NaN&lt;/code&gt; evaluates to false. Since indexOf won&#39;t be able to find NaN inside an array, it returns -1 always. But you can use &lt;code&gt;Array.prototype.findIndex&lt;/code&gt; method to find out the index of NaN in an array or You can use &lt;code&gt;Array.prototype.includes&lt;/code&gt; to check if NaN is present in an array or not.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let numbers = [1, 2, 3, 4, NaN];
console.log(numbers.findIndex(Number.isNaN)); // 4

console.log(numbers.includes(Number.isNaN)); // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;23. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let [a, ...b,] = [1, 2, 3, 4, 5];
console.log(a, b);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, [2, 3, 4, 5]&lt;/li&gt; 
 &lt;li&gt;2: 1, {2, 3, 4, 5}&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: 1, [2, 3, 4]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;When using rest parameters, trailing commas are not allowed and will throw a SyntaxError. If you remove the trailing comma then it displays 1st answer&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let [a, ...b,] = [1, 2, 3, 4, 5];
console.log(a, b); // 1, [2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;25. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async function func() {
   return 10;
}
console.log(func());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Promise {
  &lt;!-- raw HTML omitted --&gt;: 10}&lt;/li&gt; 
 &lt;li&gt;2: 10&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: Promise {
  &lt;!-- raw HTML omitted --&gt;: 10}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;Async functions always return a promise. But even if the return value of an async function is not explicitly a promise, it will be implicitly wrapped in a promise. The above async function is equivalent to below expression,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function func() {
   return Promise.resolve(10)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;26. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async function func() {
   await 10;
}
console.log(func());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Promise {
  &lt;!-- raw HTML omitted --&gt;: 10}&lt;/li&gt; 
 &lt;li&gt;2: 10&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: Promise {
  &lt;!-- raw HTML omitted --&gt;: undefined}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The await expression returns value 10 with promise resolution and the code after each await expression can be treated as existing in a &lt;code&gt;.then&lt;/code&gt; callback. In this case, there is no return expression at the end of the function. Hence, the default return value of &lt;code&gt;undefined&lt;/code&gt; is returned as the resolution of the promise. The above async function is equivalent to below expression,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function func() {
   return Promise.resolve(10).then(() =&amp;gt; undefined)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;27. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function delay() {
  return new Promise(resolve =&amp;gt; setTimeout(resolve, 2000));
}

async function delayedLog(item) {
  await delay();
  console.log(item);
}

async function processArray(array) {
  array.forEach(item =&amp;gt; {
    await delayedLog(item);
  })
}

processArray([1, 2, 3, 4]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: 1, 2, 3, 4&lt;/li&gt; 
 &lt;li&gt;3: 4, 4, 4, 4&lt;/li&gt; 
 &lt;li&gt;4: 4, 3, 2, 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;Even though ‚ÄúprocessArray‚Äù is an async function, the anonymous function that we use for &lt;code&gt;forEach&lt;/code&gt; is synchronous. If you use await inside a synchronous function then it throws a syntax error.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;28. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function delay() {
  return new Promise(resolve =&amp;gt; setTimeout(resolve, 2000));
}

async function delayedLog(item) {
  await delay();
  console.log(item);
}

async function process(array) {
  array.forEach(async (item) =&amp;gt; {
    await delayedLog(i);
  });
  console.log(&#39;Process completed!&#39;);
}
process([1, 2, 3, 5]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1 2 3 5 and Process completed!&lt;/li&gt; 
 &lt;li&gt;2: 5 5 5 5 and Process completed!&lt;/li&gt; 
 &lt;li&gt;3: Process completed! and 5 5 5 5&lt;/li&gt; 
 &lt;li&gt;4: Process completed! and 1 2 3 5&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The forEach method will not wait until all items are finished but it just runs the tasks and goes next. Hence, the last statement is displayed first followed by a sequence of promise resolutions.&lt;/p&gt; 
&lt;p&gt;But you control the array sequence using for..of loop,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async function processArray(array) {
  for (const item of array) {
    await delayedLog(item);
  }
  console.log(&#39;Process completed!&#39;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;29. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var set = new Set();
set.add(&quot;+0&quot;).add(&quot;-0&quot;).add(NaN).add(undefined).add(NaN);;
console.log(set);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Set(4) {&quot;+0&quot;, &quot;-0&quot;, NaN, undefined}&lt;/li&gt; 
 &lt;li&gt;2: Set(3) {&quot;+0&quot;, NaN, undefined}&lt;/li&gt; 
 &lt;li&gt;3: Set(5) {&quot;+0&quot;, &quot;-0&quot;, NaN, undefined, NaN}&lt;/li&gt; 
 &lt;li&gt;4: Set(4) {&quot;+0&quot;, NaN, undefined, NaN}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;Set has few exceptions from equality check,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;All NaN values are equal&lt;/li&gt; 
 &lt;li&gt;Both +0 and -0 considered as different values&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;30. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const sym1 = Symbol(&#39;one&#39;);
const sym2 = Symbol(&#39;one&#39;);

const sym3 = Symbol.for(&#39;two&#39;);
const sym4 = Symbol.for(&#39;two&#39;);

cnsooe.log(sym1 === sym2, sym3 === sym4);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: true, true&lt;/li&gt; 
 &lt;li&gt;2: true, false&lt;/li&gt; 
 &lt;li&gt;3: false, true&lt;/li&gt; 
 &lt;li&gt;4: false, false&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;Symbol follows below conventions,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Every symbol value returned from Symbol() is unique irrespective of the optional string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Symbol.for()&lt;/code&gt; function creates a symbol in a global symbol registry list. But it doesn&#39;t necessarily create a new symbol on every call, it checks first if a symbol with the given key is already present in the registry and returns the symbol if it is found. Otherwise a new symbol created in the registry.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The symbol description is just useful for debugging purposes.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;31. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const sym1 = new Symbol(&#39;one&#39;);
console.log(sym1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: one&lt;/li&gt; 
 &lt;li&gt;3: Symbol(&#39;one&#39;)&lt;/li&gt; 
 &lt;li&gt;4: Symbol&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;Symbol&lt;/code&gt; is a just a standard function and not an object constructor(unlike other primitives new Boolean, new String and new Number). So if you try to call it with the new operator will result in a TypeError&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;32. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let myNumber = 100;
let myString = &#39;100&#39;;

if (!typeof myNumber === &quot;string&quot;) {
   console.log(&quot;It is not a string!&quot;);
} else {
    console.log(&quot;It is a string!&quot;);
}

if (!typeof myString === &quot;number&quot;){
   console.log(&quot;It is not a number!&quot;)
} else {
   console.log(&quot;It is a number!&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: It is not a string!, It is not a number!&lt;/li&gt; 
 &lt;li&gt;3: It is not a string!, It is a number!&lt;/li&gt; 
 &lt;li&gt;4: It is a string!, It is a number!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The return value of &lt;code&gt;typeof myNumber (OR) typeof myString&lt;/code&gt; is always the truthy value (either &quot;number&quot; or &quot;string&quot;). Since ! operator converts the value to a boolean value, the value of both &lt;code&gt;!typeof myNumber or !typeof myString&lt;/code&gt; is always false. Hence the if condition fails and control goes to else block.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;33. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(JSON.stringify({ myArray: [&#39;one&#39;, undefined, function(){}, Symbol(&#39;&#39;)] }));
console.log(JSON.stringify({ [Symbol.for(&#39;one&#39;)]: &#39;one&#39; }, [Symbol.for(&#39;one&#39;)]));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: {&quot;myArray&quot;:[&#39;one&#39;, undefined, {}, Symbol]}, {}&lt;/li&gt; 
 &lt;li&gt;2: {&quot;myArray&quot;:[&#39;one&#39;, null,null,null]}, {}&lt;/li&gt; 
 &lt;li&gt;3: {&quot;myArray&quot;:[&#39;one&#39;, null,null,null]}, &quot;{ [Symbol.for(&#39;one&#39;)]: &#39;one&#39; }, [Symbol.for(&#39;one&#39;)]&quot;&lt;/li&gt; 
 &lt;li&gt;4: {&quot;myArray&quot;:[&#39;one&#39;, undefined, function(){}, Symbol(&#39;&#39;)]}, {}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;The symbols has below constraints,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The undefined, Functions, and Symbols are not valid JSON values. So those values are either omitted (in an object) or changed to null (in an array). Hence, it returns null values for the value array.&lt;/li&gt; 
 &lt;li&gt;All Symbol-keyed properties will be completely ignored. Hence it returns an empty object({}).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;34. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class A {
  constructor() {
    console.log(new.target.name)
  }
}

class B extends A { constructor() { super() } }

new A();
new B();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: A, A&lt;/li&gt; 
 &lt;li&gt;2: A, B&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Using constructors, &lt;code&gt;new.target&lt;/code&gt; refers to the constructor (points to the class definition of class which is initialized) that was directly invoked by new. This also applies to the case if the constructor is in a parent class and was delegated from a child constructor.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;35. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const [x, ...y,] = [1, 2, 3, 4];
console.log(x, y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, [2, 3, 4]&lt;/li&gt; 
 &lt;li&gt;2: 1, [2, 3]&lt;/li&gt; 
 &lt;li&gt;3: 1, [2]&lt;/li&gt; 
 &lt;li&gt;4: SyntaxError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;It throws a syntax error because the rest element should not have a trailing comma. You should always consider using a rest operator as the last element.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;36. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const {a: x = 10, b: y = 20} = {a: 30};

console.log(x);
console.log(y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 30, 20&lt;/li&gt; 
 &lt;li&gt;2: 10, 20&lt;/li&gt; 
 &lt;li&gt;3: 10, undefined&lt;/li&gt; 
 &lt;li&gt;4: 30, undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;The object property follows below rules,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The object properties can be retrieved and assigned to a variable with a different name&lt;/li&gt; 
 &lt;li&gt;The property assigned a default value when the retrieved value is &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;37. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function area({length = 10, width = 20}) {
  console.log(length*width);
}

area();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 200&lt;/li&gt; 
 &lt;li&gt;2: Error&lt;/li&gt; 
 &lt;li&gt;3: undefined&lt;/li&gt; 
 &lt;li&gt;4: 0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;If you leave out the right-hand side assignment for the destructuring object, the function will look for at least one argument to be supplied when invoked. Otherwise you will receive an error &lt;code&gt;Error: Cannot read property &#39;length&#39; of undefined&lt;/code&gt; as mentioned above.&lt;/p&gt; 
&lt;p&gt;You can avoid the error with either of the below changes,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Pass at least an empty object:&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function area({length = 10, width = 20}) {
  console.log(length*width);
}

area({});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;&lt;strong&gt;Assign default empty object:&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function area({length = 10, width = 20} = {}) {
  console.log(length*width);
}

area();
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;38. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const props = [
  { id: 1, name: &#39;John&#39;},
  { id: 2, name: &#39;Jack&#39;},
  { id: 3, name: &#39;Tom&#39;}
];

const [,, { name }] = props;
console.log(name);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Tom&lt;/li&gt; 
 &lt;li&gt;2: Error&lt;/li&gt; 
 &lt;li&gt;3: undefined&lt;/li&gt; 
 &lt;li&gt;4: John&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;It is possible to combine Array and Object destructuring. In this case, the third element in the array props accessed first followed by name property in the object.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;39. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function checkType(num = 1) {
  console.log(typeof num);
}

checkType();
checkType(undefined);
checkType(&#39;&#39;);
checkType(null);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: number, undefined, string, object&lt;/li&gt; 
 &lt;li&gt;2: undefined, undefined, string, object&lt;/li&gt; 
 &lt;li&gt;3: number, number, string, object&lt;/li&gt; 
 &lt;li&gt;4: number, number, number, number&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;If the function argument is set implicitly(not passing argument) or explicitly to undefined, the value of the argument is the default parameter. Whereas for other falsy values(&#39;&#39; or null), the value of the argument is passed as a parameter.&lt;/p&gt; 
&lt;p&gt;Hence, the result of function calls categorized as below,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The first two function calls logs number type since the type of default value is number&lt;/li&gt; 
 &lt;li&gt;The type of &#39;&#39; and null values are string and object type respectively.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;40. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function add(item, items = []) {
  items.push(item);
  return items;
}

console.log(add(&#39;Orange&#39;));
console.log(add(&#39;Apple&#39;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [&#39;Orange&#39;], [&#39;Orange&#39;, &#39;Apple&#39;]&lt;/li&gt; 
 &lt;li&gt;2: [&#39;Orange&#39;], [&#39;Apple&#39;]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Since the default argument is evaluated at call time, a new object is created each time the function is called. So in this case, the new array is created and an element pushed to the default empty array.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;41. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function greet(greeting, name, message = greeting + &#39; &#39; + name) {
  console.log([name, greeting, message]);
}

greet(&#39;Hello&#39;, &#39;John&#39;);
greet(&#39;Hello&#39;, &#39;John&#39;, &#39;Good morning!&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: [&#39;Hello&#39;, &#39;John&#39;, &#39;Hello John&#39;], [&#39;Hello&#39;, &#39;John&#39;, &#39;Good morning!&#39;]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Since parameters defined earlier are available to later default parameters, this code snippet doesn&#39;t throw any error.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;42. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function outer(f = inner()) {
  function inner() { return &#39;Inner&#39; }
}
outer();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: ReferenceError&lt;/li&gt; 
 &lt;li&gt;2: Inner&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;The functions and variables declared in the function body cannot be referred from default value parameter initializers. If you still try to access, it throws a run-time ReferenceError(i.e, &lt;code&gt;inner&lt;/code&gt; is not defined).&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;43. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myFun(x, y, ...manyMoreArgs) {
  console.log(manyMoreArgs)
}

myFun(1, 2, 3, 4, 5);
myFun(1, 2);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [3, 4, 5], undefined&lt;/li&gt; 
 &lt;li&gt;2: SyntaxError&lt;/li&gt; 
 &lt;li&gt;3: [3, 4, 5], []&lt;/li&gt; 
 &lt;li&gt;4: [3, 4, 5], [undefined]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;The rest parameter is used to hold the remaining parameters of a function and it becomes an empty array if the argument is not provided.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;44. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const obj = {&#39;key&#39;: &#39;value&#39;};
const array = [...obj];
console.log(array);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [&#39;key&#39;, &#39;value&#39;]&lt;/li&gt; 
 &lt;li&gt;2: TypeError&lt;/li&gt; 
 &lt;li&gt;3: []&lt;/li&gt; 
 &lt;li&gt;4: [&#39;key&#39;]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Spread syntax can be applied only to iterable objects. By default, Objects are not iterable, but they become iterable when used in an Array, or with iterating functions such as &lt;code&gt;map(), reduce(), and assign()&lt;/code&gt;. If you still try to do it, it still throws &lt;code&gt;TypeError: obj is not iterable&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;45. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function* myGenFunc() {
    yield 1;
    yield 2;
    yield 3;
}
var myGenObj = new myGenFunc;
console.log(myGenObj.next().value);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1&lt;/li&gt; 
 &lt;li&gt;2: undefined&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: TypeError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;Generators are not constructible type. But if you still proceed to do, there will be an error saying &quot;TypeError: myGenFunc is not a constructor&quot;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;46. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function* yieldAndReturn() {
  yield 1;
  return 2;
  yield 3;
}

var myGenObj = yieldAndReturn()
console.log(myGenObj.next());
console.log(myGenObj.next());
console.log(myGenObj.next());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: { value: 1, done: false }, { value: 2, done: true }, { value: undefined, done: true }&lt;/li&gt; 
 &lt;li&gt;2: { value: 1, done: false }, { value: 2, done: false }, { value: undefined, done: true }&lt;/li&gt; 
 &lt;li&gt;3: { value: 1, done: false }, { value: 2, done: true }, { value: 3, done: true }&lt;/li&gt; 
 &lt;li&gt;4: { value: 1, done: false }, { value: 2, done: false }, { value: 3, done: true }&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;A return statement in a generator function will make the generator finish. If a value is returned, it will be set as the value property of the object and done property to true. When a generator is finished, subsequent next() calls return an object of this form: &lt;code&gt;{value: undefined, done: true}&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;47. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const myGenerator = (function *(){
  yield 1;
  yield 2;
  yield 3;
})();
for (const value of myGenerator) {
  console.log(value);
  break;
}

for (const value of myGenerator) {
  console.log(value);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1,2,3 and 1,2,3&lt;/li&gt; 
 &lt;li&gt;2: 1,2,3 and 4,5,6&lt;/li&gt; 
 &lt;li&gt;3: 1 and 1&lt;/li&gt; 
 &lt;li&gt;4: 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The generator should not be re-used once the iterator is closed. i.e, Upon exiting a loop(on completion or using break &amp;amp; return), the generator is closed and trying to iterate over it again does not yield any more results. Hence, the second loop doesn&#39;t print any value.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;48. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const num = 0o38;
console.log(num);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: 38&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;If you use an invalid number(outside of 0-7 range) in the octal literal, JavaScript will throw a SyntaxError. In ES5, it treats the octal literal as a decimal number.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;49. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const squareObj = new Square(10);
console.log(squareObj.area);

class Square {
  constructor(length) {
    this.length = length;
  }

  get area() {
    return this.length * this.length;
  }

  set area(value) {
    this.area = value;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 100&lt;/li&gt; 
 &lt;li&gt;2: ReferenceError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Unlike function declarations, class declarations are not hoisted. i.e, First You need to declare your class and then access it, otherwise it will throw a ReferenceError &quot;Uncaught ReferenceError: Square is not defined&quot;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Class expressions also applies to the same hoisting restrictions of class declarations.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;50. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Person() { }

Person.prototype.walk = function() {
  return this;
}

Person.run = function() {
  return this;
}

let user = new Person();
let walk = user.walk;
console.log(walk());

let run = Person.run;
console.log(run());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: undefined, undefined&lt;/li&gt; 
 &lt;li&gt;2: Person, Person&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: Window, Window&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;When a regular or prototype method is called without a value for &lt;strong&gt;this&lt;/strong&gt;, the methods return an initial this value if the value is not undefined. Otherwise global window object will be returned. In our case, the initial &lt;code&gt;this&lt;/code&gt; value is undefined so both methods return window objects.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;51. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Vehicle {
  constructor(name) {
    this.name = name;
  }

  start() {
    console.log(`${this.name} vehicle started`);
  }
}

class Car extends Vehicle {
  start() {
    console.log(`${this.name} car started`);
    super.start();
  }
}

const car = new Car(&#39;BMW&#39;);
console.log(car.start());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: BMW vehicle started, BMW car started&lt;/li&gt; 
 &lt;li&gt;3: BMW car started, BMW vehicle started&lt;/li&gt; 
 &lt;li&gt;4: BMW car started, BMW car started&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;The super keyword is used to call methods of a superclass. Unlike other languages the super invocation doesn&#39;t need to be a first statement. i.e, The statements will be executed in the same order of code.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;52. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const USER = {&#39;age&#39;: 30};
USER.age = 25;
console.log(USER.age);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 30&lt;/li&gt; 
 &lt;li&gt;2: 25&lt;/li&gt; 
 &lt;li&gt;3: Uncaught TypeError&lt;/li&gt; 
 &lt;li&gt;4: SyntaxError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Even though we used constant variables, the content of it is an object and the object&#39;s contents (e.g properties) can be altered. Hence, the change is going to be valid in this case.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;53. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(&#39;üôÇ&#39; === &#39;üôÇ&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: false&lt;/li&gt; 
 &lt;li&gt;2: true&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Emojis are unicodes and the unicode for smile symbol is &quot;U+1F642&quot;. The unicode comparision of same emojies is equivalent to string comparison. Hence, the output is always true.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;54. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(typeof typeof typeof true);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: string&lt;/li&gt; 
 &lt;li&gt;2: boolean&lt;/li&gt; 
 &lt;li&gt;3: NaN&lt;/li&gt; 
 &lt;li&gt;4: number&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;The typeof operator on any primitive returns a string value. So even if you apply the chain of typeof operators on the return value, it is always string.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;55. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let zero = new Number(0);

if (zero) {
  console.log(&quot;If&quot;);
} else {
  console.log(&quot;Else&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: If&lt;/li&gt; 
 &lt;li&gt;2: Else&lt;/li&gt; 
 &lt;li&gt;3: NaN&lt;/li&gt; 
 &lt;li&gt;4: SyntaxError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;ol&gt; 
 &lt;li&gt;The type of operator on new Number always returns object. i.e, typeof new Number(0) --&amp;gt; object.&lt;/li&gt; 
 &lt;li&gt;Objects are always truthy in if block&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Hence the above code block always goes to if section.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;55. What is the output of below code in non strict mode?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let msg = &quot;Good morning!!&quot;;

msg.name = &quot;John&quot;; 

console.log(msg.name);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: &quot;&quot;&lt;/li&gt; 
 &lt;li&gt;2: Error&lt;/li&gt; 
 &lt;li&gt;3: John&lt;/li&gt; 
 &lt;li&gt;4: Undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;It returns undefined for non-strict mode and returns Error for strict mode. In non-strict mode, the wrapper object is going to be created and get the mentioned property. But the object get disappeared after accessing the property in next line.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
