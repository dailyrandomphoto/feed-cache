<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Thu, 01 Jul 2021 01:52:42 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>covidpass-org/covidpass</title>
      <link>https://github.com/covidpass-org/covidpass</link>
      <description>&lt;p&gt;Web app for adding EU COVID-19 Vaccination Certificates to your wallets&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CovidPass&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://covidpass.marvinsextro.de/thumbnail.png&quot; alt=&quot;CovidPass&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Web app for adding EU COVID-19 Vaccination Certificates to your wallets&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install
npm install -g nodemon
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Debug locally&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;nodemon -w server.js server.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Build and run the container&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker build . -t covidpass
docker run -t -i -p 3000:3000 covidpass
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>yangshun/front-end-interview-handbook</title>
      <link>https://github.com/yangshun/front-end-interview-handbook</link>
      <description>&lt;p&gt;üï∏ No-bullshit answers to the famous h5bp &quot;Front-end Job Interview Questions&quot;&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt;Front End Interview Handbook&lt;/h1&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://dribbble.com/shots/4263961-Front-End-Interview-Scroll&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/assets/scroll.svg?sanitize=true&quot; alt=&quot;Front End Interview Handbook&quot; width=&quot;400&quot;&gt; &lt;/a&gt; 
 &lt;br&gt; 
 &lt;p&gt; &lt;em&gt;Credits: &lt;a href=&quot;https://dribbble.com/shots/4263961-Front-End-Interview-Scroll&quot;&gt;Illustration&lt;/a&gt; by &lt;a href=&quot;https://dribbble.com/yangheng&quot;&gt;@yangheng&lt;/a&gt; &lt;/em&gt; &lt;/p&gt; 
 &lt;h3&gt; &lt;a href=&quot;https://frontendinterviewhandbook.com&quot;&gt;Read on the website&lt;/a&gt; &lt;/h3&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;What is this?&lt;/h2&gt; 
&lt;p&gt;Unlike typical software engineer job interviews, front-end job interviews have less emphasis on algorithms and have more questions on intricate knowledge and expertise about the domain‚Ää‚Äî‚ÄäHTML, CSS, JavaScript, just to name a few areas.&lt;/p&gt; 
&lt;p&gt;While there are some existing resources to help front end developers in preparing for interviews, they aren‚Äôt as abundant as materials for a software engineer interview. Among the existing resources, probably the most helpful question bank would be &lt;a href=&quot;https://github.com/h5bp/Front-end-Developer-Interview-Questions&quot;&gt;Front-end Developer Interview Questions&lt;/a&gt;. Unfortunately, I couldn‚Äôt find many complete and satisfactory answers to these questions online, hence here is my attempt at answering them. Being an open source repository, the project can live on with the support of the community as the state of web evolves.&lt;/p&gt; 
&lt;h2&gt;Why do I want this?&lt;/h2&gt; 
&lt;h3&gt;Go From Zero to Hero&lt;/h3&gt; 
&lt;p&gt;Go from zero to front end interview hero with this handbook. No prior interview experience needed.&lt;/p&gt; 
&lt;h3&gt;Back to Basics&lt;/h3&gt; 
&lt;p&gt;Learn to walk before you learn to fly. While React, Vue and Angular are cool, make sure you also know your fundamentals.&lt;/p&gt; 
&lt;h3&gt;Community Effort&lt;/h3&gt; 
&lt;p&gt;The best thing about Open Source is that the community vets the contents, so you can be sure the answers here have been proofread by many.&lt;/p&gt; 
&lt;h2&gt;Who is this for?&lt;/h2&gt; 
&lt;p&gt;Anybody who wants to land a job at a tech company for a front end role and is looking to make sure they don‚Äôt stumble on the basic questions. To be frank, I revise the answers here from time to time as well!&lt;/p&gt; 
&lt;hr&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;h3&gt;Get paid more. Moonchaser has negotiated hundreds of tech offers. Get 1-1 guidance from their experienced team of ex-FAANG PMs, SWEs, and Recruiters. &lt;a href=&quot;https://www.moonchaser.io/?utm_source=techinterviewhandbook&amp;amp;utm_medium=referral&amp;amp;utm_content=frontend_github&quot; target=&quot;_blank&quot;&gt;Find out more&lt;/a&gt;&lt;/h3&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;h2&gt;Looking for Generic Interview Preparation?&lt;/h2&gt; 
&lt;p&gt;You might be interested in the &lt;a href=&quot;https://techinterviewhandbook.org&quot;&gt;Tech Interview Handbook&lt;/a&gt; which has helpful content on general coding interviews such as algorithms, behavioral questions and an &lt;a href=&quot;https://techinterviewhandbook.org/cheatsheet&quot;&gt;interview cheatsheet&lt;/a&gt;!&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://techinterviewhandbook.org/&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/assets/coding.svg?sanitize=true&quot; alt=&quot;Web Technologies illustration&quot; width=&quot;400&quot;&gt; &lt;/a&gt; 
 &lt;br&gt; 
 &lt;p&gt; &lt;em&gt;Credits: Illustration by &lt;a href=&quot;https://undraw.co/&quot;&gt;unDraw&lt;/a&gt;&lt;/em&gt; &lt;/p&gt; 
 &lt;h3&gt; &lt;a href=&quot;https://techinterviewhandbook.org/&quot;&gt;Read on the website&lt;/a&gt; &lt;/h3&gt; 
&lt;/div&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/contents/en/html-questions.md&quot;&gt;HTML Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/contents/en/css-questions.md&quot;&gt;CSS Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/contents/en/javascript-questions.md&quot;&gt;JavaScript Questions&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/contents/en/README.md&quot;&gt;English&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/contents/zh/README.md&quot;&gt;Chinese (Simplified) (ÁÆÄ‰Ωì‰∏≠Êñá)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/contents/jp/README.md&quot;&gt;Japanese (Êó•Êú¨Ë™û)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/contents/kr/README.md&quot;&gt;Korean (ÌïúÍµ≠Ïñ¥)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/contents/pl/README.md&quot;&gt;Polish (Polski)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/contents/pr/README.md&quot;&gt;Portuguese (Portugu√™s)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/contents/ru/README.md&quot;&gt;Russian (–†—É—Å—Å–∫–∏–π)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/contents/tl/README.md&quot;&gt;Tagalog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Related&lt;/h2&gt; 
&lt;p&gt;If you are interested in how data structures are implemented, check out &lt;a href=&quot;https://github.com/yangshun/lago&quot;&gt;Lago&lt;/a&gt;, a Data Structures and Algorithms library for JavaScript. It‚Äôs meant for reference and studying purposes, not really for production use.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;h3&gt;Contributing Guide&lt;/h3&gt; 
&lt;p&gt;Read our &lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt; to learn about how you can contribute, how to propose improvements or if you are interested in translating the content.&lt;/p&gt; 
&lt;h3&gt;Supporting&lt;/h3&gt; 
&lt;p&gt;Many hours of hard work have gone into this project. Your support will be very appreciated!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/yangshun&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: auto !important;width: auto !important;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;All projects and packages in this repository are &lt;a href=&quot;https://raw.githubusercontent.com/yangshun/front-end-interview-handbook/master/LICENSE&quot;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;I am providing code in the repository to you under an open source license. Because this is my personal repository, the license you receive to my code is from me and not my employer (Facebook).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>30-seconds/30-seconds-of-code</title>
      <link>https://github.com/30-seconds/30-seconds-of-code</link>
      <description>&lt;p&gt;Short JavaScript code snippets for all your development needs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://30secondsofcode.org/js/p/1&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-code/master/logo.png&quot; alt=&quot;Logo&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;30 seconds of code&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Short JavaScript code snippets for all your development needs&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Visit &lt;a href=&quot;https://30secondsofcode.org&quot;&gt;our website&lt;/a&gt; to view our snippet collection.&lt;/li&gt; 
 &lt;li&gt;Use the &lt;a href=&quot;https://30secondsofcode.org/search&quot;&gt;Search page&lt;/a&gt; to find snippets that suit your needs. You can search by name, tag, language or using a snippet‚Äôs description. Just start typing a term and see what comes up.&lt;/li&gt; 
 &lt;li&gt;Browse the &lt;a href=&quot;https://30secondsofcode.org/js/p/1&quot;&gt;JavaScript Snippet collection&lt;/a&gt; to see all the snippets in this project or click individual tags at the top of the same page to narrow down your search to a specific tag.&lt;/li&gt; 
 &lt;li&gt;Click on each snippet card to view the whole snippet, including code, explanation and examples.&lt;/li&gt; 
 &lt;li&gt;You can use the button at the bottom of a snippet card to copy the code to clipboard.&lt;/li&gt; 
 &lt;li&gt;If you like the project, give it a star. It means a lot to the people maintaining it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Want to contribute?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you want to help us improve, take a minute to read the &lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-code/master/CONTRIBUTING.md&quot;&gt;Contribution Guidelines&lt;/a&gt; first.&lt;/li&gt; 
 &lt;li&gt;Use the &lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-code/master/snippet-template.md&quot;&gt;Snippet Template&lt;/a&gt; to add new snippets to the collection.&lt;/li&gt; 
 &lt;li&gt;If you find a problem with a specific snippet, please &lt;a href=&quot;https://github.com/30-seconds/30-seconds-of-code/issues/new&quot;&gt;open an issue&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;If you find a problem with the website, please &lt;a href=&quot;https://github.com/30-seconds/30-seconds-web/issues/new&quot;&gt;report it in the web repository&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;This repository is maintained by the &lt;a href=&quot;https://github.com/30-seconds&quot;&gt;30 seconds of code organization on GitHub&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;All snippets are licensed under the CC0-1.0 License, unless explicitly stated otherwise.&lt;/li&gt; 
 &lt;li&gt;Logos, names and trademarks are not to be used without the explicit consent of the owners of the 30 seconds of code GitHub organization.&lt;/li&gt; 
 &lt;li&gt;Our website is powered by &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;, &lt;a href=&quot;https://nextjs.org/&quot;&gt;Next.js&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>trekhleb/javascript-algorithms</title>
      <link>https://github.com/trekhleb/javascript-algorithms</link>
      <description>&lt;p&gt;üìù Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Algorithms and Data Structures&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/trekhleb/javascript-algorithms/actions?query=workflow%3ACI+branch%3Amaster&quot;&gt;&lt;img src=&quot;https://github.com/trekhleb/javascript-algorithms/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/trekhleb/javascript-algorithms&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/trekhleb/javascript-algorithms/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository contains JavaScript based examples of many popular algorithms and data structures.&lt;/p&gt; 
&lt;p&gt;Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Read this in other languages:&lt;/em&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-CN.md&quot;&gt;&lt;em&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-TW.md&quot;&gt;&lt;em&gt;ÁπÅÈ´î‰∏≠Êñá&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ko-KR.md&quot;&gt;&lt;em&gt;ÌïúÍµ≠Ïñ¥&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ja-JP.md&quot;&gt;&lt;em&gt;Êó•Êú¨Ë™û&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pl-PL.md&quot;&gt;&lt;em&gt;Polski&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.fr-FR.md&quot;&gt;&lt;em&gt;Fran√ßais&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.es-ES.md&quot;&gt;&lt;em&gt;Espa√±ol&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pt-BR.md&quot;&gt;&lt;em&gt;Portugu√™s&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ru-RU.md&quot;&gt;&lt;em&gt;–†—É—Å—Å–∫–∏–π&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.tr-TR.md&quot;&gt;&lt;em&gt;T√ºrk&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.it-IT.md&quot;&gt;&lt;em&gt;Italiana&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.id-ID.md&quot;&gt;&lt;em&gt;Bahasa Indonesia&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.uk-UA.md&quot;&gt;&lt;em&gt;–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ar-AR.md&quot;&gt;&lt;em&gt;Arabic&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.de-DE.md&quot;&gt;&lt;em&gt;Deutsch&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;‚òù Note that this project is meant to be used for learning and researching purposes only, and it is &lt;strong&gt;not&lt;/strong&gt; meant to be used for production.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Data Structures&lt;/h2&gt; 
&lt;p&gt;A data structure is a particular way of organizing and storing data in a computer so that it can be accessed and modified efficiently. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/linked-list&quot;&gt;Linked List&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/doubly-linked-list&quot;&gt;Doubly Linked List&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/queue&quot;&gt;Queue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/stack&quot;&gt;Stack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/hash-table&quot;&gt;Hash Table&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/heap&quot;&gt;Heap&lt;/a&gt; - max and min heap versions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/priority-queue&quot;&gt;Priority Queue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/trie&quot;&gt;Trie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree&quot;&gt;Tree&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/binary-search-tree&quot;&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/avl-tree&quot;&gt;AVL Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/red-black-tree&quot;&gt;Red-Black Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/segment-tree&quot;&gt;Segment Tree&lt;/a&gt; - with min/max/sum range queries examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/fenwick-tree&quot;&gt;Fenwick Tree&lt;/a&gt; (Binary Indexed Tree)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/graph&quot;&gt;Graph&lt;/a&gt; (both directed and undirected)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/disjoint-set&quot;&gt;Disjoint Set&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/bloom-filter&quot;&gt;Bloom Filter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Algorithms&lt;/h2&gt; 
&lt;p&gt;An algorithm is an unambiguous specification of how to solve a class of problems. It is a set of rules that precisely define a sequence of operations.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; 
&lt;h3&gt;Algorithms by Topic&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Math&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/bits&quot;&gt;Bit Manipulation&lt;/a&gt; - set/get/update/clear bits, multiplication/division by two, make negative etc.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/factorial&quot;&gt;Factorial&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci&quot;&gt;Fibonacci Number&lt;/a&gt; - classic and closed-form versions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/prime-factors&quot;&gt;Prime Factors&lt;/a&gt; - finding prime factors and counting them using Hardy-Ramanujan‚Äôs theorem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/primality-test&quot;&gt;Primality Test&lt;/a&gt; (trial division method)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm&quot;&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/least-common-multiple&quot;&gt;Least Common Multiple&lt;/a&gt; (LCM)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/sieve-of-eratosthenes&quot;&gt;Sieve of Eratosthenes&lt;/a&gt; - finding all prime numbers up to any given limit&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/is-power-of-two&quot;&gt;Is Power of Two&lt;/a&gt; - check if the number is power of two (naive and bitwise algorithms)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle&quot;&gt;Pascal‚Äôs Triangle&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/complex-number&quot;&gt;Complex Number&lt;/a&gt; - complex numbers and basic operations with them&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/radian&quot;&gt;Radian &amp;amp; Degree&lt;/a&gt; - radians to degree and backwards conversion&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering&quot;&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/horner-method&quot;&gt;Horner‚Äôs method&lt;/a&gt; - polynomial evaluation&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix&quot;&gt;Matrices&lt;/a&gt; - matrices and basic matrix operations (multiplication, transposition, etc.)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-distance&quot;&gt;Euclidean Distance&lt;/a&gt; - distance between two points/vectors/matrices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition&quot;&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/square-root&quot;&gt;Square Root&lt;/a&gt; - Newton‚Äôs method&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/liu-hui&quot;&gt;Liu Hui œÄ Algorithm&lt;/a&gt; - approximate œÄ calculations based on N-gons&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform&quot;&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sets&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/cartesian-product&quot;&gt;Cartesian Product&lt;/a&gt; - product of multiple sets&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/fisher-yates&quot;&gt;Fisher‚ÄìYates Shuffle&lt;/a&gt; - random permutation of a finite sequence&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set&quot;&gt;Power Set&lt;/a&gt; - all subsets of a set (bitwise and backtracking solutions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations&quot;&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations&quot;&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence&quot;&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence&quot;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence&quot;&gt;Shortest Common Supersequence&lt;/a&gt; (SCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&quot;&gt;Knapsack Problem&lt;/a&gt; - ‚Äú0/1‚Äù and ‚ÄúUnbound‚Äù ones&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&quot;&gt;Maximum Subarray&lt;/a&gt; - ‚ÄúBrute Force‚Äù and ‚ÄúDynamic Programming‚Äù (Kadane‚Äôs) versions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum&quot;&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/hamming-distance&quot;&gt;Hamming Distance&lt;/a&gt; - number of positions at which the symbols are different&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance&quot;&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/knuth-morris-pratt&quot;&gt;Knuth‚ÄìMorris‚ÄìPratt Algorithm&lt;/a&gt; (KMP Algorithm) - substring search (pattern matching)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/z-algorithm&quot;&gt;Z Algorithm&lt;/a&gt; - substring search (pattern matching)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/rabin-karp&quot;&gt;Rabin Karp Algorithm&lt;/a&gt; - substring search&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring&quot;&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching&quot;&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Searches&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search&quot;&gt;Linear Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/jump-search&quot;&gt;Jump Search&lt;/a&gt; (or Block Search) - search in sorted array&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search&quot;&gt;Binary Search&lt;/a&gt; - search in sorted array&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/interpolation-search&quot;&gt;Interpolation Search&lt;/a&gt; - search in uniformly distributed sorted array&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sorting&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/bubble-sort&quot;&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/selection-sort&quot;&gt;Selection Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/insertion-sort&quot;&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/heap-sort&quot;&gt;Heap Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort&quot;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort&quot;&gt;Quicksort&lt;/a&gt; - in-place and non-in-place implementations&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/shell-sort&quot;&gt;Shellsort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/counting-sort&quot;&gt;Counting Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/radix-sort&quot;&gt;Radix Sort&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linked Lists&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/traversal&quot;&gt;Straight Traversal&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/reverse-traversal&quot;&gt;Reverse Traversal&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Trees&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search&quot;&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/breadth-first-search&quot;&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Graphs&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search&quot;&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/breadth-first-search&quot;&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal&quot;&gt;Kruskal‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra&quot;&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford&quot;&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall&quot;&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/detect-cycle&quot;&gt;Detect Cycle&lt;/a&gt; - for both directed and undirected graphs (DFS and Disjoint Set based versions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim&quot;&gt;Prim‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/topological-sorting&quot;&gt;Topological Sorting&lt;/a&gt; - DFS method&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/articulation-points&quot;&gt;Articulation Points&lt;/a&gt; - Tarjan‚Äôs algorithm (DFS based)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bridges&quot;&gt;Bridges&lt;/a&gt; - DFS based algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/eulerian-path&quot;&gt;Eulerian Path and Eulerian Circuit&lt;/a&gt; - Fleury‚Äôs algorithm - Visit every edge exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle&quot;&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/strongly-connected-components&quot;&gt;Strongly Connected Components&lt;/a&gt; - Kosaraju‚Äôs algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman&quot;&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cryptography&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/polynomial-hash&quot;&gt;Polynomial Hash&lt;/a&gt; - rolling hash function based on polynomial&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/rail-fence-cipher&quot;&gt;Rail Fence Cipher&lt;/a&gt; - a transposition cipher algorithm for encoding messages&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/caesar-cipher&quot;&gt;Caesar Cipher&lt;/a&gt; - simple substitution cipher&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/hill-cipher&quot;&gt;Hill Cipher&lt;/a&gt; - substitution cipher based on linear algebra&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://github.com/trekhleb/nano-neuron&quot;&gt;NanoNeuron&lt;/a&gt; - 7 simple JS functions that illustrate how machines can actually learn (forward/backward propagation)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/knn&quot;&gt;k-NN&lt;/a&gt; - k-nearest neighbors classification algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/k-means&quot;&gt;k-Means&lt;/a&gt; - k-Means clustering algorithm&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Image Processing&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving&quot;&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Uncategorized&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower&quot;&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/square-matrix-rotation&quot;&gt;Square Matrix Rotation&lt;/a&gt; - in-place algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt; - backtracking, dynamic programming (top-down + bottom-up) and greedy examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&quot;&gt;Unique Paths&lt;/a&gt; - backtracking, dynamic programming and Pascal‚Äôs Triangle based examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&quot;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem (dynamic programming and brute force versions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&quot;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top (4 solutions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks&quot;&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens&quot;&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour&quot;&gt;Knight‚Äôs Tour&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Algorithms by Paradigm&lt;/h3&gt; 
&lt;p&gt;An algorithmic paradigm is a generic method or approach which underlies the design of a class of algorithms. It is an abstraction higher than the notion of an algorithm, just as an algorithm is an abstraction higher than a computer program.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Brute Force&lt;/strong&gt; - look at all the possibilities and selects the best solution 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search&quot;&gt;Linear Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&quot;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&quot;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&quot;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman&quot;&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform&quot;&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Greedy&lt;/strong&gt; - choose the best option at the current time, without any consideration for the future 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&quot;&gt;Unbound Knapsack Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra&quot;&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim&quot;&gt;Prim‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal&quot;&gt;Kruskal‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Divide and Conquer&lt;/strong&gt; - divide the problem into smaller parts and then solve those parts 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search&quot;&gt;Binary Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower&quot;&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle&quot;&gt;Pascal‚Äôs Triangle&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm&quot;&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort&quot;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort&quot;&gt;Quicksort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search&quot;&gt;Tree Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search&quot;&gt;Graph Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix&quot;&gt;Matrices&lt;/a&gt; - generating and traversing the matrices of different shapes&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering&quot;&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks&quot;&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations&quot;&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations&quot;&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic Programming&lt;/strong&gt; - build up a solution using previously found sub-solutions 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci&quot;&gt;Fibonacci Number&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&quot;&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&quot;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&quot;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving&quot;&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance&quot;&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence&quot;&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring&quot;&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence&quot;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence&quot;&gt;Shortest Common Supersequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&quot;&gt;0/1 Knapsack Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition&quot;&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&quot;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford&quot;&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall&quot;&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching&quot;&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backtracking&lt;/strong&gt; - similarly to brute force, try to generate all possible solutions, but each time you generate next solution you test if it satisfies all conditions, and only then continue generating subsequent solutions. Otherwise, backtrack, and go on a different path of finding a solution. Normally the DFS traversal of state-space is being used. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&quot;&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set&quot;&gt;Power Set&lt;/a&gt; - all subsets of a set&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle&quot;&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens&quot;&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour&quot;&gt;Knight‚Äôs Tour&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum&quot;&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Branch &amp;amp; Bound&lt;/strong&gt; - remember the lowest-cost solution found at each stage of the backtracking search, and use the cost of the lowest-cost solution found so far as a lower bound on the cost of a least-cost solution to the problem, in order to discard partial solutions with costs larger than the lowest-cost solution found so far. Normally BFS traversal in combination with DFS traversal of state-space tree is being used.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to use this repository&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Install all dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run ESLint&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You may want to run it to check code quality.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm run lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run all tests&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run tests by name&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test -- &#39;LinkedList&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In case if linting or testing is failing try to delete the &lt;code&gt;node_modules&lt;/code&gt; folder and re-install npm packages:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rm -rf ./node_modules
npm i
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You may play with data-structures and algorithms in &lt;code&gt;./src/playground/playground.js&lt;/code&gt; file and write tests for it in &lt;code&gt;./src/playground/__test__/playground.test.js&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Then just simply run the following command to test if your playground code works as expected:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test -- &#39;playground&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Useful Information&lt;/h2&gt; 
&lt;h3&gt;References&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8&quot;&gt;‚ñ∂ Data Structures and Algorithms on YouTube&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Big O Notation&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Big O notation&lt;/em&gt; is used to classify algorithms according to how their running time or space requirements grow as the input size grows. On the chart below you may find most common orders of growth of algorithms specified in Big O notation.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/assets/big-o-graph.png&quot; alt=&quot;Big O graphs&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Source: &lt;a href=&quot;http://bigocheatsheet.com/&quot;&gt;Big O Cheat Sheet&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data.&lt;/p&gt; 
&lt;p&gt;| Big O Notation | Computations for 10 elements | Computations for 100 elements | Computations for 1000 elements | | ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì | ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì | ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì | ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì | | &lt;strong&gt;O(1)&lt;/strong&gt; | 1 | 1 | 1 | | &lt;strong&gt;O(log N)&lt;/strong&gt; | 3 | 6 | 9 | | &lt;strong&gt;O(N)&lt;/strong&gt; | 10 | 100 | 1000 | | &lt;strong&gt;O(N log N)&lt;/strong&gt; | 30 | 600 | 9000 | | &lt;strong&gt;O(N^2)&lt;/strong&gt; | 100 | 10000 | 1000000 | | &lt;strong&gt;O(2^N)&lt;/strong&gt; | 1024 | 1.26e+29 | 1.07e+301 | | &lt;strong&gt;O(N!)&lt;/strong&gt; | 3628800 | 9.3e+157 | 4.02e+2567 |&lt;/p&gt; 
&lt;h3&gt;Data Structure Operations Complexity&lt;/h3&gt; 
&lt;p&gt;| Data Structure | Access | Search | Insertion | Deletion | Comments | | ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì | :‚Äî‚Äì‚Äì: | :‚Äî‚Äì‚Äì: | :‚Äî‚Äì‚Äì: | :‚Äî‚Äì‚Äì: | :‚Äì‚Äì‚Äì‚Äì | | &lt;strong&gt;Array&lt;/strong&gt; | 1 | n | n | n | | | &lt;strong&gt;Stack&lt;/strong&gt; | n | n | 1 | 1 | | | &lt;strong&gt;Queue&lt;/strong&gt; | n | n | 1 | 1 | | | &lt;strong&gt;Linked List&lt;/strong&gt; | n | n | 1 | n | | | &lt;strong&gt;Hash Table&lt;/strong&gt; | - | n | n | n | In case of perfect hash function costs would be O(1) | | &lt;strong&gt;Binary Search Tree&lt;/strong&gt; | n | n | n | n | In case of balanced tree costs would be O(log(n)) | | &lt;strong&gt;B-Tree&lt;/strong&gt; | log(n) | log(n) | log(n) | log(n) | | | &lt;strong&gt;Red-Black Tree&lt;/strong&gt; | log(n) | log(n) | log(n) | log(n) | | | &lt;strong&gt;AVL Tree&lt;/strong&gt; | log(n) | log(n) | log(n) | log(n) | | | &lt;strong&gt;Bloom Filter&lt;/strong&gt; | - | 1 | 1 | - | False positives are possible while searching |&lt;/p&gt; 
&lt;h3&gt;Array Sorting Algorithms Complexity&lt;/h3&gt; 
&lt;p&gt;| Name | Best | Average | Worst | Memory | Stable | Comments | | ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî | :‚Äî‚Äî‚Äî‚Äì‚Äì: | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì: | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì: | :‚Äî‚Äì‚Äì: | :‚Äî‚Äì‚Äì: | :‚Äì‚Äì‚Äì‚Äì | | &lt;strong&gt;Bubble sort&lt;/strong&gt; | n | n&lt;sup&gt;2&lt;/sup&gt; | n&lt;sup&gt;2&lt;/sup&gt; | 1 | Yes | | | &lt;strong&gt;Insertion sort&lt;/strong&gt; | n | n&lt;sup&gt;2&lt;/sup&gt; | n&lt;sup&gt;2&lt;/sup&gt; | 1 | Yes | | | &lt;strong&gt;Selection sort&lt;/strong&gt; | n&lt;sup&gt;2&lt;/sup&gt; | n&lt;sup&gt;2&lt;/sup&gt; | n&lt;sup&gt;2&lt;/sup&gt; | 1 | No | | | &lt;strong&gt;Heap sort&lt;/strong&gt; | n&amp;nbsp;log(n) | n&amp;nbsp;log(n) | n&amp;nbsp;log(n) | 1 | No | | | &lt;strong&gt;Merge sort&lt;/strong&gt; | n&amp;nbsp;log(n) | n&amp;nbsp;log(n) | n&amp;nbsp;log(n) | n | Yes | | | &lt;strong&gt;Quick sort&lt;/strong&gt; | n&amp;nbsp;log(n) | n&amp;nbsp;log(n) | n&lt;sup&gt;2&lt;/sup&gt; | log(n) | No | Quicksort is usually done in-place with O(log(n)) stack space | | &lt;strong&gt;Shell sort&lt;/strong&gt; | n&amp;nbsp;log(n) | depends on gap sequence | n&amp;nbsp;(log(n))&lt;sup&gt;2&lt;/sup&gt; | 1 | No | | | &lt;strong&gt;Counting sort&lt;/strong&gt; | n + r | n + r | n + r | n + r | Yes | r - biggest number in array | | &lt;strong&gt;Radix sort&lt;/strong&gt; | n * k | n * k | n * k | n + k | Yes | k - length of longest key |&lt;/p&gt; 
&lt;h2&gt;Project Backers&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You may support this project via ‚ù§Ô∏èÔ∏è &lt;a href=&quot;https://github.com/sponsors/trekhleb&quot;&gt;GitHub&lt;/a&gt; or ‚ù§Ô∏èÔ∏è &lt;a href=&quot;https://www.patreon.com/trekhleb&quot;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/trekhleb/javascript-algorithms/raw/master/BACKERS.md&quot;&gt;Folks who are backing this project&lt;/a&gt; &lt;code&gt;‚àë = 0&lt;/code&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‚ÑπÔ∏è A few more &lt;a href=&quot;https://trekhleb.dev/projects/&quot;&gt;projects&lt;/a&gt; and &lt;a href=&quot;https://trekhleb.dev/blog/&quot;&gt;articles&lt;/a&gt; about JavaScript and algorithms on &lt;a href=&quot;https://trekhleb.dev&quot;&gt;trekhleb.dev&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>sudheerj/reactjs-interview-questions</title>
      <link>https://github.com/sudheerj/reactjs-interview-questions</link>
      <description>&lt;p&gt;List of top 500 ReactJS Interview Questions &amp; Answers....Coding exercise questions are coming soon!!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Interview Questions &amp;amp; Answers&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Click :star:if you like the project. Pull Request are highly appreciated. Follow me &lt;a href=&quot;https://twitter.com/SudheerJonna&quot;&gt;@SudheerJonna&lt;/a&gt; for technical updates.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://www.fullstack.cafe/?utm_source=github&amp;amp;utm_medium=sud&quot;&gt; 3600 Tech Interview Questions. &lt;b&gt;Answered&lt;/b&gt;. 
  &lt;div&gt; 
   &lt;img src=&quot;https://user-images.githubusercontent.com/13550565/76382460-cc784d80-6393-11ea-8837-2b89265ac853.png&quot; width=&quot;150&quot; alt=&quot;FullStack.Cafe&quot;&gt; 
  &lt;/div&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;div&gt;
  Learn to code and get hired with 
 &lt;a href=&quot;https://zerotomastery.io/?utm_source=github&amp;amp;utm_medium=sponsor&amp;amp;utm_campaign=reactjs-interview-questions&quot;&gt;Zero To Mastery:&lt;/a&gt; 
 &lt;ol&gt; 
  &lt;li&gt;This &lt;a href=&quot;https://links.zerotomastery.io/react_sudheer&quot;&gt;React course&lt;/a&gt; is good if you‚Äôre struggling to learn React beyond the basics&lt;/li&gt; 
  &lt;li&gt;This &lt;a href=&quot;http://links.zerotomastery.io/mci_sudheer&quot;&gt;coding interview bootcamp&lt;/a&gt; is helpful if you‚Äôre serious about getting hired as a developer&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repository is specific to ReactJS. Please check &lt;a href=&quot;https://github.com/sudheerj/javascript-interview-questions&quot;&gt;Javascript Interview questions&lt;/a&gt; for core javascript questions.&lt;/p&gt; 
&lt;h2&gt;Downloading PDF/Epub formats&lt;/h2&gt; 
&lt;p&gt;You can download the PDF and Epub version of this repository from the latest run on the &lt;a href=&quot;https://github.com/sudheerj/reactjs-interview-questions/actions&quot;&gt;actions tab&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;p&gt;| No. | Questions | | ‚Äî | ‚Äî‚Äî‚Äî | | | &lt;strong&gt;Core React&lt;/strong&gt; | |1 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react&quot;&gt;What is React?&lt;/a&gt; | |2 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-major-features-of-react&quot;&gt;What are the major features of React?&lt;/a&gt; | |3 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jsx&quot;&gt;What is JSX?&lt;/a&gt; | |4 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-element-and-component&quot;&gt;What is the difference between Element and Component?&lt;/a&gt; | |5 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-components-in-react&quot;&gt;How to create components in React?&lt;/a&gt; | |6 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-to-use-a-class-component-over-a-function-component&quot;&gt;When to use a Class Component over a Function Component?&lt;/a&gt; | |7 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-pure-components&quot;&gt;What are Pure Components?&lt;/a&gt; | |8 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-state-in-react&quot;&gt;What is state in React?&lt;/a&gt; | |9 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-props-in-react&quot;&gt;What are props in React?&lt;/a&gt; | |10 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-state-and-props&quot;&gt;What is the difference between state and props?&lt;/a&gt; | |11 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-we-not-update-the-state-directly&quot;&gt;Why should we not update the state directly?&lt;/a&gt; | |12 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-callback-function-as-an-argument-of-setstate&quot;&gt;What is the purpose of callback function as an argument of setState()?&lt;/a&gt; |13 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-html-and-react-event-handling&quot;&gt;What is the difference between HTML and React event handling?&lt;/a&gt; | |14 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-bind-methods-or-event-handlers-in-jsx-callbacks&quot;&gt;How to bind methods or event handlers in JSX callbacks?&lt;/a&gt; | |15 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-a-parameter-to-an-event-handler-or-callback&quot;&gt;How to pass a parameter to an event handler or callback?&lt;/a&gt; | |16 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-synthetic-events-in-react&quot;&gt;What are synthetic events in React?&lt;/a&gt; | |17 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-inline-conditional-expressions&quot;&gt;What are inline conditional expressions?&lt;/a&gt; | |18 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-key-prop-and-what-is-the-benefit-of-using-it-in-arrays-of-elements&quot;&gt;What is ‚Äúkey‚Äù prop and what is the benefit of using it in arrays of elements?&lt;/a&gt; | |19 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-refs&quot;&gt;What is the use of refs?&lt;/a&gt; | |20 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-refs&quot;&gt;How to create refs?&lt;/a&gt; |21 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-forward-refs&quot;&gt;What are forward refs?&lt;/a&gt; | |22 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#which-is-preferred-option-with-in-callback-refs-and-finddomnode&quot;&gt;Which is preferred option with in callback refs and findDOMNode()?&lt;/a&gt; | |23 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-string-refs-legacy&quot;&gt;Why are String Refs legacy?&lt;/a&gt; | |24 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-virtual-dom&quot;&gt;What is Virtual DOM?&lt;/a&gt; | |25 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-virtual-dom-works&quot;&gt;How Virtual DOM works?&lt;/a&gt; | |26 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-shadow-dom-and-virtual-dom&quot;&gt;What is the difference between Shadow DOM and Virtual DOM?&lt;/a&gt; | |27 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-fiber&quot;&gt;What is React Fiber?&lt;/a&gt; | |28 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-main-goal-of-react-fiber&quot;&gt;What is the main goal of React Fiber?&lt;/a&gt; | |29 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-controlled-components&quot;&gt;What are controlled components?&lt;/a&gt; | |30 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-uncontrolled-components&quot;&gt;What are uncontrolled components?&lt;/a&gt; | |31 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-createelement-and-cloneelement&quot;&gt;What is the difference between createElement and cloneElement?&lt;/a&gt; | |32 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-lifting-state-up-in-react&quot;&gt;What is Lifting State Up in React?&lt;/a&gt; | |33 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-different-phases-of-component-lifecycle&quot;&gt;What are the different phases of component lifecycle?&lt;/a&gt; | |34 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-lifecycle-methods-of-react&quot;&gt;What are the lifecycle methods of React?&lt;/a&gt; | |35 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-higher-order-components&quot;&gt;What are Higher-Order components?&lt;/a&gt; | |36 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-props-proxy-for-hoc-component&quot;&gt;How to create props proxy for HOC component?&lt;/a&gt; | |37 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-context&quot;&gt;What is context?&lt;/a&gt; | |38 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-children-prop&quot;&gt;What is children prop?&lt;/a&gt; | |39 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-write-comments-in-react&quot;&gt;How to write comments in React?&lt;/a&gt; | |40 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-using-super-constructor-with-props-argument&quot;&gt;What is the purpose of using super constructor with props argument?&lt;/a&gt; | |41 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reconciliation&quot;&gt;What is reconciliation?&lt;/a&gt; | |42 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-set-state-with-a-dynamic-key-name&quot;&gt;How to set state with a dynamic key name?&lt;/a&gt; | |43 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-would-be-the-common-mistake-of-function-being-called-every-time-the-component-renders&quot;&gt;What would be the common mistake of function being called every time the component renders?&lt;/a&gt; | |44 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-lazy-function-supports-named-exports&quot;&gt;Is lazy function supports named exports?&lt;/a&gt; | |45 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-react-uses-classname-over-class-attribute&quot;&gt;Why React uses className over class attribute?&lt;/a&gt; | |46 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-fragments&quot;&gt;What are fragments?&lt;/a&gt; | |47 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-fragments-are-better-than-container-divs&quot;&gt;Why fragments are better than container divs?&lt;/a&gt; | |48 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-portals-in-react&quot;&gt;What are portals in React?&lt;/a&gt; | |49 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-stateless-components&quot;&gt;What are stateless components?&lt;/a&gt; | |50 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-stateful-components&quot;&gt;What are stateful components?&lt;/a&gt; | |51 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-apply-validation-on-props-in-react&quot;&gt;How to apply validation on props in React?&lt;/a&gt; | |52 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-react&quot;&gt;What are the advantages of React?&lt;/a&gt; | |53 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-limitations-of-react&quot;&gt;What are the limitations of React?&lt;/a&gt; | |54 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-error-boundaries-in-react-v16&quot;&gt;What are error boundaries in React v16&lt;/a&gt; | |55 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-error-boundaries-handled-in-react-v15&quot;&gt;How error boundaries handled in React v15?&lt;/a&gt; | |56 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-recommended-ways-for-static-type-checking&quot;&gt;What are the recommended ways for static type checking?&lt;/a&gt; | |57 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-react-dom-package&quot;&gt;What is the use of react-dom package?&lt;/a&gt; | |58 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-render-method-of-react-dom&quot;&gt;What is the purpose of render method of react-dom?&lt;/a&gt; | |59 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reactdomserver&quot;&gt;What is ReactDOMServer?&lt;/a&gt; | |60 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-innerhtml-in-react&quot;&gt;How to use InnerHtml in React?&lt;/a&gt; | |61 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-styles-in-react&quot;&gt;How to use styles in React?&lt;/a&gt; | |62 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-events-are-different-in-react&quot;&gt;How events are different in React?&lt;/a&gt; | |63 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-if-you-use-setstate-in-constructor&quot;&gt;What will happen if you use setState in constructor?&lt;/a&gt; | |64 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-impact-of-indexes-as-keys&quot;&gt;What is the impact of indexes as keys?&lt;/a&gt; | |65 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-good-to-use-setstate-in-componentwillmount-method&quot;&gt;Is it good to use setState() in componentWillMount() method?&lt;/a&gt; | |66 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-if-you-use-props-in-initial-state&quot;&gt;What will happen if you use props in initial state?&lt;/a&gt; | |67 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-conditionally-render-components&quot;&gt;How do you conditionally render components?&lt;/a&gt; |68 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-we-need-to-be-careful-when-spreading-props-on-dom-elements&quot;&gt;Why we need to be careful when spreading props on DOM elements??&lt;/a&gt; | |69 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-you-use-decorators-in-react&quot;&gt;How you use decorators in React?&lt;/a&gt; | |70 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-memoize-a-component&quot;&gt;How do you memoize a component?&lt;/a&gt; | |71 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-you-implement-server-side-rendering-or-ssr&quot;&gt;How you implement Server-Side Rendering or SSR?&lt;/a&gt; | |72 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-enable-production-mode-in-react&quot;&gt;How to enable production mode in React?&lt;/a&gt; | |73 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-cra-and-its-benefits&quot;&gt;What is CRA and its benefits?&lt;/a&gt; | |74 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-lifecycle-methods-order-in-mounting&quot;&gt;What is the lifecycle methods order in mounting?&lt;/a&gt; | |75 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-lifecycle-methods-going-to-be-deprecated-in-react-v16&quot;&gt;What are the lifecycle methods going to be deprecated in React v16?&lt;/a&gt; | |76 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getderivedstatefromprops-lifecycle-method&quot;&gt;What is the purpose of getDerivedStateFromProps() lifecycle method?&lt;/a&gt; | |77 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getsnapshotbeforeupdate-lifecycle-method&quot;&gt;What is the purpose of getSnapshotBeforeUpdate() lifecycle method?&lt;/a&gt; | |78 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-hooks-replace-render-props-and-higher-order-components&quot;&gt;Do Hooks replace render props and higher order components?&lt;/a&gt; | |79 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-way-for-naming-components&quot;&gt;What is the recommended way for naming components?&lt;/a&gt; | |80 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-ordering-of-methods-in-component-class&quot;&gt;What is the recommended ordering of methods in component class?&lt;/a&gt; | |81 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-switching-component&quot;&gt;What is a switching component?&lt;/a&gt; | |82 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-we-need-to-pass-a-function-to-setstate&quot;&gt;Why we need to pass a function to setState()?&lt;/a&gt; | |83 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-strict-mode-in-react&quot;&gt;What is strict mode in React?&lt;/a&gt; | |84 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-react-mixins&quot;&gt;What are React Mixins?&lt;/a&gt; | |85 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-ismounted-an-anti-pattern-and-what-is-the-proper-solution&quot;&gt;Why is isMounted() an anti-pattern and what is the proper solution?&lt;/a&gt; | |86 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-pointer-events-supported-in-react&quot;&gt;What are the Pointer Events supported in React?&lt;/a&gt; | |87 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-component-names-start-with-capital-letter&quot;&gt;Why should component names start with capital letter?&lt;/a&gt; | |88 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#are-custom-dom-attributes-supported-in-react-v16&quot;&gt;Are custom DOM attributes supported in React v16?&lt;/a&gt; | |89 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-constructor-and-getinitialstate&quot;&gt;What is the difference between constructor and getInitialState?&lt;/a&gt; | |90 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-force-a-component-to-re-render-without-calling-setstate&quot;&gt;Can you force a component to re-render without calling setState?&lt;/a&gt; | |91 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-super-and-superprops-in-react-using-es6-classes&quot;&gt;What is the difference between super() and super(props) in React using ES6 classes?&lt;/a&gt; | |92 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-loop-inside-jsx&quot;&gt;How to loop inside JSX?&lt;/a&gt; | |93 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-access-props-in-attribute-quotes&quot;&gt;How do you access props in attribute quotes?&lt;/a&gt; | |94 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-proptype-array-with-shape&quot;&gt;What is React PropType array with shape?&lt;/a&gt; | |95 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-conditionally-apply-class-attributes&quot;&gt;How to conditionally apply class attributes?&lt;/a&gt; | |96 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-and-reactdom&quot;&gt;What is the difference between React and ReactDOM?&lt;/a&gt; | |97 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-reactdom-is-separated-from-react&quot;&gt;Why ReactDOM is separated from React?&lt;/a&gt; | |98 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-react-label-element&quot;&gt;How to use React label element?&lt;/a&gt; | |99 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-combine-multiple-inline-style-objects&quot;&gt;How to combine multiple inline style objects?&lt;/a&gt; | |100| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-re-render-the-view-when-the-browser-is-resized&quot;&gt;How to re-render the view when the browser is resized?&lt;/a&gt; |101| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-setstate-and-replacestate-methods&quot;&gt;What is the difference between setState and replaceState methods?&lt;/a&gt; | |102| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-listen-to-state-changes&quot;&gt;How to listen to state changes?&lt;/a&gt; | |103| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-approach-of-removing-an-array-element-in-react-state&quot;&gt;What is the recommended approach of removing an array element in react state?&lt;/a&gt; | |104| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-react-without-rendering-html&quot;&gt;Is it possible to use React without rendering HTML?&lt;/a&gt; | |105| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pretty-print-json-with-react&quot;&gt;How to pretty print JSON with React?&lt;/a&gt; | |106| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-you-cant-update-props-in-react&quot;&gt;Why you can‚Äôt update props in React?&lt;/a&gt; | |107| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-focus-an-input-element-on-page-load&quot;&gt;How to focus an input element on page load?&lt;/a&gt; | |108| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-possible-ways-of-updating-objects-in-state&quot;&gt;What are the possible ways of updating objects in state?&lt;/a&gt; | |110| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-can-we-find-the-version-of-react-at-runtime-in-the-browser&quot;&gt;How can we find the version of React at runtime in the browser?&lt;/a&gt; | |111| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-approaches-to-include-polyfills-in-your-create-react-app&quot;&gt;What are the approaches to include polyfills in your create-react-app?&lt;/a&gt; | |112| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-https-instead-of-http-in-create-react-app&quot;&gt;How to use https instead of http in create-react-app?&lt;/a&gt; | |113| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-avoid-using-relative-path-imports-in-create-react-app&quot;&gt;How to avoid using relative path imports in create-react-app?&lt;/a&gt; | |114| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-google-analytics-for-react-router&quot;&gt;How to add Google Analytics for react-router?&lt;/a&gt; | |115| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-update-a-component-every-second&quot;&gt;How to update a component every second?&lt;/a&gt; | |116| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-apply-vendor-prefixes-to-inline-styles-in-react&quot;&gt;How do you apply vendor prefixes to inline styles in React?&lt;/a&gt; | |117| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-import-and-export-components-using-react-and-es6&quot;&gt;How to import and export components using react and ES6?&lt;/a&gt; | |118| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-exceptions-on-react-component-naming&quot;&gt;What are the exceptions on React component naming?&lt;/a&gt; | |119| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-a-component-constructor-called-only-once&quot;&gt;Why is a component constructor called only once?&lt;/a&gt; | |120| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-define-constants-in-react&quot;&gt;How to define constants in React?&lt;/a&gt; | |121| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-programmatically-trigger-click-event-in-react&quot;&gt;How to programmatically trigger click event in React?&lt;/a&gt; | |122| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-asyncawait-in-plain-react&quot;&gt;Is it possible to use async/await in plain React?&lt;/a&gt; | |123| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-common-folder-structures-for-react&quot;&gt;What are the common folder structures for React?&lt;/a&gt; | |124| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-popular-packages-for-animation&quot;&gt;What are the popular packages for animation?&lt;/a&gt; | |125| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-styles-modules&quot;&gt;What is the benefit of styles modules?&lt;/a&gt; | |126| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-popular-react-specific-linters&quot;&gt;What are the popular React-specific linters?&lt;/a&gt; | |127| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-make-ajax-call-and-in-which-component-lifecycle-methods-should-i-make-an-ajax-call&quot;&gt;How to make AJAX call and In which component lifecycle methods should I make an AJAX call?&lt;/a&gt; | |128| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-render-props&quot;&gt;What are render props?&lt;/a&gt; | | | &lt;strong&gt;React Router&lt;/strong&gt; | |129| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-router&quot;&gt;What is React Router?&lt;/a&gt; | |130| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-react-router-is-different-from-history-library&quot;&gt;How React Router is different from history library?&lt;/a&gt; | |131| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-router-components-of-react-router-v4&quot;&gt;What are the &amp;lt;Router&amp;gt; components of React Router v4?&lt;/a&gt; | |132| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-push-and-replace-methods-of-history&quot;&gt;What is the purpose of push and replace methods of history?&lt;/a&gt; | |133| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-programmatically-navigate-using-react-router-v4&quot;&gt;How do you programmatically navigate using React router v4?&lt;/a&gt; | |134| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-get-query-parameters-in-react-router-v4&quot;&gt;How to get query parameters in React Router v4&lt;/a&gt; | |135| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-you-get-router-may-have-only-one-child-element-warning&quot;&gt;Why you get ‚ÄúRouter may have only one child element‚Äù warning?&lt;/a&gt; | |136| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-params-to-historypush-method-in-react-router-v4&quot;&gt;How to pass params to history.push method in React Router v4?&lt;/a&gt; | |137| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-implement-default-or-notfound-page&quot;&gt;How to implement default or NotFound page?&lt;/a&gt; | |138| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-get-history-on-react-router-v4&quot;&gt;How to get history on React Router v4?&lt;/a&gt; | |139| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-perform-automatic-redirect-after-login&quot;&gt;How to perform automatic redirect after login?&lt;/a&gt; | | | &lt;strong&gt;React Internationalization&lt;/strong&gt; | |140| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-intl&quot;&gt;What is React-Intl?&lt;/a&gt; | |141| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-react-intl&quot;&gt;What are the main features of React Intl?&lt;/a&gt; | |142| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-two-ways-of-formatting-in-react-intl&quot;&gt;What are the two ways of formatting in React Intl?&lt;/a&gt; | |143| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-formattedmessage-as-placeholder-using-react-intl&quot;&gt;How to use FormattedMessage as placeholder using React Intl?&lt;/a&gt; | |144| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-access-current-locale-with-react-intl&quot;&gt;How to access current locale with React Intl&lt;/a&gt; | |145| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-format-date-using-react-intl&quot;&gt;How to format date using React Intl?&lt;/a&gt; | | | &lt;strong&gt;React Testing&lt;/strong&gt; | |146| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-shallow-renderer-in-react-testing&quot;&gt;What is Shallow Renderer in React testing?&lt;/a&gt; | |147| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-testrenderer-package-in-react&quot;&gt;What is TestRenderer package in React?&lt;/a&gt; | |148| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-reacttestutils-package&quot;&gt;What is the purpose of ReactTestUtils package?&lt;/a&gt; | |149| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jest&quot;&gt;What is Jest?&lt;/a&gt; | |150| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-jest-over-jasmine&quot;&gt;What are the advantages of Jest over Jasmine?&lt;/a&gt; | |151| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-a-simple-example-of-jest-test-case&quot;&gt;Give a simple example of Jest test case&lt;/a&gt; | | | &lt;strong&gt;React Redux&lt;/strong&gt; | |152| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-flux&quot;&gt;What is Flux?&lt;/a&gt; | |153| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux&quot;&gt;What is Redux?&lt;/a&gt; | |154| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-core-principles-of-redux&quot;&gt;What are the core principles of Redux?&lt;/a&gt; | |155| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-downsides-of-redux-compared-to-flux&quot;&gt;What are the downsides of Redux compared to Flux?&lt;/a&gt; | |156| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-mapstatetoprops-and-mapdispatchtoprops&quot;&gt;What is the difference between mapStateToProps() and mapDispatchToProps()?&lt;/a&gt; | |157| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-dispatch-an-action-in-reducer&quot;&gt;Can I dispatch an action in reducer?&lt;/a&gt; | |158| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-access-redux-store-outside-a-component&quot;&gt;How to access Redux store outside a component?&lt;/a&gt; | |159| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-drawbacks-of-mvw-pattern&quot;&gt;What are the drawbacks of MVW pattern&lt;/a&gt; | |160| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#are-there-any-similarities-between-redux-and-rxjs&quot;&gt;Are there any similarities between Redux and RxJS?&lt;/a&gt; | |161| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-dispatch-an-action-on-load&quot;&gt;How to dispatch an action on load?&lt;/a&gt; | |162| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-connect-from-react-redux&quot;&gt;How to use connect from React Redux?&lt;/a&gt; | |163| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-reset-state-in-redux&quot;&gt;How to reset state in Redux?&lt;/a&gt; | |164| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#whats-the-purpose-of-at-symbol-in-the-redux-connect-decorator&quot;&gt;Whats the purpose of at symbol in the redux connect decorator?&lt;/a&gt; | |165| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-context-and-react-redux&quot;&gt;What is the difference between React context and React Redux?&lt;/a&gt; | |166| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-redux-state-functions-called-reducers&quot;&gt;Why are Redux state functions called reducers?&lt;/a&gt; | |167| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-make-ajax-request-in-redux&quot;&gt;How to make AJAX request in Redux?&lt;/a&gt; | |168| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#should-i-keep-all-components-state-in-redux-store&quot;&gt;Should I keep all component‚Äôs state in Redux store?&lt;/a&gt; | |169| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-proper-way-to-access-redux-store&quot;&gt;What is the proper way to access Redux store?&lt;/a&gt; | |170| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-component-and-container-in-react-redux&quot;&gt;What is the difference between component and container in React Redux?&lt;/a&gt; | |171| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-the-constants-in-redux&quot;&gt;What is the purpose of the constants in Redux? &lt;/a&gt; | |172| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-different-ways-to-write-mapdispatchtoprops&quot;&gt;What are the different ways to write mapDispatchToProps()?&lt;/a&gt; | |173| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-the-ownprops-parameter-in-mapstatetoprops-and-mapdispatchtoprops&quot;&gt;What is the use of the ownProps parameter in mapStateToProps() and mapDispatchToProps()?&lt;/a&gt; | |174| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-structure-redux-top-level-directories&quot;&gt;How to structure Redux top level directories?&lt;/a&gt; | |175| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-saga&quot;&gt;What is redux-saga?&lt;/a&gt; | |176| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-mental-model-of-redux-saga&quot;&gt;What is the mental model of redux-saga?&lt;/a&gt; | |177| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-call-and-put-in-redux-saga&quot;&gt;What are the differences between call and put in redux-saga&lt;/a&gt; | |178| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-thunk&quot;&gt;What is Redux Thunk?&lt;/a&gt; | |179| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-redux-saga-and-redux-thunk&quot;&gt;What are the differences between redux-saga and redux-thunk&lt;/a&gt; | |180| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-devtools&quot;&gt;What is Redux DevTools?&lt;/a&gt; | |181| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-features-of-redux-devtools&quot;&gt;What are the features of Redux DevTools?&lt;/a&gt; | |182| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-redux-selectors-and-why-to-use-them&quot;&gt;What are Redux selectors and Why to use them?&lt;/a&gt; | |183| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-form&quot;&gt;What is Redux Form?&lt;/a&gt; | |184| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-redux-form&quot;&gt;What are the main features of Redux Form?&lt;/a&gt; | |185| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-multiple-middlewares-to-redux&quot;&gt;How to add multiple middlewares to Redux?&lt;/a&gt; | |186| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-set-initial-state-in-redux&quot;&gt;How to set initial state in Redux?&lt;/a&gt; | |187| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-relay-is-different-from-redux&quot;&gt;How Relay is different from Redux?&lt;/a&gt; | |188| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-an-action-in-redux&quot;&gt;What is an action in Redux?&lt;/a&gt; | | | &lt;strong&gt;React Native&lt;/strong&gt; | |188| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-native-and-react&quot;&gt;What is the difference between React Native and React?&lt;/a&gt; | |189| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-test-react-native-apps&quot;&gt;How to test React Native apps?&lt;/a&gt; | |190| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-do-logging-in-react-native&quot;&gt;How to do logging in React Native?&lt;/a&gt; | |191| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-debug-your-react-native&quot;&gt;How to debug your React Native?&lt;/a&gt; | | | &lt;strong&gt;React supported libraries and Integration&lt;/strong&gt; | |192| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reselect-and-how-it-works&quot;&gt;What is reselect and how it works?&lt;/a&gt; | |193| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-flow&quot;&gt;What is Flow?&lt;/a&gt; | |194| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-flow-and-proptypes&quot;&gt;What is the difference between Flow and PropTypes?&lt;/a&gt; | |195| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-font-awesome-icons-in-react&quot;&gt;How to use font-awesome icons in React?&lt;/a&gt; | |196| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-dev-tools&quot;&gt;What is React Dev Tools?&lt;/a&gt; | |197| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-devtools-not-loading-in-chrome-for-local-files&quot;&gt;Why is DevTools not loading in Chrome for local files?&lt;/a&gt; | |198| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-polymer-in-react&quot;&gt;How to use Polymer in React?&lt;/a&gt; | |199| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-react-over-vuejs&quot;&gt;What are the advantages of React over Vue.js?&lt;/a&gt; | |200| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-and-angular&quot;&gt;What is the difference between React and Angular?&lt;/a&gt; | |201| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-react-tab-is-not-showing-up-in-devtools&quot;&gt;Why React tab is not showing up in DevTools?&lt;/a&gt; | |202| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-styled-components&quot;&gt;What are styled components?&lt;/a&gt; | |203| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-of-styled-components&quot;&gt;Give an example of Styled Components?&lt;/a&gt; | |204| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-relay&quot;&gt;What is Relay?&lt;/a&gt; | |205| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-typescript-in-create-react-app-application&quot;&gt;How to use TypeScript in create-react-app application?&lt;/a&gt; | | | &lt;strong&gt;Miscellaneous&lt;/strong&gt; | |206| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-reselect-library&quot;&gt;What are the main features of reselect library?&lt;/a&gt; | |207| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-of-reselect-usage&quot;&gt;Give an example of reselect usage?&lt;/a&gt; | |209| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-the-statics-object-work-with-es6-classes-in-react&quot;&gt;Does the statics object work with ES6 classes in React?&lt;/a&gt; | |210| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-redux-only-be-used-with-react&quot;&gt;Can Redux only be used with React?&lt;/a&gt; | |211| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-you-need-to-have-a-particular-build-tool-to-use-redux&quot;&gt;Do you need to have a particular build tool to use Redux?&lt;/a&gt; | |212| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-redux-form-initialvalues-get-updated-from-state&quot;&gt;How Redux Form initialValues get updated from state?&lt;/a&gt; | |213| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-react-proptypes-allow-different-types-for-one-prop&quot;&gt;How React PropTypes allow different type for one prop?&lt;/a&gt; | |214| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-import-an-svg-file-as-react-component&quot;&gt;Can I import an SVG file as react component?&lt;/a&gt; | |215| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-inline-ref-callbacks-or-functions-not-recommended&quot;&gt;Why are inline ref callbacks or functions not recommended?&lt;/a&gt;| |216| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-render-hijacking-in-react&quot;&gt;What is render hijacking in React?&lt;/a&gt;| |217| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-hoc-factory-implementations&quot;&gt;What are HOC factory implementations?&lt;/a&gt;| |218| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-numbers-to-react-component&quot;&gt;How to pass numbers to React component?&lt;/a&gt;| |219| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-i-need-to-keep-all-my-state-into-redux-should-i-ever-use-react-internal-state&quot;&gt;Do I need to keep all my state into Redux? Should I ever use react internal state?&lt;/a&gt;| |220| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-registerserviceworker-in-react&quot;&gt;What is the purpose of registerServiceWorker in React?&lt;/a&gt;| |221| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-memo-function&quot;&gt;What is React memo function?&lt;/a&gt;| |222| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-lazy-function&quot;&gt;What is React lazy function?&lt;/a&gt;| |223| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-unnecessary-updates-using-setstate&quot;&gt;How to prevent unnecessary updates using setState?&lt;/a&gt;| |224| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-render-array-strings-and-numbers-in-react-16-version&quot;&gt;How do you render Array, Strings and Numbers in React 16 Version?&lt;/a&gt;| |225| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-class-field-declarations-syntax-in-react-classes&quot;&gt;How to use class field declarations syntax in React classes?&lt;/a&gt;| |226| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-hooks&quot;&gt;What are hooks?&lt;/a&gt;| |227| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-rules-needs-to-follow-for-hooks&quot;&gt;What are the rules needs to follow for hooks?&lt;/a&gt;| |228| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-ensure-hooks-followed-the-rules-in-your-project&quot;&gt;How to ensure hooks followed the rules in your project?&lt;/a&gt;| |229| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-flux-and-redux&quot;&gt;What are the differences between Flux and Redux?&lt;/a&gt;| |230| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-react-router-v4&quot;&gt;What are the benefits of React Router V4?&lt;/a&gt;| |231| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-describe-about-componentdidcatch-lifecycle-method-signature&quot;&gt;Can you describe about componentDidCatch lifecycle method signature?&lt;/a&gt;| |232| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#in-which-scenarios-error-boundaries-do-not-catch-errors&quot;&gt;In which scenarios error boundaries do not catch errors?&lt;/a&gt;| |233| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-not-need-error-boundaries-for-event-handlers&quot;&gt;Why do you not need error boundaries for event handlers?&lt;/a&gt;| |234| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-try-catch-block-and-error-boundaries&quot;&gt;What is the difference between try catch block and error boundaries?&lt;/a&gt;| |235| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-behavior-of-uncaught-errors-in-react-16&quot;&gt;What is the behavior of uncaught errors in react 16?&lt;/a&gt;| |236| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-proper-placement-for-error-boundaries&quot;&gt;What is the proper placement for error boundaries?&lt;/a&gt;| |237| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-component-stack-trace-from-error-boundary&quot;&gt;What is the benefit of component stack trace from error boundary?&lt;/a&gt;| |238| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-required-method-to-be-defined-for-a-class-component&quot;&gt;What is the required method to be defined for a class component?&lt;/a&gt;| |239| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-possible-return-types-of-render-method&quot;&gt;What are the possible return types of render method?&lt;/a&gt;| |240| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-main-purpose-of-constructor&quot;&gt;What is the main purpose of constructor?&lt;/a&gt;| |241| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-mandatory-to-define-constructor-for-react-component&quot;&gt;Is it mandatory to define constructor for React component?&lt;/a&gt;| |242| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-default-props&quot;&gt;What are default props?&lt;/a&gt;| |243| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-not-call-setstate-in-componentwillunmount&quot;&gt;Why should not call setState in componentWillUnmount?&lt;/a&gt;| |244| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getderivedstatefromerror&quot;&gt;What is the purpose of getDerivedStateFromError?&lt;/a&gt;| |245| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-methods-order-when-component-re-rendered&quot;&gt;What is the methods order when component re-rendered?&lt;/a&gt;| |246| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-methods-invoked-during-error-handling&quot;&gt;What are the methods invoked during error handling?&lt;/a&gt;| |247| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-displayname-class-property&quot;&gt;What is the purpose of displayName class property?&lt;/a&gt;| |248| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-browser-support-for-react-applications&quot;&gt;What is the browser support for react applications?&lt;/a&gt;| |249| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-unmountcomponentatnode-method&quot;&gt;What is the purpose of unmountComponentAtNode method?&lt;/a&gt;| |250| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-code-splitting&quot;&gt;What is code-splitting?&lt;/a&gt;| |251| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-strict-mode&quot;&gt;What is the benefit of strict mode?&lt;/a&gt;| |252| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-keyed-fragments&quot;&gt;What are Keyed Fragments?&lt;/a&gt;| |253| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-react-support-all-html-attributes&quot;&gt;Does React support all HTML attributes?&lt;/a&gt;| |254| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-limitations-with-hocs&quot;&gt;What are the limitations with HOCs?&lt;/a&gt;| |255| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-debug-forwardrefs-in-devtools&quot;&gt;How to debug forwardRefs in DevTools?&lt;/a&gt;| |256| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-component-props-defaults-to-true&quot;&gt;When component props defaults to true?&lt;/a&gt;| |257| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-nextjs-and-major-features-of-it&quot;&gt;What is NextJS and major features of it?&lt;/a&gt;| |258| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-pass-an-event-handler-to-a-component&quot;&gt;How do you pass an event handler to a component?&lt;/a&gt;| |259| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-good-to-use-arrow-functions-in-render-methods&quot;&gt;Is it good to use arrow functions in render methods?&lt;/a&gt;| |260| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-a-function-from-being-called-multiple-times&quot;&gt;How to prevent a function from being called multiple times?&lt;/a&gt;| |261| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-jsx-prevents-injection-attacks&quot;&gt;How JSX prevents Injection Attacks?&lt;/a&gt;| |262| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-update-rendered-elements&quot;&gt;How do you update rendered elements?&lt;/a&gt;| |263| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-say-that-props-are-read-only&quot;&gt;How do you say that props are read only?&lt;/a&gt;| |264| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-say-that-state-updates-are-merged&quot;&gt;How do you say that state updates are merged?&lt;/a&gt;| |265| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-pass-arguments-to-an-event-handler&quot;&gt;How do you pass arguments to an event handler?&lt;/a&gt;| |266| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-component-from-rendering&quot;&gt;How to prevent component from rendering?&lt;/a&gt;| |267| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-conditions-to-safely-use-the-index-as-a-key&quot;&gt;What are the conditions to safely use the index as a key?&lt;/a&gt;| |268| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-keys-should-be-globally-unique&quot;&gt;Is it keys should be globally unique?&lt;/a&gt;| |269| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-popular-choice-for-form-handling&quot;&gt;What is the popular choice for form handling?&lt;/a&gt;| |270| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-formik-over-redux-form-library&quot;&gt;What are the advantages of formik over redux form library?&lt;/a&gt;| |271| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-not-required-to-use-inheritance&quot;&gt;Why do you not required to use inheritance?&lt;/a&gt;| |272| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-web-components-in-react-application&quot;&gt;Can I use web components in react application?&lt;/a&gt;| |273| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-dynamic-import&quot;&gt;What is dynamic import?&lt;/a&gt;| |274| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-loadable-components&quot;&gt;What are loadable components?&lt;/a&gt;| |275| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-suspense-component&quot;&gt;What is suspense component?&lt;/a&gt;| |276| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-route-based-code-splitting&quot;&gt;What is route based code splitting?&lt;/a&gt;| |277| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-on-how-to-use-context&quot;&gt;Give an example on How to use context?&lt;/a&gt;| |278| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-default-value-in-context&quot;&gt;What is the purpose of default value in context?&lt;/a&gt;| |279| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-use-contexttype&quot;&gt;How do you use contextType?&lt;/a&gt;| |280| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-consumer&quot;&gt;What is a consumer?&lt;/a&gt;| |281| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-solve-performance-corner-cases-while-using-context&quot;&gt;How do you solve performance corner cases while using context?&lt;/a&gt;| |282| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-forward-ref-in-hocs&quot;&gt;What is the purpose of forward ref in HOCs?&lt;/a&gt;| |283| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-ref-argument-available-for-all-functions-or-class-components&quot;&gt;Is it ref argument available for all functions or class components?&lt;/a&gt;| |284| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-need-additional-care-for-component-libraries-while-using-forward-refs&quot;&gt;Why do you need additional care for component libraries while using forward refs?&lt;/a&gt;| |285| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-react-class-components-without-es6&quot;&gt;How to create react class components without ES6?&lt;/a&gt;| |286| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-react-without-jsx&quot;&gt;Is it possible to use react without JSX?&lt;/a&gt;| |287| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-diffing-algorithm&quot;&gt;What is diffing algorithm?&lt;/a&gt;| |288| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-rules-covered-by-diffing-algorithm&quot;&gt;What are the rules covered by diffing algorithm?&lt;/a&gt;| |289| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-do-you-need-to-use-refs&quot;&gt;When do you need to use refs?&lt;/a&gt;| |290| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-prop-must-be-named-as-render-for-render-props&quot;&gt;Is it prop must be named as render for render props?&lt;/a&gt;| |291| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-problems-of-using-render-props-with-pure-components&quot;&gt;What are the problems of using render props with pure components?&lt;/a&gt;| |292| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-create-hoc-using-render-props&quot;&gt;How do you create HOC using render props?&lt;/a&gt;| |293| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-windowing-technique&quot;&gt;What is windowing technique?&lt;/a&gt;| |294| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-print-falsy-values-in-jsx&quot;&gt;How do you print falsy values in JSX?&lt;/a&gt;| |295| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-typical-use-case-of-portals?&quot;&gt;What is the typical use case of portals?&lt;/a&gt;| |296| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-set-default-value-for-uncontrolled-component&quot;&gt;How do you set default value for uncontrolled component?&lt;/a&gt;| |297| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-your-favorite-react-stack&quot;&gt;What is your favorite React stack?&lt;/a&gt;| |298| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-real-dom-and-virtual-dom&quot;&gt;What is the difference between Real DOM and Virtual DOM?&lt;/a&gt;| |299| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-bootstrap-to-a-react-application&quot;&gt;How to add Bootstrap to a react application?&lt;/a&gt;| |300| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-list-down-top-websites-or-applications-using-react-as-front-end-framework&quot;&gt;Can you list down top websites or applications using react as front end framework?&lt;/a&gt;| |301| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-recommended-to-use-css-in-js-technique-in-react&quot;&gt;Is it recommended to use CSS In JS technique in React?&lt;/a&gt;| |302| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-i-need-to-rewrite-all-my-class-components-with-hooks&quot;&gt;Do I need to rewrite all my class components with hooks?&lt;/a&gt;| |303| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-fetch-data-with-react-hooks&quot;&gt;How to fetch data with React Hooks?&lt;/a&gt;| |304| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-hooks-cover-all-use-cases-for-classes&quot;&gt;Is Hooks cover all use cases for classes?&lt;/a&gt;| |305| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-stable-release-for-hooks-support&quot;&gt;What is the stable release for hooks support?&lt;/a&gt;| |306| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-we-use-array-destructuring-square-brackets-notation-in-usestate&quot;&gt;Why do we use array destructuring (square brackets notation) in useState?&lt;/a&gt;| |307| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-sources-used-for-introducing-hooks&quot;&gt;What are the sources used for introducing hooks?&lt;/a&gt;| |308| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-access-imperative-api-of-web-components&quot;&gt;How do you access imperative API of web components?&lt;/a&gt;| |309| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-formik&quot;&gt;What is formik?&lt;/a&gt;| |310| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-typical-middleware-choices-for-handling-asynchronous-calls-in-redux&quot;&gt;What are typical middleware choices for handling asynchronous calls in Redux?&lt;/a&gt;| |311| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-browsers-understand-jsx-code&quot;&gt;Do browsers understand JSX code?&lt;/a&gt;| |312| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#describe-about-data-flow-in-react&quot;&gt;Describe about data flow in react?&lt;/a&gt;| |313| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-scripts&quot;&gt;What is react scripts?&lt;/a&gt;| |314| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-features-of-create-react-app&quot;&gt;What are the features of create react app?&lt;/a&gt;| |315| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-rendertonodestream-method&quot;&gt;What is the purpose of renderToNodeStream method?&lt;/a&gt;| |316| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-mobx&quot;&gt;What is MobX?&lt;/a&gt;| |317| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-redux-and-mobx&quot;&gt;What are the differences between Redux and MobX?&lt;/a&gt;| |318| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#should-i-learn-es6-before-learning-reactjs&quot;&gt;Should I learn ES6 before learning ReactJS?&lt;/a&gt;| |319| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-concurrent-rendering&quot;&gt;What is Concurrent Rendering?&lt;/a&gt;| |320| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-async-mode-and-concurrent-mode&quot;&gt;What is the difference between async mode and concurrent mode?&lt;/a&gt;| |321| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-javascript-urls-in-react169&quot;&gt;Can I use javascript urls in react16.9?&lt;/a&gt;| |322| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-eslint-plugin-for-hooks&quot;&gt;What is the purpose of eslint plugin for hooks?&lt;/a&gt;| |323| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-imperative-and-declarative-in-react&quot;&gt;What is the difference between Imperative and Declarative in React?&lt;/a&gt;| |324| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-using-typescript-with-reactjs&quot;&gt;What are the benefits of using typescript with reactjs?&lt;/a&gt;| |325| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-make-sure-that-user-remains-authenticated-on-page-refresh-while-using-context-api-state-management&quot;&gt;How do you make sure that user remains authenticated on page refresh while using Context API State Management?&lt;/a&gt;| |326| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-new-jsx-transform&quot;&gt;What are the benefits of new JSX transform?&lt;/a&gt;| |327| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-does-new-jsx-transform-different-from-old-transform&quot;&gt;How does new JSX transform different from old transform?&lt;/a&gt;| |328| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-get-redux-scaffolding-using-create-react-app&quot;&gt;How do you get redux scaffolding using create-react-app?&lt;/a&gt;| |329| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-react-server-components&quot;&gt;What are React Server components?&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Core React&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;h3&gt;What is React?&lt;/h3&gt; &lt;p&gt;React is an &lt;strong&gt;open-source frontend JavaScript library&lt;/strong&gt; which is used for building user interfaces especially for single page applications. It is used for handling view layer for web and mobile apps. React was created by &lt;a href=&quot;https://github.com/jordwalke&quot;&gt;Jordan Walke&lt;/a&gt;, a software engineer working for Facebook. React was first deployed on Facebook‚Äôs News Feed in 2011 and on Instagram in 2012.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the major features of React?&lt;/h3&gt; &lt;p&gt;The major features of React are:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;It uses &lt;strong&gt;VirtualDOM&lt;/strong&gt; instead of RealDOM considering that RealDOM manipulations are expensive.&lt;/li&gt; 
   &lt;li&gt;Supports &lt;strong&gt;server-side rendering&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Follows &lt;strong&gt;Unidirectional&lt;/strong&gt; data flow or data binding.&lt;/li&gt; 
   &lt;li&gt;Uses &lt;strong&gt;reusable/composable&lt;/strong&gt; UI components to develop the view.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is JSX?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;JSX&lt;/em&gt; is a XML-like syntax extension to ECMAScript (the acronym stands for &lt;em&gt;JavaScript XML&lt;/em&gt;). Basically it just provides syntactic sugar for the &lt;code&gt;React.createElement()&lt;/code&gt; function, giving us expressiveness of JavaScript along with HTML like template syntax.&lt;/p&gt; &lt;p&gt;In the example below text inside &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag is returned as JavaScript function to the render function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class App extends React.Component {
  render() {
    return(
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;{&#39;Welcome to React world!&#39;}&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Element and Component?&lt;/h3&gt; &lt;p&gt;An &lt;em&gt;Element&lt;/em&gt; is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. &lt;em&gt;Elements&lt;/em&gt; can contain other &lt;em&gt;Elements&lt;/em&gt; in their props. Creating a React element is cheap. Once an element is created, it is never mutated.&lt;/p&gt; &lt;p&gt;The object representation of React Element would be as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const element = React.createElement(
  &#39;div&#39;,
  {id: &#39;login-btn&#39;},
  &#39;Login&#39;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above &lt;code&gt;React.createElement()&lt;/code&gt; function returns an object:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{
  type: &#39;div&#39;,
  props: {
    children: &#39;Login&#39;,
    id: &#39;login-btn&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And finally it renders to the DOM using &lt;code&gt;ReactDOM.render()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div id=&#39;login-btn&#39;&amp;gt;Login&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas a &lt;strong&gt;component&lt;/strong&gt; can be declared in several different ways. It can be a class with a &lt;code&gt;render()&lt;/code&gt; method. Alternatively, in simple cases, it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Button = ({ onLogin }) =&amp;gt;
  &amp;lt;div id={&#39;login-btn&#39;} onClick={onLogin}&amp;gt;Login&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then JSX gets transpiled to a &lt;code&gt;React.createElement()&lt;/code&gt; function tree:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Button = ({ onLogin }) =&amp;gt; React.createElement(
  &#39;div&#39;,
  { id: &#39;login-btn&#39;, onClick: onLogin },
  &#39;Login&#39;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to create components in React?&lt;/h3&gt; &lt;p&gt;There are two possible ways to create a component.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Function Components:&lt;/strong&gt; This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as first parameter and return React elements:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function Greeting({ message }) {
  return &amp;lt;h1&amp;gt;{`Hello, ${message}`}&amp;lt;/h1&amp;gt;

}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Class Components:&lt;/strong&gt; You can also use ES6 class to define a component. The above function component can be written as:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class Greeting extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;{`Hello, ${this.props.message}`}&amp;lt;/h1&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;When to use a Class Component over a Function Component?&lt;/h3&gt; &lt;p&gt;If the component needs &lt;em&gt;state or lifecycle methods&lt;/em&gt; then use class component otherwise use function component. &lt;em&gt;However, from React 16.8 with the addition of Hooks, you could use state , lifecycle methods and other features that were only available in class component right in your function component.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are Pure Components?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;&lt;code&gt;React.PureComponent&lt;/code&gt;&lt;/em&gt; is exactly the same as &lt;em&gt;&lt;code&gt;React.Component&lt;/code&gt;&lt;/em&gt; except that it handles the &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; method for you. When props or state changes, &lt;em&gt;PureComponent&lt;/em&gt; will do a shallow comparison on both props and state. &lt;em&gt;Component&lt;/em&gt; on the other hand won‚Äôt compare current props and state to next out of the box. Thus, the component will re-render by default whenever &lt;code&gt;shouldComponentUpdate&lt;/code&gt; is called.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is state in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;State&lt;/em&gt; of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components.&lt;/p&gt; &lt;p&gt;Let‚Äôs create a user component with message state,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class User extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      message: &#39;Welcome to React world&#39;
    }
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;{this.state.message}&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/state.jpg&quot; alt=&quot;state&quot;&gt;&lt;/p&gt; &lt;p&gt;State is similar to props, but it is private and fully controlled by the component. i.e, It is not accessible to any other component til the owner component decides to pass it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are props in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Props&lt;/em&gt; are inputs to components. They are single values or objects containing a set of values that are passed to components on creation using a naming convention similar to HTML-tag attributes. They are data passed down from a parent component to a child component.&lt;/p&gt; &lt;p&gt;The primary purpose of props in React is to provide following component functionality:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Pass custom data to your component.&lt;/li&gt; 
   &lt;li&gt;Trigger state changes.&lt;/li&gt; 
   &lt;li&gt;Use via &lt;code&gt;this.props.reactProp&lt;/code&gt; inside component‚Äôs &lt;code&gt;render()&lt;/code&gt; method.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;For example, let us create an element with &lt;code&gt;reactProp&lt;/code&gt; property:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Element reactProp={&#39;1&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This &lt;code&gt;reactProp&lt;/code&gt; (or whatever you came up with) name then becomes a property attached to React‚Äôs native props object which originally already exists on all components created using React library.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;props.reactProp
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between state and props?&lt;/h3&gt; &lt;p&gt;Both &lt;em&gt;props&lt;/em&gt; and &lt;em&gt;state&lt;/em&gt; are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;11&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why should we not update the state directly?&lt;/h3&gt; &lt;p&gt;If you try to update state directly then it won‚Äôt re-render the component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Wrong
this.state.message = &#39;Hello world&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead use &lt;code&gt;setState()&lt;/code&gt; method. It schedules an update to a component‚Äôs state object. When state changes, the component responds by re-rendering.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Correct
this.setState({ message: &#39;Hello World&#39; })
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can directly assign to the state object either in &lt;em&gt;constructor&lt;/em&gt; or using latest javascript‚Äôs class field declaration syntax.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;12&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of callback function as an argument of &lt;code&gt;setState()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;The callback function is invoked when setState finished and the component gets rendered. Since &lt;code&gt;setState()&lt;/code&gt; is &lt;strong&gt;asynchronous&lt;/strong&gt; the callback function is used for any post action.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is recommended to use lifecycle method rather than this callback function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;setState({ name: &#39;John&#39; }, () =&amp;gt; console.log(&#39;The name has updated and component re-rendered&#39;))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;13&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between HTML and React event handling?&lt;/h3&gt; &lt;p&gt;Below are some of the main differences between HTML and React event handling,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;In HTML, the event name usually represents in &lt;em&gt;lowercase&lt;/em&gt; as a convention:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button onclick=&#39;activateLasers()&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in React it follows &lt;em&gt;camelCase&lt;/em&gt; convention:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={activateLasers}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;In HTML, you can return &lt;code&gt;false&lt;/code&gt; to prevent default behavior:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&#39;#&#39; onclick=&#39;console.log(&quot;The link was clicked.&quot;); return false;&#39; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in React you must call &lt;code&gt;preventDefault()&lt;/code&gt; explicitly:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function handleClick(event) {
  event.preventDefault()
  console.log(&#39;The link was clicked.&#39;)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;In HTML, you need to invoke the function by appending &lt;code&gt;()&lt;/code&gt; Whereas in react you should not append &lt;code&gt;()&lt;/code&gt; with the function name. (refer ‚ÄúactivateLasers‚Äù function in the first point for example)&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;14&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to bind methods or event handlers in JSX callbacks?&lt;/h3&gt; &lt;p&gt;There are 3 possible ways to achieve this:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Binding in Constructor:&lt;/strong&gt; In JavaScript classes, the methods are not bound by default. The same thing applies for React event handlers defined as class methods. Normally we bind them in constructor.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Component extends React.Component {
  constructor(props) {
    super(props)
    this.handleClick = this.handleClick.bind(this)
  }

  handleClick() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Public class fields syntax:&lt;/strong&gt; If you don‚Äôt like to use bind approach then &lt;em&gt;public class fields syntax&lt;/em&gt; can be used to correctly bind callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;handleClick = () =&amp;gt; {
  console.log(&#39;this is:&#39;, this)
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;
  {&#39;Click me&#39;}
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arrow functions in callbacks:&lt;/strong&gt; You can use &lt;em&gt;arrow functions&lt;/em&gt; directly in the callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={(event) =&amp;gt; this.handleClick(event)}&amp;gt;
  {&#39;Click me&#39;}
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the callback is passed as prop to child components, those components might do an extra re-rendering. In those cases, it is preferred to go with &lt;code&gt;.bind()&lt;/code&gt; or &lt;em&gt;public class fields syntax&lt;/em&gt; approach considering performance.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;15&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to pass a parameter to an event handler or callback?&lt;/h3&gt; &lt;p&gt;You can use an &lt;em&gt;arrow function&lt;/em&gt; to wrap around an &lt;em&gt;event handler&lt;/em&gt; and pass parameters:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={() =&amp;gt; this.handleClick(id)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is an equivalent to calling &lt;code&gt;.bind&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={this.handleClick.bind(this, id)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Apart from these two approaches, you can also pass arguments to a function which is defined as arrow function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={this.handleClick(id)} /&amp;gt;
handleClick = (id) =&amp;gt; () =&amp;gt; {
    console.log(&quot;Hello, your ticket number is&quot;, id)
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;16&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are synthetic events in React?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;SyntheticEvent&lt;/code&gt; is a cross-browser wrapper around the browser‚Äôs native event. It‚Äôs API is same as the browser‚Äôs native event, including &lt;code&gt;stopPropagation()&lt;/code&gt; and &lt;code&gt;preventDefault()&lt;/code&gt;, except the events work identically across all browsers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;17&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are inline conditional expressions?&lt;/h3&gt; &lt;p&gt;You can use either &lt;em&gt;if statements&lt;/em&gt; or &lt;em&gt;ternary expressions&lt;/em&gt; which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;
{
    messages.length &amp;gt; 0 &amp;amp;&amp;amp; !isLogin?
      &amp;lt;h2&amp;gt;
          You have {messages.length} unread messages.
      &amp;lt;/h2&amp;gt;
      :
      &amp;lt;h2&amp;gt;
          You don&#39;t have unread messages.
      &amp;lt;/h2&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;18&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is ‚Äúkey‚Äù prop and what is the benefit of using it in arrays of elements?&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;key&lt;/code&gt; is a special string attribute you &lt;strong&gt;should&lt;/strong&gt; include when creating arrays of elements. &lt;em&gt;Key&lt;/em&gt; prop helps React identify which items have changed, are added, or are removed.&lt;/p&gt; &lt;p&gt;Most often we use ID from our data as &lt;em&gt;key&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const todoItems = todos.map((todo) =&amp;gt;
  &amp;lt;li key={todo.id}&amp;gt;
    {todo.text}
  &amp;lt;/li&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you don‚Äôt have stable IDs for rendered items, you may use the item &lt;em&gt;index&lt;/em&gt; as a &lt;em&gt;key&lt;/em&gt; as a last resort:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const todoItems = todos.map((todo, index) =&amp;gt;
  &amp;lt;li key={index}&amp;gt;
    {todo.text}
  &amp;lt;/li&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Using &lt;em&gt;indexes&lt;/em&gt; for &lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;not recommended&lt;/strong&gt; if the order of items may change. This can negatively impact performance and may cause issues with component state.&lt;/li&gt; 
   &lt;li&gt;If you extract list item as separate component then apply &lt;em&gt;keys&lt;/em&gt; on list component instead of &lt;code&gt;li&lt;/code&gt; tag.&lt;/li&gt; 
   &lt;li&gt;There will be a warning message in the console if the &lt;code&gt;key&lt;/code&gt; prop is not present on list items.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;19&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of refs?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;ref&lt;/em&gt; is used to return a reference to the element. They &lt;em&gt;should be avoided&lt;/em&gt; in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;20&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to create refs?&lt;/h3&gt; &lt;p&gt;There are two approaches&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;This is a recently added approach. &lt;em&gt;Refs&lt;/em&gt; are created using &lt;code&gt;React.createRef()&lt;/code&gt; method and attached to React elements via the &lt;code&gt;ref&lt;/code&gt; attribute. In order to use &lt;em&gt;refs&lt;/em&gt; throughout the component, just assign the &lt;em&gt;ref&lt;/em&gt; to the instance property within constructor.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    this.myRef = React.createRef()
  }
  render() {
    return &amp;lt;div ref={this.myRef} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also use ref callbacks approach regardless of React version. For example, the search bar component‚Äôs input element accessed as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class SearchBar extends Component {
   constructor(props) {
      super(props);
      this.txtSearch = null;
      this.state = { term: &#39;&#39; };
      this.setInputSearchRef = e =&amp;gt; {
         this.txtSearch = e;
      }
   }
   onInputChange(event) {
      this.setState({ term: this.txtSearch.value });
   }
   render() {
      return (
         &amp;lt;input
            value={this.state.term}
            onChange={this.onInputChange.bind(this)}
            ref={this.setInputSearchRef} /&amp;gt;
      );
   }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;You can also use &lt;em&gt;refs&lt;/em&gt; in function components using &lt;strong&gt;closures&lt;/strong&gt;. &lt;strong&gt;Note&lt;/strong&gt;: You can also use inline ref callbacks even though it is not a recommended approach&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;21&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are forward refs?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Ref forwarding&lt;/em&gt; is a feature that lets some components take a &lt;em&gt;ref&lt;/em&gt; they receive, and pass it further down to a child.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const ButtonElement = React.forwardRef((props, ref) =&amp;gt; (
  &amp;lt;button ref={ref} className=&quot;CustomButton&quot;&amp;gt;
    {props.children}
  &amp;lt;/button&amp;gt;
));

// Create ref to the DOM button:
const ref = React.createRef();
&amp;lt;ButtonElement ref={ref}&amp;gt;{&#39;Forward Ref&#39;}&amp;lt;/ButtonElement&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;22&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Which is preferred option with in callback refs and findDOMNode()?&lt;/h3&gt; &lt;p&gt;It is preferred to use &lt;em&gt;callback refs&lt;/em&gt; over &lt;code&gt;findDOMNode()&lt;/code&gt; API. Because &lt;code&gt;findDOMNode()&lt;/code&gt; prevents certain improvements in React in the future.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;legacy&lt;/strong&gt; approach of using &lt;code&gt;findDOMNode&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends Component {
  componentDidMount() {
    findDOMNode(this).scrollIntoView()
  }

  render() {
    return &amp;lt;div /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The recommended approach is:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends Component {
  constructor(props){
    super(props);
    this.node = createRef();
  }
  componentDidMount() {
    this.node.current.scrollIntoView();
  }

  render() {
    return &amp;lt;div ref={this.node} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;23&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why are String Refs legacy?&lt;/h3&gt; &lt;p&gt;If you worked with React before, you might be familiar with an older API where the &lt;code&gt;ref&lt;/code&gt; attribute is a string, like &lt;code&gt;ref={&#39;textInput&#39;}&lt;/code&gt;, and the DOM node is accessed as &lt;code&gt;this.refs.textInput&lt;/code&gt;. We advise against it because &lt;em&gt;string refs have below issues&lt;/em&gt;, and are considered legacy. String refs were &lt;strong&gt;removed in React v16&lt;/strong&gt;.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;They &lt;em&gt;force React to keep track of currently executing component&lt;/em&gt;. This is problematic because it makes react module stateful, and thus causes weird errors when react module is duplicated in the bundle.&lt;/li&gt; 
   &lt;li&gt;They are &lt;em&gt;not composable&lt;/em&gt; ‚Äî if a library puts a ref on the passed child, the user can‚Äôt put another ref on it. Callback refs are perfectly composable.&lt;/li&gt; 
   &lt;li&gt;They &lt;em&gt;don‚Äôt work with static analysis&lt;/em&gt; like Flow. Flow can‚Äôt guess the magic that framework does to make the string ref appear on &lt;code&gt;this.refs&lt;/code&gt;, as well as its type (which could be different). Callback refs are friendlier to static analysis.&lt;/li&gt; 
   &lt;li&gt;It doesn‚Äôt work as most people would expect with the ‚Äúrender callback‚Äù pattern (e.g. 
    &lt;datagrid renderRow=&quot;{this.renderRow}&quot; /&gt;) &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends Component {
  renderRow = (index) =&amp;gt; {
    // This won&#39;t work. Ref will get attached to DataTable rather than MyComponent:
    return &amp;lt;input ref={&#39;input-&#39; + index} /&amp;gt;;

    // This would work though! Callback refs are awesome.
    return &amp;lt;input ref={input =&amp;gt; this[&#39;input-&#39; + index] = input} /&amp;gt;;
  }

  render() {
    return &amp;lt;DataTable data={this.props.data} renderRow={this.renderRow} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;24&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Virtual DOM?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Virtual DOM&lt;/em&gt; (VDOM) is an in-memory representation of &lt;em&gt;Real DOM&lt;/em&gt;. The representation of a UI is kept in memory and synced with the ‚Äúreal‚Äù DOM. It‚Äôs a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called &lt;em&gt;reconciliation&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;25&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How Virtual DOM works?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Virtual DOM&lt;/em&gt; works in three simple steps.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Whenever any underlying data changes, the entire UI is re-rendered in Virtual DOM representation.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom1.png&quot; alt=&quot;vdom&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Then the difference between the previous DOM representation and the new one is calculated.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom2.png&quot; alt=&quot;vdom2&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Once the calculations are done, the real DOM will be updated with only the things that have actually changed.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom3.png&quot; alt=&quot;vdom3&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;26&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Shadow DOM and Virtual DOM?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Shadow DOM&lt;/em&gt; is a browser technology designed primarily for scoping variables and CSS in &lt;em&gt;web components&lt;/em&gt;. The &lt;em&gt;Virtual DOM&lt;/em&gt; is a concept implemented by libraries in JavaScript on top of browser APIs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;27&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Fiber?&lt;/h3&gt; &lt;p&gt;Fiber is the new &lt;em&gt;reconciliation&lt;/em&gt; engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;28&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main goal of React Fiber?&lt;/h3&gt; &lt;p&gt;The goal of &lt;em&gt;React Fiber&lt;/em&gt; is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is &lt;strong&gt;incremental rendering&lt;/strong&gt;: the ability to split rendering work into chunks and spread it out over multiple frames.&lt;/p&gt; &lt;p&gt;&lt;em&gt;from documentation&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Its main goals are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Ability to split interruptible work in chunks.&lt;/li&gt; 
   &lt;li&gt;Ability to prioritize, rebase and reuse work in progress.&lt;/li&gt; 
   &lt;li&gt;Ability to yield back and forth between parents and children to support layout in React.&lt;/li&gt; 
   &lt;li&gt;Ability to return multiple elements from render().&lt;/li&gt; 
   &lt;li&gt;Better support for error boundaries.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;29&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are controlled components?&lt;/h3&gt; &lt;p&gt;A component that controls the input elements within the forms on subsequent user input is called &lt;strong&gt;Controlled Component&lt;/strong&gt;, i.e, every state mutation will have an associated handler function.&lt;/p&gt; &lt;p&gt;For example, to write all the names in uppercase letters, we use handleChange as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;handleChange(event) {
  this.setState({value: event.target.value.toUpperCase()})
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;30&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are uncontrolled components?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;Uncontrolled Components&lt;/strong&gt; are the ones that store their own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML.&lt;/p&gt; &lt;p&gt;In the below UserProfile component, the &lt;code&gt;name&lt;/code&gt; input is accessed using ref.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class UserProfile extends React.Component {
  constructor(props) {
    super(props)
    this.handleSubmit = this.handleSubmit.bind(this)
    this.input = React.createRef()
  }

  handleSubmit(event) {
    alert(&#39;A name was submitted: &#39; + this.input.current.value)
    event.preventDefault()
  }

  render() {
    return (
      &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
        &amp;lt;label&amp;gt;
          {&#39;Name:&#39;}
          &amp;lt;input type=&quot;text&quot; ref={this.input} /&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&amp;gt;
      &amp;lt;/form&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In most cases, it‚Äôs recommend to use controlled components to implement forms.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;31&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between createElement and cloneElement?&lt;/h3&gt; &lt;p&gt;JSX elements will be transpiled to &lt;code&gt;React.createElement()&lt;/code&gt; functions to create React elements which are going to be used for the object representation of UI. Whereas &lt;code&gt;cloneElement&lt;/code&gt; is used to clone an element and pass it new props.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;32&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Lifting State Up in React?&lt;/h3&gt; &lt;p&gt;When several components need to share the same changing data then it is recommended to &lt;em&gt;lift the shared state up&lt;/em&gt; to their closest common ancestor. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;33&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different phases of component lifecycle?&lt;/h3&gt; &lt;p&gt;The component lifecycle has three distinct lifecycle phases:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mounting:&lt;/strong&gt; The component is ready to mount in the browser DOM. This phase covers initialization from &lt;code&gt;constructor()&lt;/code&gt;, &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt;, &lt;code&gt;render()&lt;/code&gt;, and &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle methods.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Updating:&lt;/strong&gt; In this phase, the component get updated in two ways, sending the new props and updating the state either from &lt;code&gt;setState()&lt;/code&gt; or &lt;code&gt;forceUpdate()&lt;/code&gt;. This phase covers &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt;, &lt;code&gt;shouldComponentUpdate()&lt;/code&gt;, &lt;code&gt;render()&lt;/code&gt;, &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; and &lt;code&gt;componentDidUpdate()&lt;/code&gt; lifecycle methods.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unmounting:&lt;/strong&gt; In this last phase, the component is not needed and get unmounted from the browser DOM. This phase includes &lt;code&gt;componentWillUnmount()&lt;/code&gt; lifecycle method.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;It‚Äôs worth mentioning that React internally has a concept of phases when applying changes to the DOM. They are separated as follows&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Render&lt;/strong&gt; The component will render without any side-effects. This applies for Pure components and in this phase, React can pause, abort, or restart the render.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pre-commit&lt;/strong&gt; Before the component actually applies the changes to the DOM, there is a moment that allows React to read from the DOM through the &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Commit&lt;/strong&gt; React works with the DOM and executes the final lifecycles respectively &lt;code&gt;componentDidMount()&lt;/code&gt; for mounting, &lt;code&gt;componentDidUpdate()&lt;/code&gt; for updating, and &lt;code&gt;componentWillUnmount()&lt;/code&gt; for unmounting.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;React 16.3+ Phases (or an &lt;a href=&quot;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&quot;&gt;interactive version&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/phases16.3.jpg&quot; alt=&quot;phases 16.3+&quot;&gt;&lt;/p&gt; &lt;p&gt;Before React 16.3&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/phases.png&quot; alt=&quot;phases 16.2&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;34&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the lifecycle methods of React?&lt;/h3&gt; &lt;p&gt;Before React 16.3&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillMount:&lt;/strong&gt; Executed before rendering and is used for App level configuration in your root component.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidMount:&lt;/strong&gt; Executed after first rendering and here all AJAX requests, DOM or state updates, and set up event listeners should occur.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillReceiveProps:&lt;/strong&gt; Executed when particular prop updates to trigger state transitions.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;shouldComponentUpdate:&lt;/strong&gt; Determines if the component will be updated or not. By default it returns &lt;code&gt;true&lt;/code&gt;. If you are sure that the component doesn‚Äôt need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives new prop.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillUpdate:&lt;/strong&gt; Executed before re-rendering the component when there are props &amp;amp; state changes confirmed by &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; which returns true.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidUpdate:&lt;/strong&gt; Mostly it is used to update the DOM in response to prop or state changes.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillUnmount:&lt;/strong&gt; It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;React 16.3+&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;getDerivedStateFromProps:&lt;/strong&gt; Invoked right before calling &lt;code&gt;render()&lt;/code&gt; and is invoked on &lt;em&gt;every&lt;/em&gt; render. This exists for rare use cases where you need derived state. Worth reading &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html&quot;&gt;if you need derived state&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidMount:&lt;/strong&gt; Executed after first rendering and where all AJAX requests, DOM or state updates, and set up event listeners should occur.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;shouldComponentUpdate:&lt;/strong&gt; Determines if the component will be updated or not. By default it returns &lt;code&gt;true&lt;/code&gt;. If you are sure that the component doesn‚Äôt need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives new prop.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;getSnapshotBeforeUpdate:&lt;/strong&gt; Executed right before rendered output is committed to the DOM. Any value returned by this will be passed into &lt;code&gt;componentDidUpdate()&lt;/code&gt;. This is useful to capture information from the DOM i.e. scroll position.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidUpdate:&lt;/strong&gt; Mostly it is used to update the DOM in response to prop or state changes. This will not fire if &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillUnmount&lt;/strong&gt; It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;35&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are Higher-Order Components?&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;higher-order component&lt;/em&gt; (&lt;em&gt;HOC&lt;/em&gt;) is a function that takes a component and returns a new component. Basically, it‚Äôs a pattern that is derived from React‚Äôs compositional nature.&lt;/p&gt; &lt;p&gt;We call them &lt;strong&gt;pure components&lt;/strong&gt; because they can accept any dynamically provided child component but they won‚Äôt modify or copy any behavior from their input components.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const EnhancedComponent = higherOrderComponent(WrappedComponent)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;HOC can be used for many use cases:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Code reuse, logic and bootstrap abstraction.&lt;/li&gt; 
   &lt;li&gt;Render hijacking.&lt;/li&gt; 
   &lt;li&gt;State abstraction and manipulation.&lt;/li&gt; 
   &lt;li&gt;Props manipulation.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;36&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to create props proxy for HOC component?&lt;/h3&gt; &lt;p&gt;You can add/edit props passed to the component using &lt;em&gt;props proxy&lt;/em&gt; pattern like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function HOC(WrappedComponent) {
  return class Test extends Component {
    render() {
      const newProps = {
        title: &#39;New Header&#39;,
        footer: false,
        showFeatureX: false,
        showFeatureY: true
      }

      return &amp;lt;WrappedComponent {...this.props} {...newProps} /&amp;gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;37&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is context?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Context&lt;/em&gt; provides a way to pass data through the component tree without having to pass props down manually at every level.&lt;/p&gt; &lt;p&gt;For example, authenticated user, locale preference, UI theme need to be accessed in the application by many components.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const {Provider, Consumer} = React.createContext(defaultValue)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;38&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is children prop?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Children&lt;/em&gt; is a prop (&lt;code&gt;this.props.children&lt;/code&gt;) that allow you to pass components as data to other components, just like any other prop you use. Component tree put between component‚Äôs opening and closing tag will be passed to that component as &lt;code&gt;children&lt;/code&gt; prop.&lt;/p&gt; &lt;p&gt;There are a number of methods available in the React API to work with this prop. These include &lt;code&gt;React.Children.map&lt;/code&gt;, &lt;code&gt;React.Children.forEach&lt;/code&gt;, &lt;code&gt;React.Children.count&lt;/code&gt;, &lt;code&gt;React.Children.only&lt;/code&gt;, &lt;code&gt;React.Children.toArray&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A simple usage of children prop looks as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const MyDiv = React.createClass({
  render: function() {
    return &amp;lt;div&amp;gt;{this.props.children}&amp;lt;/div&amp;gt;
  }
})

ReactDOM.render(
  &amp;lt;MyDiv&amp;gt;
    &amp;lt;span&amp;gt;{&#39;Hello&#39;}&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;{&#39;World&#39;}&amp;lt;/span&amp;gt;
  &amp;lt;/MyDiv&amp;gt;,
  node
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;39&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to write comments in React?&lt;/h3&gt; &lt;p&gt;The comments in React/JSX are similar to JavaScript Multiline comments but are wrapped in curly braces.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Single-line comments:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div&amp;gt;
  {/* Single-line comments(In vanilla JavaScript, the single-line comments are represented by double slash(//)) */}
  {`Welcome ${user}, let&#39;s play React`}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Multi-line comments:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div&amp;gt;
  {/* Multi-line comments for more than
   one line */}
  {`Welcome ${user}, let&#39;s play React`}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;40&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of using super constructor with props argument?&lt;/h3&gt; &lt;p&gt;A child class constructor cannot make use of &lt;code&gt;this&lt;/code&gt; reference until &lt;code&gt;super()&lt;/code&gt; method has been called. The same applies for ES6 sub-classes as well. The main reason of passing props parameter to &lt;code&gt;super()&lt;/code&gt; call is to access &lt;code&gt;this.props&lt;/code&gt; in your child constructors.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Passing props:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)

    console.log(this.props) // prints { name: &#39;John&#39;, age: 42 }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Not passing props:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super()

    console.log(this.props) // prints undefined

    // but props parameter is still available
    console.log(props) // prints { name: &#39;John&#39;, age: 42 }
  }

  render() {
    // no difference outside constructor
    console.log(this.props) // prints { name: &#39;John&#39;, age: 42 }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code snippets reveals that &lt;code&gt;this.props&lt;/code&gt; is different only within the constructor. It would be the same outside the constructor.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;41&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is reconciliation?&lt;/h3&gt; &lt;p&gt;When a component‚Äôs props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called &lt;em&gt;reconciliation&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;42&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to set state with a dynamic key name?&lt;/h3&gt; &lt;p&gt;If you are using ES6 or the Babel transpiler to transform your JSX code then you can accomplish this with &lt;em&gt;computed property names&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;handleInputChange(event) {
  this.setState({ [event.target.id]: event.target.value })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;43&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What would be the common mistake of function being called every time the component renders?&lt;/h3&gt; &lt;p&gt;You need to make sure that function is not being called while passing the function as a parameter.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  // Wrong: handleClick is called instead of passed as a reference!
  return &amp;lt;button onClick={this.handleClick()}&amp;gt;{&#39;Click Me&#39;}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead, pass the function itself without parenthesis:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  // Correct: handleClick is passed as a reference!
  return &amp;lt;button onClick={this.handleClick}&amp;gt;{&#39;Click Me&#39;}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;44&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is lazy function supports named exports?&lt;/h3&gt; No, currently &lt;code&gt;React.lazy&lt;/code&gt; function supports default exports only. If you would like to import modules which are named exports, you can create an intermediate module that reexports it as the default. It also ensures that tree shaking keeps working and don‚Äôt pull unused components. Let‚Äôs take a component file which exports multiple named components, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// MoreComponents.js
export const SomeComponent = /* ... */;
export const UnusedComponent = /* ... */;
&lt;/code&gt;&lt;/pre&gt; and reexport &lt;code&gt;MoreComponents.js&lt;/code&gt; components in an intermediate file &lt;code&gt;IntermediateComponent.js&lt;/code&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// IntermediateComponent.js
export { SomeComponent as default } from &quot;./MoreComponents.js&quot;;
&lt;/code&gt;&lt;/pre&gt; Now you can import the module using lazy function as below, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { lazy } from &#39;react&#39;;
const SomeComponent = lazy(() =&amp;gt; import(&quot;./IntermediateComponent.js&quot;));
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;45&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why React uses &lt;code&gt;className&lt;/code&gt; over &lt;code&gt;class&lt;/code&gt; attribute?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;class&lt;/code&gt; is a keyword in JavaScript, and JSX is an extension of JavaScript. That‚Äôs the principal reason why React uses &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt;. Pass a string as the &lt;code&gt;className&lt;/code&gt; prop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return &amp;lt;span className={&#39;menu navigation-menu&#39;}&amp;gt;{&#39;Menu&#39;}&amp;lt;/span&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;46&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are fragments?&lt;/h3&gt; &lt;p&gt;It‚Äôs common pattern in React which is used for a component to return multiple elements. &lt;em&gt;Fragments&lt;/em&gt; let you group a list of children without adding extra nodes to the DOM.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return (
    &amp;lt;React.Fragment&amp;gt;
      &amp;lt;ChildA /&amp;gt;
      &amp;lt;ChildB /&amp;gt;
      &amp;lt;ChildC /&amp;gt;
    &amp;lt;/React.Fragment&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There is also a &lt;em&gt;shorter syntax&lt;/em&gt;, but it‚Äôs not supported in many tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;ChildA /&amp;gt;
      &amp;lt;ChildB /&amp;gt;
      &amp;lt;ChildC /&amp;gt;
    &amp;lt;/&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;47&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why fragments are better than container divs?&lt;/h3&gt; &lt;p&gt;Below are the list of reasons,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Fragments are a bit faster and use less memory by not creating an extra DOM node. This only has a real benefit on very large and deep trees.&lt;/li&gt; 
   &lt;li&gt;Some CSS mechanisms like &lt;em&gt;Flexbox&lt;/em&gt; and &lt;em&gt;CSS Grid&lt;/em&gt; have a special parent-child relationships, and adding divs in the middle makes it hard to keep the desired layout.&lt;/li&gt; 
   &lt;li&gt;The DOM Inspector is less cluttered.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;48&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are portals in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Portal&lt;/em&gt; is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;ReactDOM.createPortal(child, container)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The first argument is any render-able React child, such as an element, string, or fragment. The second argument is a DOM element.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;49&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are stateless components?&lt;/h3&gt; &lt;p&gt;If the behaviour is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components. There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, and you can avoid the &lt;code&gt;this&lt;/code&gt; keyword altogether.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;50&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are stateful components?&lt;/h3&gt; &lt;p&gt;If the behaviour of a component is dependent on the &lt;em&gt;state&lt;/em&gt; of the component then it can be termed as stateful component. These &lt;em&gt;stateful components&lt;/em&gt; are always &lt;em&gt;class components&lt;/em&gt; and have a state that gets initialized in the &lt;code&gt;constructor&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class App extends Component {
  constructor(props) {
    super(props)
    this.state = { count: 0 }
  }

  render() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;React 16.8 Update:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Hooks let you use state and other React features without writing classes.&lt;/p&gt; &lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; import React, {useState} from &#39;react&#39;;

 const App = (props) =&amp;gt; {
   const [count, setCount] = useState(0);

   return (
     // JSX
   )
 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;51&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to apply validation on props in React?&lt;/h3&gt; &lt;p&gt;When the application is running in &lt;em&gt;development mode&lt;/em&gt;, React will automatically check all props that we set on components to make sure they have &lt;em&gt;correct type&lt;/em&gt;. If the type is incorrect, React will generate warning messages in the console. It‚Äôs disabled in &lt;em&gt;production mode&lt;/em&gt; due to performance impact. The mandatory props are defined with &lt;code&gt;isRequired&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The set of predefined prop types:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.number&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.string&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.array&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.object&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.func&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.node&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.element&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.bool&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.symbol&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.any&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;We can define &lt;code&gt;propTypes&lt;/code&gt; for &lt;code&gt;User&lt;/code&gt; component as below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import PropTypes from &#39;prop-types&#39;

class User extends React.Component {
  static propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number.isRequired
  }

  render() {
    return (
      &amp;lt;&amp;gt;
        &amp;lt;h1&amp;gt;{`Welcome, ${this.props.name}`}&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;{`Age, ${this.props.age}`}&amp;lt;/h2&amp;gt;
      &amp;lt;/&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In React v15.5 &lt;em&gt;PropTypes&lt;/em&gt; were moved from &lt;code&gt;React.PropTypes&lt;/code&gt; to &lt;code&gt;prop-types&lt;/code&gt; library.&lt;/p&gt; &lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import PropTypes from &#39;prop-types&#39;

function User() {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;{`Welcome, ${this.props.name}`}&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;{`Age, ${this.props.age}`}&amp;lt;/h2&amp;gt;
    &amp;lt;/&amp;gt;
  )
}

User.propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number.isRequired
  }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;52&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of React?&lt;/h3&gt; &lt;p&gt;Below are the list of main advantages of React,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Increases the application‚Äôs performance with &lt;em&gt;Virtual DOM&lt;/em&gt;.&lt;/li&gt; 
   &lt;li&gt;JSX makes code easy to read and write.&lt;/li&gt; 
   &lt;li&gt;It renders both on client and server side (&lt;em&gt;SSR&lt;/em&gt;).&lt;/li&gt; 
   &lt;li&gt;Easy to integrate with frameworks (Angular, Backbone) since it is only a view library.&lt;/li&gt; 
   &lt;li&gt;Easy to write unit and integration tests with tools such as Jest.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;53&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the limitations of React?&lt;/h3&gt; &lt;p&gt;Apart from the advantages, there are few limitations of React too,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React is just a view library, not a full framework.&lt;/li&gt; 
   &lt;li&gt;There is a learning curve for beginners who are new to web development.&lt;/li&gt; 
   &lt;li&gt;Integrating React into a traditional MVC framework requires some additional configuration.&lt;/li&gt; 
   &lt;li&gt;The code complexity increases with inline templating and JSX.&lt;/li&gt; 
   &lt;li&gt;Too many smaller components leading to over engineering or boilerplate.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;54&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are error boundaries in React v16?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Error boundaries&lt;/em&gt; are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.&lt;/p&gt; &lt;p&gt;A class component becomes an error boundary if it defines a new lifecycle method called &lt;code&gt;componentDidCatch(error, info)&lt;/code&gt; or &lt;code&gt;static getDerivedStateFromError() &lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props)
    this.state = { hasError: false }
  }

  componentDidCatch(error, info) {
    // You can also log the error to an error reporting service
    logErrorToMyService(error, info)
  }

  static getDerivedStateFromError(error) {
     // Update state so the next render will show the fallback UI.
     return { hasError: true };
   }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return &amp;lt;h1&amp;gt;{&#39;Something went wrong.&#39;}&amp;lt;/h1&amp;gt;
    }
    return this.props.children
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that use it as a regular component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;ErrorBoundary&amp;gt;
  &amp;lt;MyWidget /&amp;gt;
&amp;lt;/ErrorBoundary&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;55&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How error boundaries handled in React v15?&lt;/h3&gt; &lt;p&gt;React v15 provided very basic support for &lt;em&gt;error boundaries&lt;/em&gt; using &lt;code&gt;unstable_handleError&lt;/code&gt; method. It has been renamed to &lt;code&gt;componentDidCatch&lt;/code&gt; in React v16.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;56&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the recommended ways for static type checking?&lt;/h3&gt; &lt;p&gt;Normally we use &lt;em&gt;PropTypes library&lt;/em&gt; (&lt;code&gt;React.PropTypes&lt;/code&gt; moved to a &lt;code&gt;prop-types&lt;/code&gt; package since React v15.5) for &lt;em&gt;type checking&lt;/em&gt; in the React applications. For large code bases, it is recommended to use &lt;em&gt;static type checkers&lt;/em&gt; such as Flow or TypeScript, that perform type checking at compile time and provide auto-completion features.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;57&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of &lt;code&gt;react-dom&lt;/code&gt; package?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react-dom&lt;/code&gt; package provides &lt;em&gt;DOM-specific methods&lt;/em&gt; that can be used at the top level of your app. Most of the components are not required to use this module. Some of the methods of this package are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;hydrate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;unmountComponentAtNode()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;findDOMNode()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;createPortal()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;58&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of render method of &lt;code&gt;react-dom&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;This method is used to render a React element into the DOM in the supplied container and return a reference to the component. If the React element was previously rendered into container, it will perform an update on it and only mutate the DOM as necessary to reflect the latest changes.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ReactDOM.render(element, container[, callback])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the optional callback is provided, it will be executed after the component is rendered or updated.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;59&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is ReactDOMServer?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;ReactDOMServer&lt;/code&gt; object enables you to render components to static markup (typically used on node server). This object is mainly used for &lt;em&gt;server-side rendering&lt;/em&gt; (SSR). The following methods can be used in both the server and browser environments:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;renderToString()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;renderToStaticMarkup()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;For example, you generally run a Node-based web server like Express, Hapi, or Koa, and you call &lt;code&gt;renderToString&lt;/code&gt; to render your root component to a string, which you then send as response.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// using Express
import { renderToString } from &#39;react-dom/server&#39;
import MyPage from &#39;./MyPage&#39;

app.get(&#39;/&#39;, (req, res) =&amp;gt; {
  res.write(&#39;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;My Page&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&#39;)
  res.write(&#39;&amp;lt;div id=&quot;content&quot;&amp;gt;&#39;)
  res.write(renderToString(&amp;lt;MyPage/&amp;gt;))
  res.write(&#39;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;)
  res.end()
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;60&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use innerHTML in React?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; attribute is React‚Äôs replacement for using &lt;code&gt;innerHTML&lt;/code&gt; in the browser DOM. Just like &lt;code&gt;innerHTML&lt;/code&gt;, it is risky to use this attribute considering cross-site scripting (XSS) attacks. You just need to pass a &lt;code&gt;__html&lt;/code&gt; object as key and HTML text as value.&lt;/p&gt; &lt;p&gt;In this example MyComponent uses &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; attribute for setting HTML markup:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function createMarkup() {
  return { __html: &#39;First &amp;amp;middot; Second&#39; }
}

function MyComponent() {
  return &amp;lt;div dangerouslySetInnerHTML={createMarkup()} /&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;61&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use styles in React?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;style&lt;/code&gt; attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const divStyle = {
  color: &#39;blue&#39;,
  backgroundImage: &#39;url(&#39; + imgUrl + &#39;)&#39;
};

function HelloWorldComponent() {
  return &amp;lt;div style={divStyle}&amp;gt;Hello World!&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Style keys are camelCased in order to be consistent with accessing the properties on DOM nodes in JavaScript (e.g. &lt;code&gt;node.style.backgroundImage&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;62&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How events are different in React?&lt;/h3&gt; &lt;p&gt;Handling events in React elements has some syntactic differences:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React event handlers are named using camelCase, rather than lowercase.&lt;/li&gt; 
   &lt;li&gt;With JSX you pass a function as the event handler, rather than a string.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;63&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What will happen if you use &lt;code&gt;setState()&lt;/code&gt; in constructor?&lt;/h3&gt; &lt;p&gt;When you use &lt;code&gt;setState()&lt;/code&gt;, then apart from assigning to the object state React also re-renders the component and all its children. You would get error like this: &lt;em&gt;Can only update a mounted or mounting component.&lt;/em&gt; So we need to use &lt;code&gt;this.state&lt;/code&gt; to initialize variables inside constructor.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;64&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the impact of indexes as keys?&lt;/h3&gt; &lt;p&gt;Keys should be stable, predictable, and unique so that React can keep track of elements.&lt;/p&gt; &lt;p&gt;In the below code snippet each element‚Äôs key will be based on ordering, rather than tied to the data that is being represented. This limits the optimizations that React can do.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;{todos.map((todo, index) =&amp;gt;
  &amp;lt;Todo
    {...todo}
    key={index}
  /&amp;gt;
)}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you use element data for unique key, assuming todo.id is unique to this list and stable, React would be able to reorder elements without needing to reevaluate them as much.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;{todos.map((todo) =&amp;gt;
  &amp;lt;Todo {...todo}
    key={todo.id} /&amp;gt;
)}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;65&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it good to use &lt;code&gt;setState()&lt;/code&gt; in &lt;code&gt;componentWillMount()&lt;/code&gt; method?&lt;/h3&gt; &lt;p&gt;Yes, it is safe to use &lt;code&gt;setState()&lt;/code&gt; inside &lt;code&gt;componentWillMount()&lt;/code&gt; method. But at the same it is recommended to avoid async initialization in &lt;code&gt;componentWillMount()&lt;/code&gt; lifecycle method. &lt;code&gt;componentWillMount()&lt;/code&gt; is invoked immediately before mounting occurs. It is called before &lt;code&gt;render()&lt;/code&gt;, therefore setting state in this method will not trigger a re-render. Avoid introducing any side-effects or subscriptions in this method. We need to make sure async calls for component initialization happened in &lt;code&gt;componentDidMount()&lt;/code&gt; instead of &lt;code&gt;componentWillMount()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;componentDidMount() {
  axios.get(`api/todos`)
    .then((result) =&amp;gt; {
      this.setState({
        messages: [...result.data]
      })
    })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;66&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What will happen if you use props in initial state?&lt;/h3&gt; &lt;p&gt;If the props on the component are changed without the component being refreshed, the new prop value will never be displayed because the constructor function will never update the current state of the component. The initialization of state from props only runs when the component is first created.&lt;/p&gt; &lt;p&gt;The below component won‚Äôt display the updated input value:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      records: [],
      inputValue: this.props.inputValue
    };
  }

  render() {
    return &amp;lt;div&amp;gt;{this.state.inputValue}&amp;lt;/div&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using props inside render method will update the value:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      record: []
    }
  }

  render() {
    return &amp;lt;div&amp;gt;{this.props.inputValue}&amp;lt;/div&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;67&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you conditionally render components?&lt;/h3&gt; &lt;p&gt;In some cases you want to render different components depending on some state. JSX does not render &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, so you can use conditional &lt;em&gt;short-circuiting&lt;/em&gt; to render a given part of your component only if a certain condition is true.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const MyComponent = ({ name, address }) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;h2&amp;gt;{name}&amp;lt;/h2&amp;gt;
    {address &amp;amp;&amp;amp;
      &amp;lt;p&amp;gt;{address}&amp;lt;/p&amp;gt;
    }
  &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need an &lt;code&gt;if-else&lt;/code&gt; condition then use &lt;em&gt;ternary operator&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const MyComponent = ({ name, address }) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;h2&amp;gt;{name}&amp;lt;/h2&amp;gt;
    {address
      ? &amp;lt;p&amp;gt;{address}&amp;lt;/p&amp;gt;
      : &amp;lt;p&amp;gt;{&#39;Address is not available&#39;}&amp;lt;/p&amp;gt;
    }
  &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;68&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why we need to be careful when spreading props on DOM elements?&lt;/h3&gt; &lt;p&gt;When we &lt;em&gt;spread props&lt;/em&gt; we run into the risk of adding unknown HTML attributes, which is a bad practice. Instead we can use prop destructuring with &lt;code&gt;...rest&lt;/code&gt; operator, so it will add only required props.&lt;/p&gt; &lt;p&gt;For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const ComponentA = () =&amp;gt;
  &amp;lt;ComponentB isDisplay={true} className={&#39;componentStyle&#39;} /&amp;gt;

const ComponentB = ({ isDisplay, ...domProps }) =&amp;gt;
  &amp;lt;div {...domProps}&amp;gt;{&#39;ComponentB&#39;}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;69&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How you use decorators in React?&lt;/h3&gt; &lt;p&gt;You can &lt;em&gt;decorate&lt;/em&gt; your &lt;em&gt;class&lt;/em&gt; components, which is the same as passing the component into a function. &lt;strong&gt;Decorators&lt;/strong&gt; are flexible and readable way of modifying component functionality.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;@setTitle(&#39;Profile&#39;)
class Profile extends React.Component {
    //....
}

/*
  title is a string that will be set as a document title
  WrappedComponent is what our decorator will receive when
  put directly above a component class as seen in the example above
*/
const setTitle = (title) =&amp;gt; (WrappedComponent) =&amp;gt; {
  return class extends React.Component {
    componentDidMount() {
      document.title = title
    }

    render() {
      return &amp;lt;WrappedComponent {...this.props} /&amp;gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Decorators are a feature that didn‚Äôt make it into ES7, but are currently a &lt;em&gt;stage 2 proposal&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;70&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you memoize a component?&lt;/h3&gt; &lt;p&gt;There are memoize libraries available which can be used on function components.&lt;/p&gt; &lt;p&gt;For example &lt;code&gt;moize&lt;/code&gt; library can memoize the component in another component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import moize from &#39;moize&#39;
import Component from &#39;./components/Component&#39; // this module exports a non-memoized component

const MemoizedFoo = moize.react(Component)

const Consumer = () =&amp;gt; {
  &amp;lt;div&amp;gt;
    {&#39;I will memoize the following entry:&#39;}
    &amp;lt;MemoizedFoo/&amp;gt;
  &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Since React v16.6.0, we have a &lt;code&gt;React.memo&lt;/code&gt;. It provides a higher order component which memoizes component unless the props change. To use it, simply wrap the component using React.memo before you use it.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;  const MemoComponent = React.memo(function MemoComponent(props) {
    /* render using props */
  });
  OR
  export default React.memo(MyFunctionComponent);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;71&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How you implement Server Side Rendering or SSR?&lt;/h3&gt; &lt;p&gt;React is already equipped to handle rendering on Node servers. A special version of the DOM renderer is available, which follows the same pattern as on the client side.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import ReactDOMServer from &#39;react-dom/server&#39;
import App from &#39;./App&#39;

ReactDOMServer.renderToString(&amp;lt;App /&amp;gt;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This method will output the regular HTML as a string, which can be then placed inside a page body as part of the server response. On the client side, React detects the pre-rendered content and seamlessly picks up where it left off.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;72&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to enable production mode in React?&lt;/h3&gt; &lt;p&gt;You should use Webpack‚Äôs &lt;code&gt;DefinePlugin&lt;/code&gt; method to set &lt;code&gt;NODE_ENV&lt;/code&gt; to &lt;code&gt;production&lt;/code&gt;, by which it strip out things like propType validation and extra warnings. Apart from this, if you minify the code, for example, Uglify‚Äôs dead-code elimination to strip out development only code and comments, it will drastically reduce the size of your bundle.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;73&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is CRA and its benefits?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;create-react-app&lt;/code&gt; CLI tool allows you to quickly create &amp;amp; run React applications with no configuration step.&lt;/p&gt; &lt;p&gt;Let‚Äôs create Todo App using &lt;em&gt;CRA&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;# Installation
$ npm install -g create-react-app

# Create new project
$ create-react-app todo-app
$ cd todo-app

# Build, test and run
$ npm run build
$ npm run test
$ npm start
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It includes everything we need to build a React app:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React, JSX, ES6, and Flow syntax support.&lt;/li&gt; 
   &lt;li&gt;Language extras beyond ES6 like the object spread operator.&lt;/li&gt; 
   &lt;li&gt;Autoprefixed CSS, so you don‚Äôt need -webkit- or other prefixes.&lt;/li&gt; 
   &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting.&lt;/li&gt; 
   &lt;li&gt;A live development server that warns about common mistakes.&lt;/li&gt; 
   &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;74&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the lifecycle methods order in mounting?&lt;/h3&gt; &lt;p&gt;The lifecycle methods are called in the following order when an instance of a component is being created and inserted into the DOM.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;constructor()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;static getDerivedStateFromProps()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;75&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the lifecycle methods going to be deprecated in React v16?&lt;/h3&gt; &lt;p&gt;The following lifecycle methods going to be unsafe coding practices and will be more problematic with async rendering.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillReceiveProps()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillUpdate()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Starting with React v16.3 these methods are aliased with &lt;code&gt;UNSAFE_&lt;/code&gt; prefix, and the unprefixed version will be removed in React v17.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;76&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt; lifecycle method?&lt;/h3&gt; &lt;p&gt;The new static &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt; lifecycle method is invoked after a component is instantiated as well as before it is re-rendered. It can return an object to update state, or &lt;code&gt;null&lt;/code&gt; to indicate that the new props do not require any state updates.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  static getDerivedStateFromProps(props, state) {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This lifecycle method along with &lt;code&gt;componentDidUpdate()&lt;/code&gt; covers all the use cases of &lt;code&gt;componentWillReceiveProps()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;77&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle method?&lt;/h3&gt; &lt;p&gt;The new &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle method is called right before DOM updates. The return value from this method will be passed as the third parameter to &lt;code&gt;componentDidUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  getSnapshotBeforeUpdate(prevProps, prevState) {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This lifecycle method along with &lt;code&gt;componentDidUpdate()&lt;/code&gt; covers all the use cases of &lt;code&gt;componentWillUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;78&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do Hooks replace render props and higher order components?&lt;/h3&gt; &lt;p&gt;Both render props and higher-order components render only a single child but in most of the cases Hooks are a simpler way to serve this by reducing nesting in your tree.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;79&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the recommended way for naming components?&lt;/h3&gt; &lt;p&gt;It is recommended to name the component by reference instead of using &lt;code&gt;displayName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Using &lt;code&gt;displayName&lt;/code&gt; for naming component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default React.createClass({
  displayName: &#39;TodoApp&#39;,
  // ...
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;strong&gt;recommended&lt;/strong&gt; approach:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class TodoApp extends React.Component {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;80&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the recommended ordering of methods in component class?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Recommended&lt;/em&gt; ordering of methods from &lt;em&gt;mounting&lt;/em&gt; to &lt;em&gt;render stage&lt;/em&gt;:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;static&lt;/code&gt; methods&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;constructor()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;getChildContext()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillReceiveProps()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;shouldComponentUpdate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillUpdate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentDidUpdate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillUnmount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;click handlers or event handlers like &lt;code&gt;onClickSubmit()&lt;/code&gt; or &lt;code&gt;onChangeDescription()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;getter methods for render like &lt;code&gt;getSelectReason()&lt;/code&gt; or &lt;code&gt;getFooterContent()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;optional render methods like &lt;code&gt;renderNavigation()&lt;/code&gt; or &lt;code&gt;renderProfilePicture()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;81&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is a switching component?&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;switching component&lt;/em&gt; is a component that renders one of many components. We need to use object to map prop values to components.&lt;/p&gt; &lt;p&gt;For example, a switching component to display different pages based on &lt;code&gt;page&lt;/code&gt; prop:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import HomePage from &#39;./HomePage&#39;
import AboutPage from &#39;./AboutPage&#39;
import ServicesPage from &#39;./ServicesPage&#39;
import ContactPage from &#39;./ContactPage&#39;

const PAGES = {
  home: HomePage,
  about: AboutPage,
  services: ServicesPage,
  contact: ContactPage
}

const Page = (props) =&amp;gt; {
  const Handler = PAGES[props.page] || ContactPage

  return &amp;lt;Handler {...props} /&amp;gt;
}

// The keys of the PAGES object can be used in the prop types to catch dev-time errors.
Page.propTypes = {
  page: PropTypes.oneOf(Object.keys(PAGES)).isRequired
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;82&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why we need to pass a function to setState()?&lt;/h3&gt; &lt;p&gt;The reason behind for this is that &lt;code&gt;setState()&lt;/code&gt; is an asynchronous operation. React batches state changes for performance reasons, so the state may not change immediately after &lt;code&gt;setState()&lt;/code&gt; is called. That means you should not rely on the current state when calling &lt;code&gt;setState()&lt;/code&gt;‚Ääsince you can‚Äôt be sure what that state will be. The solution is to pass a function to &lt;code&gt;setState()&lt;/code&gt;, with the previous state as an argument. By doing this you can avoid issues with the user getting the old state value on access due to the asynchronous nature of &lt;code&gt;setState()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let‚Äôs say the initial count value is zero. After three consecutive increment operations, the value is going to be incremented only by one.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// assuming this.state.count === 0
this.setState({ count: this.state.count + 1 })
this.setState({ count: this.state.count + 1 })
this.setState({ count: this.state.count + 1 })
// this.state.count === 0, not 3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If we pass a function to &lt;code&gt;setState()&lt;/code&gt;, the count gets incremented correctly.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.setState((prevState, props) =&amp;gt; ({
  count: prevState.count + props.increment
}))
// this.state.count === 3 as expected
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;(OR)&lt;/strong&gt;&lt;/p&gt; &lt;h3&gt;Why function is preferred over object for &lt;code&gt;setState()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;React may batch multiple &lt;code&gt;setState()&lt;/code&gt; calls into a single update for performance. Because &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; may be updated asynchronously, you should not rely on their values for calculating the next state.&lt;/p&gt; &lt;p&gt;This counter example will fail to update as expected:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Wrong
this.setState({
  counter: this.state.counter + this.props.increment,
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The preferred approach is to call &lt;code&gt;setState()&lt;/code&gt; with function rather than object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Correct
this.setState((prevState, props) =&amp;gt; ({
  counter: prevState.counter + props.increment
}))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;83&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is strict mode in React?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;React.StrictMode&lt;/code&gt; is a useful component for highlighting potential problems in an application. Just like &lt;code&gt;&amp;lt;Fragment&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;StrictMode&amp;gt;&lt;/code&gt; does not render any extra DOM elements. It activates additional checks and warnings for its descendants. These checks apply for &lt;em&gt;development mode&lt;/em&gt; only.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;

function ExampleApplication() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Header /&amp;gt;
      &amp;lt;React.StrictMode&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;ComponentOne /&amp;gt;
          &amp;lt;ComponentTwo /&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/React.StrictMode&amp;gt;
      &amp;lt;Header /&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the example above, the &lt;em&gt;strict mode&lt;/em&gt; checks apply to &lt;code&gt;&amp;lt;ComponentOne&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ComponentTwo&amp;gt;&lt;/code&gt; components only.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;84&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are React Mixins?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Mixins&lt;/em&gt; are a way to totally separate components to have a common functionality. Mixins &lt;strong&gt;should not be used&lt;/strong&gt; and can be replaced with &lt;em&gt;higher-order components&lt;/em&gt; or &lt;em&gt;decorators&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;One of the most commonly used mixins is &lt;code&gt;PureRenderMixin&lt;/code&gt;. You might be using it in some components to prevent unnecessary re-renders when the props and state are shallowly equal to the previous props and state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const PureRenderMixin = require(&#39;react-addons-pure-render-mixin&#39;)

const Button = React.createClass({
  mixins: [PureRenderMixin],
  // ...
})
&lt;/code&gt;&lt;/pre&gt; 
  &lt;!-- TODO: mixins are deprecated --&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;85&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why is &lt;code&gt;isMounted()&lt;/code&gt; an anti-pattern and what is the proper solution?&lt;/h3&gt; &lt;p&gt;The primary use case for &lt;code&gt;isMounted()&lt;/code&gt; is to avoid calling &lt;code&gt;setState()&lt;/code&gt; after a component has been unmounted, because it will emit a warning.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (this.isMounted()) {
  this.setState({...})
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Checking &lt;code&gt;isMounted()&lt;/code&gt; before calling &lt;code&gt;setState()&lt;/code&gt; does eliminate the warning, but it also defeats the purpose of the warning. Using &lt;code&gt;isMounted()&lt;/code&gt; is a code smell because the only reason you would check is because you think you might be holding a reference after the component has unmounted.&lt;/p&gt; &lt;p&gt;An optimal solution would be to find places where &lt;code&gt;setState()&lt;/code&gt; might be called after a component has unmounted, and fix them. Such situations most commonly occur due to callbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in &lt;code&gt;componentWillUnmount()&lt;/code&gt;, prior to unmounting.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;86&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the Pointer Events supported in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Pointer Events&lt;/em&gt; provide a unified way of handling all input events. In the old days we had a mouse and respective event listeners to handle them but nowadays we have many devices which don‚Äôt correlate to having a mouse, like phones with touch surface or pens. We need to remember that these events will only work in browsers that support the &lt;em&gt;Pointer Events&lt;/em&gt; specification.&lt;/p&gt; &lt;p&gt;The following event types are now available in &lt;em&gt;React DOM&lt;/em&gt;:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;onPointerDown&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerMove&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerUp&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerCancel&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onGotPointerCapture&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onLostPointerCapture&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerEnter&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerLeave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerOver&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerOut&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;87&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why should component names start with capital letter?&lt;/h3&gt; &lt;p&gt;If you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class SomeComponent extends Component {
 // Code goes here
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can define component class which name starts with lowercase letter, but when it‚Äôs imported it should have capital letter. Here lowercase is fine:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class myComponent extends Component {
  render() {
    return &amp;lt;div /&amp;gt;
  }
}

export default myComponent
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While when imported in another file it should start with capital letter:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import MyComponent from &#39;./MyComponent&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;What are the exceptions on React component naming?&lt;/h4&gt; &lt;p&gt;The component names should start with a uppercase letter but there are few exceptions on this convention. The lowercase tag names with a dot (property accessors) are still considered as valid component names. For example the below tag can be compiled to a valid component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;     render() {
          return (
            &amp;lt;obj.component/&amp;gt; // `React.createElement(obj.component)`
          )
    }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;88&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Are custom DOM attributes supported in React v16?&lt;/h3&gt; &lt;p&gt;Yes. In the past, React used to ignore unknown DOM attributes. If you wrote JSX with an attribute that React doesn‚Äôt recognize, React would just skip it.&lt;/p&gt; &lt;p&gt;For example, let‚Äôs take a look at the below attribute:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div mycustomattribute={&#39;something&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Would render an empty div to the DOM with React v15:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In React v16 any unknown attributes will end up in the DOM:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div mycustomattribute=&#39;something&#39; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is useful for supplying browser-specific non-standard attributes, trying new DOM APIs, and integrating with opinionated third-party libraries.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;89&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between constructor and getInitialState?&lt;/h3&gt; &lt;p&gt;You should initialize state in the constructor when using ES6 classes, and &lt;code&gt;getInitialState()&lt;/code&gt; method when using &lt;code&gt;React.createClass()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Using ES6 classes:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    this.state = { /* initial state */ }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;React.createClass()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const MyComponent = React.createClass({
  getInitialState() {
    return { /* initial state */ }
  }
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;React.createClass()&lt;/code&gt; is deprecated and removed in React v16. Use plain JavaScript classes instead.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;90&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can you force a component to re-render without calling setState?&lt;/h3&gt; &lt;p&gt;By default, when your component‚Äôs state or props change, your component will re-render. If your &lt;code&gt;render()&lt;/code&gt; method depends on some other data, you can tell React that the component needs re-rendering by calling &lt;code&gt;forceUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;component.forceUpdate(callback)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is recommended to avoid all uses of &lt;code&gt;forceUpdate()&lt;/code&gt; and only read from &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; in &lt;code&gt;render()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;91&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;super()&lt;/code&gt; and &lt;code&gt;super(props)&lt;/code&gt; in React using ES6 classes?&lt;/h3&gt; &lt;p&gt;When you want to access &lt;code&gt;this.props&lt;/code&gt; in &lt;code&gt;constructor()&lt;/code&gt; then you should pass props to &lt;code&gt;super()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super(props)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    console.log(this.props) // { name: &#39;John&#39;, ... }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super()
    console.log(this.props) // undefined
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Outside &lt;code&gt;constructor()&lt;/code&gt; both will display same value for &lt;code&gt;this.props&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;92&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to loop inside JSX?&lt;/h3&gt; &lt;p&gt;You can simply use &lt;code&gt;Array.prototype.map&lt;/code&gt; with ES6 &lt;em&gt;arrow function&lt;/em&gt; syntax.&lt;/p&gt; &lt;p&gt;For example, the &lt;code&gt;items&lt;/code&gt; array of objects is mapped into an array of components:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;tbody&amp;gt;
  {items.map(item =&amp;gt; &amp;lt;SomeComponent key={item.id} name={item.name} /&amp;gt;)}
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can‚Äôt iterate using &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;tbody&amp;gt;
  for (let i = 0; i &amp;lt; items.length; i++) {
    &amp;lt;SomeComponent key={items[i].id} name={items[i].name} /&amp;gt;
  }
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is because JSX tags are transpiled into &lt;em&gt;function calls&lt;/em&gt;, and you can‚Äôt use statements inside expressions. This may change thanks to &lt;code&gt;do&lt;/code&gt; expressions which are &lt;em&gt;stage 1 proposal&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;93&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access props in attribute quotes?&lt;/h3&gt; &lt;p&gt;React (or JSX) doesn‚Äôt support variable interpolation inside an attribute value. The below representation won‚Äôt work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;img className=&#39;image&#39; src=&#39;images/{this.props.image}&#39; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can put any JS expression inside curly braces as the entire attribute value. So the below expression works:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;img className=&#39;image&#39; src={&#39;images/&#39; + this.props.image} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using &lt;em&gt;template strings&lt;/em&gt; will also work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;img className=&#39;image&#39; src={`images/${this.props.image}`} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;94&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React proptype array with shape?&lt;/h3&gt; &lt;p&gt;If you want to pass an array of objects to a component with a particular shape then use &lt;code&gt;React.PropTypes.shape()&lt;/code&gt; as an argument to &lt;code&gt;React.PropTypes.arrayOf()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;ReactComponent.propTypes = {
  arrayWithShape: React.PropTypes.arrayOf(React.PropTypes.shape({
    color: React.PropTypes.string.isRequired,
    fontSize: React.PropTypes.number.isRequired
  })).isRequired
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;95&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to conditionally apply class attributes?&lt;/h3&gt; &lt;p&gt;You shouldn‚Äôt use curly braces inside quotes because it is going to be evaluated as a string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div className=&quot;btn-panel {this.props.visible ? &#39;show&#39; : &#39;hidden&#39;}&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead you need to move curly braces outside (don‚Äôt forget to include spaces between class names):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div className={&#39;btn-panel &#39; + (this.props.visible ? &#39;show&#39; : &#39;hidden&#39;)}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Template strings&lt;/em&gt; will also work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div className={`btn-panel ${this.props.visible ? &#39;show&#39; : &#39;hidden&#39;}`}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;96&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React and ReactDOM?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react&lt;/code&gt; package contains &lt;code&gt;React.createElement()&lt;/code&gt;, &lt;code&gt;React.Component&lt;/code&gt;, &lt;code&gt;React.Children&lt;/code&gt;, and other helpers related to elements and component classes. You can think of these as the isomorphic or universal helpers that you need to build components. The &lt;code&gt;react-dom&lt;/code&gt; package contains &lt;code&gt;ReactDOM.render()&lt;/code&gt;, and in &lt;code&gt;react-dom/server&lt;/code&gt; we have &lt;em&gt;server-side rendering&lt;/em&gt; support with &lt;code&gt;ReactDOMServer.renderToString()&lt;/code&gt; and &lt;code&gt;ReactDOMServer.renderToStaticMarkup()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;97&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why ReactDOM is separated from React?&lt;/h3&gt; &lt;p&gt;The React team worked on extracting all DOM-related features into a separate library called &lt;em&gt;ReactDOM&lt;/em&gt;. React v0.14 is the first release in which the libraries are split. By looking at some of the packages, &lt;code&gt;react-native&lt;/code&gt;, &lt;code&gt;react-art&lt;/code&gt;, &lt;code&gt;react-canvas&lt;/code&gt;, and &lt;code&gt;react-three&lt;/code&gt;, it has become clear that the beauty and essence of React has nothing to do with browsers or the DOM.&lt;/p&gt; &lt;p&gt;To build more environments that React can render to, React team planned to split the main React package into two: &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt;. This paves the way to writing components that can be shared between the web version of React and React Native.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;98&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use React label element?&lt;/h3&gt; &lt;p&gt;If you try to render a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element bound to a text input using the standard &lt;code&gt;for&lt;/code&gt; attribute, then it produces HTML missing that attribute and prints a warning to the console.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;label for={&#39;user&#39;}&amp;gt;{&#39;User&#39;}&amp;lt;/label&amp;gt;
&amp;lt;input type={&#39;text&#39;} id={&#39;user&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since &lt;code&gt;for&lt;/code&gt; is a reserved keyword in JavaScript, use &lt;code&gt;htmlFor&lt;/code&gt; instead.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;label htmlFor={&#39;user&#39;}&amp;gt;{&#39;User&#39;}&amp;lt;/label&amp;gt;
&amp;lt;input type={&#39;text&#39;} id={&#39;user&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;99&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to combine multiple inline style objects?&lt;/h3&gt; &lt;p&gt;You can use &lt;em&gt;spread operator&lt;/em&gt; in regular React:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt; &amp;lt;button style={{...styles.panel.button, ...styles.panel.submitButton}}&amp;gt;{&#39;Submit&#39;}&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you‚Äôre using React Native then you can use the array notation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button style={[styles.panel.button, styles.panel.submitButton]}&amp;gt;{&#39;Submit&#39;}&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;100&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to re-render the view when the browser is resized?&lt;/h3&gt; &lt;p&gt;You can listen to the &lt;code&gt;resize&lt;/code&gt; event in &lt;code&gt;componentDidMount()&lt;/code&gt; and then update the dimensions (&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;). You should remove the listener in &lt;code&gt;componentWillUnmount()&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class WindowDimensions extends React.Component {
  constructor(props){
    super(props);
    this.updateDimensions = this.updateDimensions.bind(this);
  }
   
  componentWillMount() {
    this.updateDimensions()
  }

  componentDidMount() {
    window.addEventListener(&#39;resize&#39;, this.updateDimensions)
  }

  componentWillUnmount() {
    window.removeEventListener(&#39;resize&#39;, this.updateDimensions)
  }

  updateDimensions() {
    this.setState({width: window.innerWidth, height: window.innerHeight})
  }

  render() {
    return &amp;lt;span&amp;gt;{this.state.width} x {this.state.height}&amp;lt;/span&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;101&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;setState()&lt;/code&gt; and &lt;code&gt;replaceState()&lt;/code&gt; methods?&lt;/h3&gt; &lt;p&gt;When you use &lt;code&gt;setState()&lt;/code&gt; the current and previous states are merged. &lt;code&gt;replaceState()&lt;/code&gt; throws out the current state, and replaces it with only what you provide. Usually &lt;code&gt;setState()&lt;/code&gt; is used unless you really need to remove all previous keys for some reason. You can also set state to &lt;code&gt;false&lt;/code&gt;/&lt;code&gt;null&lt;/code&gt; in &lt;code&gt;setState()&lt;/code&gt; instead of using &lt;code&gt;replaceState()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;102&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to listen to state changes?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;componentDidUpdate&lt;/code&gt; lifecycle method will be called when state changes. You can compare provided state and props values with current state and props to determine if something meaningful changed.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;componentDidUpdate(object prevProps, object prevState)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The previous releases of ReactJS also uses &lt;code&gt;componentWillUpdate(object nextProps, object nextState)&lt;/code&gt; for state changes. It has been deprecated in latest releases.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;103&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the recommended approach of removing an array element in React state?&lt;/h3&gt; &lt;p&gt;The better approach is to use &lt;code&gt;Array.prototype.filter()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;For example, let‚Äôs create a &lt;code&gt;removeItem()&lt;/code&gt; method for updating the state.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;removeItem(index) {
  this.setState({
    data: this.state.data.filter((item, i) =&amp;gt; i !== index)
  })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;104&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to use React without rendering HTML?&lt;/h3&gt; &lt;p&gt;It is possible with latest version (&amp;gt;=16.2). Below are the possible options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return false
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return null
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return []
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return &amp;lt;React.Fragment&amp;gt;&amp;lt;/React.Fragment&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return &amp;lt;&amp;gt;&amp;lt;/&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Returning &lt;code&gt;undefined&lt;/code&gt; won‚Äôt work.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;105&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to pretty print JSON with React?&lt;/h3&gt; &lt;p&gt;We can use &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag so that the formatting of the &lt;code&gt;JSON.stringify()&lt;/code&gt; is retained:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const data = { name: &#39;John&#39;, age: 42 }

class User extends React.Component {
  render() {
    return (
      &amp;lt;pre&amp;gt;
        {JSON.stringify(data, null, 2)}
      &amp;lt;/pre&amp;gt;
    )
  }
}

React.render(&amp;lt;User /&amp;gt;, document.getElementById(&#39;container&#39;))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;106&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why you can‚Äôt update props in React?&lt;/h3&gt; &lt;p&gt;The React philosophy is that props should be &lt;em&gt;immutable&lt;/em&gt; and &lt;em&gt;top-down&lt;/em&gt;. This means that a parent can send any prop values to a child, but the child can‚Äôt modify received props.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;107&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to focus an input element on page load?&lt;/h3&gt; &lt;p&gt;You can do it by creating &lt;em&gt;ref&lt;/em&gt; for &lt;code&gt;input&lt;/code&gt; element and using it in &lt;code&gt;componentDidMount()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class App extends React.Component{
  componentDidMount() {
    this.nameInput.focus()
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;input
          defaultValue={&#39;Won\&#39;t focus&#39;}
        /&amp;gt;
        &amp;lt;input
          ref={(input) =&amp;gt; this.nameInput = input}
          defaultValue={&#39;Will focus&#39;}
        /&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}

ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;app&#39;))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;108&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible ways of updating objects in state?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;setState()&lt;/code&gt; with an object to merge with state:&lt;/strong&gt;&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;Using &lt;code&gt;Object.assign()&lt;/code&gt; to create a copy of the object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = Object.assign({}, this.state.user, { age: 42 })
this.setState({ user })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Using &lt;em&gt;spread operator&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = { ...this.state.user, age: 42 }
this.setState({ user })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;setState()&lt;/code&gt; with a function:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.setState(prevState =&amp;gt; ({
  user: {
    ...prevState.user,
    age: 42
  }
}))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;110&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How can we find the version of React at runtime in the browser?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;React.version&lt;/code&gt; to get the version.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const REACT_VERSION = React.version

ReactDOM.render(
  &amp;lt;div&amp;gt;{`React version: ${REACT_VERSION}`}&amp;lt;/div&amp;gt;,
  document.getElementById(&#39;app&#39;)
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;111&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the approaches to include polyfills in your &lt;code&gt;create-react-app&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are approaches to include polyfills in create-react-app,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Manual import from &lt;code&gt;core-js&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create a file called (something like) &lt;code&gt;polyfills.js&lt;/code&gt; and import it into root &lt;code&gt;index.js&lt;/code&gt; file. Run &lt;code&gt;npm install core-js&lt;/code&gt; or &lt;code&gt;yarn add core-js&lt;/code&gt; and import your specific required features.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import &#39;core-js/fn/array/find&#39;
import &#39;core-js/fn/array/includes&#39;
import &#39;core-js/fn/number/is-nan&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Polyfill service:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Use the polyfill.io CDN to retrieve custom, browser-specific polyfills by adding this line to &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&#39;https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.includes&#39;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above script we had to explicitly request the &lt;code&gt;Array.prototype.includes&lt;/code&gt; feature as it is not included in the default feature set.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;112&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use https instead of http in create-react-app?&lt;/h3&gt; &lt;p&gt;You just need to use &lt;code&gt;HTTPS=true&lt;/code&gt; configuration. You can edit your &lt;code&gt;package.json&lt;/code&gt; scripts section:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;scripts&quot;: {
  &quot;start&quot;: &quot;set HTTPS=true &amp;amp;&amp;amp; react-scripts start&quot;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or just run &lt;code&gt;set HTTPS=true &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;113&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to avoid using relative path imports in create-react-app?&lt;/h3&gt; &lt;p&gt;Create a file called &lt;code&gt;.env&lt;/code&gt; in the project root and write the import path:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;NODE_PATH=src/app
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that restart the development server. Now you should be able to import anything inside &lt;code&gt;src/app&lt;/code&gt; without relative paths.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;114&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to add Google Analytics for React Router?&lt;/h3&gt; &lt;p&gt;Add a listener on the &lt;code&gt;history&lt;/code&gt; object to record each page view:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;history.listen(function (location) {
  window.ga(&#39;set&#39;, &#39;page&#39;, location.pathname + location.search)
  window.ga(&#39;send&#39;, &#39;pageview&#39;, location.pathname + location.search)
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;115&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to update a component every second?&lt;/h3&gt; &lt;p&gt;You need to use &lt;code&gt;setInterval()&lt;/code&gt; to trigger the change, but you also need to clear the timer when the component unmounts to prevent errors and memory leaks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;componentDidMount() {
  this.interval = setInterval(() =&amp;gt; this.setState({ time: Date.now() }), 1000)
}

componentWillUnmount() {
  clearInterval(this.interval)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;116&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you apply vendor prefixes to inline styles in React?&lt;/h3&gt; &lt;p&gt;React &lt;em&gt;does not&lt;/em&gt; apply &lt;em&gt;vendor prefixes&lt;/em&gt; automatically. You need to add vendor prefixes manually.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div style={{
  transform: &#39;rotate(90deg)&#39;,
  WebkitTransform: &#39;rotate(90deg)&#39;, // note the capital &#39;W&#39; here
  msTransform: &#39;rotate(90deg)&#39; // &#39;ms&#39; is the only lowercase vendor prefix
}} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;117&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to import and export components using React and ES6?&lt;/h3&gt; &lt;p&gt;You should use default for exporting the components&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import User from &#39;user&#39;

export default class MyProfile extends React.Component {
  render(){
    return (
      &amp;lt;User type=&quot;customer&quot;&amp;gt;
        //...
      &amp;lt;/User&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With the export specifier, the MyProfile is going to be the member and exported to this module and the same can be imported without mentioning the name in other components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;119&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why is a component constructor called only once?&lt;/h3&gt; &lt;p&gt;React‚Äôs &lt;em&gt;reconciliation&lt;/em&gt; algorithm assumes that without any information to the contrary, if a custom component appears in the same place on subsequent renders, it‚Äôs the same component as before, so reuses the previous instance rather than creating a new one.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;120&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to define constants in React?&lt;/h3&gt; &lt;p&gt;You can use ES7 &lt;code&gt;static&lt;/code&gt; field to define constant.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  static DEFAULT_PAGINATION = 10
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Static fields&lt;/em&gt; are part of the &lt;em&gt;Class Fields&lt;/em&gt; stage 3 proposal.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;121&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to programmatically trigger click event in React?&lt;/h3&gt; &lt;p&gt;You could use the ref prop to acquire a reference to the underlying &lt;code&gt;HTMLInputElement&lt;/code&gt; object through a callback, store the reference as a class property, then use that reference to later trigger a click from your event handlers using the &lt;code&gt;HTMLElement.click&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;This can be done in two steps:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Create ref in render method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;input ref={input =&amp;gt; this.inputElement = input} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Apply click event in your event handler:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.inputElement.click()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;122&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to use async/await in plain React?&lt;/h3&gt; &lt;p&gt;If you want to use &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; in React, you will need &lt;em&gt;Babel&lt;/em&gt; and &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator&quot;&gt;transform-async-to-generator&lt;/a&gt; plugin. React Native ships with Babel and a set of transforms.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;123&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the common folder structures for React?&lt;/h3&gt; &lt;p&gt;There are two common practices for React project file structure.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Grouping by features or routes:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;One common way to structure projects is locate CSS, JS, and tests together, grouped by feature or route.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;common/
‚îú‚îÄ Avatar.js
‚îú‚îÄ Avatar.css
‚îú‚îÄ APIUtils.js
‚îî‚îÄ APIUtils.test.js
feed/
‚îú‚îÄ index.js
‚îú‚îÄ Feed.js
‚îú‚îÄ Feed.css
‚îú‚îÄ FeedStory.js
‚îú‚îÄ FeedStory.test.js
‚îî‚îÄ FeedAPI.js
profile/
‚îú‚îÄ index.js
‚îú‚îÄ Profile.js
‚îú‚îÄ ProfileHeader.js
‚îú‚îÄ ProfileHeader.css
‚îî‚îÄ ProfileAPI.js
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Grouping by file type:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Another popular way to structure projects is to group similar files together.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;api/
‚îú‚îÄ APIUtils.js
‚îú‚îÄ APIUtils.test.js
‚îú‚îÄ ProfileAPI.js
‚îî‚îÄ UserAPI.js
components/
‚îú‚îÄ Avatar.js
‚îú‚îÄ Avatar.css
‚îú‚îÄ Feed.js
‚îú‚îÄ Feed.css
‚îú‚îÄ FeedStory.js
‚îú‚îÄ FeedStory.test.js
‚îú‚îÄ Profile.js
‚îú‚îÄ ProfileHeader.js
‚îî‚îÄ ProfileHeader.css
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;124&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the popular packages for animation?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;React Transition Group&lt;/em&gt; and &lt;em&gt;React Motion&lt;/em&gt; are popular animation packages in React ecosystem.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;125&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of styles modules?&lt;/h3&gt; &lt;p&gt;It is recommended to avoid hard coding style values in components. Any values that are likely to be used across different UI components should be extracted into their own modules.&lt;/p&gt; &lt;p&gt;For example, these styles could be extracted into a separate component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export const colors = {
  white,
  black,
  blue
}

export const space = [
  0,
  8,
  16,
  32,
  64
]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then imported individually in other components:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { space, colors } from &#39;./styles&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;126&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the popular React-specific linters?&lt;/h3&gt; &lt;p&gt;ESLint is a popular JavaScript linter. There are plugins available that analyse specific code styles. One of the most common for React is an npm package called &lt;code&gt;eslint-plugin-react&lt;/code&gt;. By default, it will check a number of best practices, with rules checking things from keys in iterators to a complete set of prop types.&lt;/p&gt; &lt;p&gt;Another popular plugin is &lt;code&gt;eslint-plugin-jsx-a11y&lt;/code&gt;, which will help fix common issues with accessibility. As JSX offers slightly different syntax to regular HTML, issues with &lt;code&gt;alt&lt;/code&gt; text and &lt;code&gt;tabindex&lt;/code&gt;, for example, will not be picked up by regular plugins.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;127&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to make AJAX call and in which component lifecycle methods should I make an AJAX call?&lt;/h3&gt; &lt;p&gt;You can use AJAX libraries such as Axios, jQuery AJAX, and the browser built-in &lt;code&gt;fetch&lt;/code&gt;. You should fetch data in the &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle method. This is so you can use &lt;code&gt;setState()&lt;/code&gt; to update your component when the data is retrieved.&lt;/p&gt; &lt;p&gt;For example, the employees list fetched from API and set local state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      employees: [],
      error: null
    }
  }

  componentDidMount() {
    fetch(&#39;https://api.example.com/items&#39;)
      .then(res =&amp;gt; res.json())
      .then(
        (result) =&amp;gt; {
          this.setState({
            employees: result.employees
          })
        },
        (error) =&amp;gt; {
          this.setState({ error })
        }
      )
  }

  render() {
    const { error, employees } = this.state
    if (error) {
      return &amp;lt;div&amp;gt;Error: {error.message}&amp;lt;/div&amp;gt;;
    } else {
      return (
        &amp;lt;ul&amp;gt;
          {employees.map(employee =&amp;gt; (
            &amp;lt;li key={employee.name}&amp;gt;
              {employee.name}-{employee.experience}
            &amp;lt;/li&amp;gt;
          ))}
        &amp;lt;/ul&amp;gt;
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;128&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are render props?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Render Props&lt;/strong&gt; is a simple technique for sharing code between components using a prop whose value is a function. The below component uses render prop which returns a React element.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;DataProvider render={data =&amp;gt; (
  &amp;lt;h1&amp;gt;{`Hello ${data.target}`}&amp;lt;/h1&amp;gt;
)}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Libraries such as React Router and DownShift are using this pattern.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Router&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;129&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Router?&lt;/h3&gt; &lt;p&gt;React Router is a powerful routing library built on top of React that helps you add new screens and flows to your application incredibly quickly, all while keeping the URL in sync with what‚Äôs being displayed on the page.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;130&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How React Router is different from history library?&lt;/h3&gt; &lt;p&gt;React Router is a wrapper around the &lt;code&gt;history&lt;/code&gt; library which handles interaction with the browser‚Äôs &lt;code&gt;window.history&lt;/code&gt; with its browser and hash histories. It also provides memory history which is useful for environments that don‚Äôt have global history, such as mobile app development (React Native) and unit testing with Node.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;131&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; components of React Router v4?&lt;/h3&gt; &lt;p&gt;React Router v4 provides below 3 &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; components:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;HashRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;MemoryRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;The above components will create &lt;em&gt;browser&lt;/em&gt;, &lt;em&gt;hash&lt;/em&gt;, and &lt;em&gt;memory&lt;/em&gt; history instances. React Router v4 makes the properties and methods of the &lt;code&gt;history&lt;/code&gt; instance associated with your router available through the context in the &lt;code&gt;router&lt;/code&gt; object.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;132&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;replace()&lt;/code&gt; methods of &lt;code&gt;history&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;A history instance has two methods for navigation purpose.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;push()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;If you think of the history as an array of visited locations, &lt;code&gt;push()&lt;/code&gt; will add a new location to the array and &lt;code&gt;replace()&lt;/code&gt; will replace the current location in the array with the new one.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;133&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you programmatically navigate using React Router v4?&lt;/h3&gt; &lt;p&gt;There are three different ways to achieve programmatic routing/navigation within components.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using the &lt;code&gt;withRouter()&lt;/code&gt; higher-order function:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;withRouter()&lt;/code&gt; higher-order function will inject the history object as a prop of the component. This object provides &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;replace()&lt;/code&gt; methods to avoid the usage of context.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { withRouter } from &#39;react-router-dom&#39; // this also works with &#39;react-router-native&#39;

const Button = withRouter(({ history }) =&amp;gt; (
  &amp;lt;button
    type=&#39;button&#39;
    onClick={() =&amp;gt; { history.push(&#39;/new-location&#39;) }}
  &amp;gt;
    {&#39;Click Me!&#39;}
  &amp;lt;/button&amp;gt;
))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component and render props pattern:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component passes the same props as &lt;code&gt;withRouter()&lt;/code&gt;, so you will be able to access the history methods through the history prop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { Route } from &#39;react-router-dom&#39;

const Button = () =&amp;gt; (
  &amp;lt;Route render={({ history }) =&amp;gt; (
    &amp;lt;button
      type=&#39;button&#39;
      onClick={() =&amp;gt; { history.push(&#39;/new-location&#39;) }}
    &amp;gt;
      {&#39;Click Me!&#39;}
    &amp;lt;/button&amp;gt;
  )} /&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using context:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This option is not recommended and treated as unstable API.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const Button = (props, context) =&amp;gt; (
  &amp;lt;button
    type=&#39;button&#39;
    onClick={() =&amp;gt; {
      context.history.push(&#39;/new-location&#39;)
    }}
  &amp;gt;
    {&#39;Click Me!&#39;}
  &amp;lt;/button&amp;gt;
)

Button.contextTypes = {
  history: React.PropTypes.shape({
    push: React.PropTypes.func.isRequired
  })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;134&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to get query parameters in React Router v4?&lt;/h3&gt; &lt;p&gt;The ability to parse query strings was taken out of React Router v4 because there have been user requests over the years to support different implementation. So the decision has been given to users to choose the implementation they like. The recommended approach is to use query strings library.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const queryString = require(&#39;query-string&#39;);
const parsed = queryString.parse(props.location.search);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also use &lt;code&gt;URLSearchParams&lt;/code&gt; if you want something native:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const params = new URLSearchParams(props.location.search)
const foo = params.get(&#39;name&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You should use a &lt;em&gt;polyfill&lt;/em&gt; for IE11.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;135&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why you get ‚ÄúRouter may have only one child element‚Äù warning?&lt;/h3&gt; &lt;p&gt;You have to wrap your Route‚Äôs in a &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; block because &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; is unique in that it renders a route exclusively.&lt;/p&gt; &lt;p&gt;At first you need to add &lt;code&gt;Switch&lt;/code&gt; to your imports:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { Switch, Router, Route } from &#39;react-router&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then define the routes within &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; block:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Router&amp;gt;
  &amp;lt;Switch&amp;gt;
    &amp;lt;Route {/* ... */} /&amp;gt;
    &amp;lt;Route {/* ... */} /&amp;gt;
  &amp;lt;/Switch&amp;gt;
&amp;lt;/Router&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;136&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to pass params to &lt;code&gt;history.push&lt;/code&gt; method in React Router v4?&lt;/h3&gt; &lt;p&gt;While navigating you can pass props to the &lt;code&gt;history&lt;/code&gt; object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.props.history.push({
  pathname: &#39;/template&#39;,
  search: &#39;?name=sudheer&#39;,
  state: { detail: response.data }
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;search&lt;/code&gt; property is used to pass query params in &lt;code&gt;push()&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;137&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to implement &lt;em&gt;default&lt;/em&gt; or &lt;em&gt;NotFound&lt;/em&gt; page?&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; renders the first child &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; that matches. A &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; with no path always matches. So you just need to simply drop path attribute as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Switch&amp;gt;
  &amp;lt;Route exact path=&quot;/&quot; component={Home}/&amp;gt;
  &amp;lt;Route path=&quot;/user&quot; component={User}/&amp;gt;
  &amp;lt;Route component={NotFound} /&amp;gt;
&amp;lt;/Switch&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;138&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to get history on React Router v4?&lt;/h3&gt; &lt;p&gt;Below are the list of steps to get history object on React Router v4,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Create a module that exports a &lt;code&gt;history&lt;/code&gt; object and import this module across the project.&lt;/p&gt; &lt;p&gt;For example, create &lt;code&gt;history.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createBrowserHistory } from &#39;history&#39;

export default createBrowserHistory({
  /* pass a configuration object here if needed */
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You should use the &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; component instead of built-in routers. Imported the above &lt;code&gt;history.js&lt;/code&gt; inside &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { Router } from &#39;react-router-dom&#39;
import history from &#39;./history&#39;
import App from &#39;./App&#39;

ReactDOM.render((
  &amp;lt;Router history={history}&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/Router&amp;gt;
), holder)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also use push method of &lt;code&gt;history&lt;/code&gt; object similar to built-in history object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// some-other-file.js
import history from &#39;./history&#39;

history.push(&#39;/go-here&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;139&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to perform automatic redirect after login?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react-router&lt;/code&gt; package provides &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; component in React Router. Rendering a &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; will navigate to a new location. Like server-side redirects, the new location will override the current location in the history stack.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { Component } from &#39;react&#39;
import { Redirect } from &#39;react-router&#39;

export default class LoginComponent extends Component {
  render() {
    if (this.state.isLoggedIn === true) {
      return &amp;lt;Redirect to=&quot;/your/redirect/page&quot; /&amp;gt;
    } else {
      return &amp;lt;div&amp;gt;{&#39;Login Please&#39;}&amp;lt;/div&amp;gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Internationalization&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;140&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;React Intl&lt;/em&gt; library makes internalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization. React Intl is part of &lt;em&gt;FormatJS&lt;/em&gt; which provides bindings to React via its components and API.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;141&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main features of React Intl?&lt;/h3&gt; &lt;p&gt;Below are the main features of React Intl,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Display numbers with separators.&lt;/li&gt; 
   &lt;li&gt;Display dates and times correctly.&lt;/li&gt; 
   &lt;li&gt;Display dates relative to ‚Äúnow‚Äù.&lt;/li&gt; 
   &lt;li&gt;Pluralize labels in strings.&lt;/li&gt; 
   &lt;li&gt;Support for 150+ languages.&lt;/li&gt; 
   &lt;li&gt;Runs in the browser and Node.&lt;/li&gt; 
   &lt;li&gt;Built on standards.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;142&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the two ways of formatting in React Intl?&lt;/h3&gt; &lt;p&gt;The library provides two ways to format strings, numbers, and dates:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using react components:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;FormattedMessage
  id={&#39;account&#39;}
  defaultMessage={&#39;The amount is less than minimum balance.&#39;}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using an API:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const messages = defineMessages({
  accountMessage: {
    id: &#39;account&#39;,
    defaultMessage: &#39;The amount is less than minimum balance.&#39;,
  }
})

formatMessage(messages.accountMessage)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;143&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use &lt;code&gt;&amp;lt;FormattedMessage&amp;gt;&lt;/code&gt; as placeholder using React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;&amp;lt;Formatted... /&amp;gt;&lt;/code&gt; components from &lt;code&gt;react-intl&lt;/code&gt; return elements, not plain text, so they can‚Äôt be used for placeholders, alt text, etc. In that case, you should use lower level API &lt;code&gt;formatMessage()&lt;/code&gt;. You can inject the &lt;code&gt;intl&lt;/code&gt; object into your component using &lt;code&gt;injectIntl()&lt;/code&gt; higher-order component and then format the message using &lt;code&gt;formatMessage()&lt;/code&gt; available on that object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import { injectIntl, intlShape } from &#39;react-intl&#39;

const MyComponent = ({ intl }) =&amp;gt; {
  const placeholder = intl.formatMessage({id: &#39;messageId&#39;})
  return &amp;lt;input placeholder={placeholder} /&amp;gt;
}

MyComponent.propTypes = {
  intl: intlShape.isRequired
}

export default injectIntl(MyComponent)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;144&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to access current locale with React Intl?&lt;/h3&gt; &lt;p&gt;You can get the current locale in any component of your application using &lt;code&gt;injectIntl()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { injectIntl, intlShape } from &#39;react-intl&#39;

const MyComponent = ({ intl }) =&amp;gt; (
  &amp;lt;div&amp;gt;{`The current locale is ${intl.locale}`}&amp;lt;/div&amp;gt;
)

MyComponent.propTypes = {
  intl: intlShape.isRequired
}

export default injectIntl(MyComponent)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;145&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to format date using React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;injectIntl()&lt;/code&gt; higher-order component will give you access to the &lt;code&gt;formatDate()&lt;/code&gt; method via the props in your component. The method is used internally by instances of &lt;code&gt;FormattedDate&lt;/code&gt; and it returns the string representation of the formatted date.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { injectIntl, intlShape } from &#39;react-intl&#39;

const stringDate = this.props.intl.formatDate(date, {
  year: &#39;numeric&#39;,
  month: &#39;numeric&#39;,
  day: &#39;numeric&#39;
})

const MyComponent = ({intl}) =&amp;gt; (
  &amp;lt;div&amp;gt;{`The formatted date is ${stringDate}`}&amp;lt;/div&amp;gt;
)

MyComponent.propTypes = {
  intl: intlShape.isRequired
}

export default injectIntl(MyComponent)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Testing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;146&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Shallow Renderer in React testing?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Shallow rendering&lt;/em&gt; is useful for writing unit test cases in React. It lets you render a component &lt;em&gt;one level deep&lt;/em&gt; and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered.&lt;/p&gt; &lt;p&gt;For example, if you have the following component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;span className={&#39;heading&#39;}&amp;gt;{&#39;Title&#39;}&amp;lt;/span&amp;gt;
      &amp;lt;span className={&#39;description&#39;}&amp;gt;{&#39;Description&#39;}&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then you can assert as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import ShallowRenderer from &#39;react-test-renderer/shallow&#39;

// in your test
const renderer = new ShallowRenderer()
renderer.render(&amp;lt;MyComponent /&amp;gt;)

const result = renderer.getRenderOutput()

expect(result.type).toBe(&#39;div&#39;)
expect(result.props.children).toEqual([
  &amp;lt;span className={&#39;heading&#39;}&amp;gt;{&#39;Title&#39;}&amp;lt;/span&amp;gt;,
  &amp;lt;span className={&#39;description&#39;}&amp;gt;{&#39;Description&#39;}&amp;lt;/span&amp;gt;
])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;147&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is &lt;code&gt;TestRenderer&lt;/code&gt; package in React?&lt;/h3&gt; &lt;p&gt;This package provides a renderer that can be used to render components to pure JavaScript objects, without depending on the DOM or a native mobile environment. This package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a ReactDOM or React Native without using a browser or &lt;code&gt;jsdom&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import TestRenderer from &#39;react-test-renderer&#39;

const Link = ({page, children}) =&amp;gt; &amp;lt;a href={page}&amp;gt;{children}&amp;lt;/a&amp;gt;

const testRenderer = TestRenderer.create(
  &amp;lt;Link page={&#39;https://www.facebook.com/&#39;}&amp;gt;{&#39;Facebook&#39;}&amp;lt;/Link&amp;gt;
)

console.log(testRenderer.toJSON())
// {
//   type: &#39;a&#39;,
//   props: { href: &#39;https://www.facebook.com/&#39; },
//   children: [ &#39;Facebook&#39; ]
// }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;148&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of ReactTestUtils package?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;ReactTestUtils&lt;/em&gt; are provided in the &lt;code&gt;with-addons&lt;/code&gt; package and allow you to perform actions against a simulated DOM for the purpose of unit testing.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;149&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Jest?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Jest&lt;/em&gt; is a JavaScript unit testing framework created by Facebook based on Jasmine and provides automated mock creation and a &lt;code&gt;jsdom&lt;/code&gt; environment. It‚Äôs often used for testing components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;150&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of Jest over Jasmine?&lt;/h3&gt; &lt;p&gt;There are couple of advantages compared to Jasmine:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Automatically finds tests to execute in your source code.&lt;/li&gt; 
   &lt;li&gt;Automatically mocks dependencies when running your tests.&lt;/li&gt; 
   &lt;li&gt;Allows you to test asynchronous code synchronously.&lt;/li&gt; 
   &lt;li&gt;Runs your tests with a fake DOM implementation (via &lt;code&gt;jsdom&lt;/code&gt;) so that your tests can be run on the command line.&lt;/li&gt; 
   &lt;li&gt;Runs tests in parallel processes so that they finish sooner.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;151&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Give a simple example of Jest test case&lt;/h3&gt; &lt;p&gt;Let‚Äôs write a test for a function that adds two numbers in &lt;code&gt;sum.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const sum = (a, b) =&amp;gt; a + b

export default sum
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Create a file named &lt;code&gt;sum.test.js&lt;/code&gt; which contains actual test:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import sum from &#39;./sum&#39;

test(&#39;adds 1 + 2 to equal 3&#39;, () =&amp;gt; {
  expect(sum(1, 2)).toBe(3)
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then add the following section to your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;jest&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, run &lt;code&gt;yarn test&lt;/code&gt; or &lt;code&gt;npm test&lt;/code&gt; and Jest will print a result:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ yarn test
PASS ./sum.test.js
‚úì adds 1 + 2 to equal 3 (2ms)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Redux&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;152&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is flux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Flux&lt;/em&gt; is an &lt;em&gt;application design paradigm&lt;/em&gt; used as a replacement for the more traditional MVC pattern. It is not a framework or a library but a new kind of architecture that complements React and the concept of Unidirectional Data Flow. Facebook uses this pattern internally when working with React.&lt;/p&gt; &lt;p&gt;The workflow between dispatcher, stores and views components with distinct inputs and outputs as follows:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/flux.png&quot; alt=&quot;flux&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;153&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux&lt;/em&gt; is a predictable state container for JavaScript apps based on the &lt;em&gt;Flux design pattern&lt;/em&gt;. Redux can be used together with React, or with any other view library. It is tiny (about 2kB) and has no dependencies.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;154&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the core principles of Redux?&lt;/h3&gt; &lt;p&gt;Redux follows three fundamental principles:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Single source of truth:&lt;/strong&gt; The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;State is read-only:&lt;/strong&gt; The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Changes are made with pure functions:&lt;/strong&gt; To specify how the state tree is transformed by actions, you write reducers. Reducers are just pure functions that take the previous state and an action as parameters, and return the next state.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;155&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the downsides of Redux compared to Flux?&lt;/h3&gt; &lt;p&gt;Instead of saying downsides we can say that there are few compromises of using Redux over Flux. Those are as follows:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;You will need to learn to avoid mutations:&lt;/strong&gt; Flux is un-opinionated about mutating data, but Redux doesn‚Äôt like mutations and many packages complementary to Redux assume you never mutate the state. You can enforce this with dev-only packages like &lt;code&gt;redux-immutable-state-invariant&lt;/code&gt;, Immutable.js, or instructing your team to write non-mutating code.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;You‚Äôre going to have to carefully pick your packages:&lt;/strong&gt; While Flux explicitly doesn‚Äôt try to solve problems such as undo/redo, persistence, or forms, Redux has extension points such as middleware and store enhancers, and it has spawned a rich ecosystem.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;There is no nice Flow integration yet:&lt;/strong&gt; Flux currently lets you do very impressive static type checks which Redux doesn‚Äôt support yet.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;156&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;mapStateToProps()&lt;/code&gt; is a utility which helps your component get updated state (which is updated by some other components):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapStateToProps = (state) =&amp;gt; {
  return {
    todos: getVisibleTodos(state.todos, state.visibilityFilter)
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;mapDispatchToProps()&lt;/code&gt; is a utility which will help your component to fire an action event (dispatching action which may cause change of application state):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {
    onTodoClick: (id) =&amp;gt; {
      dispatch(toggleTodo(id))
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Recommend always using the ‚Äúobject shorthand‚Äù form for the &lt;code&gt;mapDispatchToProps&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Redux wrap it in another function that looks like (‚Ä¶args) =&amp;gt; dispatch(onTodoClick(‚Ä¶args)), and pass that wrapper function as a prop to your component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const mapDispatchToProps = ({
   onTodoClick
 })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;157&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can I dispatch an action in reducer?&lt;/h3&gt; &lt;p&gt;Dispatching an action within a reducer is an &lt;strong&gt;anti-pattern&lt;/strong&gt;. Your reducer should be &lt;em&gt;without side effects&lt;/em&gt;, simply digesting the action payload and returning a new state object. Adding listeners and dispatching actions within the reducer can lead to chained actions and other side effects.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;158&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to access Redux store outside a component?&lt;/h3&gt; &lt;p&gt;You just need to export the store from the module where it created with &lt;code&gt;createStore()&lt;/code&gt;. Also, it shouldn‚Äôt pollute the global window object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;store = createStore(myReducer)

export default store
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;159&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the drawbacks of MVW pattern?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;DOM manipulation is very expensive which causes applications to behave slow and inefficient.&lt;/li&gt; 
   &lt;li&gt;Due to circular dependencies, a complicated model was created around models and views.&lt;/li&gt; 
   &lt;li&gt;Lot of data changes happens for collaborative applications(like Google Docs).&lt;/li&gt; 
   &lt;li&gt;No way to do undo (travel back in time) easily without adding so much extra code.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;160&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Are there any similarities between Redux and RxJS?&lt;/h3&gt; &lt;p&gt;These libraries are very different for very different purposes, but there are some vague similarities.&lt;/p&gt; &lt;p&gt;Redux is a tool for managing state throughout the application. It is usually used as an architecture for UIs. Think of it as an alternative to (half of) Angular. RxJS is a reactive programming library. It is usually used as a tool to accomplish asynchronous tasks in JavaScript. Think of it as an alternative to Promises. Redux uses the Reactive paradigm because the Store is reactive. The Store observes actions from a distance, and changes itself. RxJS also uses the Reactive paradigm, but instead of being an architecture, it gives you basic building blocks, Observables, to accomplish this pattern.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;161&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to dispatch an action on load?&lt;/h3&gt; &lt;p&gt;You can dispatch an action in &lt;code&gt;componentDidMount()&lt;/code&gt; method and in &lt;code&gt;render()&lt;/code&gt; method you can verify the data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class App extends Component {
  componentDidMount() {
    this.props.fetchData()
  }

  render() {
    return this.props.isLoaded
      ? &amp;lt;div&amp;gt;{&#39;Loaded&#39;}&amp;lt;/div&amp;gt;
      : &amp;lt;div&amp;gt;{&#39;Not Loaded&#39;}&amp;lt;/div&amp;gt;
  }
}

const mapStateToProps = (state) =&amp;gt; ({
  isLoaded: state.isLoaded
})

const mapDispatchToProps = { fetchData }

export default connect(mapStateToProps, mapDispatchToProps)(App)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;162&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use &lt;code&gt;connect()&lt;/code&gt; from React Redux?&lt;/h3&gt; &lt;p&gt;You need to follow two steps to use your store in your container:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use &lt;code&gt;mapStateToProps()&lt;/code&gt;:&lt;/strong&gt; It maps the state variables from your store to the props that you specify.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connect the above props to your container:&lt;/strong&gt; The object returned by the &lt;code&gt;mapStateToProps&lt;/code&gt; function is connected to the container. You can import &lt;code&gt;connect()&lt;/code&gt; from &lt;code&gt;react-redux&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import { connect } from &#39;react-redux&#39;

class App extends React.Component {
  render() {
    return &amp;lt;div&amp;gt;{this.props.containerData}&amp;lt;/div&amp;gt;
  }
}

function mapStateToProps(state) {
  return { containerData: state.data }
}

export default connect(mapStateToProps)(App)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;163&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to reset state in Redux?&lt;/h3&gt; &lt;p&gt;You need to write a &lt;em&gt;root reducer&lt;/em&gt; in your application which delegate handling the action to the reducer generated by &lt;code&gt;combineReducers()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, let us take &lt;code&gt;rootReducer()&lt;/code&gt; to return the initial state after &lt;code&gt;USER_LOGOUT&lt;/code&gt; action. As we know, reducers are supposed to return the initial state when they are called with &lt;code&gt;undefined&lt;/code&gt; as the first argument, no matter the action.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const appReducer = combineReducers({
  /* your app&#39;s top-level reducers */
})

const rootReducer = (state, action) =&amp;gt; {
  if (action.type === &#39;USER_LOGOUT&#39;) {
    state = undefined
  }

  return appReducer(state, action)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case of using &lt;code&gt;redux-persist&lt;/code&gt;, you may also need to clean your storage. &lt;code&gt;redux-persist&lt;/code&gt; keeps a copy of your state in a storage engine. First, you need to import the appropriate storage engine and then, to parse the state before setting it to undefined and clean each storage state key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const appReducer = combineReducers({
  /* your app&#39;s top-level reducers */
})

const rootReducer = (state, action) =&amp;gt; {
  if (action.type === &#39;USER_LOGOUT&#39;) {
    Object.keys(state).forEach(key =&amp;gt; {
      storage.removeItem(`persist:${key}`)
    })

    state = undefined
  }

  return appReducer(state, action)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;164&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Whats the purpose of &lt;code&gt;at&lt;/code&gt; symbol in the Redux connect decorator?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;@&lt;/strong&gt; symbol is in fact a JavaScript expression used to signify decorators. &lt;em&gt;Decorators&lt;/em&gt; make it possible to annotate and modify classes and properties at design time.&lt;/p&gt; &lt;p&gt;Let‚Äôs take an example setting up Redux without and with a decorator.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Without decorator:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;
import * as actionCreators from &#39;./actionCreators&#39;
import { bindActionCreators } from &#39;redux&#39;
import { connect } from &#39;react-redux&#39;

function mapStateToProps(state) {
  return { todos: state.todos }
}

function mapDispatchToProps(dispatch) {
  return { actions: bindActionCreators(actionCreators, dispatch) }
}

class MyApp extends React.Component {
  // ...define your main app here
}

export default connect(mapStateToProps, mapDispatchToProps)(MyApp)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;With decorator:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;
import * as actionCreators from &#39;./actionCreators&#39;
import { bindActionCreators } from &#39;redux&#39;
import { connect } from &#39;react-redux&#39;

function mapStateToProps(state) {
  return { todos: state.todos }
}

function mapDispatchToProps(dispatch) {
  return { actions: bindActionCreators(actionCreators, dispatch) }
}

@connect(mapStateToProps, mapDispatchToProps)
export default class MyApp extends React.Component {
  // ...define your main app here
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The above examples are almost similar except the usage of decorator. The decorator syntax isn‚Äôt built into any JavaScript runtimes yet, and is still experimental and subject to change. You can use babel for the decorators support.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;165&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React context and React Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;strong&gt;Context&lt;/strong&gt; in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for.&lt;/p&gt; &lt;p&gt;Whereas &lt;strong&gt;Redux&lt;/strong&gt; is much more powerful and provides a large number of features that the Context API doesn‚Äôt provide. Also, React Redux uses context internally but it doesn‚Äôt expose this fact in the public API.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;166&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why are Redux state functions called reducers?&lt;/h3&gt; &lt;p&gt;Reducers always return the accumulation of the state (based on all previous and current actions). Therefore, they act as a reducer of state. Each time a Redux reducer is called, the state and action are passed as parameters. This state is then reduced (or accumulated) based on the action, and then the next state is returned. You could &lt;em&gt;reduce&lt;/em&gt; a collection of actions and an initial state (of the store) on which to perform these actions to get the resulting final state.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;167&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to make AJAX request in Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;redux-thunk&lt;/code&gt; middleware which allows you to define async actions.&lt;/p&gt; &lt;p&gt;Let‚Äôs take an example of fetching specific account as an AJAX call using &lt;em&gt;fetch API&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export function fetchAccount(id) {
  return dispatch =&amp;gt; {
    dispatch(setLoadingAccountState()) // Show a loading spinner
    fetch(`/account/${id}`, (response) =&amp;gt; {
      dispatch(doneFetchingAccount()) // Hide loading spinner
      if (response.status === 200) {
        dispatch(setAccount(response.json)) // Use a normal function to set the received state
      } else {
        dispatch(someError)
      }
    })
  }
}

function setAccount(data) {
 return { type: &#39;SET_Account&#39;, data: data }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;168&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Should I keep all component‚Äôs state in Redux store?&lt;/h3&gt; &lt;p&gt;Keep your data in the Redux store, and the UI related state internally in the component.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;169&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the proper way to access Redux store?&lt;/h3&gt; &lt;p&gt;The best way to access your store in a component is to use the &lt;code&gt;connect()&lt;/code&gt; function, that creates a new component that wraps around your existing one. This pattern is called &lt;em&gt;Higher-Order Components&lt;/em&gt;, and is generally the preferred way of extending a component‚Äôs functionality in React. This allows you to map state and action creators to your component, and have them passed in automatically as your store updates.&lt;/p&gt; &lt;p&gt;Let‚Äôs take an example of &lt;code&gt;&amp;lt;FilterLink&amp;gt;&lt;/code&gt; component using connect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { connect } from &#39;react-redux&#39;
import { setVisibilityFilter } from &#39;../actions&#39;
import Link from &#39;../components/Link&#39;

const mapStateToProps = (state, ownProps) =&amp;gt; ({
  active: ownProps.filter === state.visibilityFilter
})

const mapDispatchToProps = (dispatch, ownProps) =&amp;gt; ({
  onClick: () =&amp;gt; dispatch(setVisibilityFilter(ownProps.filter))
})

const FilterLink = connect(
  mapStateToProps,
  mapDispatchToProps
)(Link)

export default FilterLink
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Due to it having quite a few performance optimizations and generally being less likely to cause bugs, the Redux developers almost always recommend using &lt;code&gt;connect()&lt;/code&gt; over accessing the store directly (using context API).&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent {
  someMethod() {
    doSomethingWith(this.context.store)
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;170&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between component and container in React Redux?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Component&lt;/strong&gt; is a class or function component that describes the presentational part of your application.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Container&lt;/strong&gt; is an informal term for a component that is connected to a Redux store. Containers &lt;em&gt;subscribe&lt;/em&gt; to Redux state updates and &lt;em&gt;dispatch&lt;/em&gt; actions, and they usually don‚Äôt render DOM elements; they delegate rendering to presentational child components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;171&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the constants in Redux?&lt;/h3&gt; &lt;p&gt;Constants allows you to easily find all usages of that specific functionality across the project when you use an IDE. It also prevents you from introducing silly bugs caused by typos ‚Äì in which case, you will get a &lt;code&gt;ReferenceError&lt;/code&gt; immediately.&lt;/p&gt; &lt;p&gt;Normally we will save them in a single file (&lt;code&gt;constants.js&lt;/code&gt; or &lt;code&gt;actionTypes.js&lt;/code&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export const ADD_TODO = &#39;ADD_TODO&#39;
export const DELETE_TODO = &#39;DELETE_TODO&#39;
export const EDIT_TODO = &#39;EDIT_TODO&#39;
export const COMPLETE_TODO = &#39;COMPLETE_TODO&#39;
export const COMPLETE_ALL = &#39;COMPLETE_ALL&#39;
export const CLEAR_COMPLETED = &#39;CLEAR_COMPLETED&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In Redux, you use them in two places:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;During action creation:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Let‚Äôs take &lt;code&gt;actions.js&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { ADD_TODO } from &#39;./actionTypes&#39;;

export function addTodo(text) {
  return { type: ADD_TODO, text }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;In reducers:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Let‚Äôs create &lt;code&gt;reducer.js&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { ADD_TODO } from &#39;./actionTypes&#39;

export default (state = [], action) =&amp;gt; {
  switch (action.type) {
    case ADD_TODO:
      return [
        ...state,
        {
          text: action.text,
          completed: false
        }
      ];
    default:
      return state
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;172&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to write &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are a few ways of binding &lt;em&gt;action creators&lt;/em&gt; to &lt;code&gt;dispatch()&lt;/code&gt; in &lt;code&gt;mapDispatchToProps()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Below are the possible options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({
 action: () =&amp;gt; dispatch(action())
})
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({
 action: bindActionCreators(action, dispatch)
})
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapDispatchToProps = { action }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The third option is just a shorthand for the first one.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;173&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of the &lt;code&gt;ownProps&lt;/code&gt; parameter in &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;If the &lt;code&gt;ownProps&lt;/code&gt; parameter is specified, React Redux will pass the props that were passed to the component into your &lt;em&gt;connect&lt;/em&gt; functions. So, if you use a connected component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import ConnectedComponent from &#39;./containers/ConnectedComponent&#39;;

&amp;lt;ConnectedComponent user={&#39;john&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;ownProps&lt;/code&gt; inside your &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt; functions will be an object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{ user: &#39;john&#39; }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can use this object to decide what to return from those functions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;174&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to structure Redux top level directories?&lt;/h3&gt; &lt;p&gt;Most of the applications has several top-level directories as below:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Components&lt;/strong&gt;: Used for &lt;em&gt;dumb&lt;/em&gt; components unaware of Redux.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Containers&lt;/strong&gt;: Used for &lt;em&gt;smart&lt;/em&gt; components connected to Redux.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt;: Used for all action creators, where file names correspond to part of the app.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Reducers&lt;/strong&gt;: Used for all reducers, where files name correspond to state key.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: Used for store initialization.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;This structure works well for small and medium size apps.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;175&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is redux-saga?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;redux-saga&lt;/code&gt; is a library that aims to make side effects (asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better.&lt;/p&gt; &lt;p&gt;It is available in NPM:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ npm install --save redux-saga
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;176&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the mental model of redux-saga?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Saga&lt;/em&gt; is like a separate thread in your application, that‚Äôs solely responsible for side effects. &lt;code&gt;redux-saga&lt;/code&gt; is a redux &lt;em&gt;middleware&lt;/em&gt;, which means this thread can be started, paused and cancelled from the main application with normal Redux actions, it has access to the full Redux application state and it can dispatch Redux actions as well.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;177&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;put()&lt;/code&gt; in redux-saga?&lt;/h3&gt; &lt;p&gt;Both &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;put()&lt;/code&gt; are effect creator functions. &lt;code&gt;call()&lt;/code&gt; function is used to create effect description, which instructs middleware to call the promise. &lt;code&gt;put()&lt;/code&gt; function creates an effect, which instructs middleware to dispatch an action to the store.&lt;/p&gt; &lt;p&gt;Let‚Äôs take example of how these effects work for fetching particular user data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function* fetchUserSaga(action) {
  // `call` function accepts rest arguments, which will be passed to `api.fetchUser` function.
  // Instructing middleware to call promise, it resolved value will be assigned to `userData` variable
  const userData = yield call(api.fetchUser, action.userId)

  // Instructing middleware to dispatch corresponding action.
  yield put({
    type: &#39;FETCH_USER_SUCCESS&#39;,
    userData
  })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;178&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux Thunk?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux Thunk&lt;/em&gt; middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods &lt;code&gt;dispatch()&lt;/code&gt; and &lt;code&gt;getState()&lt;/code&gt; as parameters.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;179&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between &lt;code&gt;redux-saga&lt;/code&gt; and &lt;code&gt;redux-thunk&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;Both &lt;em&gt;Redux Thunk&lt;/em&gt; and &lt;em&gt;Redux Saga&lt;/em&gt; take care of dealing with side effects. In most of the scenarios, Thunk uses &lt;em&gt;Promises&lt;/em&gt; to deal with them, whereas Saga uses &lt;em&gt;Generators&lt;/em&gt;. Thunk is simple to use and Promises are familiar to many developers, Sagas/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;180&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux DevTools?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux DevTools&lt;/em&gt; is a live-editing time travel environment for Redux with hot reloading, action replay, and customizable UI. If you don‚Äôt want to bother with installing Redux DevTools and integrating it into your project, consider using Redux DevTools Extension for Chrome and Firefox.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;181&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the features of Redux DevTools?&lt;/h3&gt; &lt;p&gt;Some of the main features of Redux DevTools are below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Lets you inspect every state and action payload.&lt;/li&gt; 
   &lt;li&gt;Lets you go back in time by &lt;em&gt;cancelling&lt;/em&gt; actions.&lt;/li&gt; 
   &lt;li&gt;If you change the reducer code, each &lt;em&gt;staged&lt;/em&gt; action will be re-evaluated.&lt;/li&gt; 
   &lt;li&gt;If the reducers throw, you will see during which action this happened, and what the error was.&lt;/li&gt; 
   &lt;li&gt;With &lt;code&gt;persistState()&lt;/code&gt; store enhancer, you can persist debug sessions across page reloads.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;182&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are Redux selectors and why to use them?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Selectors&lt;/em&gt; are functions that take Redux state as an argument and return some data to pass to the component.&lt;/p&gt; &lt;p&gt;For example, to get user details from the state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const getUserData = state =&amp;gt; state.user.data
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These selectors have two main benefits,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The selector can compute derived data, allowing Redux to store the minimal possible state&lt;/li&gt; 
   &lt;li&gt;The selector is not recomputed unless one of its arguments changes&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;183&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux Form?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux Form&lt;/em&gt; works with React and Redux to enable a form in React to use Redux to store all of its state. Redux Form can be used with raw HTML5 inputs, but it also works very well with common UI frameworks like Material UI, React Widgets and React Bootstrap.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;184&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main features of Redux Form?&lt;/h3&gt; &lt;p&gt;Some of the main features of Redux Form are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Field values persistence via Redux store.&lt;/li&gt; 
   &lt;li&gt;Validation (sync/async) and submission.&lt;/li&gt; 
   &lt;li&gt;Formatting, parsing and normalization of field values.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;185&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to add multiple middlewares to Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;applyMiddleware()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, you can add &lt;code&gt;redux-thunk&lt;/code&gt; and &lt;code&gt;logger&lt;/code&gt; passing them as arguments to &lt;code&gt;applyMiddleware()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createStore, applyMiddleware } from &#39;redux&#39;
const createStoreWithMiddleware = applyMiddleware(ReduxThunk, logger)(createStore)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;186&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to set initial state in Redux?&lt;/h3&gt; &lt;p&gt;You need to pass initial state as second argument to createStore:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const rootReducer = combineReducers({
  todos: todos,
  visibilityFilter: visibilityFilter
})

const initialState = {
  todos: [{ id: 123, name: &#39;example&#39;, completed: false }]
}

const store = createStore(
  rootReducer,
  initialState
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;187&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How Relay is different from Redux?&lt;/h3&gt; &lt;p&gt;Relay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via &lt;em&gt;GraphQL&lt;/em&gt; queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an action in Redux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Actions&lt;/em&gt; are plain JavaScript objects or payloads of information that send data from your application to your store. They are the only source of information for the store. Actions must have a type property that indicates the type of action being performed.&lt;/p&gt; &lt;p&gt;For example, let‚Äôs take an action which represents adding a new todo item:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{
  type: ADD_TODO,
  text: &#39;Add todo item&#39;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;React Native&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;188&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React Native and React?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; is a JavaScript library, supporting both front end web and being run on the server, for building user interfaces and web applications.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;React Native&lt;/strong&gt; is a mobile framework that compiles to native app components, allowing you to build native mobile applications (iOS, Android, and Windows) in JavaScript that allows you to use React to build your components, and implements React under the hood.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;189&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to test React Native apps?&lt;/h3&gt; &lt;p&gt;React Native can be tested only in mobile simulators like iOS and Android. You can run the app in your mobile using expo app (https://expo.io) Where it syncs using QR code, your mobile and computer should be in same wireless network.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;190&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to do logging in React Native?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;console.log&lt;/code&gt;, &lt;code&gt;console.warn&lt;/code&gt;, etc. As of React Native v0.29 you can simply run the following to see logs in the console:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ react-native log-ios
$ react-native log-android
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;191&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to debug your React Native?&lt;/h3&gt; &lt;p&gt;Follow the below steps to debug React Native app:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Run your application in the iOS simulator.&lt;/li&gt; 
   &lt;li&gt;Press &lt;code&gt;Command + D&lt;/code&gt; and a webpage should open up at &lt;code&gt;http://localhost:8081/debugger-ui&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Enable &lt;em&gt;Pause On Caught Exceptions&lt;/em&gt; for a better debugging experience.&lt;/li&gt; 
   &lt;li&gt;Press &lt;code&gt;Command + Option + I&lt;/code&gt; to open the Chrome Developer tools, or open it via &lt;code&gt;View&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer Tools&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;You should now be able to debug as you normally would.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React supported libraries &amp;amp; Integration&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;192&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is reselect and how it works?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Reselect&lt;/em&gt; is a &lt;strong&gt;selector library&lt;/strong&gt; (for Redux) which uses &lt;em&gt;memoization&lt;/em&gt; concept. It was originally written to compute derived data from Redux-like applications state, but it can‚Äôt be tied to any architecture or library.&lt;/p&gt; &lt;p&gt;Reselect keeps a copy of the last inputs/outputs of the last call, and recomputes the result only if one of the inputs changes. If the the same inputs are provided twice in a row, Reselect returns the cached output. It‚Äôs memoization and cache are fully customizable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;193&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Flow?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Flow&lt;/em&gt; is a &lt;em&gt;static type checker&lt;/em&gt; designed to find type errors in JavaScript. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving &lt;code&gt;null&lt;/code&gt;, unlike most type systems.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;194&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Flow and PropTypes?&lt;/h3&gt; &lt;p&gt;Flow is a &lt;em&gt;static analysis tool&lt;/em&gt; (static checker) which uses a superset of the language, allowing you to add type annotations to all of your code and catch an entire class of bugs at compile time.&lt;/p&gt; &lt;p&gt;PropTypes is a &lt;em&gt;basic type checker&lt;/em&gt; (runtime checker) which has been patched onto React. It can‚Äôt check anything other than the types of the props being passed to a given component. If you want more flexible typechecking for your entire project Flow/TypeScript are appropriate choices.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;195&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use Font Awesome icons in React?&lt;/h3&gt; &lt;p&gt;The below steps followed to include Font Awesome in React:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Install &lt;code&gt;font-awesome&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ npm install --save font-awesome
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Import &lt;code&gt;font-awesome&lt;/code&gt; in your &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import &#39;font-awesome/css/font-awesome.min.css&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Add Font Awesome classes in &lt;code&gt;className&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;render() {
  return &amp;lt;div&amp;gt;&amp;lt;i className={&#39;fa fa-spinner&#39;} /&amp;gt;&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;196&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Dev Tools?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;React Developer Tools&lt;/em&gt; let you inspect the component hierarchy, including component props and state. It exists both as a browser extension (for Chrome and Firefox), and as a standalone app (works with other environments including Safari, IE, and React Native).&lt;/p&gt; &lt;p&gt;The official extensions available for different browsers or environments.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Chrome extension&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Firefox extension&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Standalone app&lt;/strong&gt; (Safari, React Native, etc)&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;197&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why is DevTools not loading in Chrome for local files?&lt;/h3&gt; &lt;p&gt;If you opened a local HTML file in your browser (&lt;code&gt;file://...&lt;/code&gt;) then you must first open &lt;em&gt;Chrome Extensions&lt;/em&gt; and check &lt;code&gt;Allow access to file URLs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;198&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use Polymer in React?&lt;/h3&gt; &lt;p&gt;You need to follow below steps to use Polymer in React,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Create a Polymer element:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;link rel=&#39;import&#39; href=&#39;../../bower_components/polymer/polymer.html&#39; /&amp;gt;
Polymer({
  is: &#39;calender-element&#39;,
  ready: function() {
    this.textContent = &#39;I am a calender&#39;
  }
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Create the Polymer component HTML tag by importing it in a HTML document, e.g. import it in the &lt;code&gt;index.html&lt;/code&gt; of your React application:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&#39;import&#39; href=&#39;./src/polymer-components/calender-element.html&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Use that element in the JSX file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;

class MyComponent extends React.Component {
  render() {
    return (
      &amp;lt;calender-element /&amp;gt;
    )
  }
}

export default MyComponent
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;199&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of React over Vue.js?&lt;/h3&gt; &lt;p&gt;React has the following advantages over Vue.js:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Gives more flexibility in large apps developing.&lt;/li&gt; 
   &lt;li&gt;Easier to test.&lt;/li&gt; 
   &lt;li&gt;Suitable for mobile apps creating.&lt;/li&gt; 
   &lt;li&gt;More information and solutions available.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above list of advantages are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;200&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React and Angular?&lt;/h3&gt; &lt;p&gt;Let‚Äôs see the difference between React and Angular in a table format.&lt;/p&gt; &lt;p&gt;| React | Angular | | ‚Äî‚Äì | ‚Äî‚Äì‚Äì | | React is a library and has only the View layer | Angular is a framework and has complete MVC functionality | | React handles rendering on the server side | AngularJS renders only on the client side but Angular 2 and above renders on the server side | | React uses JSX that looks like HTML in JS which can be confusing | Angular follows the template approach for HTML, which makes code shorter and easy to understand | | React Native, which is a React type to build mobile applications are faster and more stable | Ionic, Angular‚Äôs mobile native app is relatively less stable and slower | | In React, data flows only in one way and hence debugging is easy | In Angular, data flows both way i.e it has two-way data binding between children and parent and hence debugging is often difficult |&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above list of differences are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;201&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why React tab is not showing up in DevTools?&lt;/h3&gt; &lt;p&gt;When the page loads, &lt;em&gt;React DevTools&lt;/em&gt; sets a global named &lt;code&gt;__REACT_DEVTOOLS_GLOBAL_HOOK__&lt;/code&gt;, then React communicates with that hook during initialization. If the website is not using React or if React fails to communicate with DevTools then it won‚Äôt show up the tab.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;202&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are Styled Components?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;styled-components&lt;/code&gt; is a JavaScript library for styling React applications. It removes the mapping between styles and components, and lets you write actual CSS augmented with JavaScript.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;203&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example of Styled Components?&lt;/h3&gt; &lt;p&gt;Lets create &lt;code&gt;&amp;lt;Title&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Wrapper&amp;gt;&lt;/code&gt; components with specific styles for each.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;
import styled from &#39;styled-components&#39;

// Create a &amp;lt;Title&amp;gt; component that renders an &amp;lt;h1&amp;gt; which is centered, red and sized at 1.5em
const Title = styled.h1`
  font-size: 1.5em;
  text-align: center;
  color: palevioletred;
`

// Create a &amp;lt;Wrapper&amp;gt; component that renders a &amp;lt;section&amp;gt; with some padding and a papayawhip background
const Wrapper = styled.section`
  padding: 4em;
  background: papayawhip;
`
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These two variables, &lt;code&gt;Title&lt;/code&gt; and &lt;code&gt;Wrapper&lt;/code&gt;, are now components that you can render just like any other react component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Wrapper&amp;gt;
  &amp;lt;Title&amp;gt;{&#39;Lets start first styled component!&#39;}&amp;lt;/Title&amp;gt;
&amp;lt;/Wrapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;204&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Relay?&lt;/h3&gt; &lt;p&gt;Relay is a JavaScript framework for providing a data layer and client-server communication to web applications using the React view layer.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;205&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use TypeScript in &lt;code&gt;create-react-app&lt;/code&gt; application?&lt;/h3&gt; &lt;p&gt;Starting from react-scripts@2.1.0 or higher, there is a built-in support for typescript. i.e, &lt;code&gt;create-react-app&lt;/code&gt; now supports typescript natively. You can just pass &lt;code&gt;--typescript&lt;/code&gt; option as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx create-react-app my-app --typescript

# or

yarn create react-app my-app --typescript
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But for lower versions of react scripts, just supply &lt;code&gt;--scripts-version&lt;/code&gt; option as &lt;code&gt;react-scripts-ts&lt;/code&gt; while you create a new project. &lt;code&gt;react-scripts-ts&lt;/code&gt; is a set of adjustments to take the standard &lt;code&gt;create-react-app&lt;/code&gt; project pipeline and bring TypeScript into the mix.&lt;/p&gt; &lt;p&gt;Now the project layout should look like the following:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;my-app/
‚îú‚îÄ .gitignore
‚îú‚îÄ images.d.ts
‚îú‚îÄ node_modules/
‚îú‚îÄ public/
‚îú‚îÄ src/
‚îÇ  ‚îî‚îÄ ...
‚îú‚îÄ package.json
‚îú‚îÄ tsconfig.json
‚îú‚îÄ tsconfig.prod.json
‚îú‚îÄ tsconfig.test.json
‚îî‚îÄ tslint.json
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Miscellaneous&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;206&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main features of Reselect library?&lt;/h3&gt; &lt;p&gt;Let‚Äôs see the main features of Reselect library,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Selectors can compute derived data, allowing Redux to store the minimal possible state.&lt;/li&gt; 
   &lt;li&gt;Selectors are efficient. A selector is not recomputed unless one of its arguments changes.&lt;/li&gt; 
   &lt;li&gt;Selectors are composable. They can be used as input to other selectors.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h4&gt;Give an example of Reselect usage?&lt;/h4&gt; &lt;p&gt;Let‚Äôs take calculations and different amounts of a shipment order with the simplified usage of Reselect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createSelector } from &#39;reselect&#39;

const shopItemsSelector = state =&amp;gt; state.shop.items
const taxPercentSelector = state =&amp;gt; state.shop.taxPercent

const subtotalSelector = createSelector(
  shopItemsSelector,
  items =&amp;gt; items.reduce((acc, item) =&amp;gt; acc + item.value, 0)
)

const taxSelector = createSelector(
  subtotalSelector,
  taxPercentSelector,
  (subtotal, taxPercent) =&amp;gt; subtotal * (taxPercent / 100)
)

export const totalSelector = createSelector(
  subtotalSelector,
  taxSelector,
  (subtotal, tax) =&amp;gt; ({ total: subtotal + tax })
)

let exampleState = {
  shop: {
    taxPercent: 8,
    items: [
      { name: &#39;apple&#39;, value: 1.20 },
      { name: &#39;orange&#39;, value: 0.95 },
    ]
  }
}

console.log(subtotalSelector(exampleState)) // 2.15
console.log(taxSelector(exampleState))      // 0.172
console.log(totalSelector(exampleState))    // { total: 2.322 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;209&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Does the statics object work with ES6 classes in React?&lt;/h3&gt; &lt;p&gt;No, &lt;code&gt;statics&lt;/code&gt; only works with &lt;code&gt;React.createClass()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;someComponent= React.createClass({
  statics: {
    someMethod: function() {
      // ..
    }
  }
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can write statics inside ES6+ classes as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Component extends React.Component {
  static propTypes = {
    // ...
  }

  static someMethod() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or writing them outside class as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Component extends React.Component {
   ....
}

Component.propTypes = {...}
Component.someMethod = function(){....}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;210&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can Redux only be used with React?&lt;/h3&gt; &lt;p&gt;Redux can be used as a data store for any UI layer. The most common usage is with React and React Native, but there are bindings available for Angular, Angular 2, Vue, Mithril, and more. Redux simply provides a subscription mechanism which can be used by any other code.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;211&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do you need to have a particular build tool to use Redux?&lt;/h3&gt; &lt;p&gt;Redux is originally written in ES6 and transpiled for production into ES5 with Webpack and Babel. You should be able to use it regardless of your JavaScript build process. Redux also offers a UMD build that can be used directly without any build process at all.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;212&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How Redux Form &lt;code&gt;initialValues&lt;/code&gt; get updated from state?&lt;/h3&gt; &lt;p&gt;You need to add &lt;code&gt;enableReinitialize : true&lt;/code&gt; setting.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const InitializeFromStateForm = reduxForm({
  form: &#39;initializeFromState&#39;,
  enableReinitialize : true
})(UserEdit)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If your &lt;code&gt;initialValues&lt;/code&gt; prop gets updated, your form will update too.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;213&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How React PropTypes allow different types for one prop?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;oneOfType()&lt;/code&gt; method of &lt;code&gt;PropTypes&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, the height property can be defined with either &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt; type as below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Component.PropTypes = {
  size: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number
  ])
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;214&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can I import an SVG file as react component?&lt;/h3&gt; &lt;p&gt;You can import SVG directly as component instead of loading it as a file. This feature is available with &lt;code&gt;react-scripts@2.0.0&lt;/code&gt; and higher.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { ReactComponent as Logo } from &#39;./logo.svg&#39;

const App = () =&amp;gt; (
  &amp;lt;div&amp;gt;
    {/* Logo is an actual react component */}
    &amp;lt;Logo /&amp;gt;
  &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Don‚Äôt forget about the curly braces in the import.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;215&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why are inline ref callbacks or functions not recommended?&lt;/h3&gt; &lt;p&gt;If the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class UserForm extends Component {
  handleSubmit = () =&amp;gt; {
    console.log(&quot;Input Value is: &quot;, this.input.value)
  }


  render () {
   return (
     &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
       &amp;lt;input
         type=&#39;text&#39;
         ref={(input) =&amp;gt; this.input = input} /&amp;gt; // Access DOM input in handle submit
       &amp;lt;button type=&#39;submit&#39;&amp;gt;Submit&amp;lt;/button&amp;gt;
     &amp;lt;/form&amp;gt;
   )
 }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But our expectation is for the ref callback to get called once, when the component mounts. One quick fix is to use the ES7 class property syntax to define the function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class UserForm extends Component {
 handleSubmit = () =&amp;gt; {
   console.log(&quot;Input Value is: &quot;, this.input.value)
 }

 setSearchInput = (input) =&amp;gt; {
   this.input = input
 }

 render () {
   return (
     &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
       &amp;lt;input
         type=&#39;text&#39;
         ref={this.setSearchInput} /&amp;gt; // Access DOM input in handle submit
       &amp;lt;button type=&#39;submit&#39;&amp;gt;Submit&amp;lt;/button&amp;gt;
     &amp;lt;/form&amp;gt;
   )
 }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;**Note:** In React v16.3,
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;216&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is render hijacking in react?&lt;/h3&gt; &lt;p&gt;The concept of render hijacking is the ability to control what a component will output from another component. It actually means that you decorate your component by wrapping it into a Higher-Order component. By wrapping you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enables hijacking, but by using HOC you make your component behave in different way.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;217&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are HOC factory implementations?&lt;/h3&gt; &lt;p&gt;There are two main ways of implementing HOCs in React.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Props Proxy (PP) and&lt;/li&gt; 
   &lt;li&gt;Inheritance Inversion (II).&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;But they follow different approaches for manipulating the &lt;em&gt;WrappedComponent&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Props Proxy&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, the render method of the HOC returns a React Element of the type of the WrappedComponent. We also pass through the props that the HOC receives, hence the name &lt;strong&gt;Props Proxy&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;
function ppHOC(WrappedComponent) {
 return class PP extends React.Component {
   render() {
     return &amp;lt;WrappedComponent {...this.props}/&amp;gt;
   }
 }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Inheritance Inversion&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, the returned HOC class (Enhancer) extends the WrappedComponent. It is called Inheritance Inversion because instead of the WrappedComponent extending some Enhancer class, it is passively extended by the Enhancer. In this way the relationship between them seems &lt;strong&gt;inverse&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function iiHOC(WrappedComponent) {
 return class Enhancer extends WrappedComponent {
   render() {
     return super.render()
   }
 }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;218&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to pass numbers to React component?&lt;/h3&gt; &lt;p&gt;You should be passing the numbers via curly braces({}) where as strings in quotes&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;   React.render(&amp;lt;User age={30} department={&quot;IT&quot;} /&amp;gt;, document.getElementById(&#39;container&#39;));
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;219&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do I need to keep all my state into Redux? Should I ever use react internal state?&lt;/h3&gt; &lt;p&gt;It is up to developer decision. i.e, It is developer job to determine what kinds of state make up your application, and where each piece of state should live. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as ‚Äúis this dropdown currently open‚Äù, inside a component‚Äôs internal state.&lt;/p&gt; &lt;p&gt;Below are the thumb rules to determine what kind of data should be put into Redux&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Do other parts of the application care about this data?&lt;/li&gt; 
   &lt;li&gt;Do you need to be able to create further derived data based on this original data?&lt;/li&gt; 
   &lt;li&gt;Is the same data being used to drive multiple components?&lt;/li&gt; 
   &lt;li&gt;Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?&lt;/li&gt; 
   &lt;li&gt;Do you want to cache the data (i.e, use what‚Äôs in state if it‚Äôs already there instead of re-requesting it)?&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;220&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of registerServiceWorker in React?&lt;/h3&gt; &lt;p&gt;React creates a service worker for you without any configuration by default. The service worker is a web API that helps you cache your assets and other files so that when the user is offline or on slow network, he/she can still see results on the screen, as such, it helps you build a better user experience, that‚Äôs what you should know about service worker‚Äôs for now. It‚Äôs all about adding offline capabilities to your site.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;   import React from &#39;react&#39;;
   import ReactDOM from &#39;react-dom&#39;;
   import App from &#39;./App&#39;;
   import registerServiceWorker from &#39;./registerServiceWorker&#39;;

   ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;root&#39;));
   registerServiceWorker();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;221&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React memo function?&lt;/h3&gt; &lt;p&gt;Class components can be restricted from rendering when their input props are the same using &lt;strong&gt;PureComponent or shouldComponentUpdate&lt;/strong&gt;. Now you can do the same with function components by wrapping them in &lt;strong&gt;React.memo&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const MyComponent = React.memo(function MyComponent(props) {
 /* only rerenders if props change */
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;222&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React lazy function?&lt;/h3&gt; The &lt;code&gt;React.lazy&lt;/code&gt; function lets you render an dynamic import as a regular component. It will automatically load the bundle containing the OtherComponent when the component gets rendered. This must return a Promise which resolves to a module with a default export containing a React component. &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const OtherComponent = React.lazy(() =&amp;gt; import(&#39;./OtherComponent&#39;));

function MyComponent() {
 return (
   &amp;lt;div&amp;gt;
     &amp;lt;OtherComponent /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt; &lt;strong&gt;Note:&lt;/strong&gt; React.lazy and Suspense is not yet available for server-side rendering. If you want to do code-splitting in a server rendered app, we still recommend React Loadable.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;223&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent unnecessary updates using setState?&lt;/h3&gt; &lt;p&gt;You can compare current value of the state with an existing state value and decide whether to rerender the page or not. If the values are same then you need to return &lt;strong&gt;null&lt;/strong&gt; to stop re-rendering otherwise return the latest state value.&lt;/p&gt; &lt;p&gt;For example, the user profile information is conditionally rendered as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;getUserProfile = user =&amp;gt; {
  const latestAddress = user.address;
  this.setState(state =&amp;gt; {
    if (state.address === latestAddress) {
      return null;
    } else {
      return { title: latestAddress };
    }
  });
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;224&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you render Array, Strings and Numbers in React 16 Version?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt;: Unlike older releases, you don‚Äôt need to make sure &lt;strong&gt;render&lt;/strong&gt; method return a single element in React16. You are able to return multiple sibling elements without a wrapping element by returning an array.&lt;/p&gt; &lt;p&gt;For example, let us take the below list of developers,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const ReactJSDevs = () =&amp;gt; {
  return [
    &amp;lt;li key=&quot;1&quot;&amp;gt;John&amp;lt;/li&amp;gt;,
    &amp;lt;li key=&quot;2&quot;&amp;gt;Jackie&amp;lt;/li&amp;gt;,
    &amp;lt;li key=&quot;3&quot;&amp;gt;Jordan&amp;lt;/li&amp;gt;
  ];
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also merge this array of items in another array component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const JSDevs = () =&amp;gt; {
  return (
    &amp;lt;ul&amp;gt;
      &amp;lt;li&amp;gt;Brad&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;Brodge&amp;lt;/li&amp;gt;
      &amp;lt;ReactJSDevs/&amp;gt;
      &amp;lt;li&amp;gt;Brandon&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Strings and Numbers:&lt;/strong&gt; You can also return string and number type from the render method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
 return &#39;Welcome to ReactJS questions&#39;;
}
// Number
render() {
 return 2018;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;225&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use class field declarations syntax in React classes?&lt;/h3&gt; &lt;p&gt;React Class Components can be made much more concise using the class field declarations. You can initialize local state without using the constructor and declare class methods by using arrow functions without the extra need to bind them.&lt;/p&gt; &lt;p&gt;Let‚Äôs take a counter example to demonstrate class field declarations for state without using constructor and methods without binding,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class Counter extends Component {
  state = { value: 0 };

  handleIncrement = () =&amp;gt; {
    this.setState(prevState =&amp;gt; ({
      value: prevState.value + 1
    }));
  };

  handleDecrement = () =&amp;gt; {
    this.setState(prevState =&amp;gt; ({
      value: prevState.value - 1
    }));
  };

  render() {
    return (
      &amp;lt;div&amp;gt;
        {this.state.value}

        &amp;lt;button onClick={this.handleIncrement}&amp;gt;+&amp;lt;/button&amp;gt;
        &amp;lt;button onClick={this.handleDecrement}&amp;gt;-&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;226&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are hooks?&lt;/h3&gt; &lt;p&gt;Hooks is a new feature(React 16.8) that lets you use state and other React features without writing a class.&lt;/p&gt; &lt;p&gt;Let‚Äôs see an example of useState hook example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { useState } from &#39;react&#39;;

function Example() {
  // Declare a new state variable, which we&#39;ll call &quot;count&quot;
  const [count, setCount] = useState(0);

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;
        Click me
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;227&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the rules needs to follow for hooks?&lt;/h3&gt; &lt;p&gt;You need to follow two rules in order to use hooks,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Call Hooks only at the top level of your react functions. i.e, You shouldn‚Äôt call Hooks inside loops, conditions, or nested functions. This will ensure that Hooks are called in the same order each time a component renders and it preserves the state of Hooks between multiple useState and useEffect calls.&lt;/li&gt; 
   &lt;li&gt;Call Hooks from React Functions only. i.e, You shouldn‚Äôt call Hooks from regular JavaScript functions.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;228&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to ensure hooks followed the rules in your project?&lt;/h3&gt; React team released an ESLint plugin called &lt;strong&gt;eslint-plugin-react-hooks&lt;/strong&gt; that enforces these two rules. You can add this plugin to your project using the below command, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm install eslint-plugin-react-hooks@next
&lt;/code&gt;&lt;/pre&gt; And apply the below config in your ESLint config file, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Your ESLint configuration
{
  &quot;plugins&quot;: [
    // ...
    &quot;react-hooks&quot;
  ],
  &quot;rules&quot;: {
    // ...
    &quot;react-hooks/rules-of-hooks&quot;: &quot;error&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;strong&gt;Note:&lt;/strong&gt; This plugin is intended to use in Create React App by default.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;229&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between Flux and Redux?&lt;/h3&gt; &lt;p&gt;Below are the major differences between Flux and Redux&lt;/p&gt; &lt;p&gt;| Flux | Redux | | ‚Äî‚Äì | ‚Äî‚Äì‚Äì | | State is mutable | State is immutable | | The Store contains both state and change logic | The Store and change logic are separate | | There are multiple stores exist | There is only one store exist | | All the stores are disconnected and flat | Single store with hierarchical reducers| | It has a singleton dispatcher | There is no concept of dispatcher | | React components subscribe to the store | Container components uses connect function|&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;230&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of React Router V4?&lt;/h3&gt; &lt;p&gt;Below are the main benefits of React Router V4 module,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;In React Router v4(version 4), the API is completely about components. A router can be visualized as a single component(&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;) which wraps specific child router components(&lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;You don‚Äôt need to manually set history. The router module will take care history by wrapping routes with &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt; component.&lt;/li&gt; 
   &lt;li&gt;The application size is reduced by adding only the specific router module(Web, core, or native)&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;231&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can you describe about componentDidCatch lifecycle method signature?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;componentDidCatch&lt;/strong&gt; lifecycle method is invoked after an error has been thrown by a descendant component. The method receives two parameters,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;error: - The error object which was thrown&lt;/li&gt; 
   &lt;li&gt;info: - An object with a componentStack key contains the information about which component threw the error.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;The method structure would be as follows&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;componentDidCatch(error, info)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;232&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;In which scenarios error boundaries do not catch errors?&lt;/h3&gt; &lt;p&gt;Below are the cases in which error boundaries doesn‚Äôt work,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Inside Event handlers&lt;/li&gt; 
   &lt;li&gt;Asynchronous code using &lt;strong&gt;setTimeout or requestAnimationFrame&lt;/strong&gt; callbacks&lt;/li&gt; 
   &lt;li&gt;During Server side rendering&lt;/li&gt; 
   &lt;li&gt;When errors thrown in the error boundary code itself&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;233&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you not need error boundaries for event handlers?&lt;/h3&gt; &lt;p&gt;Error boundaries do not catch errors inside event handlers.&lt;/p&gt; &lt;p&gt;React doesn‚Äôt need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers don‚Äôt happen during rendering. So if they throw, React still knows what to display on the screen.&lt;/p&gt; &lt;p&gt;If you need to catch an error inside an event handler, use the regular JavaScript try / catch statement:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null };
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    try {
      // Do something that could throw
    } catch (error) {
      this.setState({ error });
    }
  }

  render() {
    if (this.state.error) {
      return &amp;lt;h1&amp;gt;Caught an error.&amp;lt;/h1&amp;gt;
    }
    return &amp;lt;button onClick={this.handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the above example is demonstrating regular JavaScript behavior and doesn‚Äôt use error boundaries.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;234&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between try catch block and error boundaries?&lt;/h3&gt; &lt;p&gt;Try catch block works with imperative code whereas error boundaries are meant for declarative code to render on the screen.&lt;/p&gt; &lt;p&gt;For example, the try catch block used for below imperative code&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  showButton();
} catch (error) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas error boundaries wrap declarative code as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;ErrorBoundary&amp;gt;
  &amp;lt;MyComponent /&amp;gt;
&amp;lt;/ErrorBoundary&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So if an error occurs in a &lt;strong&gt;componentDidUpdate&lt;/strong&gt; method caused by a &lt;strong&gt;setState&lt;/strong&gt; somewhere deep in the tree, it will still correctly propagate to the closest error boundary.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;235&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the behavior of uncaught errors in react 16?&lt;/h3&gt; In React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree. The reason behind this decision is that it is worse to leave corrupted UI in place than to completely remove it. For example, it is worse for a payments app to display a wrong amount than to render nothing.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;236&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the proper placement for error boundaries?&lt;/h3&gt; The granularity of error boundaries usage is up to the developer based on project needs. You can follow either of these approaches, 
  &lt;ol&gt; 
   &lt;li&gt;You can wrap top-level route components to display a generic error message for the entire application.&lt;/li&gt; 
   &lt;li&gt;You can also wrap individual components in an error boundary to protect them from crashing the rest of the application.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;237&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of component stack trace from error boundary?&lt;/h3&gt; &lt;p&gt;Apart from error messages and javascript stack, React16 will display the component stack trace with file names and line numbers using error boundary concept.&lt;/p&gt; &lt;p&gt;For example, BuggyCounter component displays the component stack trace as below,&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/error_boundary.png&quot; alt=&quot;stacktrace&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;238&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the required method to be defined for a class component?&lt;/h3&gt; The &lt;code&gt;render()&lt;/code&gt; method is the only required method in a class component. i.e, All methods other than render method are optional for a class component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;239&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible return types of render method?&lt;/h3&gt; &lt;p&gt;Below are the list of following types used and return from render method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;React elements:&lt;/strong&gt; Elements that instruct React to render a DOM node. It includes html elements such as &lt;code&gt;&amp;lt;div/&amp;gt;&lt;/code&gt; and user defined elements.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Arrays and fragments:&lt;/strong&gt; Return multiple elements to render as Arrays and Fragments to wrap multiple elements&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Portals:&lt;/strong&gt; Render children into a different DOM subtree.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;String and numbers:&lt;/strong&gt; Render both Strings and Numbers as text nodes in the DOM&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Booleans or null:&lt;/strong&gt; Doesn‚Äôt render anything but these types are used to conditionally render content.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;240&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main purpose of constructor?&lt;/h3&gt; &lt;p&gt;The constructor is mainly used for two purposes,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;To initialize local state by assigning object to this.state&lt;/li&gt; 
   &lt;li&gt;For binding event handler methods to the instance For example, the below code covers both the above cases,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;constructor(props) {
  super(props);
  // Don&#39;t call this.setState() here!
  this.state = { counter: 0 };
  this.handleClick = this.handleClick.bind(this);
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;241&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it mandatory to define constructor for React component?&lt;/h3&gt; No, it is not mandatory. i.e, If you don‚Äôt initialize state and you don‚Äôt bind methods, you don‚Äôt need to implement a constructor for your React component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;242&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are default props?&lt;/h3&gt; &lt;p&gt;The defaultProps are defined as a property on the component class to set the default props for the class. This is used for undefined props, but not for null props.&lt;/p&gt; &lt;p&gt;For example, let us create color default prop for the button component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyButton extends React.Component {
  // ...
}

MyButton.defaultProps = {
  color: &#39;red&#39;
};

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If props.color is not provided then it will set the default value to ‚Äòred‚Äô. i.e, Whenever you try to access the color prop it uses default value&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;render() {
   return &amp;lt;MyButton /&amp;gt; ; // props.color will be set to red
 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you provide null value then it remains null value.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;243&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why should not call setState in componentWillUnmount?&lt;/h3&gt; You should not call &lt;code&gt;setState()&lt;/code&gt; in &lt;code&gt;componentWillUnmount()&lt;/code&gt; because once a component instance is unmounted, it will never be mounted again.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;244&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of getDerivedStateFromError?&lt;/h3&gt; &lt;p&gt;This lifecycle method is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.&lt;/p&gt; &lt;p&gt;The signature of the lifecycle method is as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;static getDerivedStateFromError(error)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let us take error boundary use case with the above lifecycle method for demonstration purpose,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI.
    return { hasError: true };
  }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return &amp;lt;h1&amp;gt;Something went wrong.&amp;lt;/h1&amp;gt;;
    }

    return this.props.children;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;245&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the methods order when component re-rendered?&lt;/h3&gt; &lt;p&gt;An update can be caused by changes to props or state. The below methods are called in the following order when a component is being re-rendered.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;static getDerivedStateFromProps()&lt;/li&gt; 
   &lt;li&gt;shouldComponentUpdate()&lt;/li&gt; 
   &lt;li&gt;render()&lt;/li&gt; 
   &lt;li&gt;getSnapshotBeforeUpdate()&lt;/li&gt; 
   &lt;li&gt;componentDidUpdate()&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;246&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the methods invoked during error handling?&lt;/h3&gt; &lt;p&gt;Below methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;static getDerivedStateFromError()&lt;/li&gt; 
   &lt;li&gt;componentDidCatch()&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;247&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of displayName class property?&lt;/h3&gt; &lt;p&gt;The displayName string is used in debugging messages. Usually, you don‚Äôt need to set it explicitly because it‚Äôs inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component.&lt;/p&gt; &lt;p&gt;For example, To ease debugging, choose a display name that communicates that it‚Äôs the result of a withSubscription HOC.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function withSubscription(WrappedComponent) {
  class WithSubscription extends React.Component {/* ... */}
  WithSubscription.displayName = `WithSubscription(${getDisplayName(WrappedComponent)})`;
  return WithSubscription;
}
function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || &#39;Component&#39;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;248&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the browser support for react applications?&lt;/h3&gt; React supports all popular browsers, including Internet Explorer 9 and above, although some polyfills are required for older browsers such as IE 9 and IE 10. If you use &lt;strong&gt;es5-shim and es5-sham&lt;/strong&gt; polyfill then it even support old browsers that doesn‚Äôt support ES5 methods.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;249&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of unmountComponentAtNode method?&lt;/h3&gt; &lt;p&gt;This method is available from react-dom package and it removes a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.&lt;/p&gt; &lt;p&gt;The method signature would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;ReactDOM.unmountComponentAtNode(container)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;250&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is code-splitting?&lt;/h3&gt; &lt;p&gt;Code-Splitting is a feature supported by bundlers like Webpack and Browserify which can create multiple bundles that can be dynamically loaded at runtime. The react project supports code splitting via dynamic import() feature.&lt;/p&gt; &lt;p&gt;For example, in the below code snippets, it will make moduleA.js and all its unique dependencies as a separate chunk that only loads after the user clicks the ‚ÄòLoad‚Äô button. &lt;strong&gt;moduleA.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const moduleA = &#39;Hello&#39;;

export { moduleA };
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { Component } from &#39;react&#39;;

class App extends Component {
  handleClick = () =&amp;gt; {
    import(&#39;./moduleA&#39;)
      .then(({ moduleA }) =&amp;gt; {
        // Use moduleA
      })
      .catch(err =&amp;gt; {
        // Handle failure
      });
  };

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={this.handleClick}&amp;gt;Load&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export default App;

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;251&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of strict mode?&lt;/h3&gt; &lt;p&gt;The 
   &lt;strictmode&gt;
     will be helpful in the below cases
   &lt;/strictmode&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Identifying components with &lt;strong&gt;unsafe lifecycle methods&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Warning about &lt;strong&gt;legacy string ref&lt;/strong&gt; API usage.&lt;/li&gt; 
   &lt;li&gt;Detecting unexpected &lt;strong&gt;side effects&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Detecting &lt;strong&gt;legacy context&lt;/strong&gt; API.&lt;/li&gt; 
   &lt;li&gt;Warning about deprecated findDOMNode usage&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;252&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are Keyed Fragments?&lt;/h3&gt; &lt;p&gt;The Fragments declared with the explicit &amp;lt;React.Fragment&amp;gt; syntax may have keys. The general use case is mapping a collection to an array of fragments as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Glossary(props) {
  return (
    &amp;lt;dl&amp;gt;
      {props.items.map(item =&amp;gt; (
        // Without the `key`, React will fire a key warning
        &amp;lt;React.Fragment key={item.id}&amp;gt;
          &amp;lt;dt&amp;gt;{item.term}&amp;lt;/dt&amp;gt;
          &amp;lt;dd&amp;gt;{item.description}&amp;lt;/dd&amp;gt;
        &amp;lt;/React.Fragment&amp;gt;
      ))}
    &amp;lt;/dl&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; key is the only attribute that can be passed to Fragment. In the future, there might be a support for additional attributes, such as event handlers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;253&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Does React support all HTML attributes?&lt;/h3&gt; &lt;p&gt;As of React 16, both standard or custom DOM attributes are fully supported. Since React components often take both custom and DOM-related props, React uses the camelCase convention just like the DOM APIs.&lt;/p&gt; &lt;p&gt;Let us take few props with respect to standard HTML attributes,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;div tabIndex=&quot;-1&quot; /&amp;gt;      // Just like node.tabIndex DOM API
&amp;lt;div className=&quot;Button&quot; /&amp;gt; // Just like node.className DOM API
&amp;lt;input readOnly={true} /&amp;gt;  // Just like node.readOnly DOM API
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These props work similarly to the corresponding HTML attributes, with the exception of the special cases. It also support all SVG attributes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;254&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the limitations with HOCs?&lt;/h3&gt; &lt;p&gt;Higher-order components come with a few caveats apart from its benefits. Below are the few listed in an order,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Don‚Äôt use HOCs inside the render method:&lt;/strong&gt; It is not recommended to apply a HOC to a component within the render method of a component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;render() {
  // A new version of EnhancedComponent is created on every render
  // EnhancedComponent1 !== EnhancedComponent2
  const EnhancedComponent = enhance(MyComponent);
  // That causes the entire subtree to unmount/remount each time!
  return &amp;lt;EnhancedComponent /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code impact performance by remounting a component that causes the state of that component and all of its children to be lost. Instead, apply HOCs outside the component definition so that the resulting component is created only once.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Static methods must be copied over:&lt;/strong&gt; When you apply a HOC to a component the new component does not have any of the static methods of the original component&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Define a static method
WrappedComponent.staticMethod = function() {/*...*/}
// Now apply a HOC
const EnhancedComponent = enhance(WrappedComponent);

// The enhanced component has no static method
typeof EnhancedComponent.staticMethod === &#39;undefined&#39; // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can overcome this by copying the methods onto the container before returning it,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function enhance(WrappedComponent) {
  class Enhance extends React.Component {/*...*/}
  // Must know exactly which method(s) to copy :(
  Enhance.staticMethod = WrappedComponent.staticMethod;
  return Enhance;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Refs aren‚Äôt passed through:&lt;/strong&gt; For HOCs you need to pass through all props to the wrapped component but this does not work for refs. This is because ref is not really a prop similar to key. In this case you need to use the React.forwardRef API&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;255&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to debug forwardRefs in DevTools?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React.forwardRef&lt;/strong&gt; accepts a render function as parameter and DevTools uses this function to determine what to display for the ref forwarding component.&lt;/p&gt; &lt;p&gt;For example, If you don‚Äôt name the render function or not using displayName property then it will appear as ‚ÄùForwardRef‚Äù in the DevTools,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const WrappedComponent = React.forwardRef((props, ref) =&amp;gt; {
  return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But If you name the render function then it will appear as &lt;strong&gt;‚ÄùForwardRef(myFunction)‚Äù&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const WrappedComponent = React.forwardRef(
  function myFunction(props, ref) {
    return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
  }
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As an alternative, You can also set displayName property for forwardRef function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function logProps(Component) {
  class LogProps extends React.Component {
    // ...
  }

  function forwardRef(props, ref) {
    return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
  }

  // Give this component a more helpful display name in DevTools.
  // e.g. &quot;ForwardRef(logProps(MyComponent))&quot;
  const name = Component.displayName || Component.name;
  forwardRef.displayName = `logProps(${name})`;

  return React.forwardRef(forwardRef);
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;256&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;When component props defaults to true?&lt;/h3&gt; &lt;p&gt;If you pass no value for a prop, it defaults to true. This behavior is available so that it matches the behavior of HTML.&lt;/p&gt; &lt;p&gt;For example, below expressions are equivalent,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;MyInput autocomplete /&amp;gt;

&amp;lt;MyInput autocomplete={true} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is not recommended to use this approach because it can be confused with the ES6 object shorthand (example, &lt;code&gt;{name}&lt;/code&gt; which is short for &lt;code&gt;{name: name}&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;257&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is NextJS and major features of it?&lt;/h3&gt; &lt;p&gt;Next.js is a popular and lightweight framework for static and server‚Äërendered applications built with React. It also provides styling and routing solutions. Below are the major features provided by NextJS,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Server-rendered by default&lt;/li&gt; 
   &lt;li&gt;Automatic code splitting for faster page loads&lt;/li&gt; 
   &lt;li&gt;Simple client-side routing (page based)&lt;/li&gt; 
   &lt;li&gt;Webpack-based dev environment which supports (HMR)&lt;/li&gt; 
   &lt;li&gt;Able to implement with Express or any other Node.js HTTP server&lt;/li&gt; 
   &lt;li&gt;Customizable with your own Babel and Webpack configurations&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;258&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you pass an event handler to a component?&lt;/h3&gt; &lt;p&gt;You can pass event handlers and other functions as props to child components. It can be used in child component as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;259&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it good to use arrow functions in render methods?&lt;/h3&gt; &lt;p&gt;Yes, You can use. It is often the easiest way to pass parameters to callback functions. But you need to optimize the performance while using it.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Foo extends Component {
  handleClick() {
    console.log(&#39;Click happened&#39;);
  }
  render() {
    return &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;Click Me&amp;lt;/button&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Using an arrow function in render method creates a new function each time the component renders, which may have performance implications&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;260&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent a function from being called multiple times?&lt;/h3&gt; &lt;p&gt;If you use an event handler such as &lt;strong&gt;onClick or onScroll&lt;/strong&gt; and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be achieved in the below possible ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Throttling:&lt;/strong&gt; Changes based on a time based frequency. For example, it can be used using _.throttle lodash function&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Debouncing:&lt;/strong&gt; Publish changes after a period of inactivity. For example, it can be used using _.debounce lodash function&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;RequestAnimationFrame throttling:&lt;/strong&gt; Changes based on requestAnimationFrame. For example, it can be used using raf-schd lodash function&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;261&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How JSX prevents Injection Attacks?&lt;/h3&gt; &lt;p&gt;React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that‚Äôs not explicitly written in your application. Everything is converted to a string before being rendered.&lt;/p&gt; &lt;p&gt;For example, you can embed user input as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const name = response.potentiallyMaliciousInput;
const element = &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way you can prevent XSS(Cross-site-scripting) attacks in the application.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;262&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you update rendered elements?&lt;/h3&gt; &lt;p&gt;You can update UI(represented by rendered element) by passing the newly created element to ReactDOM‚Äôs render method.&lt;/p&gt; &lt;p&gt;For example, lets take a ticking clock example, where it updates the time by calling render method multiple times,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function tick() {
  const element = (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;It is {new Date().toLocaleTimeString()}.&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
  );
  ReactDOM.render(element, document.getElementById(&#39;root&#39;));
}

setInterval(tick, 1000);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;263&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you say that props are read only?&lt;/h3&gt; &lt;p&gt;When you declare a component as a function or a class, it must never modify its own props.&lt;/p&gt; &lt;p&gt;Let us take a below capital function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function capital(amount, interest) {
   return amount + interest;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above function is called ‚Äúpure‚Äù because it does not attempt to change their inputs, and always return the same result for the same inputs. Hence, React has a single rule saying ‚ÄúAll React components must act like pure functions with respect to their props.‚Äù&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;264&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you say that state updates are merged?&lt;/h3&gt; &lt;p&gt;When you call setState() in the component, React merges the object you provide into the current state.&lt;/p&gt; &lt;p&gt;For example, let us take a facebook user with posts and comments details as state variables,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  constructor(props) {
    super(props);
    this.state = {
      posts: [],
      comments: []
    };
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now you can update them independently with separate &lt;code&gt;setState()&lt;/code&gt; calls as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; componentDidMount() {
    fetchPosts().then(response =&amp;gt; {
      this.setState({
        posts: response.posts
      });
    });

    fetchComments().then(response =&amp;gt; {
      this.setState({
        comments: response.comments
      });
    });
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As mentioned in the above code snippets, &lt;code&gt;this.setState({comments})&lt;/code&gt; updates only comments variable without modifying or replacing posts variable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;265&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you pass arguments to an event handler?&lt;/h3&gt; &lt;p&gt;During iterations or loops, it is common to pass an extra parameter to an event handler. This can be achieved through arrow functions or bind method.&lt;/p&gt; &lt;p&gt;Let us take an example of user details updated in a grid,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;button onClick={(e) =&amp;gt; this.updateUser(userId, e)}&amp;gt;Update User details&amp;lt;/button&amp;gt;
&amp;lt;button onClick={this.updateUser.bind(this, userId)}&amp;gt;Update User details&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In both the approaches, the synthetic argument e is passed as a second argument. You need to pass it explicitly for arrow functions and it forwarded automatically for bind method.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;266&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent component from rendering?&lt;/h3&gt; &lt;p&gt;You can prevent component from rendering by returning null based on specific condition. This way it can conditionally render component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Greeting(props) {
  if (!props.loggedIn) {
    return null;
  }

  return (
    &amp;lt;div className=&quot;greeting&quot;&amp;gt;
      welcome, {props.name}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class User extends React.Component {
  constructor(props) {
    super(props);
    this.state = {loggedIn: false, name: &#39;John&#39;};
  }

  render() {
   return (
       &amp;lt;div&amp;gt;
         //Prevent component render if it is not loggedIn
         &amp;lt;Greeting loggedIn={this.state.loggedIn} /&amp;gt;
         &amp;lt;UserDetails name={this.state.name}&amp;gt;
       &amp;lt;/div&amp;gt;
   );
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example, the greeting component skips its rendering section by applying condition and returning null value.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;267&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the conditions to safely use the index as a key?&lt;/h3&gt; &lt;p&gt;There are three conditions to make sure, it is safe use the index as a key.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The list and items are static‚Äì they are not computed and do not change&lt;/li&gt; 
   &lt;li&gt;The items in the list have no ids&lt;/li&gt; 
   &lt;li&gt;The list is never reordered or filtered.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;268&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it keys should be globally unique?&lt;/h3&gt; &lt;p&gt;Keys used within arrays should be unique among their siblings but they don‚Äôt need to be globally unique. i.e, You can use the same keys with two different arrays.&lt;/p&gt; &lt;p&gt;For example, the below book component uses two arrays with different arrays,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Book(props) {
  const index = (
    &amp;lt;ul&amp;gt;
      {props.pages.map((page) =&amp;gt;
        &amp;lt;li key={page.id}&amp;gt;
          {page.title}
        &amp;lt;/li&amp;gt;
      )}
    &amp;lt;/ul&amp;gt;
  );
  const content = props.pages.map((page) =&amp;gt;
    &amp;lt;div key={page.id}&amp;gt;
      &amp;lt;h3&amp;gt;{page.title}&amp;lt;/h3&amp;gt;
      &amp;lt;p&amp;gt;{page.content}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;{page.pageNumber}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
  return (
    &amp;lt;div&amp;gt;
      {index}
      &amp;lt;hr /&amp;gt;
      {content}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;269&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the popular choice for form handling?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;Formik&lt;/code&gt; is a form library for react which provides solutions such as validation, keeping track of the visited fields, and handling form submission.&lt;/p&gt; &lt;p&gt;In detail, You can categorize them as follows,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Getting values in and out of form state&lt;/li&gt; 
   &lt;li&gt;Validation and error messages&lt;/li&gt; 
   &lt;li&gt;Handling form submission&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;It is used to create a scalable, performant, form helper with a minimal API to solve annoying stuff.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;270&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of formik over redux form library?&lt;/h3&gt; &lt;p&gt;Below are the main reasons to recommend formik over redux form library,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The form state is inherently short-term and local, so tracking it in Redux (or any kind of Flux library) is unnecessary.&lt;/li&gt; 
   &lt;li&gt;Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY SINGLE KEYSTROKE. This way it increases input latency for large apps.&lt;/li&gt; 
   &lt;li&gt;Redux-Form is 22.5 kB minified gzipped whereas Formik is 12.7 kB&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;271&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you not required to use inheritance?&lt;/h3&gt; In React, it is recommend using composition instead of inheritance to reuse code between components. Both Props and composition give you all the flexibility you need to customize a component‚Äôs look and behavior in an explicit and safe way. Whereas, If you want to reuse non-UI functionality between components, it is suggested to extracting it into a separate JavaScript module. Later components import it and use that function, object, or a class, without extending it.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;272&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can I use web components in react application?&lt;/h3&gt; &lt;p&gt;Yes, you can use web components in a react application. Even though many developers won‚Äôt use this combination, it may require especially if you are using third-party UI components that are written using Web Components.&lt;/p&gt; &lt;p&gt;For example, let us use &lt;code&gt;Vaadin&lt;/code&gt; date picker web component as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { Component } from &#39;react&#39;;
import &#39;./App.css&#39;;
import &#39;@vaadin/vaadin-date-picker&#39;;
class App extends Component {
  render() {
    return (
      &amp;lt;div className=&quot;App&quot;&amp;gt;
        &amp;lt;vaadin-date-picker label=&quot;When were you born?&quot;&amp;gt;&amp;lt;/vaadin-date-picker&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
export default App;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;273&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is dynamic import?&lt;/h3&gt; &lt;p&gt;The dynamic import() syntax is a ECMAScript proposal not currently part of the language standard. It is expected to be accepted in the near future. You can achieve code-splitting into your app using dynamic import.&lt;/p&gt; &lt;p&gt;Let‚Äôs take an example of addition,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Normal Import&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { add } from &#39;./math&#39;;
console.log(add(10, 20));
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start=&quot;2&quot;&gt; 
   &lt;li&gt;&lt;strong&gt;Dynamic Import&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import(&quot;./math&quot;).then(math =&amp;gt; {
  console.log(math.add(10, 20));
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;274&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are loadable components?&lt;/h3&gt; &lt;p&gt;If you want to do code-splitting in a server rendered app, it is recommend to use Loadable Components because React.lazy and Suspense is not yet available for server-side rendering. Loadable lets you render a dynamic import as a regular component.&lt;/p&gt; &lt;p&gt;Lets take an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import loadable from &#39;@loadable/component&#39;

const OtherComponent = loadable(() =&amp;gt; import(&#39;./OtherComponent&#39;))

function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;OtherComponent /&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now OtherComponent will be loaded in a separated bundle&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;275&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is suspense component?&lt;/h3&gt; &lt;p&gt;If the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while you‚Äôre waiting for it to load using a loading indicator. This can be done using &lt;strong&gt;Suspense&lt;/strong&gt; component.&lt;/p&gt; &lt;p&gt;For example, the below code uses suspense component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const OtherComponent = React.lazy(() =&amp;gt; import(&#39;./OtherComponent&#39;));

function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&amp;gt;
        &amp;lt;OtherComponent /&amp;gt;
      &amp;lt;/Suspense&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As mentioned in the above code, Suspense is wrapped above the lazy component.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;276&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is route based code splitting?&lt;/h3&gt; &lt;p&gt;One of the best place to do code splitting is with routes. The entire page is going to re-render at once so users are unlikely to interact with other elements in the page at the same time. Due to this, the user experience won‚Äôt be disturbed.&lt;/p&gt; &lt;p&gt;Let us take an example of route based website using libraries like React Router with React.lazy,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { BrowserRouter as Router, Route, Switch } from &#39;react-router-dom&#39;;
import React, { Suspense, lazy } from &#39;react&#39;;

const Home = lazy(() =&amp;gt; import(&#39;./routes/Home&#39;));
const About = lazy(() =&amp;gt; import(&#39;./routes/About&#39;));

const App = () =&amp;gt; (
  &amp;lt;Router&amp;gt;
    &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&amp;gt;
      &amp;lt;Switch&amp;gt;
        &amp;lt;Route exact path=&quot;/&quot; component={Home}/&amp;gt;
        &amp;lt;Route path=&quot;/about&quot; component={About}/&amp;gt;
      &amp;lt;/Switch&amp;gt;
    &amp;lt;/Suspense&amp;gt;
  &amp;lt;/Router&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code, the code splitting will happen at each route level.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;277&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example on How to use context?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt; is designed to share data that can be considered &lt;strong&gt;global&lt;/strong&gt; for a tree of React components.&lt;/p&gt; &lt;p&gt;For example, in the code below lets manually thread through a ‚Äútheme‚Äù prop in order to style the Button component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Lets create a context with a default theme value &quot;luna&quot;
const ThemeContext = React.createContext(&#39;luna&#39;);
// Create App component where it uses provider to pass theme value in the tree
class App extends React.Component {
  render() {
    return (
      &amp;lt;ThemeContext.Provider value=&quot;nova&quot;&amp;gt;
        &amp;lt;Toolbar /&amp;gt;
      &amp;lt;/ThemeContext.Provider&amp;gt;
    );
  }
}
// A middle component where you don&#39;t need to pass theme prop anymore
function Toolbar(props) {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;ThemedButton /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
// Lets read theme value in the button component to use
class ThemedButton extends React.Component {
  static contextType = ThemeContext;
  render() {
    return &amp;lt;Button theme={this.context} /&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;278&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of default value in context?&lt;/h3&gt; &lt;p&gt;The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them.&lt;/p&gt; &lt;p&gt;Below code snippet provides default theme value as Luna.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const MyContext = React.createContext(defaultValue);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;279&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you use contextType?&lt;/h3&gt; &lt;p&gt;ContextType is used to consume the context object. The contextType property can be used in two ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;contextType as property of class:&lt;/strong&gt; The contextType property on a class can be assigned a Context object created by React.createContext(). After that, you can consume the nearest current value of that Context type using this.context in any of the lifecycle methods and render function.&lt;/p&gt; &lt;p&gt;Lets assign contextType property on MyClass as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyClass extends React.Component {
  componentDidMount() {
    let value = this.context;
    /* perform a side-effect at mount using the value of MyContext */
  }
  componentDidUpdate() {
    let value = this.context;
    /* ... */
  }
  componentWillUnmount() {
    let value = this.context;
    /* ... */
  }
  render() {
    let value = this.context;
    /* render something based on the value of MyContext */
  }
}
MyClass.contextType = MyContext;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Static field&lt;/strong&gt; You can use a static class field to initialize your contextType using public class field syntax.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyClass extends React.Component {
  static contextType = MyContext;
  render() {
    let value = this.context;
    /* render something based on the value */
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;280&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is a consumer?&lt;/h3&gt; &lt;p&gt;A Consumer is a React component that subscribes to context changes. It requires a function as a child which receives current context value as argument and returns a react node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree.&lt;/p&gt; &lt;p&gt;Lets take a simple example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;MyContext.Consumer&amp;gt;
  {value =&amp;gt; /* render something based on the context value */}
&amp;lt;/MyContext.Consumer&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;281&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you solve performance corner cases while using context?&lt;/h3&gt; &lt;p&gt;The context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider‚Äôs parent re-renders.&lt;/p&gt; &lt;p&gt;For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class App extends React.Component {
  render() {
    return (
      &amp;lt;Provider value={{something: &#39;something&#39;}}&amp;gt;
        &amp;lt;Toolbar /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This can be solved by lifting up the value to parent state,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: {something: &#39;something&#39;},
    };
  }

  render() {
    return (
      &amp;lt;Provider value={this.state.value}&amp;gt;
        &amp;lt;Toolbar /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;282&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of forward ref in HOCs?&lt;/h3&gt; &lt;p&gt;Refs will not get passed through because ref is not a prop. It handled differently by React just like &lt;strong&gt;key&lt;/strong&gt;. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component. In this case, you can use Forward Ref API. For example, we can explicitly forward refs to the inner FancyButton component using the React.forwardRef API.&lt;/p&gt; &lt;p&gt;The below HOC logs all props,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    function logProps(Component) {
      class LogProps extends React.Component {
        componentDidUpdate(prevProps) {
          console.log(&#39;old props:&#39;, prevProps);
          console.log(&#39;new props:&#39;, this.props);
        }

        render() {
          const {forwardedRef, ...rest} = this.props;

          // Assign the custom prop &quot;forwardedRef&quot; as a ref
          return &amp;lt;Component ref={forwardedRef} {...rest} /&amp;gt;;
        }
      }

      return React.forwardRef((props, ref) =&amp;gt; {
        return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
      });
    }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let‚Äôs use this HOC to log all props that get passed to our ‚Äúfancy button‚Äù component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    class FancyButton extends React.Component {
      focus() {
        // ...
      }

      // ...
    }
    export default logProps(FancyButton);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now lets create a ref and pass it to FancyButton component. In this case, you can set focus to button element.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    import FancyButton from &#39;./FancyButton&#39;;

    const ref = React.createRef();
    ref.current.focus();
    &amp;lt;FancyButton
      label=&quot;Click Me&quot;
      handleClick={handleClick}
      ref={ref}
    /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;283&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it ref argument available for all functions or class components?&lt;/h3&gt; Regular function or class components don‚Äôt receive the ref argument, and ref is not available in props either. The second ref argument only exists when you define a component with React.forwardRef call.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;284&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need additional care for component libraries while using forward refs?&lt;/h3&gt; When you start using forwardRef in a component library, you should treat it as a breaking change and release a new major version of your library. This is because your library likely has a different behavior such as what refs get assigned to, and what types are exported. These changes can break apps and other libraries that depend on the old behavior.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;285&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to create react class components without ES6?&lt;/h3&gt; &lt;p&gt;If you don‚Äôt use ES6 then you may need to use the create-react-class module instead. For default props, you need to define getDefaultProps() as a function on the passed object. Whereas for initial state, you have to provide a separate getInitialState method that returns the initial state.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var Greeting = createReactClass({
  getDefaultProps: function() {
      return {
        name: &#39;Jhohn&#39;
      };
    },
  getInitialState: function() {
      return {message: this.props.message};
    },
  handleClick: function() {
     console.log(this.state.message);
  },
  render: function() {
    return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;;
  }
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you use createReactClass then auto binding is available for all methods. i.e, You don‚Äôt need to use &lt;code&gt;.bind(this)&lt;/code&gt; with in constructor for event handlers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;286&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to use react without JSX?&lt;/h3&gt; &lt;p&gt;Yes, JSX is not mandatory for using React. Actually it is convenient when you don‚Äôt want to set up compilation in your build environment. Each JSX element is just syntactic sugar for calling &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, let us take a greeting example with JSX,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Greeting extends React.Component {
  render() {
    return &amp;lt;div&amp;gt;Hello {this.props.message}&amp;lt;/div&amp;gt;;
  }
}

ReactDOM.render(
  &amp;lt;Greeting message=&quot;World&quot; /&amp;gt;,
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can write the same code without JSX as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Greeting extends React.Component {
  render() {
    return React.createElement(&#39;div&#39;, null, `Hello ${this.props.message}`);
  }
}

ReactDOM.render(
  React.createElement(Greeting, {message: &#39;World&#39;}, null),
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;287&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is diffing algorithm?&lt;/h3&gt; &lt;p&gt;React needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithms is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n3) where n is the number of elements in the tree.&lt;/p&gt; &lt;p&gt;In this case, for displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Two elements of different types will produce different trees.&lt;/li&gt; 
   &lt;li&gt;The developer can hint at which child elements may be stable across different renders with a key prop.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;288&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the rules covered by diffing algorithm?&lt;/h3&gt; &lt;p&gt;When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements. It covers the below rules during reconciliation algorithm,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Elements Of Different Types:&lt;/strong&gt; Whenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. For example, elements &lt;a&gt; to &lt;img&gt;, or from 
     &lt;article&gt;
       to 
      &lt;comment&gt;
        of different types lead a full rebuild.
      &lt;/comment&gt;
     &lt;/article&gt;&lt;/a&gt;&lt;/li&gt;
   &lt;a&gt; &lt;li&gt;&lt;strong&gt;DOM Elements Of The Same Type:&lt;/strong&gt; When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. Lets take an example with same DOM elements except className attribute, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;div className=&quot;show&quot; title=&quot;ReactJS&quot; /&amp;gt;

&amp;lt;div className=&quot;hide&quot; title=&quot;ReactJS&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Component Elements Of The Same Type:&lt;/strong&gt; When a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls componentWillReceiveProps() and componentWillUpdate() on the underlying instance. After that, the render() method is called and the diff algorithm recurses on the previous result and the new result.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Recursing On Children:&lt;/strong&gt; when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there‚Äôs a difference. For example, when adding an element at the end of the children, converting between these two trees works well. &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;third&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Handling keys:&lt;/strong&gt; React supports a key attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a key can make the tree conversion efficient,&lt;/li&gt; &lt;/a&gt;
  &lt;/ol&gt;&lt;a&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li key=&quot;2015&quot;&amp;gt;Duke&amp;lt;/li&amp;gt;
  &amp;lt;li key=&quot;2016&quot;&amp;gt;Villanova&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;ul&amp;gt;
  &amp;lt;li key=&quot;2014&quot;&amp;gt;Connecticut&amp;lt;/li&amp;gt;
  &amp;lt;li key=&quot;2015&quot;&amp;gt;Duke&amp;lt;/li&amp;gt;
  &amp;lt;li key=&quot;2016&quot;&amp;gt;Villanova&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&lt;/li&gt;
 &lt;a&gt; &lt;/a&gt;
&lt;/ol&gt;
&lt;a&gt; &lt;/a&gt;
&lt;p&gt;&lt;a&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;289&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;When do you need to use refs?&lt;/h3&gt; &lt;p&gt;There are few use cases to go for refs,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Managing focus, text selection, or media playback.&lt;/li&gt; 
   &lt;li&gt;Triggering imperative animations.&lt;/li&gt; 
   &lt;li&gt;Integrating with third-party DOM libraries.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;290&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it prop must be named as render for render props?&lt;/h3&gt; &lt;p&gt;Even though the pattern named render props, you don‚Äôt have to use a prop named render to use this pattern. i.e, Any prop that is a function that a component uses to know what to render is technically a ‚Äúrender prop‚Äù. Lets take an example with the children prop for render props,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;Mouse children={mouse =&amp;gt; (
  &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;
)}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Actually children prop doesn‚Äôt need to be named in the list of ‚Äúattributes‚Äù in JSX element. Instead, you can keep it directly inside element,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;Mouse&amp;gt;
  {mouse =&amp;gt; (
    &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;
  )}
&amp;lt;/Mouse&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While using this above technique(without any name), explicitly state that children should be a function in your propTypes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Mouse.propTypes = {
  children: PropTypes.func.isRequired
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;291&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the problems of using render props with pure components?&lt;/h3&gt; If you create a function inside a render method, it negates the purpose of pure component. Because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop. You can solve this issue by defining the render function as instance method.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;292&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create HOC using render props?&lt;/h3&gt; &lt;p&gt;You can implement most higher-order components (HOC) using a regular component with a render prop. For example, if you would prefer to have a withMouse HOC instead of a 
   &lt;mouse&gt;
     component, you could easily create one using a regular 
    &lt;mouse&gt;
      with a render prop.
    &lt;/mouse&gt;
   &lt;/mouse&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function withMouse(Component) {
  return class extends React.Component {
    render() {
      return (
        &amp;lt;Mouse render={mouse =&amp;gt; (
          &amp;lt;Component {...this.props} mouse={mouse} /&amp;gt;
        )}/&amp;gt;
      );
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way render props gives the flexibility of using either pattern.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;293&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is windowing technique?&lt;/h3&gt; Windowing is a technique that only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created. If your application renders long lists of data then this technique is recommended. Both react-window and react-virtualized are popular windowing libraries which provides several reusable components for displaying lists, grids, and tabular data.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;294&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you print falsy values in JSX?&lt;/h3&gt; &lt;p&gt;The falsy values such as false, null, undefined, and true are valid children but they don‚Äôt render anything. If you still want to display them then you need to convert it to string. Let‚Äôs take an example on how to convert to a string,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;div&amp;gt;
  My JavaScript variable is {String(myVariable)}.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;295&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the typical use case of portals?&lt;/h3&gt; &lt;p&gt;React portals are very useful when a parent component has overflow: hidden or has properties that affect the stacking context(z-index,position,opacity etc styles) and you need to visually ‚Äúbreak out‚Äù of its container.&lt;/p&gt; &lt;p&gt;For example, dialogs, global message notifications, hovercards, and tooltips.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;296&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you set default value for uncontrolled component?&lt;/h3&gt; &lt;p&gt;In React, the value attribute on form elements will override the value in the DOM. With an uncontrolled component, you might want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a &lt;strong&gt;defaultValue&lt;/strong&gt; attribute instead of &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;render() {
  return (
    &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
      &amp;lt;label&amp;gt;
        User Name:
        &amp;lt;input
          defaultValue=&quot;John&quot;
          type=&quot;text&quot;
          ref={this.input} /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The same applies for &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;textArea&lt;/code&gt; inputs. But you need to use &lt;strong&gt;defaultChecked&lt;/strong&gt; for &lt;code&gt;checkbox&lt;/code&gt; and &lt;code&gt;radio&lt;/code&gt; inputs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;297&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is your favorite React stack?&lt;/h3&gt; Even though the tech stack varies from developer to developer, the most popular stack is used in react boilerplate project code. It mainly uses Redux and redux-saga for state management and asynchronous side-effects, react-router for routing purpose, styled-components for styling react components, axios for invoking REST api, and other supported stack such as webpack, reselect, ESNext, Babel. You can clone the project https://github.com/react-boilerplate/react-boilerplate and start working on any new react project.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;298&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Real DOM and Virtual DOM?&lt;/h3&gt; &lt;p&gt;Below are the main differences between Real DOM and Virtual DOM,&lt;/p&gt; &lt;p&gt;| Real DOM | Virtual DOM | | ‚Äî‚Äì | ‚Äî‚Äì‚Äì | | Updates are slow | Updates are fast | | DOM manipulation is very expensive. | DOM manipulation is very easy | | You can update HTML directly. | You Can‚Äôt directly update HTML | | It causes too much of memory wastage | There is no memory wastage| | Creates a new DOM if element updates | It updates the JSX if element update|&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;299&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to add Bootstrap to a react application?&lt;/h3&gt; &lt;p&gt;Bootstrap can be added to your React app in a three possible ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Using the Bootstrap CDN: This is the easiest way to add bootstrap. Add both bootstrap CSS and JS resources in a head tag.&lt;/li&gt; 
   &lt;li&gt;Bootstrap as Dependency: If you are using a build tool or a module bundler such as Webpack, then this is the preferred option for adding Bootstrap to your React application &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm install bootstrap
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;React Bootstrap Package: In this case, you can add Bootstrap to our React app is by using a package that has rebuilt Bootstrap components to work particularly as React components. Below packages are popular in this category, 
    &lt;ol&gt; 
     &lt;li&gt;react-bootstrap&lt;/li&gt; 
     &lt;li&gt;reactstrap&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;300&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can you list down top websites or applications using react as front end framework?&lt;/h3&gt; &lt;p&gt;Below are the &lt;code&gt;top 10 websites&lt;/code&gt; using React as their front-end framework,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Facebook&lt;/li&gt; 
   &lt;li&gt;Uber&lt;/li&gt; 
   &lt;li&gt;Instagram&lt;/li&gt; 
   &lt;li&gt;WhatsApp&lt;/li&gt; 
   &lt;li&gt;Khan Academy&lt;/li&gt; 
   &lt;li&gt;Airbnb&lt;/li&gt; 
   &lt;li&gt;Dropbox&lt;/li&gt; 
   &lt;li&gt;Flipboard&lt;/li&gt; 
   &lt;li&gt;Netflix&lt;/li&gt; 
   &lt;li&gt;PayPal&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;301&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it recommended to use CSS In JS technique in React?&lt;/h3&gt; React does not have any opinion about how styles are defined but if you are a beginner then good starting point is to define your styles in a separate *.css file as usual and refer to them using className. This functionality is not part of React but came from third-party libraries. But If you want to try a different approach(CSS-In-JS) then styled-components library is a good option.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;302&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do I need to rewrite all my class components with hooks?&lt;/h3&gt; No. But you can try Hooks in a few components(or new components) without rewriting any existing code. Because there are no plans to remove classes in ReactJS.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;303&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to fetch data with React Hooks?&lt;/h3&gt; &lt;p&gt;The effect hook called &lt;code&gt;useEffect&lt;/code&gt; is used to fetch the data with axios from the API and to set the data in the local state of the component with the state hook‚Äôs update function.&lt;/p&gt; &lt;p&gt;Let‚Äôs take an example in which it fetches list of react articles from the API&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { useState, useEffect } from &#39;react&#39;;
import axios from &#39;axios&#39;;

function App() {
  const [data, setData] = useState({ hits: [] });

  useEffect(async () =&amp;gt; {
    const result = await axios(
      &#39;http://hn.algolia.com/api/v1/search?query=react&#39;,
    );

    setData(result.data);
  }, []);

  return (
    &amp;lt;ul&amp;gt;
      {data.hits.map(item =&amp;gt; (
        &amp;lt;li key={item.objectID}&amp;gt;
          &amp;lt;a href={item.url}&amp;gt;{item.title}&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
      ))}
    &amp;lt;/ul&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember we provided an empty array as second argument to the effect hook to avoid activating it on component updates but only for the mounting of the component. i.e, It fetches only for component mount.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;304&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is Hooks cover all use cases for classes?&lt;/h3&gt; Hooks doesn‚Äôt cover all use cases of classes but there is a plan to add them soon. Currently there are no Hook equivalents to the uncommon &lt;strong&gt;getSnapshotBeforeUpdate&lt;/strong&gt; and &lt;strong&gt;componentDidCatch&lt;/strong&gt; lifecycles yet.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;305&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the stable release for hooks support?&lt;/h3&gt; &lt;p&gt;React includes a stable implementation of React Hooks in 16.8 release for below packages&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React DOM&lt;/li&gt; 
   &lt;li&gt;React DOM Server&lt;/li&gt; 
   &lt;li&gt;React Test Renderer&lt;/li&gt; 
   &lt;li&gt;React Shallow Renderer&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;306&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why do we use array destructuring (square brackets notation) in &lt;code&gt;useState&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;When we declare a state variable with &lt;code&gt;useState&lt;/code&gt;, it returns a pair ‚Äî an array with two items. The first item is the current value, and the second is a function that updates the value. Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.&lt;/p&gt; &lt;p&gt;For example, the array index access would look as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; var userStateVariable = useState(&#39;userProfile&#39;); // Returns an array pair
 var user = userStateVariable[0]; // Access first item
 var setUser = userStateVariable[1]; // Access second item
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas with array destructuring the variables can be accessed as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const [user, setUser] = useState(&#39;userProfile&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the sources used for introducing hooks?&lt;/h3&gt; &lt;p&gt;Hooks got the ideas from several different sources. Below are some of them,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Previous experiments with functional APIs in the react-future repository&lt;/li&gt; 
   &lt;li&gt;Community experiments with render prop APIs such as Reactions Component&lt;/li&gt; 
   &lt;li&gt;State variables and state cells in DisplayScript.&lt;/li&gt; 
   &lt;li&gt;Subscriptions in Rx.&lt;/li&gt; 
   &lt;li&gt;Reducer components in ReasonReact.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;308&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access imperative API of web components?&lt;/h3&gt; Web Components often expose an imperative API to implement its functions. You will need to use a &lt;strong&gt;ref&lt;/strong&gt; to interact with the DOM node directly if you want to access imperative API of a web component. But if you are using third-party Web Components, the best solution is to write a React component that behaves as a &lt;strong&gt;wrapper&lt;/strong&gt; for your Web Component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;309&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is formik?&lt;/h3&gt; &lt;p&gt;Formik is a small react form library that helps you with the three major problems,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Getting values in and out of form state&lt;/li&gt; 
   &lt;li&gt;Validation and error messages&lt;/li&gt; 
   &lt;li&gt;Handling form submission&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;310&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are typical middleware choices for handling asynchronous calls in Redux?&lt;/h3&gt; Some of the popular middleware choices for handling asynchronous calls in Redux eco system are &lt;code&gt;Redux Thunk, Redux Promise, Redux Saga&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;311&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do browsers understand JSX code?&lt;/h3&gt; No, browsers can‚Äôt understand JSX code. You need a transpiler to convert your JSX to regular Javascript that browsers can understand. The most widely used transpiler right now is Babel.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;312&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Describe about data flow in react?&lt;/h3&gt; React implements one-way reactive data flow using props which reduce boilerplate and is easier to understand than traditional two-way data binding.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;313&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is react scripts?&lt;/h3&gt; The &lt;code&gt;react-scripts&lt;/code&gt; package is a set of scripts from the create-react-app starter pack which helps you kick off projects without configuring. The &lt;code&gt;react-scripts start&lt;/code&gt; command sets up the development environment and starts a server, as well as hot module reloading.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;314&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the features of create react app?&lt;/h3&gt; &lt;p&gt;Below are the list of some of the features provided by create react app.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React, JSX, ES6, Typescript and Flow syntax support.&lt;/li&gt; 
   &lt;li&gt;Autoprefixed CSS&lt;/li&gt; 
   &lt;li&gt;CSS Reset/Normalize&lt;/li&gt; 
   &lt;li&gt;A live development server&lt;/li&gt; 
   &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting&lt;/li&gt; 
   &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps&lt;/li&gt; 
   &lt;li&gt;An offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;315&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of renderToNodeStream method?&lt;/h3&gt; The &lt;code&gt;ReactDOMServer#renderToNodeStream&lt;/code&gt; method is used to generate HTML on the server and send the markup down on the initial request for faster page loads. It also helps search engines to crawl your pages easily for SEO purposes. &lt;strong&gt;Note:&lt;/strong&gt; Remember this method is not available in the browser but only server.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;316&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is MobX?&lt;/h3&gt; MobX is a simple, scalable and battle tested state management solution for applying functional reactive programming (TFRP). For reactJs application, you need to install below packages, &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install mobx --save
npm install mobx-react --save
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;317&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between Redux and MobX?&lt;/h3&gt; &lt;p&gt;Below are the main differences between Redux and MobX,&lt;/p&gt; &lt;p&gt;| Topic | Redux | MobX | | ‚Äî‚Äì | ‚Äî‚Äì‚Äì | ‚Äî‚Äì‚Äì | Definition| It is a javascript library for managing the application state | It is a library for reactively managing the state of your applications | | Programming | It is mainly written in ES6 | It is written in JavaScript(ES5) | | Data Store | There is only one large store exist for data storage | There is more than one store for storage | | Usage | Mainly used for large and complex applications | Used for simple applications | | Performance | Need to be improved | Provides better performance | | How it stores | Uses JS Object to store | Uses observable to store the data |&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;318&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Should I learn ES6 before learning ReactJS?&lt;/h3&gt; &lt;p&gt;No, you don‚Äôt have to learn es2015/es6 to learn react. But you may find many resources or React ecosystem uses ES6 extensively. Let‚Äôs see some of the frequently used ES6 features,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Destructuring:&lt;/strong&gt; To get props and use them in a component &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// in es 5
 var someData = this.props.someData
 var dispatch = this.props.dispatch

// in es6
const { someData, dispatch } = this.props
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;Spread operator: Helps in passing props down into a component &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// in es 5
&amp;lt;SomeComponent someData={this.props.someData} dispatch={this.props.dispatch} /&amp;gt;

// in es6
&amp;lt;SomeComponent {...this.props} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;Arrow functions: Makes compact syntax &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// es 5
var users = usersList.map(function (user) {
 return &amp;lt;li&amp;gt;{user.name}&amp;lt;/li&amp;gt;
})
// es 6
const users = usersList.map(user =&amp;gt; &amp;lt;li&amp;gt;{user.name}&amp;lt;/li&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;319&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Concurrent Rendering?&lt;/h3&gt; &lt;p&gt;The Concurrent rendering makes React apps to be more responsive by rendering component trees without blocking the main UI thread. It allows React to interrupt a long-running render to handle a high-priority event. i.e, When you enabled concurrent Mode, React will keep an eye on other tasks that need to be done, and if there‚Äôs something with a higher priority it will pause what it is currently rendering and let the other task finish first. You can enable this in two ways,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// 1. Part of an app by wrapping with ConcurrentMode
&amp;lt;React.unstable_ConcurrentMode&amp;gt;
  &amp;lt;Something /&amp;gt;
&amp;lt;/React.unstable_ConcurrentMode&amp;gt;

// 2. Whole app using createRoot
ReactDOM.unstable_createRoot(domNode).render(&amp;lt;App /&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;320&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between async mode and concurrent mode?&lt;/h3&gt; Both refers the same thing. Previously concurrent Mode being referred to as ‚ÄúAsync Mode‚Äù by React team. The name has been changed to highlight React‚Äôs ability to perform work on different priority levels. So it avoids the confusion from other approaches to Async Rendering.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;321&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can I use javascript urls in react16.9?&lt;/h3&gt; &lt;p&gt;Yes, you can use javascript: URLs but it will log a warning in the console. Because URLs starting with javascript: are dangerous by including unsanitized output in a tag like &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; and create a security hole.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const companyProfile = {
  website: &quot;javascript: alert(&#39;Your website is hacked&#39;)&quot;,
};
// It will log a warning
&amp;lt;a href={companyProfile.website}&amp;gt;More details&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember that the future versions will throw an error for javascript URLs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;322&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of eslint plugin for hooks?&lt;/h3&gt; &lt;p&gt;The ESLint plugin enforces rules of Hooks to avoid bugs. It assumes that any function starting with ‚Äùuse‚Äù and a capital letter right after it is a Hook. In particular, the rule enforces that,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Calls to Hooks are either inside a PascalCase function (assumed to be a component) or another useSomething function (assumed to be a custom Hook).&lt;/li&gt; 
   &lt;li&gt;Hooks are called in the same order on every render.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;323&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Imperative and Declarative in React?&lt;/h3&gt; &lt;p&gt;Imagine a simple UI component, such as a ‚ÄúLike‚Äù button. When you tap it, it turns blue if it was previously grey, and grey if it was previously blue.&lt;/p&gt; &lt;p&gt;The imperative way of doing this would be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if( user.likes() ) {
    if( hasBlue() ) {
        removeBlue();
        addGrey();
    } else {
        removeGrey();
        addBlue();
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Basically, you have to check what is currently on the screen and handle all the changes necessary to redraw it with the current state, including undoing the changes from the previous state. You can imagine how complex this could be in a real-world scenario.&lt;/p&gt; &lt;p&gt;In contrast, the declarative approach would be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if( this.state.liked ) {
    return &amp;lt;blueLike /&amp;gt;;
} else {
    return &amp;lt;greyLike /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Because the declarative approach separates concerns, this part of it only needs to handle how the UI should look in a sepecific state, and is therefore much simpler to understand.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;324&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of using typescript with reactjs?&lt;/h3&gt; &lt;p&gt;Below are some of the benefits of using typescript with Reactjs,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is possible to use latest JavaScript features&lt;/li&gt; 
   &lt;li&gt;Use of interfaces for complex type definitions&lt;/li&gt; 
   &lt;li&gt;IDEs such as VS Code was made for TypeScript&lt;/li&gt; 
   &lt;li&gt;Avoid bugs with the ease of readability and Validation&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make sure that user remains authenticated on page refresh while using Context API State Management?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;When a user logs in and reload, to persist the state generally we add the load user action in the useEffect hooks in the main App.js. While using Redux, loadUser action can be easily accessed.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import {loadUser}  from &#39;../actions/auth&#39;;
store.dispatch(loadUser());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;But while using &lt;strong&gt;Context API&lt;/strong&gt;, to access context in App.js, wrap the AuthState in index.js so that App.js can access the auth context. Now whenever the page reloads, no matter what route you are on, the user will be authenticated as &lt;strong&gt;loadUser&lt;/strong&gt; action will be triggered on each re-render.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import App from &#39;./App&#39;;
import AuthState from &#39;./context/auth/AuthState&#39;

ReactDOM.render(
  &amp;lt;React.StrictMode&amp;gt;
    &amp;lt;AuthState&amp;gt;
      &amp;lt;App /&amp;gt;
    &amp;lt;/AuthState&amp;gt;
  &amp;lt;/React.StrictMode&amp;gt;,
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;  const authContext = useContext(AuthContext);

  const { loadUser } = authContext;

  useEffect(() =&amp;gt; {
    loadUser();
  },[])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;loadUser&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;    const loadUser = async () =&amp;gt; {
        const token = sessionStorage.getItem(&#39;token&#39;);

        if(!token){
            dispatch({
                type: ERROR
            })
        }
        setAuthToken(token);

        try {
            const res = await axios(&#39;/api/auth&#39;); 

            dispatch({
                type: USER_LOADED,
                payload: res.data.data
            })
            
        } catch (err) {
           console.error(err); 
        }
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;326&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of new JSX transform?&lt;/h3&gt; &lt;p&gt;There are three major benefits of new JSX transform,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is possible to use JSX without importing React packages&lt;/li&gt; 
   &lt;li&gt;The compiled output might improve the bundle size in a small amount&lt;/li&gt; 
   &lt;li&gt;The future improvements provides the flexibility to reduce the number of concepts to learn React.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How does new JSX transform different from old transform?&lt;/h3&gt; &lt;p&gt;The new JSX transform doesn‚Äôt require React to be in scope. i.e, You don‚Äôt need to import React package for simple scenarios.&lt;/p&gt; &lt;p&gt;Let‚Äôs take an example to look at the main differences between the old and the new transform,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Old Transform:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React from &#39;react&#39;;

function App() {
  return &amp;lt;h1&amp;gt;Good morning!!&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now JSX transform convert the above code into regular JavaScript as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React from &#39;react&#39;;

function App() {
  return React.createElement(&#39;h1&#39;, null, &#39;Good morning!!&#39;);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;New Transform:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The new JSX transform doesn‚Äôt require any React imports&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function App() {
  return &amp;lt;h1&amp;gt;Good morning!!&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Under the hood JSX transform compiles to below code&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import {jsx as _jsx} from &#39;react/jsx-runtime&#39;;

function App() {
  return _jsx(&#39;h1&#39;, { children: &#39;Good morning!!&#39; });
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You still need to import React to use Hooks.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get redux scaffolding using create-react-app?&lt;/h3&gt; &lt;p&gt;Redux team has provided official redux+js or redux+typescript templates for create-react-app project. The generated project setup includes,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Redux Toolkit and React-Redux dependencies&lt;/li&gt; 
   &lt;li&gt;Create and configure Redux store&lt;/li&gt; 
   &lt;li&gt;React-Redux &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; passing the store to React components&lt;/li&gt; 
   &lt;li&gt;Small ‚Äúcounter‚Äù example to demo how to add redux logic and React-Redux hooks API to interact with the store from components&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;The below commands need to be executed along with template option as below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Javascript template:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;npx create-react-app my-app --template redux
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start=&quot;2&quot;&gt; 
   &lt;li&gt;&lt;strong&gt;Typescript template:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;npx create-react-app my-app --template redux-typescript
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are React Server components?&lt;/h3&gt; &lt;p&gt;React Server Component is a way to write React component that gets rendered in the server-side with the purpose of improving React app performance. These components allow us to load components from the backend.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; React Server Components is still under development and not recommended for production yet.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is prop drilling?&lt;/h3&gt; &lt;p&gt;Prop Drilling is the process by which you pass data from one component of the React Component tree to another by going through other components that do not need the data but only help in passing it around.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to prevent state mutation?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>typicode/lowdb</title>
      <link>https://github.com/typicode/lowdb</link>
      <description>&lt;p&gt;Tiny local JSON database for small projects (supports Node, Electron and the browser)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lowdb &lt;a href=&quot;https://www.npmjs.org/package/lowdb&quot;&gt;&lt;img src=&quot;http://img.shields.io/npm/dm/lowdb.svg?style=flat&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/typicode/lowdb/actions/workflows/node.js.yml&quot;&gt;&lt;img src=&quot;https://github.com/typicode/lowdb/actions/workflows/node.js.yml/badge.svg?sanitize=true&quot; alt=&quot;Node.js CI&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Tiny local JSON database for small projects ü¶â&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;db.data.posts.push({ id: 1, title: &#39;lowdb is awesome&#39; })
db.write()
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// db.json
{
  &quot;posts&quot;: [
    { &quot;id&quot;: 1, &quot;title&quot;: &quot;lowdb is awesome&quot; }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See also &lt;a href=&quot;https://github.com/typicode/xv&quot;&gt;xv&lt;/a&gt; and &lt;a href=&quot;https://github.com/typicode/steno&quot;&gt;steno&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Free for Open Source&lt;/h2&gt; 
&lt;p&gt;To help with OSS funding, lowdb v2 is released under Parity license for a limited time. It‚Äôll be released under MIT license once the &lt;strong&gt;goal of 100 &lt;a href=&quot;https://github.com/sponsors/typicode&quot;&gt;sponsors&lt;/a&gt;&lt;/strong&gt; is reached (&lt;strong&gt;currently at 61/100&lt;/strong&gt;) or in five months.&lt;/p&gt; 
&lt;p&gt;Meanwhile, lowdb v2 can be freely used in Open Source projects. Sponsors can use it in any type of project.&lt;/p&gt; 
&lt;p&gt;If you‚Äôve installed this new version without knowing about the license change, you‚Äôre excused for 30 days. There‚Äôs also a 30 days trial. See license files for more details.&lt;/p&gt; 
&lt;p&gt;Thank you for your support!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you‚Äôre already sponsoring &lt;a href=&quot;https://github.com/typicode/husky&quot;&gt;husky&lt;/a&gt;, you can use lowdb v2 today :)&lt;/p&gt; 
&lt;h2&gt;Companies&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sponsors/typicode&quot;&gt;Become a sponsor and have your company logo here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please help me build OSS üëâ &lt;a href=&quot;https://github.com/sponsors/typicode&quot;&gt;GitHub Sponsors&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Minimalist&lt;/strong&gt; and easy to learn API&lt;/li&gt; 
 &lt;li&gt;Query and modify data using &lt;strong&gt;plain JS&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;Improved &lt;strong&gt;TypeScript&lt;/strong&gt; support&lt;/li&gt; 
 &lt;li&gt;Atomic write&lt;/li&gt; 
 &lt;li&gt;Hackable: 
  &lt;ul&gt; 
   &lt;li&gt;Change storage, file format (JSON, YAML, ‚Ä¶) or add encryption via &lt;a href=&quot;https://raw.githubusercontent.com/typicode/lowdb/main/#adapters&quot;&gt;adapters&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Add lodash, ramda, ‚Ä¶ for super powers!&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install lowdb
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { join } from &#39;path&#39;
import { Low, JSONFile } from &#39;lowdb&#39;

// Use JSON file for storage
const file = join(__dirname, &#39;db.json&#39;)
const adapter = new JSONFile(file)
const db = new Low(adapter)

// Read data from JSON file, this will set db.data content
await db.read()

// If file.json doesn&#39;t exist, db.data will be null
// Set default data
db.data ||= { posts: [] }

// Create and query items using plain JS
db.data.posts.push(&#39;hello world&#39;)
db.data.posts[0]

// You can also use this syntax if you prefer
const { posts } = db.data
posts.push(&#39;hello world&#39;)

// Write db.data content to db.json
await db.write()
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// db.json
{
  &quot;posts&quot;: [ &quot;hello world&quot; ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Lowdb is a pure ESM package, if you‚Äôre having trouble importing it in your project, &lt;a href=&quot;https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c&quot;&gt;read this&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;TypeScript&lt;/h3&gt; 
&lt;p&gt;Lowdb now comes with TypeScript support. You can even type &lt;code&gt;db.data&lt;/code&gt; content.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;type Data = {
  posts: string[] // Expect posts to be an array of strings
}
const adapter = new JSONFile&amp;lt;Data&amp;gt;(&#39;db.json&#39;)
const db = new Low&amp;lt;Data&amp;gt;(adapter)

db.data
  .posts
  .push(1) // TypeScript error üéâ
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Lodash&lt;/h3&gt; 
&lt;p&gt;You can easily add lodash or other utility libraries to improve lowdb.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import lodash from lodash

// ...
// Note: db.data needs to be initialized before lodash.chain is called.
db.chain = lodash.chain(db.data)

// Instead of db.data, you can now use db.chain if you want to use the powerful API that lodash provides
const post = db.chain
  .get(&#39;posts&#39;)
  .find({ id: 1 })
  .value()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;More examples&lt;/h3&gt; 
&lt;p&gt;For CLI, server and browser usage, see &lt;a href=&quot;https://raw.githubusercontent.com/typicode/lowdb/main/examples&quot;&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;h3&gt;Classes&lt;/h3&gt; 
&lt;p&gt;Lowdb has two classes (for asynchronous and synchronous adapters).&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;new Low(adapter)&lt;/code&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { Low, JSONFile } from &#39;lowdb&#39;

const db = new Low(new JSONFile(&#39;file.json&#39;))
await db.read()
await db.write()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;new LowSync(adapterSync)&lt;/code&gt;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { LowSync, JSONFileSync } from &#39;lowdb&#39;

const db = new LowSync(new JSONFileSync(&#39;file.json&#39;))
db.read()
db.write()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Methods&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;db.read()&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Calls &lt;code&gt;adaper.read()&lt;/code&gt; and sets &lt;code&gt;db.data&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;JSONFile&lt;/code&gt; and &lt;code&gt;JSONFileSync&lt;/code&gt; adapters will set &lt;code&gt;db.data&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; if file doesn‚Äôt exist.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;db.data // === null
db.read()
db.data // !== null
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;db.write()&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Calls &lt;code&gt;adapter.write(db.data)&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;db.data = { posts: [] }
db.write() // file.json will be { posts: [] }
db.data = {}
db.write() // file.json will be {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Properties&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;db.data&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Holds your db content. If you‚Äôre using the adapters coming with lowdb, it can be any type supported by &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;&lt;code&gt;JSON.stringify&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;db.data = &#39;string&#39;
db.data = [1, 2, 3]
db.data = { key: &#39;value&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Adapters&lt;/h2&gt; 
&lt;h3&gt;Lowdb adapters&lt;/h3&gt; 
&lt;h4&gt;&lt;code&gt;JSONFile&lt;/code&gt; &lt;code&gt;JSONFileSync&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Adapters for reading and writing JSON files.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;new Low(new JSONFile(filename))
new LowSync(new JSONFileSync(filename))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;Memory&lt;/code&gt; &lt;code&gt;MemorySync&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;In-memory adapters. Useful for speeding up unit tests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;new Low(new Memory())
new LowSync(new MemorySync())
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;LocalStorage&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Synchronous adapter for &lt;code&gt;window.localStorage&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;new LowSync(new LocalStorage(name))
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;TextFile&lt;/code&gt; &lt;code&gt;TextFileSync&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Adapters for reading and writing text. Useful for creating custom adapters.&lt;/p&gt; 
&lt;h3&gt;Third-party adapters&lt;/h3&gt; 
&lt;p&gt;If you‚Äôve published an adapter for lowdb, feel free to create a PR to add it here.&lt;/p&gt; 
&lt;h3&gt;Writing your own adapter&lt;/h3&gt; 
&lt;p&gt;You may want to create an adapter to write &lt;code&gt;db.data&lt;/code&gt; to YAML, XML, encrypt data, a remote storage, ‚Ä¶&lt;/p&gt; 
&lt;p&gt;An adapter is a simple class that just needs to expose two methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;class AsyncAdapter {
  read() { /* ... */ } // should return Promise&amp;lt;data&amp;gt;
  write(data) { /* ... */ } // should return Promise&amp;lt;void&amp;gt;
}

class SyncAdapter {
  read() { /* ... */ } // should return data
  write(data) { /* ... */ } // should return nothing
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, let‚Äôs say you have some async storage and want to create an adapter for it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { api } from &#39;./AsyncStorage&#39;

class CustomAsyncAdapter {
  // Optional: your adapter can take arguments
  constructor(args) {
    // ...
  }

  async read() {
    const data = await api.read()
    return data
  }

  async write(data) {
    await api.write(data)
  }
}

const adapter = new CustomAsyncAdapter()
const db = new Low(adapter)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/typicode/lowdb/main/src/adapters&quot;&gt;&lt;code&gt;src/adapters/&lt;/code&gt;&lt;/a&gt; for more examples.&lt;/p&gt; 
&lt;h4&gt;Custom serialization&lt;/h4&gt; 
&lt;p&gt;To create an adapter for another format than JSON, you can use &lt;code&gt;TextFile&lt;/code&gt; or &lt;code&gt;TextFileSync&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { Adapter, Low, TextFile } from &#39;lowdb&#39;
import YAML from &#39;yaml&#39;

class YAMLFile {
  constructor(filename) {
    this.adapter = new TextFile(filename)
  }

  async read() {
    const data = await this.adapter.read()
    if (data === null) {
      return null
    } else {
      return YAML.parse(data)
    }
  }

  write(obj) {
    return this.adapter.write(YAML.stringify(obj))
  }
}

const adapter = new YAMLFile(&#39;file.yaml&#39;)
const db = new Low(adapter)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Limits&lt;/h2&gt; 
&lt;p&gt;Lowdb doesn‚Äôt support Node‚Äôs cluster module.&lt;/p&gt; 
&lt;p&gt;If you have large JavaScript objects (&lt;code&gt;~10-100MB&lt;/code&gt;) you may hit some performance issues. This is because whenever you call &lt;code&gt;db.write&lt;/code&gt;, the whole &lt;code&gt;db.data&lt;/code&gt; is serialized and written to storage.&lt;/p&gt; 
&lt;p&gt;Depending on your use case, this can be fine or not. It can be mitigated by doing batch operations and calling &lt;code&gt;db.write&lt;/code&gt; only when you need it.&lt;/p&gt; 
&lt;p&gt;If you plan to scale, it‚Äôs highly recommended to use databases like PostgreSQL, MongoDB, ‚Ä¶&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://paritylicense.com/versions/7.0.0.html&quot;&gt;License Zero Parity 7.0.0&lt;/a&gt; and MIT (contributions) with exception &lt;a href=&quot;https://patronlicense.com/versions/1.0.0&quot;&gt;License Zero Patron 1.0.0&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>panghu999/panghu</title>
      <link>https://github.com/panghu999/panghu</link>
      <description>&lt;p&gt;ÂÖ¨‰ºóÂè∑ Êü†Ê™¨Áé©Êú∫‰∫§ÊµÅ&lt;/p&gt;&lt;hr&gt;</description>
    </item>
    
    <item>
      <title>Hacker0x01/react-datepicker</title>
      <link>https://github.com/Hacker0x01/react-datepicker</link>
      <description>&lt;p&gt;A simple and reusable datepicker component for React&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Date Picker&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://badge.fury.io/js/react-datepicker&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/react-datepicker.svg?sanitize=true&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Hacker0x01/react-datepicker/actions/workflows/test.yml&quot;&gt;&lt;img src=&quot;https://github.com/Hacker0x01/react-datepicker/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;Test suite&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/Hacker0x01/react-datepicker&quot;&gt;&lt;img src=&quot;https://david-dm.org/Hacker0x01/react-datepicker.svg?sanitize=true&quot; alt=&quot;Dependency Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/Hacker0x01/react-datepicker&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/Hacker0x01/react-datepicker/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://npmjs.org/package/react-datepicker&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/react-datepicker.svg?sanitize=true&quot; alt=&quot;Downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://lgtm.com/projects/g/Hacker0x01/react-datepicker/context:javascript&quot;&gt;&lt;img src=&quot;https://img.shields.io/lgtm/grade/javascript/g/Hacker0x01/react-datepicker.svg?logo=lgtm&amp;amp;logoWidth=18&quot; alt=&quot;Code Quality: Javascript&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://lgtm.com/projects/g/Hacker0x01/react-datepicker/alerts&quot;&gt;&lt;img src=&quot;https://img.shields.io/lgtm/alerts/g/Hacker0x01/react-datepicker.svg?logo=lgtm&amp;amp;logoWidth=18&quot; alt=&quot;Total Alerts&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A simple and reusable Datepicker component for React (&lt;a href=&quot;https://reactdatepicker.com/&quot;&gt;Demo&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1412392/5339491/c40de124-7ee1-11e4-9f07-9276e2545f27.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;The package can be installed via &lt;a href=&quot;https://github.com/npm/cli&quot;&gt;npm&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install react-datepicker --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or via &lt;a href=&quot;https://github.com/yarnpkg/yarn&quot;&gt;yarn&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;yarn add react-datepicker
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You‚Äôll need to install React and PropTypes separately since those dependencies aren‚Äôt included in the package. If you need to use a locale other than the default en-US, you‚Äôll also need to import that into your project from date-fns (see Localization section below). Below is a simple example of how to use the Datepicker in a React view. You will also need to require the CSS file from this package (or provide your own). The example below shows how to include the CSS from this package if your build system supports requiring CSS files (Webpack is one that does).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React, { useState } from &quot;react&quot;;
import DatePicker from &quot;react-datepicker&quot;;

import &quot;react-datepicker/dist/react-datepicker.css&quot;;

// CSS Modules, react-datepicker-cssmodules.css
// import &#39;react-datepicker/dist/react-datepicker-cssmodules.css&#39;;

const Example = () =&amp;gt; {
  const [startDate, setStartDate] = useState(new Date());
  return (
    &amp;lt;DatePicker selected={startDate} onChange={(date) =&amp;gt; setStartDate(date)} /&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;The most basic use of the DatePicker can be described with:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;DatePicker selected={startdate} onChange={(date) =&amp;gt; setStartDate(date)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use &lt;code&gt;onSelect&lt;/code&gt; event handler which fires each time some calendar date has been selected&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;DatePicker
  selected={date}
  onSelect={handleDateSelect} //when day is clicked
  onChange={handleDateChange} //only when value has changed
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;onClickOutside&lt;/code&gt; handler may be useful to close datepicker in &lt;code&gt;inline&lt;/code&gt; mode&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/Hacker0x01/react-datepicker/raw/master/docs/datepicker.md&quot;&gt;here&lt;/a&gt; for a full list of props that may be passed to the component. Examples are given on the &lt;a href=&quot;https://hacker0x01.github.io/react-datepicker&quot;&gt;main website&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Time picker&lt;/h3&gt; 
&lt;p&gt;You can also include a time picker by adding the showTimeSelect prop&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;DatePicker
  selected={date}
  onChange={handleDateChange}
  showTimeSelect
  dateFormat=&quot;Pp&quot;
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Times will be displayed at 30-minute intervals by default (default configurable via timeIntervals prop)&lt;/p&gt; 
&lt;p&gt;More examples of how to use the time picker are given on the &lt;a href=&quot;https://hacker0x01.github.io/react-datepicker&quot;&gt;main website&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Localization&lt;/h3&gt; 
&lt;p&gt;The date picker relies on &lt;a href=&quot;https://date-fns.org/v2.0.0-alpha.18/docs/I18n&quot;&gt;date-fns internationalization&lt;/a&gt; to localize its display components. By default, the date picker will use the locale globally set, which is English. Provided are 3 helper methods to set the locale:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;registerLocale&lt;/strong&gt; (string, object): loads an imported locale object from date-fns&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;setDefaultLocale&lt;/strong&gt; (string): sets a registered locale as the default for all datepicker instances&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;getDefaultLocale&lt;/strong&gt;: returns a string showing the currently set default locale&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { registerLocale, setDefaultLocale } from  &quot;react-datepicker&quot;;
import es from &#39;date-fns/locale/es&#39;;
registerLocale(&#39;es&#39;, es)

&amp;lt;DatePicker
  locale=&quot;es&quot;
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Locales can be changed in the following way:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Globally&lt;/strong&gt; - &lt;code&gt;setDefaultLocale(&#39;es&#39;);&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;h3&gt;React&lt;/h3&gt; 
&lt;p&gt;We‚Äôre always trying to stay compatible with the latest version of React. We can‚Äôt support all older versions of React.&lt;/p&gt; 
&lt;p&gt;Latest compatible versions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;React 16 or newer: React-datepicker v2.9.4 and newer&lt;/li&gt; 
 &lt;li&gt;React 15.5: React-datepicker v2.9.3&lt;/li&gt; 
 &lt;li&gt;React 15.4.1: needs React-datepicker v0.40.0, newer won‚Äôt work (due to react-onclickoutside dependencies)&lt;/li&gt; 
 &lt;li&gt;React 0.14 or newer: All above React-datepicker v0.13.0&lt;/li&gt; 
 &lt;li&gt;React 0.13: React-datepicker v0.13.0&lt;/li&gt; 
 &lt;li&gt;pre React 0.13: React-datepicker v0.6.2&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Moment.js&lt;/h3&gt; 
&lt;p&gt;Up until version 1.8.0, this package was using Moment.js. Starting v2.0.0, we switched to using &lt;code&gt;date-fns&lt;/code&gt;, which uses native Date objects, to reduce the size of the package. If you‚Äôre switching from 1.8.0 to 2.0.0 or higher, please see the updated example above of check out the &lt;a href=&quot;https://reactdatepicker.com&quot;&gt;examples site&lt;/a&gt; for up to date examples.&lt;/p&gt; 
&lt;h3&gt;Browser Support&lt;/h3&gt; 
&lt;p&gt;The date picker is compatible with the latest versions of Chrome, Firefox, and IE10+.&lt;/p&gt; 
&lt;p&gt;Unfortunately, it is difficult to support legacy browsers while maintaining our ability to develop new features in the future. For IE9 support, it is known that the &lt;a href=&quot;https://www.npmjs.com/package/classlist-polyfill&quot;&gt;classlist polyfill&lt;/a&gt; is needed, but this may change or break at any point in the future.&lt;/p&gt; 
&lt;h2&gt;Local Development&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch contains the latest version of the Datepicker component.&lt;/p&gt; 
&lt;p&gt;To begin local development:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;yarn build-dev&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;yarn start&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The last step starts documentation app as a simple webserver on http://localhost:3000.&lt;/p&gt; 
&lt;p&gt;You can run &lt;code&gt;yarn test&lt;/code&gt; to execute the test suite and linters. To help you develop the component we‚Äôve set up some tests that cover the basic functionality (can be found in &lt;code&gt;/tests&lt;/code&gt;). Even though we‚Äôre big fans of testing, this only covers a small piece of the component. We highly recommend you add tests when you‚Äôre adding new functionality.&lt;/p&gt; 
&lt;h3&gt;The examples&lt;/h3&gt; 
&lt;p&gt;The examples are hosted within the docs folder and are ran in the simple app that loads the Datepicker. To extend the examples with a new example, you can simply duplicate one of the existing examples and change the unique properties of your example.&lt;/p&gt; 
&lt;h2&gt;Accessibility&lt;/h2&gt; 
&lt;h3&gt;Keyboard support&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Left&lt;/em&gt;: Move to the previous day.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Right&lt;/em&gt;: Move to the next day.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Up&lt;/em&gt;: Move to the previous week.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Down&lt;/em&gt;: Move to the next week.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;PgUp&lt;/em&gt;: Move to the previous month.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;PgDn&lt;/em&gt;: Move to the next month.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Home&lt;/em&gt;: Move to the previous year.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;End&lt;/em&gt;: Move to the next year.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Enter/Esc/Tab&lt;/em&gt;: close the calendar. (Enter &amp;amp; Esc calls preventDefault)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;For month picker&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Left&lt;/em&gt;: Move to the previous month.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Right&lt;/em&gt;: Move to the next month.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Enter&lt;/em&gt;: Select date and close the calendar&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2014-2021 HackerOne Inc. and individual contributors. Licensed under MIT license, see &lt;a href=&quot;https://raw.githubusercontent.com/Hacker0x01/react-datepicker/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for the full license.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDHelloWorld/jd_scripts</title>
      <link>https://github.com/JDHelloWorld/jd_scripts</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jd_scripts&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Âà†Èô§ËÑöÊú¨ÂÜÖinviteCodes&lt;/li&gt; 
  &lt;li&gt;‰ΩøÁî®Êñ∞Âä©ÂäõÂ∫ì&lt;/li&gt; 
  &lt;li&gt;ÂÖ∂‰ªñÊú™‰øÆÊîπÔºåÁî®Ê≥ï‰∏éÂéüÁâàÁõ∏Âêå&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;BOT&lt;/h1&gt; 
&lt;h3&gt;Âä©ÂäõÁ†ÅÂú®@JD_ShareCode_BotÊèê‰∫§ &lt;a href=&quot;https://t.me/JD_ShareCode_Bot&quot;&gt;ÁÇπÂáªÁõ¥ËææBOT&lt;/a&gt;&lt;/h3&gt; 
&lt;h1&gt;Warning&lt;/h1&gt; 
&lt;h3&gt;Â∏¶Âä©ÂäõÂäüËÉΩÁöÑËÑöÊú¨Ë¶Å‰ΩøÁî®Êú¨‰ªìÂ∫ìÁöÑÔºåÂÖ∂‰ªñ‰ªìÂ∫ìÁöÑÊ≤°ÊúâÈÄÇÈÖçÊñ∞Âä©ÂäõÊ±†&lt;/h3&gt; 
&lt;h3&gt;IOS‰∏â‰ª∂Â•óÂú®‰ªìÂ∫ìÂÜÖÊúâËÆ¢ÈòÖÈÖçÁΩÆÊñá‰ª∂&lt;/h3&gt; 
&lt;h3&gt;NodeÂíåDockerÊãâÂèñ‰ΩøÁî®Êú¨‰ªìÂ∫ìÂú∞ÂùÄ&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>Unitech/pm2</title>
      <link>https://github.com/Unitech/pm2</link>
      <description>&lt;p&gt;Node.js Production Process Manager with a built-in Load Balancer.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;br&gt; 
 &lt;a href=&quot;http://pm2.keymetrics.io/&quot; title=&quot;PM2 Keymetrics link&quot;&gt; &lt;img width=&quot;710px&quot; src=&quot;https://raw.githubusercontent.com/Unitech/pm2/development/pres/pm2-v4.png&quot; alt=&quot;pm2 logo&quot;&gt; &lt;/a&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;b&gt;P&lt;/b&gt;(rocess) 
 &lt;b&gt;M&lt;/b&gt;(anager) 
 &lt;b&gt;2&lt;/b&gt;
 &lt;br&gt; 
 &lt;i&gt;Runtime Edition&lt;/i&gt; 
 &lt;br&gt;
 &lt;br&gt; 
 &lt;a href=&quot;https://npm-stat.com/charts.html?package=pm2&amp;amp;from=2015-10-09&quot; title=&quot;PM2 Downloads&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/dm/pm2&quot; alt=&quot;Downloads per Month&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://npm-stat.com/charts.html?package=pm2&amp;amp;from=2015-10-09&quot; title=&quot;PM2 Downloads&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/dy/pm2&quot; alt=&quot;Downloads per Year&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://badge.fury.io/js/pm2&quot; title=&quot;NPM Version Badge&quot;&gt; &lt;img src=&quot;https://badge.fury.io/js/pm2.svg?sanitize=true&quot; alt=&quot;npm version&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://travis-ci.org/Unitech/pm2&quot; title=&quot;PM2 Tests&quot;&gt; &lt;img src=&quot;https://travis-ci.org/Unitech/pm2.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt; &lt;/a&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;p&gt;PM2 is a production process manager for Node.js applications with a built-in load balancer. It allows you to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.&lt;/p&gt; 
&lt;p&gt;Starting an application in production mode is as easy as:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pm2 start app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;PM2 is constantly assailed by &lt;a href=&quot;https://travis-ci.org/Unitech/pm2&quot;&gt;more than 1800 tests&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Official website: &lt;a href=&quot;https://pm2.keymetrics.io/&quot;&gt;https://pm2.keymetrics.io/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Works on Linux (stable) &amp;amp; macOS (stable) &amp;amp; Windows (stable). All Node.js versions are supported starting Node.js 12.X.&lt;/p&gt; 
&lt;h3&gt;Installing PM2&lt;/h3&gt; 
&lt;p&gt;With NPM:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install pm2 -g
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or if you don‚Äôt have Node.js installed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;wget -qO- https://getpm2.com/install.sh | bash
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Start an application&lt;/h3&gt; 
&lt;p&gt;You can start any application (Node.js, Python, Ruby, binaries in $PATH‚Ä¶) like that:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pm2 start app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Your app is now daemonized, monitored and kept alive forever.&lt;/p&gt; 
&lt;h3&gt;Managing Applications&lt;/h3&gt; 
&lt;p&gt;Once applications are started you can manage them easily:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/unitech/pm2/raw/master/pres/pm2-list.png&quot; alt=&quot;Process listing&quot;&gt;&lt;/p&gt; 
&lt;p&gt;To list all running applications:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pm2 list
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Managing apps is straightforward:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pm2 stop     &amp;lt;app_name|namespace|id|&#39;all&#39;|json_conf&amp;gt;
$ pm2 restart  &amp;lt;app_name|namespace|id|&#39;all&#39;|json_conf&amp;gt;
$ pm2 delete   &amp;lt;app_name|namespace|id|&#39;all&#39;|json_conf&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To have more details on a specific application:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pm2 describe &amp;lt;id|app_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To monitor logs, custom metrics, application information:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pm2 monit
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/process-management/&quot;&gt;More about Process Management&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Cluster Mode: Node.js Load Balancing &amp;amp; Zero Downtime Reload&lt;/h3&gt; 
&lt;p&gt;The Cluster mode is a special mode when starting a Node.js application, it starts multiple processes and load-balance HTTP/TCP/UDP queries between them. This increase overall performance (by a factor of x10 on 16 cores machines) and reliability (faster socket re-balancing in case of unhandled errors).&lt;/p&gt; 
&lt;p&gt;Starting a Node.js application in cluster mode that will leverage all CPUs available:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pm2 start api.js -i &amp;lt;processes&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;&amp;lt;processes&amp;gt;&lt;/code&gt; can be &lt;code&gt;&#39;max&#39;&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt; (all cpu minus 1) or a specified number of instances to start.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Zero Downtime Reload&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Hot Reload allows to update an application without any downtime:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pm2 reload all
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Seamlessly supported by all major Node.js frameworks and any Node.js applications without any code change:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Unitech/PM2/master/pres/cluster-support.png&quot; alt=&quot;Framework supported&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/cluster-mode/&quot;&gt;More informations about how PM2 make clustering easy&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Container Support&lt;/h3&gt; 
&lt;p&gt;With the drop-in replacement command for &lt;code&gt;node&lt;/code&gt;, called &lt;code&gt;pm2-runtime&lt;/code&gt;, run your Node.js application in a hardened production environment. Using it is seamless:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;RUN npm install pm2 -g
CMD [ &quot;pm2-runtime&quot;, &quot;npm&quot;, &quot;--&quot;, &quot;start&quot; ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/docker-pm2-nodejs/&quot;&gt;Read More about the dedicated integration&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Terminal Based Monitoring&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/Unitech/pm2/raw/master/pres/pm2-monit.png&quot; alt=&quot;Monit&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Monitor all processes launched straight from the command line:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pm2 monit
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Log Management&lt;/h3&gt; 
&lt;p&gt;To consult logs just type the command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pm2 logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Standard, Raw, JSON and formated output are available.&lt;/p&gt; 
&lt;p&gt;Examples:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pm2 logs APP-NAME       # Display APP-NAME logs
$ pm2 logs --json         # JSON output
$ pm2 logs --format       # Formated output

$ pm2 flush               # Flush all logs
$ pm2 reloadLogs          # Reload all logs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/log-management/&quot;&gt;More about log management&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Startup Scripts Generation&lt;/h3&gt; 
&lt;p&gt;PM2 can generates and configure a Startup Script to keep PM2 and your processes alive at every server restart.&lt;/p&gt; 
&lt;p&gt;Init Systems Supported: &lt;strong&gt;systemd&lt;/strong&gt;, &lt;strong&gt;upstart&lt;/strong&gt;, &lt;strong&gt;launchd&lt;/strong&gt;, &lt;strong&gt;rc.d&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Generate Startup Script
$ pm2 startup

# Freeze your process list across server restart
$ pm2 save

# Remove Startup Script
$ pm2 unstartup
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/startup/&quot;&gt;More about Startup Scripts Generation&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;PM2 Modules&lt;/h3&gt; 
&lt;p&gt;PM2 embeds a simple and powerful module system. Installing a module is straightforward:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pm2 install &amp;lt;module_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here are some PM2 compatible modules (standalone Node.js applications managed by PM2):&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/pm2-logrotate&quot;&gt;&lt;strong&gt;pm2-logrotate&lt;/strong&gt;&lt;/a&gt; automatically rotate logs and limit logs size&lt;br&gt; &lt;a href=&quot;https://www.npmjs.com/package/pm2-server-monit&quot;&gt;&lt;strong&gt;pm2-server-monit&lt;/strong&gt;&lt;/a&gt; monitor the current server with more than 20+ metrics and 8 actions&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;Updating PM2&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install latest PM2 version
$ npm install pm2@latest -g
# Save process list, exit old PM2 &amp;amp; restore all processes
$ pm2 update
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;PM2 updates are seamless&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;PM2+ Monitoring&lt;/h2&gt; 
&lt;p&gt;If you manage your apps with PM2, PM2+ makes it easy to monitor and manage apps across servers.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://pm2.io/img/app-overview.png&quot; alt=&quot;https://app.pm2.io/&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Feel free to try it:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.pm2.io/&quot;&gt;Discover the monitoring dashboard for PM2&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Thanks in advance and we hope that you like PM2!&lt;/p&gt; 
&lt;h2&gt;CHANGELOG&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Unitech/PM2/raw/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;http://pm2.keymetrics.io/hall-of-fame/&quot;&gt;Contributors&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;PM2 is made available under the terms of the GNU Affero General Public License 3.0 (AGPL 3.0). For other licenses &lt;a href=&quot;mailto:contact@keymetrics.io&quot;&gt;contact us&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Asabeneh/30-Days-Of-React</title>
      <link>https://github.com/Asabeneh/30-Days-Of-React</link>
      <description>&lt;p&gt;30 Days of React challenge is a step by step guide to learn React in 30 days. It requires HTML, CSS, and JavaScript knowledge. You should be comfortable with JavaScript before you start to React. If you are not comfortable with JavaScript check out 30DaysOfJavaScript. This is a continuation of 30 Days Of JS. This challenge may take more than 100‚Ä¶&lt;/p&gt;&lt;hr&gt;&lt;div&gt; 
 &lt;img align=&quot;right&quot; width=&quot;100%&quot; src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/30_days_of_react.jpg&quot;&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt; 30 Days Of React&lt;/h1&gt; 
 &lt;a class=&quot;header-badge&quot; target=&quot;_blank&quot; href=&quot;https://www.linkedin.com/in/asabeneh/&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&amp;amp;logo=linkedin&amp;amp;style=social&quot;&gt; &lt;/a&gt; 
 &lt;a class=&quot;header-badge&quot; target=&quot;_blank&quot; href=&quot;https://twitter.com/Asabeneh&quot;&gt; &lt;img alt=&quot;Twitter Follow&quot; src=&quot;https://img.shields.io/twitter/follow/asabeneh?style=social&quot;&gt; &lt;/a&gt; 
 &lt;p&gt;&lt;sub&gt;Author: &lt;a href=&quot;https://www.linkedin.com/in/asabeneh/&quot; target=&quot;_blank&quot;&gt;Asabeneh Yetayeh&lt;/a&gt;&lt;br&gt; &lt;small&gt; October, 2020&lt;/small&gt;&lt;/sub&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&quot;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;| # Day | Topics | | ‚Äî‚Äì | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì: | | 00 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&quot;&gt;How to Use Repo&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&quot;&gt;Setup&lt;/a&gt; | | 01 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&quot;&gt;JavaScript Refresher&lt;/a&gt; | | 02 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/02_Day_Introduction_to_React/02_introduction_to_react.md&quot;&gt;Getting Started React&lt;/a&gt; | | 03 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/03_Day_Setting_Up/03_setting_up.md&quot;&gt;Setting Up&lt;/a&gt; | | 04 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/04_Day_Components/04_components.md&quot;&gt;Components&lt;/a&gt; | | 05 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/05_Day_Props/05_props.md&quot;&gt;Props&lt;/a&gt; | | 06 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/06_Day_Map_List_Keys/06_map_list_keys.md&quot;&gt;List, Map and Keys&lt;/a&gt; | | 07 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/07_Day_Class_Components/07_class_components.md&quot;&gt;Class Components&lt;/a&gt; | | 08 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/08_Day_States/08_states.md&quot;&gt;States&lt;/a&gt; | | 09 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/09_Day_Conditional_Rendering/09_conditional_rendering.md&quot;&gt;Conditional Rendering&lt;/a&gt; | | 10 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/10_React_Project_Folder_Structure/10_react_project_folder_structure.md&quot;&gt;React Project Folder Structure&lt;/a&gt; | | 11 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/11_Day_Events/11_events.md&quot;&gt;Events&lt;/a&gt; | | 12 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/12_Day_Forms/12_forms.md&quot;&gt;Forms&lt;/a&gt; | | 13 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/13_Day_Controlled_Versus_Uncontrolled_Input/13_uncontrolled_input.md&quot;&gt;Controlled and Uncontrolled Component&lt;/a&gt; | | 14 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/14_Day_Component_Life_Cycles/14_component_life_cycles.md&quot;&gt;Component Life Cycles&lt;/a&gt; | | 15 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/15_Third_Party_Packages/15_third_party_packages.md&quot;&gt;Third Party Packages&lt;/a&gt; | | 16 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/16_Higher_Order_Component/16_higher_order_component.md&quot;&gt;Higher Order Components&lt;/a&gt; | | 17 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/17_React_Router/17_react_router.md&quot;&gt;React Router&lt;/a&gt; | | 18 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/18_Fetch_And_Axios/18_fetch_axios.md&quot;&gt;Fetch versus Axios&lt;/a&gt; | | 19 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/19_projects/19_projects.md&quot;&gt;Projects&lt;/a&gt; | | 20 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/20_projects/20_projects.md&quot;&gt;Projects&lt;/a&gt; | | 21 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/21_Introducing_Hooks/21_introducing_hooks.md&quot;&gt;Hooks&lt;/a&gt; | | 22 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/22_Form_Using_Hooks/22_form_using_hooks.md&quot;&gt;Forms Using Hook&lt;/a&gt; | | 23 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/23_Fetching_Data_Using_Hooks/23_fetching_data_using_hooks.md&quot;&gt;Fetching Data Using Hooks&lt;/a&gt; | | 24 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/24_projects/24_projects.md&quot;&gt;Project using Hooks&lt;/a&gt; | | 25 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/25_Custom_Hooks/25_custom_hooks.md&quot;&gt;Custom Hooks&lt;/a&gt; | | 26 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/26_Context/26_context.md&quot;&gt;Context&lt;/a&gt; | | 27 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/27_Ref/27_ref.md&quot;&gt;Ref&lt;/a&gt; | | 28 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/28_project/28_project.md&quot;&gt;project&lt;/a&gt; | | 29 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/29_explore/29_explore.md&quot;&gt;Explore&lt;/a&gt; | | 30 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/30_conclusions/30_conclusions.md&quot;&gt;Conclusions&lt;/a&gt; |&lt;/p&gt; 
&lt;p&gt;üß°üß°üß° HAPPY CODING üß°üß°üß°&lt;/p&gt; 
&lt;div&gt; 
 &lt;small&gt;Support the &lt;strong&gt;author&lt;/strong&gt; to create more educational materials&lt;/small&gt; 
 &lt;br&gt; 
 &lt;a href=&quot;https://www.paypal.me/asabeneh&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/paypal_lg.png&quot; alt=&quot;Paypal Logo&quot; style=&quot;width:10%&quot;&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&quot;&gt;How to Use Repo&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#star-and-fork-this-repo&quot;&gt;Star and Fork this Repo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#clone-your-fork&quot;&gt;Clone your Fork&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#create-a-new-branch&quot;&gt;Create a New Branch&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#structure-exercise-solutions&quot;&gt;Structure Exercise Solutions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#commit-exercise-solutions&quot;&gt;Commit Exercise Solutions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#update-your-fork-daily&quot;&gt;Update your Fork Daily&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&quot;&gt;Setup&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#install-nodejs&quot;&gt;Install Node.js&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#browser&quot;&gt;Browser&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-google-chrome&quot;&gt;Installing Google Chrome&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#opening-google-chrome-console&quot;&gt;Opening Google Chrome Console&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#writing-code-on-browser-console&quot;&gt;Writing Code on Browser Console&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog&quot;&gt;Console.log&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog-with-multiple-arguments&quot;&gt;Console.log with Multiple Arguments&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#syntax&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#arithmetics&quot;&gt;Arithmetics&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#code-editor&quot;&gt;Code Editor&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-visual-studio-code&quot;&gt;Installing Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-visual-studio-code&quot;&gt;How to Use Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; on deciding to participate in 30 days of React programming challenge. In this challenge you will learn everything you need to use to develop a React application. In the end of the challenge you will get a 30DaysOfReact programming challenge completion certificate. In case you need help or if you would like to help others you may join the &lt;a href=&quot;https://t.me/thirtydaysofreact&quot;&gt;telegram group&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A 30DaysOfReact&lt;/strong&gt; challenge is a guide for both beginners and advanced JavaScript and React developers. Welcome to 30 Days Of React. React is a JavaScript library. I enjoy using and teaching React and I hope you will do so too. In this step by step 30 Days React challenge, you will learn React which is one of most popular user interface JavaScript libraries. React can do everything that JavaScript can do. React can be used &lt;strong&gt;&lt;em&gt;to add interactivity to websites, to develop mobile apps, desktop applications, games&lt;/em&gt;&lt;/strong&gt;. I believe you will learn quite a lot in the next 30 days and your programming and problem solving skills will also be improved significantly.&lt;/p&gt; 
&lt;p&gt;I will use conversational English and less jargons to write this challenge. The content will be continuously updated. If you find a typo or grammar mistakes don‚Äôt be surprised because I don‚Äôt do any proof read before I publish it. I would recommend you to focus on the main message of the challenge instead of the English and some minor mistakes. I really appreciate if you send me pull requests for improvement and remember to pull first from master before you send pull requests. Most of the images I have used in this challenge came from 30DaysOfJavaScript challenge therefore you may need to rename file names and folders 30DaysOfReact. If you are good at arrays, loops, functions, objects, functional programming, destructuring and spreading and class then you will be able to follow the challenge properly. Otherwise, I strongly recommend you to check &lt;a href=&quot;https://github.com/Asabeneh/30-Days-Of-JavaScript&quot;&gt;30DaysOfJavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before you dive into this course, you may check the &lt;a href=&quot;https://t.me/thirtydaysofreact/992&quot;&gt;review&lt;/a&gt; of 30 Days Of React.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;To get along with the challenge you need to have the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Motivation&lt;/li&gt; 
 &lt;li&gt;A computer&lt;/li&gt; 
 &lt;li&gt;Internet&lt;/li&gt; 
 &lt;li&gt;A browser&lt;/li&gt; 
 &lt;li&gt;A code editor&lt;/li&gt; 
 &lt;li&gt;HTML, CSS and JavaScript intermediate level skill&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;How to Use Repo&lt;/h2&gt; 
&lt;h3&gt;Star and Fork this Repo&lt;/h3&gt; 
&lt;p&gt;Star this repo to support this work and Fork the repo to create your own copy to work from.&lt;/p&gt; 
&lt;h3&gt;Clone your Fork&lt;/h3&gt; 
&lt;p&gt;You should always work directly from your forked copy.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# note that an `ssh` link is used here, but an `https` link will work the same
git clone git@github.com:username/30-Days-Of-React.git
cd 30-Days-Of-React
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Create a New Branch&lt;/h3&gt; 
&lt;p&gt;To complete daily exercises, my suggestion is to create a separate branch to house your exercise folder or any other changes you make. This will keep your master branch clean at all times, which means your master will always be similar to the original master.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git checkout -b exercise-solutions # `-b` creates the branch if it does not exist
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Structure Exercise Solutions&lt;/h3&gt; 
&lt;p&gt;In your new branch, you can use files/folders to structure your solutions to daily exercises&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir -p solutions/day-01 # `-p` helps create nested directories
touch solutions/day-01/level1.js # touch creates a file
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Commit Exercise Solutions&lt;/h3&gt; 
&lt;p&gt;Commit your solutions to your Fork&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git add solutions/day-01/level1.js
git commit -m &quot;chore: exercise level1 complete&quot;
git push origin exercise-solutions # branch `exercise-solutions` was created earlier
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Update your Fork Daily&lt;/h3&gt; 
&lt;p&gt;This repo will be updated daily throughout the month. When a new day‚Äôs content becomes available, you can update your forked copy with the steps below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 1. switch to master branch
git checkout master
# 2. check if your local copy has a link to original `...Asabeneh/30-Days-Of-React.git`
git remote -v
# 3. if not, add a link to original, you can choose any name for the link or use `upstream`
git remote add upstream git@github.com:Asabeneh/30-Days-Of-React.git
# 4. check again to confirm link added
git remote -v
# 5. now you can fetch updates from original repo, assuming you named this `upstream`
git fetch upstream
# 6. merge the updates to your local master branch
git merge upstream/master master
# 7. push the merged updates to your Forked copy on GitHub
git push origin master
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that the updates are only applied to the master branch. If you wish to update any other branch, repeat steps 6-7 with the branch name. See snippet below for &lt;code&gt;exercise-solutions&lt;/code&gt; branch&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git merge upstream/master exercise-solutions
git push origin exercise-solutions
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;I believe you have the motivation and a strong desire to be a developer, a computer and Internet. In addition to that basic to intermediate level HTML, CSS and JS. If you have those, then you have everything to get started.&lt;/p&gt; 
&lt;h3&gt;Install Node.js&lt;/h3&gt; 
&lt;p&gt;You may not need node.js right now but you may need it for later. Install &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node.js&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/download_node.png&quot; alt=&quot;Node download&quot;&gt;&lt;/p&gt; 
&lt;p&gt;After downloading double click and install&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/install_node.png&quot; alt=&quot;Install node&quot;&gt;&lt;/p&gt; 
&lt;p&gt;We can check if node is installed on our local machine by opening our device terminal or command prompt.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;asabeneh $ node -v
v12.14.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When making this tutorial I was using node version 12.14.0, but now the recommended version of node.js for download is 12.17.0.&lt;/p&gt; 
&lt;h3&gt;Browser&lt;/h3&gt; 
&lt;p&gt;There are many browsers out there. However, I strongly recommend Google Chrome.&lt;/p&gt; 
&lt;h4&gt;Installing Google Chrome&lt;/h4&gt; 
&lt;p&gt;Install &lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;google chrome&lt;/a&gt; if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/google_chrome.png&quot; alt=&quot;Google Chrome&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Opening Google Chrome Console&lt;/h4&gt; 
&lt;p&gt;You can open Google Chrome console either by clicking three dots at the top right corner of the browser, selecting &lt;em&gt;More tools -&amp;gt; Developer tools&lt;/em&gt; or using a keyboard shortcut. I prefer using shortcuts.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_developer_tool.png&quot; alt=&quot;Opening chrome&quot;&gt;&lt;/p&gt; 
&lt;p&gt;To open the Chrome console using a keyboard shortcut. It is good to know the shortcut too as a JavaScript and React developer you will spend much time on a browser console and don‚Äôt be lazy to open it during development.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;Mac
Command+Option+J

Windows/Linux:
Ctl+Shift+J
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_chrome_console_shortcut.png&quot; alt=&quot;Opening console&quot;&gt;&lt;/p&gt; 
&lt;p&gt;After you open the Google Chrome console, try to explore the marked buttons. We will spend most of the time on the Console. The Console is the place where your JavaScript code goes. The Google Console V8 engine changes your JavaScript code to machine code. Let us write a JavaScript code on the Google Chrome console:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/js_code_on_chrome_console.png&quot; alt=&quot;write code on console&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Writing Code on Browser Console&lt;/h4&gt; 
&lt;p&gt;We can write any JavaScript code on the Google console or any browser console. However, for this challenge, we only focus on Google Chrome console. Open the console using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;Mac
Command+Option+I

Windows:
Ctl+Shift+I
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Console.log&lt;/h5&gt; 
&lt;p&gt;To write our first JavaScript code, we used a built-in function &lt;strong&gt;console.log()&lt;/strong&gt;. We passed an argument as input data, and the function displays the output. We passed ‚ÄòHello, World‚Äô as input data or argument in the console.log() function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello, World!&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Console.log with Multiple Arguments&lt;/h5&gt; 
&lt;p&gt;The &lt;strong&gt;console.log()&lt;/strong&gt; function can take multiple parameters separated by comma. The syntax looks like as follows:&lt;strong&gt;console.log(param1, param2, param3)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/console_log_multipl_arguments.png&quot; alt=&quot;console log multiple arguments&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello&#39;, &#39;World&#39;, &#39;!&#39;)
console.log(&#39;HAPPY&#39;, &#39;NEW&#39;, &#39;YEAR&#39;, 2020)
console.log(&#39;Welcome&#39;, &#39;to&#39;, 30, &#39;Days&#39;, &#39;Of&#39;, &#39;JavaScript&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As you can see from the snippet code above, &lt;em&gt;console.log()&lt;/em&gt; can take multiple arguments. It is recommended to use as many console.log() prints to check what is happening in your code but don‚Äôt keep all console.log() tests on your code forever. Make your life easy by keeping the browser console open.&lt;/p&gt; 
&lt;h5&gt;Comments&lt;/h5&gt; 
&lt;p&gt;We add comments to our code. Comments are very important to make code more readable and to leave remarks in our code. JavaScript does not execute the comment part of our code.In JavaScript, any text line starting with // in JavaScript is a comment, and anything enclosed like this /* */ is also a comment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;// This is the first comment&lt;br&gt; // This is the second comment&lt;br&gt; // I am a single line comment&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;/* This is a multiline comment&lt;br&gt; Multiline comments can take multiple lines&lt;br&gt; JavaScript is the language of the web&lt;br&gt; */&lt;/p&gt; 
&lt;h5&gt;Syntax&lt;/h5&gt; 
&lt;p&gt;Programming languages are similar to human languages. English or many other language uses words, phrases, sentences, compound sentences and other more to convey a meaningful message. The English meaning of syntax is &lt;em&gt;the arrangement of words and phrases to create well-formed sentences in a language&lt;/em&gt;. The technical definition of syntax is &lt;em&gt;the structure of statements in a computer language.&lt;/em&gt; Programing languages have syntax. JavaScript is a programming language and like other programming languages it has its own syntax. If we do not write a syntax that JavaScript understands, it will raise different types of errors. We will explore different kinds of JavaScript errors later. For now, let us see syntax errors.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/raising_syntax_error.png&quot; alt=&quot;Error&quot;&gt;&lt;/p&gt; 
&lt;p&gt;I made a deliberate mistake. As a result, the console raises syntax errors. Actually, the syntax is very informative. It informs what type of mistake was made. By reading the error feedback guideline, we can correct the syntax and fix the problem. The process of identifying and removing errors from a program is called debugging. Let us fix the errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello, World!&#39;)
console.log(&#39;Hello, World!&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So far, we saw how to display text using the &lt;em&gt;console.log()&lt;/em&gt;. If we are printing text or string using &lt;em&gt;console.log()&lt;/em&gt;, the text has to be inside the single quotes, double quotes, or a backtick quotes. &lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello, World!&#39;)
console.log(&#39;Hello, World!&#39;)
console.log(`Hello, World!`)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arithmetics&lt;/h4&gt; 
&lt;p&gt;Now, let us practice more writing JavaScript codes using &lt;em&gt;console.log()&lt;/em&gt; on google chrome console for number data types. In addition to the text, we can also do mathematical calculations using JavaScript. Let us do the following simple calculations. The console can directly take arguments without the &lt;strong&gt;&lt;em&gt;console.log()&lt;/em&gt;&lt;/strong&gt; function. However, it is included in this introduction because most of this challenge would be taking place in a text editor where the usage of the function would be mandatory. You can play around directly with instructions on the console.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/arithmetic.png&quot; alt=&quot;Arithmetic&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(2 + 3) // Addition
console.log(3 - 2) // Subtraction
console.log(2 * 3) // Multiplication
console.log(3 / 2) // Division
console.log(3 % 2) // Modulus - finding remainder
console.log(3 ** 2) // Exponentiation 3 ** 2 == 3 * 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Code Editor&lt;/h3&gt; 
&lt;p&gt;We can write our codes on the browser console, but it won‚Äôt do for bigger projects. In a real working environment, developers use different code editors to write their codes. In this 30 days JavaScript challenge, we will be using Visual Studio Code.&lt;/p&gt; 
&lt;h4&gt;Installing Visual Studio Code&lt;/h4&gt; 
&lt;p&gt;Visual studio code is a very popular open-source text editor. I would recommend to &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;download Visual Studio Code&lt;/a&gt;, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode.png&quot; alt=&quot;Vscode&quot;&gt;&lt;/p&gt; 
&lt;p&gt;If you installed Visual Studio Code, let us start using it.&lt;/p&gt; 
&lt;h4&gt;How to Use Visual Studio Code&lt;/h4&gt; 
&lt;p&gt;Open the Visual Studio Code by double-clicking its icon. When you open it, you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode_ui.png&quot; alt=&quot;Vscode ui&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/adding_project_to_vscode.png&quot; alt=&quot;Vscode add project&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_project_on_vscode.png&quot; alt=&quot;Vscode open project&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/scripts_on_vscode.png&quot; alt=&quot;script file&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vsc_live_server.png&quot; alt=&quot;Installing Live Server&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/running_script.png&quot; alt=&quot;running script&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/launched_on_new_tab.png&quot; alt=&quot;coding running&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Congratulations! You have completed the setup you need to get started with React, but before we dive into React let‚Äôs do a JavaScript refresher. If you are very comfortable with JavaScript you may skip day 1 JavaScript refresher. The JavaScript refresher section is vast and it may take more than one day. From my experience people usually get stuck in React because their JavaScript knowledge is very shallow therefore to fill that gap all the necessary JavaScript features which can be used in React are covered in the JavaScript refresher section. There are many exercises but you are not required to solve them. Click &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/30-Days-Of-React/02_Day_Introduction_to_React/02_introduction_to_react.md&quot;&gt;here&lt;/a&gt; if you want skip JavaScript and jump directly into React.&lt;/p&gt; 
&lt;p&gt;üéâ CONGRATULATIONS ! üéâ&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&quot;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nolimits4web/swiper</title>
      <link>https://github.com/nolimits4web/swiper</link>
      <description>&lt;p&gt;Most modern mobile touch slider with hardware accelerated transitions&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/share-banner.png&quot;&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://swiperjs.com/get-started&quot;&gt;Get Started&lt;/a&gt; | &lt;a href=&quot;https://swiperjs.com/swiper-api&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://swiperjs.com/demos&quot;&gt;Demos&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://opencollective.com/swiper&quot;&gt; &lt;img src=&quot;https://opencollective.com/swiper/all/badge.svg?label=financial+contributors&quot; alt=&quot;Financial Contributors on Open Collective&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/nolimits4web/swiper/actions?query=workflow%3ABuild&quot;&gt; &lt;img src=&quot;https://github.com/nolimits4web/swiper/workflows/Build/badge.svg?sanitize=true&quot; alt=&quot;Build status&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://www.jsdelivr.com/package/npm/swiper&quot;&gt; &lt;img src=&quot;https://data.jsdelivr.com/v1/package/npm/swiper/badge?style=rounded&quot; alt=&quot;jsDelivr Hits&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://bundlephobia.com/result?p=swiper&quot;&gt; &lt;img alt=&quot;tree-shakeable&quot; src=&quot;https://badgen.net/bundlephobia/tree-shaking/swiper&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://npmjs.org/package/swiper&quot;&gt; &lt;img alt=&quot;types included&quot; src=&quot;https://badgen.net/npm/types/swiper&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://opencollective.com/swiper/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://opencollective.com/swiper/donate/button@2x.png?color=blue&quot; width=&quot;300&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1&gt;Swiper&lt;/h1&gt; 
&lt;p&gt;Swiper - is the free and most modern mobile touch slider with hardware accelerated transitions and amazing native behavior. It is intended to be used in mobile websites, mobile web apps, and mobile native/hybrid apps.&lt;/p&gt; 
&lt;p&gt;Swiper is not compatible with all platforms, it is a modern touch slider which is focused only on modern apps/platforms to bring the best experience and simplicity.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;!-- SPONSORS_TABLE_WRAP --&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://casinoshunter.com/online-casinos/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/casinos-hunter.png&quot; alt=&quot;Online Casinos Canada üèÜ Best Online Casinos in Canada for 2021 Review | CasinosHunter&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://kajino.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/kajino.png&quot; alt=&quot;„Ç™„É≥„É©„Ç§„É≥„Ç´„Ç∏„Éé „É™„Çπ„Éà„Å®„É©„É≥„Ç≠„É≥„Ç∞ 2021 - „Ç´„Ç∏„Éé .com | Kajino&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.bitcoinbuster.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/bitcoinbuster-btc-gambling.jpg&quot; alt=&quot;Bitcoin Casino&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://store.ramotion.com/blog/mobile-app-development-full-guide/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/ramotion.png&quot; alt=&quot;How Apps Are Made: Mobile App Development Guide for 2021&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://casinority.com/au/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/casinority-australia.png&quot; alt=&quot;Best online casinos for Australian players&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.auscasinos.com/new/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/aus-casinos.png&quot; alt=&quot;New Online Casinos in Australia (2021) - Which Sites Are Safe?&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.casinoroyale.es/nuevos-casinos/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/casino-royal.png&quot; alt=&quot;Nuevos Casinos Online en Espa√±a 2021&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://onlinecasinohex.nl&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/256-2.png&quot; alt=&quot;Onlinecasinohex.nl is the biggest Dutch gambling site that offers a wide range of casino games and slots as well as detailed casino guides, tips and reviews&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://netticasinohex.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/netticasinohex.png&quot; alt=&quot;The most informative and honest casino reviews for Finnish players&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://aussiecasinohex.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/hex.png&quot; alt=&quot;#1 Aussie Gambling Guide&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.leoboost.com/buy-instagram-likes&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/leoboost.png&quot; alt=&quot;Buy real Instagram Likes - 100% Real &amp;amp; Instant Likes&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://papersowl.com/pay-for-research-paper&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/papersowl.png&quot; alt=&quot;Pay Someone to Write My Research Paper&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.vpsserver.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/vpsserver-logo.svg?sanitize=true&quot; alt=&quot;VPS Hosting | Buy Cheap VPS | Free VPS Server 7 Days Trial ü•á&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://pillarwm.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/pillar.png&quot; alt=&quot;Wealth Management - The Ultimate Guide For Investors&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.slotbar888.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/slotbar.png&quot; alt=&quot;‡∏ö‡∏≤‡∏Ñ‡∏≤‡∏£‡πà‡∏≤ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÑ‡∏û‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™ 150% ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏™‡∏π‡∏ï‡∏£‡∏ö‡∏≤‡∏Ñ‡∏≤‡∏£‡πà‡∏≤ AI&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://ufa96bet.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/ufabet.png&quot; alt=&quot;UFABET ‡πÄ‡∏ß‡πá‡∏ö‡∏ï‡∏£‡∏á ‡πÅ‡∏ó‡∏á‡∏ö‡∏≠‡∏•‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå UFABET ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏î‡∏µ‡∏™‡∏∏‡∏î&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://slot-xo888.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/slotxo.png&quot; alt=&quot;SLOTXO ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏•‡πá‡∏≠‡∏ï‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 150% ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ‡πÅ‡∏à‡∏Å&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://bitvape.com.au&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/bitvape.png&quot; alt=&quot;Buy JUUL Australia | JUUL Starter Kit | JUUL Pods in Australia&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://casinosters.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/casinosters.svg?sanitize=true&quot; alt=&quot;The Best Online Casinos in the UK ¬ª Gambling Sites by Casinosters&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.diglin.com/fr/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/diglin.png&quot; alt=&quot;Solution eCommerce Magento, OroCRM &amp;amp; Akeneo - Diglin&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://poprey.com/instagram_views&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/poprey.png&quot; alt=&quot;Buy Instagram Views with PayPal or Credit card | Poprey&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://gamblizard.com/deposit-bonuses/deposit-10-pound/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/gamblizard.png&quot; alt=&quot;Deposit ¬£10 Play with 30, 40, 50, 60, 70, or 80 Pounds‚úîÔ∏è GambLizard&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://cryptocurrencycodes.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/cryptocurrencycodes.png&quot; alt=&quot;Top FREE Crypto Sign Up Bonuses &amp;amp; Referral Codes&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://studyclerk.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/studyclerk.png&quot; alt=&quot;Professional Essay Writing Service from Top Providers - Study Clerk&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.123calendars.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/calendar.png&quot; alt=&quot;2021 Printable Calendar&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://goread.io/buy-instagram-likes&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/goread.png&quot; alt=&quot;Instagram likes&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://Â§ßÂêâ„Ç´„Ç∏„Éé.jp&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/daikichi.png&quot; alt=&quot;ÊúÄÈ´ò„Ç™„É≥„É©„Ç§„É≥„Ç´„Ç∏„ÉéÊó•Êú¨ÔΩúÊó•Êú¨‰∫∫„ÅÆ„Åü„ÇÅ„Å´„Éà„ÉÉ„Éó20‚úö„Ç™„É≥„É©„Ç§„É≥„Ç´„Ç∏„Éé&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.estepera.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/estepera.png&quot; alt=&quot;Hair transplant Turkey&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://elroyalecasino.com/games/blackjack&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/elroyalcasino.png&quot; alt=&quot;Play Online Blackjack at elroyalecasino.com&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.codefirst.co.uk&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/codefirst.png&quot; alt=&quot;Software Development Company | CodeFirst UK&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://krootez.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/krootez.svg?sanitize=true&quot; alt=&quot;Krootez - Best Place To Buy Instagram Followers, Likes &amp;amp; Views&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://hollandsegokken.nl&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/hollandsegokken.png&quot; alt=&quot;Gokken in online casino‚Äôs begint bij Hollandsegokken.nl!&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://nettcasinobonus.com/&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/nettcasinobonus.png&quot; alt=&quot;F√• bransjens beste casino bonus &quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.5bingosites.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/5bingosites-com.png&quot; alt=&quot;Exclusive ¬£5 Deposit Bingo Bonuses - ¬£5 Bingo Sites&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://realcasinoscanada.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/realcasinoscanada.png&quot; alt=&quot;Your guide to the world of Canadian online gambling sites in 2021&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://nederlandscasinos.net&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/nederlandscasinos.png&quot; alt=&quot;Online Casinos Nederland - Betrouwbare NL Goksites&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.stashbird.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/stashbird.png&quot; alt=&quot;Online Casino Canada ‚Üí Best Online Casino&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://anbefaltcasino.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/256.png&quot; alt=&quot;AnbefaltCasino.com | Guiden til de beste norske casino&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://friendlylikes.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/friendlylikes-logo.png&quot; alt=&quot;Friendlylikes - Order Instagram Followers, Likes, and Views Easily!&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://www.aumentosocial.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/aumentosocial-logo.png&quot; alt=&quot;Crece en Instagram, Facebook, YouTube y TikTok | AumentoSocial&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://paperell.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/paperell.svg?sanitize=true&quot; alt=&quot;Website that Writes Essays for You - Paperell.com&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://socialsup.net&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/socials-up.png&quot; alt=&quot;Buy 100% Cheap SMM Services - Instagram, YouTube, Twitter&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://writersperhour.com&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/writers-per-hour.png&quot; alt=&quot;Custom Paper Writing and Editing Service | Essay Writing Help&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt; &lt;a href=&quot;https://easy-views.org&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://swiperjs.com/images/sponsors/easy-views.png&quot; alt=&quot;easy-views.org - High Retention Youtube Views&quot; width=&quot;160&quot;&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;!-- SPONSORS_TABLE_WRAP --&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Tree-shakeable&lt;/strong&gt;: Only modules you use will be imported into your app‚Äôs bundle.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mobile-friendly&lt;/strong&gt;: It is intended to be used in mobile websites, mobile web apps, and mobile native/hybrid apps.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Library Agnostic&lt;/strong&gt;: Swiper doesn‚Äôt require any JavaScript libraries like jQuery, which makes Swiper much smaller and faster. It can be safely used with libraries such as jQuery, Zepto, jQuery Mobile, etc&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;1:1 Touch movement&lt;/strong&gt;: By default, Swiper provides 1:1 touch movement interaction, but this ratio can be configured through Swiper settings&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mutation Observer&lt;/strong&gt;: Swiper has an option to enable Mutation Observer, with this feature Swiper will be automatically reinitialized and recalculate all required parameters if you make dynamic changes to the DOM, or in Swiper styles itself&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rich API&lt;/strong&gt;: Swiper comes with a very rich API. It allows creating your own pagination, navigation buttons, parallax effects and many more&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;RTL&lt;/strong&gt;: Swiper is the only slider that provides 100% RTL support with correct layout&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Multi Row Slides Layout&lt;/strong&gt;: Swiper allows a multiple row slides layout, with a few slides per column&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Transition Effects&lt;/strong&gt;: Fade, Flip, 3D Cube, 3D Coverflow&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Two-way Control&lt;/strong&gt;: Swiper may be used as controller for any number of other Swipers, and even be controlled at the same time&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Full Navigation Control&lt;/strong&gt;: Swiper comes with all required built-in navigation elements, such as Pagination, Navigation arrows and Scrollbar&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Flexbox Layout&lt;/strong&gt;: Swiper uses modern flexbox layout for slides layout, which solves a lot of problems and time with size caclulations. Such layout also allows configuring the Slides grid using pure CSS&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Most Flexible Slides Layout Grid&lt;/strong&gt;: Swiper has a lot of parameters on initialization to make it as flexible as possible. You can control slides per view, per column, per group, space between slides, and many more&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Images Lazy Loading&lt;/strong&gt;: Swiper Lazy Loading delays loading of images in inactive/invisible slides until the user swipes to them. Such feature could make the page load faster and improve Swiper performance&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Virtual Slides&lt;/strong&gt;: Swiper comes with Virtual Slides feature that is great when you have a lot of slides or content-heavy/image-heavy slides so it will keep just the required amount of slides in DOM&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Loop mode&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Autoplay&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Keyboard control&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mousewheel control&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nested sliders&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;History navigation&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hash navigation&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Breakpoints configuration&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Accessibility (A11y)&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;And many more ‚Ä¶&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The Swiper community can be found on &lt;a href=&quot;https://github.com/nolimits4web/swiper/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;, where you can ask questions, voice ideas, and share your projects&lt;/p&gt; 
&lt;p&gt;To chat with other community members you can join the &lt;a href=&quot;https://discord.gg/BUpd4UTkgj&quot;&gt;Swiper Discord&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Our &lt;a href=&quot;https://github.com/nolimits4web/swiper/raw/master/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; applies to all Swiper community channels.&lt;/p&gt; 
&lt;h2&gt;Dist / Build&lt;/h2&gt; 
&lt;p&gt;On production use files (JS and CSS) only from &lt;code&gt;package/&lt;/code&gt; folder, there will be the most stable versions, &lt;code&gt;build/&lt;/code&gt; folder is only for development purpose.&lt;/p&gt; 
&lt;h3&gt;Development Build&lt;/h3&gt; 
&lt;p&gt;Install all dependencies, in repo‚Äôs root:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
$ npm install

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And build development version of Swiper:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
$ npm run build:dev

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The result is available in &lt;code&gt;build/&lt;/code&gt; folder.&lt;/p&gt; 
&lt;h3&gt;Running demos:&lt;/h3&gt; 
&lt;p&gt;All demos located in &lt;code&gt;./playground&lt;/code&gt; folder. There you will fine Core (HTML, JS), React, Vue, Svelte and Angular versions. To open demo, run:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Core&lt;/strong&gt;: &lt;code&gt;npm run core&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;React&lt;/strong&gt;: &lt;code&gt;npm run react&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Vue&lt;/strong&gt;: &lt;code&gt;npm run vue&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Svelte&lt;/strong&gt;: &lt;code&gt;npm run svelte&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Angular&lt;/strong&gt;: &lt;code&gt;npm run angular&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Production Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;
$ npm run build:prod

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Production version will available in &lt;code&gt;package/&lt;/code&gt; folder.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;All changes should be committed to &lt;code&gt;src/&lt;/code&gt; files only. Before you open an issue please review the &lt;a href=&quot;https://github.com/nolimits4web/swiper/raw/master/CONTRIBUTING.md&quot;&gt;contributing&lt;/a&gt; guideline.&lt;/p&gt; 
&lt;h2&gt;Major Roadmapped Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/issues?q=is%3Aissue+is%3Aopen+label%3A%22feature+request%22+sort%3Areactions-%2B1-desc+&quot;&gt;Top Feature Requests&lt;/a&gt; (Add your own votes using the üëç reaction)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/issues?q=is%3Aissue+is%3Aopen+-label%3A%22feature+request%22++sort%3Areactions-%2B1-desc+&quot;&gt;Top Bugs üò±&lt;/a&gt; (Add your own votes using the üëç reaction)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;h3&gt;Code Contributors&lt;/h3&gt; 
&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&quot;https://raw.githubusercontent.com/nolimits4web/swiper/master/CONTRIBUTING.md&quot;&gt;Contribute&lt;/a&gt;]. &lt;a href=&quot;https://raw.githubusercontent.com/nolimits4web/swiper/master/CODE_CONTRIBUTORS.md&quot;&gt;&lt;img src=&quot;https://opencollective.com/swiper/contributors.svg?width=890&amp;amp;button=false&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Financial Contributors&lt;/h3&gt; 
&lt;p&gt;Become a financial contributor and help us sustain our community. [&lt;a href=&quot;https://opencollective.com/swiper/contribute&quot;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;postinstall&lt;/code&gt; message&lt;/h4&gt; 
&lt;p&gt;Swiper is searching for backers, so the package shows a message about it after installation. If it causes problems for you, you can disable it:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;ADBLOCK=true npm install
// or
DISABLE_OPENCOLLECTIVE=true npm install
// or
npm install --loglevel silent
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Organizations&lt;/h4&gt; 
&lt;p&gt;Support this project with your organization. Your logo will show up here with a link to your website. [&lt;a href=&quot;https://opencollective.com/swiper/contribute&quot;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/swiper/organization/0/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/swiper/organization/0/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/swiper/organization/1/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/swiper/organization/1/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/swiper/organization/2/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/swiper/organization/2/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/swiper/organization/3/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/swiper/organization/3/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/swiper/organization/4/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/swiper/organization/4/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/swiper/organization/5/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/swiper/organization/5/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/swiper/organization/6/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/swiper/organization/6/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/swiper/organization/7/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/swiper/organization/7/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/swiper/organization/8/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/swiper/organization/8/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/swiper/organization/9/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/swiper/organization/9/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Individuals&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/swiper&quot;&gt;&lt;img src=&quot;https://opencollective.com/swiper/individuals.svg?width=890&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>chinese-poetry/chinese-poetry</title>
      <link>https://github.com/chinese-poetry/chinese-poetry</link>
      <description>&lt;p&gt;The most comprehensive database of Chinese poetry üß∂ÊúÄÂÖ®‰∏≠ÂçéÂè§ËØóËØçÊï∞ÊçÆÂ∫ì, ÂîêÂÆã‰∏§ÊúùËøë‰∏Ä‰∏áÂõõÂçÉÂè§ËØó‰∫∫, Êé•Ëøë5.5‰∏áÈ¶ñÂîêËØóÂä†26‰∏áÂÆãËØó. ‰∏§ÂÆãÊó∂Êúü1564‰ΩçËØç‰∫∫Ôºå21050È¶ñËØç„ÄÇ&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/chinese-poetry/chinese-poetry&quot;&gt; &lt;img src=&quot;https://avatars3.githubusercontent.com/u/30764933?s=200&amp;amp;v=4&quot; alt=&quot;chinese-poetry&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2 align=&quot;center&quot;&gt;chinese-poetry: ÊúÄÂÖ®‰∏≠ÊñáËØóÊ≠åÂè§ÂÖ∏ÊñáÈõÜÊï∞ÊçÆÂ∫ì&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://travis-ci.com/chinese-poetry/chinese-poetry&quot; rel=&quot;nofollow&quot;&gt; &lt;img height=&quot;28px&quot; alt=&quot;Build Status&quot; src=&quot;https://img.shields.io/travis/chinese-poetry/chinese-poetry?style=for-the-badge&quot; style=&quot;max-width:100%;&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/chinese-poetry/chinese-poetry/raw/master/LICENSE&quot;&gt; &lt;img height=&quot;28px&quot; alt=&quot;License&quot; src=&quot;http://img.shields.io/badge/license-mit-blue.svg?style=for-the-badge&quot; style=&quot;max-width:100%;&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/chinese-poetry/chinese-poetry/graphs/contributors&quot;&gt; &lt;img height=&quot;28px&quot; alt=&quot;Contributors&quot; src=&quot;https://img.shields.io/github/contributors/chinese-poetry/chinese-poetry.svg?style=for-the-badge&quot; style=&quot;max-width:100%;&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://www.patreon.com/jackeygao&quot; rel=&quot;nofollow&quot;&gt; &lt;img height=&quot;28px&quot; alt=&quot;Patreon&quot; src=&quot;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3Djackeygao%26type%3Dpledges&amp;amp;style=for-the-badge&quot; style=&quot;max-width:100%;&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;ÊúÄÂÖ®ÁöÑ‰∏≠ÂçéÂè§ÂÖ∏ÊñáÈõÜÊï∞ÊçÆÂ∫ìÔºåÂåÖÂê´ 5.5 ‰∏áÈ¶ñÂîêËØó„ÄÅ26 ‰∏áÈ¶ñÂÆãËØó„ÄÅ2.1 ‰∏áÈ¶ñÂÆãËØçÂíåÂÖ∂‰ªñÂè§ÂÖ∏ÊñáÈõÜ„ÄÇËØó‰∫∫ÂåÖÊã¨ÂîêÂÆã‰∏§ÊúùËøë 1.4 ‰∏áÂè§ËØó‰∫∫ÔºåÂíå‰∏§ÂÆãÊó∂Êúü 1.5 ÂçÉÂè§ËØç‰∫∫„ÄÇÊï∞ÊçÆÊù•Ê∫ê‰∫é‰∫íËÅîÁΩë„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;‰∏∫‰ªÄ‰πàË¶ÅÂÅöËøô‰∏™‰ªìÂ∫ì?&lt;/strong&gt; Âè§ËØóÊòØ‰∏≠ÂçéÊ∞ëÊóè‰πÉËá≥ÂÖ®‰∏ñÁïåÁöÑÁë∞ÂÆùÔºåÊàë‰ª¨Â∫îËØ•‰º†Êâø‰∏ãÂéªÔºåËôΩÁÑ∂ÊúâÂè§ÂÖ∏ÊñáÈõÜÔºå‰ΩÜÂ§ßÂ§öÊï∞‰∫∫Âπ∂Ê≤°ÊúâÊã•ÊúâËøô‰∫õ‰π¶Á±ç„ÄÇ‰ªéÊüêÁßçÊÑè‰πâ‰∏äÊù•ËØ¥ÔºåËøô‰∫õÂ∫ûÂ§ßÁöÑÊñáÈõÜÁ¶ªÊàë‰ª¨ÊòØÊúâ‰∏ÄÂÆöË∑ùÁ¶ªÁöÑ„ÄÇËÄåÁîµÂ≠êÁâàÊñπ‰æøÊã∑Ë¥ùÔºåÊâÄ‰ª•Ê≠§ÂºÄÊ∫êÊï∞ÊçÆÂ∫ìËØûÁîü‰∫Ü„ÄÇÊ≠§Êï∞ÊçÆÂ∫ìÈÄöËøá JSON Ê†ºÂºèÂàÜÂèëÔºåÂèØ‰ª•ËÆ©‰Ω†ÂæàÊñπ‰æøÁöÑÂºÄÂßã‰Ω†ÁöÑÈ°πÁõÆ„ÄÇ&lt;/p&gt; 
&lt;p&gt;Âè§ËØóÈááÈõÜÊ≤°ÊúâËÆ∞ÂΩïËøáÁ®ãÔºåÂõ†‰∏∫Âè§ËØóÊï∞ÊçÆÂ∫ûÂ§ßÔºåÁõÆÊ†áÁΩëÁ´ôÊúâÈôêÂà∂ÔºåÈááÈõÜËøáÁ®ãÁªèÂ∏∏‰∏≠Êñ≠Ë∂ÖËøá‰∫Ü‰∏Ä‰∏™ÊòüÊúü„ÄÇ2017 Âπ¥Êñ∞Âä†ÂÖ•ÂÖ®ÂÆãËØçÔºå&lt;a href=&quot;https://jackeygao.github.io/r/words/crawl-ci.html&quot;&gt;ÂÖ®ÂÆãËØçÁà¨ÂèñËøáÁ®ãÂèäÊï∞ÊçÆÂàÜÊûê&lt;/a&gt;„ÄÇ&lt;/p&gt; 
&lt;h2&gt;È´òÈ¢ëËØçÂàÜÊûêÂõæ&lt;/h2&gt; 
&lt;details open&gt; 
 &lt;summary&gt;&lt;b&gt;ÂÆãËØçÂèóÊ¨¢ËøéÁöÑËØçÁâåÂêç&lt;/b&gt;&lt;/summary&gt; 
 &lt;div align=&quot;center&quot;&gt; 
  &lt;img src=&quot;https://raw.githubusercontent.com/jackeygao/chinese-poetry/master/images/ci_rhythmic_topK.png&quot; alt=&quot;‰∏§ÂÆãÂñúÊ¨¢ÁöÑËØçÁâåÂêç&quot;&gt; 
 &lt;/div&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;ÂÆãËØçÈ´òÈ¢ëËØç&lt;/b&gt;&lt;/summary&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/jackeygao/chinese-poetry/master/images/ci_words_topK.png&quot; alt=&quot;ÂÆãËØçÈ´òÈ¢ëËØç&quot; style=&quot;max-width:100%;&quot;&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;ÂÆãËØç‰ΩúËÄÖ‰ΩúÂìÅÊ¶ú&lt;/b&gt;&lt;/summary&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/jackeygao/chinese-poetry/master/images/ci_author_topK.png&quot; alt=&quot;ÂÆãËØç‰ΩúËÄÖ‰ΩúÂìÅÊ¶ú&quot; style=&quot;max-width:100%;&quot;&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;ÂîêËØóÈ´òÈ¢ëËØç&lt;/b&gt;&lt;/summary&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/jackeygao/chinese-poetry/master/images/tang_text_topK.png&quot; alt=&quot;ÂîêËØóÈ´òÈ¢ëËØç&quot; style=&quot;max-width:100%;&quot;&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;ÂîêËØó‰ΩúËÄÖ‰ΩúÂìÅÊ¶ú&lt;/b&gt;&lt;/summary&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/jackeygao/chinese-poetry/master/images/tang_author_topK.png&quot; alt=&quot;ÂîêËØó‰ΩúËÄÖ‰ΩúÂìÅÊ¶ú&quot; style=&quot;max-width:100%;&quot;&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;ÂÆãËØóÈ´òÈ¢ëËØç&lt;/b&gt;&lt;/summary&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/jackeygao/chinese-poetry/master/images/song_text_topK.png&quot; alt=&quot;ÂÆãËØóÈ´òÈ¢ëËØç&quot; style=&quot;max-width:100%;&quot;&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;ÂÆãËØó‰ΩúËÄÖ‰ΩúÂìÅÊ¶ú&lt;/b&gt;&lt;/summary&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/jackeygao/chinese-poetry/master/images/song_author_topK.png&quot; alt=&quot;ÂÆãËØó‰ΩúËÄÖ‰ΩúÂìÅÊ¶ú&quot; style=&quot;max-width:100%;&quot;&gt; 
&lt;/details&gt; 
&lt;h2&gt;Êï∞ÊçÆÈõÜ&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;ÂÖ®ÂîêËØó &lt;a href=&quot;https://raw.githubusercontent.com/chinese-poetry/chinese-poetry/master/json&quot;&gt;json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ÂÖ®ÂÆãËØó &lt;a href=&quot;https://raw.githubusercontent.com/chinese-poetry/chinese-poetry/master/json&quot;&gt;json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ÂÖ®ÂÆãËØç &lt;a href=&quot;https://raw.githubusercontent.com/chinese-poetry/chinese-poetry/master/ci&quot;&gt;ci&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;‰∫î‰ª£¬∑Ëä±Èó¥ÈõÜ &lt;a href=&quot;https://raw.githubusercontent.com/chinese-poetry/chinese-poetry/master/wudai/huajianji&quot;&gt;wudai/huajianji&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;‰∫î‰ª£¬∑ÂçóÂîê‰∫å‰∏ªËØç &lt;a href=&quot;https://raw.githubusercontent.com/chinese-poetry/chinese-poetry/master/wudai/nantang&quot;&gt;wudai/nantan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ËÆ∫ËØ≠ &lt;a href=&quot;https://raw.githubusercontent.com/chinese-poetry/chinese-poetry/master/lunyu&quot;&gt;lunyu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ËØóÁªè &lt;a href=&quot;https://raw.githubusercontent.com/chinese-poetry/chinese-poetry/master/shijing&quot;&gt;shijing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ÂπΩÊ¢¶ÂΩ± &lt;a href=&quot;https://raw.githubusercontent.com/chinese-poetry/chinese-poetry/master/youmengying&quot;&gt;youmengying&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Âõõ‰π¶‰∫îÁªè &lt;a href=&quot;https://raw.githubusercontent.com/chinese-poetry/chinese-poetry/master/sishuwujing&quot;&gt;sishuwujing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;ËíôÂ≠∏ &lt;a href=&quot;https://raw.githubusercontent.com/chinese-poetry/chinese-poetry/master/mengxue&quot;&gt;mengxue&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Ë¥°ÁåÆ&lt;/h2&gt; 
&lt;p&gt;Êú¨È°πÁõÆÁõÆÁöÑÊòØÂÄüÂä©ÊäÄÊúØÊù•ÁîüÊàêÊ†ºÂºèÂåñ(JSON)Êï∞ÊçÆÔºåËÆ©ÂºÄÂèëËÄÖÊõ¥Êñπ‰æøÂø´ÈÄüÁöÑÊûÑÂª∫ËØóËØçÁ±ªÂ∫îÁî®Á®ãÂ∫è„ÄÇË∫´ÂçïÂäõËñÑÔºåÊ¨¢ËøéÊõ¥Â§ö‰∫∫Êù•Áª¥Êä§Ôºå‰Ω†ÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÊñπÊ≥ïÊù•ÂèÇ‰∏éË¥°ÁåÆÔºö&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Áõ¥Êé•Êèê‰∫§ PR ÊàñËÄÖÈÄöËøá issue ËÆ®ËÆ∫Êù•‰ºòÂåñÂÆåÂñÑÊ≠§Êï∞ÊçÆÂ∫ìÔºåÁêÜËÆ∫‰∏äÂè§ËØóÊ≠å‰ΩìÈùûÂÆóÊïôÁ±ªÈÉΩÊ¨¢ËøéÂä†ÂÖ•ÔºåÈÉ®ÂàÜÊúâ‰∫âËÆÆÊÄßÁöÑÊï∞ÊçÆÈúÄË¶ÅÁ§æÂå∫ÊäïÁ•®ËÆ®ËÆ∫ÂÜ≥ÂÆöÊòØÂê¶Âä†ÂÖ•„ÄÇÂÖ≥‰∫éËØóÂè•ÁöÑÁ∫†ÈîôÂú®ÂàõÂª∫ PR Êó∂ËØ∑Ê†áÊòéÂá∫Â§Ñ„ÄÇÊõ¥Â§öËßÑËåÉËØ∑&lt;a href=&quot;https://github.com/chinese-poetry/chinese-poetry/wiki/%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE%E8%A7%84%E8%8C%83&quot;&gt;ÂèÇËÄÉË¥°ÁåÆËßÑËåÉÊñáÊ°£&lt;/a&gt;„ÄÇ&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Â¶ÇÊûú‰Ω†Ê≤°ÊúâÂäûÊ≥ïÁõ¥Êé•ÂèÇ‰∏éÂÆåÂñÑÁöÑËøáÁ®ãÔºå‰Ω†‰πüÂèØ‰ª•ÈÄöËøá „Äå&lt;a href=&quot;https://www.patreon.com/jackeygao&quot;&gt;Patreon Âë®ÊúüÊÄßËµûÂä©&lt;/a&gt;„ÄçÁöÑÂΩ¢ÂºèÊù•ÊåÅÁª≠Â∏ÆÂä©Âπ∂ÊøÄÂä±ÊàëÂéª‰ºòÂåñÂÆåÂñÑÊ≠§Êï∞ÊçÆÂ∫ì„ÄÇÂ¶ÇÊûúÊÇ®‰∏çÂñúÊ¨¢Âë®ÊúüÊÄßËµûÂä©Ôºå‰Ω†‰πüÂèØ‰ª•ÈÄöËøá„Äå&lt;a href=&quot;https://github.com/jackeyGao/JackeyGao.github.io/raw/master/static/images/alipay.png&quot;&gt;ÊîØ‰ªòÂÆù&lt;/a&gt;„ÄçÊàñËÄÖ„Äå&lt;a href=&quot;https://github.com/jackeyGao/JackeyGao.github.io/raw/master/static/images/wechat.jpg&quot;&gt;ÂæÆ‰ø°ËµûËµèÁ†Å&lt;/a&gt;„ÄçËøõË°å‰∏ÄÊ¨°ÊÄßËµûÂä©(Â§áÊ≥®Áïô‰∏ãÈÇÆÁÆ±)„ÄÇ&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Â¶ÇÊúâÂª∫ËÆÆÊàñÂêêÊßΩÔºåÊ¨¢ËøéËÅîÁ≥ªÊàëÁöÑÈÇÆÁÆ± gaojunqi@outlook.com„ÄÇ&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Êó†ËÆ∫ÈÄöËøáÂì™ÁßçÂΩ¢ÂºèË¥°ÁåÆÊúÄÁªàÈÉΩ‰ºö‰Ωø‰πãÂèòÂæóÊõ¥Â•ΩÔºÅ&lt;/p&gt; 
&lt;h3&gt;ËµûÂä©ËÄÖ&lt;/h3&gt; 
&lt;p&gt;Êó†&lt;/p&gt; 
&lt;h3&gt;Ë¥°ÁåÆËÄÖ&lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://opencollective.com/chinese-poetry/contributors.svg?width=890&amp;amp;button=false&quot; alt=&quot;Contributors&quot;&gt; &lt;/p&gt; 
&lt;h2&gt;Ê°à‰æãÂ±ïÁ§∫&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Ê°à‰æãÂ±ïÁ§∫&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://shici.store&quot;&gt;‰∏≠ÊñáËØóÊ≠å‰∏ªÈ°µ&lt;/a&gt;ÊòØ‰∏Ä‰∏™Âü∫‰∫éÊµèËßàÂô®ÁöÑËØóËØçÁΩëÁ´ôÔºåÂåÖÂê´ÂîêËØó‰∏âÁôæÈ¶ñ„ÄÅÂÆãËØç‰∏âÁôæÈ¶ñÁ≠âÊñáÈõÜ„ÄÇ&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/animalize&quot;&gt;animalize&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&quot;https://github.com/animalize/QuanTangshi&quot;&gt;QuanTangshi&lt;/a&gt; &lt;em&gt;Á¶ªÁ∫øÂÖ®ÂîêËØó Android&lt;/em&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/justdark&quot;&gt;justdark&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&quot;https://github.com/justdark/pytorch-poetry-gen&quot;&gt;pytorch-poetry-gen&lt;/a&gt; &lt;em&gt;a char-RNN based on pytorch&lt;/em&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/Clover27&quot;&gt;Clover27&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&quot;https://github.com/Clover27/ancient-Chinese-poem-generator&quot;&gt;ancient-Chinese-poem-generator&lt;/a&gt; &lt;em&gt;Ancient-Chinese-Poem-Generator&lt;/em&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/chinese-poetry&quot;&gt;chinese-poetry&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&quot;http://shici.store/poetry-calendar/&quot;&gt;poetry-calendar&lt;/a&gt; &lt;em&gt;ËØóËØçÂë®ÂéÜ&lt;/em&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/chenyuntc&quot;&gt;chenyuntc&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&quot;https://github.com/chenyuntc/pytorch-book/raw/master/chapter9-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%86%99%E8%AF%97(CharRNN)/&quot;&gt;pytorch-book&lt;/a&gt; &lt;em&gt;ÁÆÄ‰ΩìÂîêËØóÁîüÊàê(char-RNN)ÔºåÂèØÁîüÊàêËóèÂ§¥ËØóÔºåËá™ÂÆö‰πâËØóÊ≠åÊÑèÂ¢ÉÔºåÂâçÁºÄÁ≠â&lt;/em&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/okcy1016&quot;&gt;okcy1016&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&quot;https://github.com/okcy1016/poetry-desktop/&quot;&gt;poetry-desktop&lt;/a&gt; &lt;em&gt;ËØóËØçÊ°åÈù¢&lt;/em&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.com/huangjianke&quot;&gt;huangjianke&lt;/a&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;a href=&quot;https://github.com/huangjianke/weapp-poem/&quot;&gt;weapp-poem&lt;/a&gt; &lt;em&gt;ËØóËØçÂ¢®ÂÆ¢ Â∞èÁ®ãÂ∫èÁâà&lt;/em&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://hz.xusenlin.com/&quot;&gt;Ê±âÂ≠ó‰πãÁæé&lt;/a&gt;Ê±âÂ≠ó‰πãÁæéÊòØ‰∏Ä‰∏™Êñπ‰æøÊü•ËØ¢ÁöÑËØóËØçÁΩëÁ´ôÔºåÁÆÄÊ¥ÅÂπ≤ÂáÄÔºåÊñπ‰æø‰ΩøÁî®„ÄÇ&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/chinese-poetry/chinese-poetry/raw/master/LICENSE&quot;&gt;MIT&lt;/a&gt; ËÆ∏ÂèØËØÅ„ÄÇ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>artf/grapesjs</title>
      <link>https://github.com/artf/grapesjs</link>
      <description>&lt;p&gt;Free and Open source Web Builder Framework. Next generation tool for building templates without coding&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&quot;http://grapesjs.com&quot;&gt;GrapesJS&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/artf/grapesjs&quot;&gt;&lt;img src=&quot;https://travis-ci.org/artf/grapesjs.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/QAbgGXq&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-discord-7289da.svg?sanitize=true&quot; alt=&quot;Chat&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cdnjs.com/libraries/grapesjs&quot;&gt;&lt;img src=&quot;https://img.shields.io/cdnjs/v/grapesjs.svg?sanitize=true&quot; alt=&quot;CDNJS&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/grapesjs&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/grapesjs.svg?sanitize=true&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://grapesjs.com/img/grapesjs-front-page-m.jpg&quot; alt=&quot;GrapesJS&quot; width=&quot;500&quot; align=&quot;center&quot;&gt;&lt;/p&gt; 
&lt;p&gt;GrapesJS is a free and open source Web Builder Framework which helps building HTML templates, faster and easily, to be delivered in sites, newsletters or mobile apps. Mainly, GrapesJS was designed to be used inside a &lt;a href=&quot;https://it.wikipedia.org/wiki/Content_management_system&quot;&gt;CMS&lt;/a&gt; to speed up the creation of dynamic templates. To better understand this concept check the image below&lt;/p&gt; 
&lt;br&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://grapesjs.com/img/gjs-concept.png&quot; alt=&quot;GrapesJS - Style Manager&quot; height=&quot;400&quot; align=&quot;center&quot;&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;Generally any ‚Äòtemplate system‚Äô, that you‚Äôd find in various applications like CMS, is composed by the &lt;strong&gt;structure&lt;/strong&gt; (HTML), &lt;strong&gt;style&lt;/strong&gt; (CSS) and &lt;strong&gt;variables&lt;/strong&gt;, which are then replaced with other templates and contents on server-side and rendered on client.&lt;/p&gt; 
&lt;p&gt;This demos show examples of what is possible to achieve:&lt;br&gt; Webpage Demo - http://grapesjs.com/demo.html&lt;br&gt; Newsletter Demo - http://grapesjs.com/demo-newsletter-editor.html&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/artf/grapesjs/dev/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/artf/grapesjs/dev/#download&quot;&gt;Download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/artf/grapesjs/dev/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/artf/grapesjs/dev/#development&quot;&gt;Development&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/artf/grapesjs/dev/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/artf/grapesjs/dev/#api&quot;&gt;API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/artf/grapesjs/dev/#testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/artf/grapesjs/dev/#plugins&quot;&gt;Plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/artf/grapesjs/dev/#support&quot;&gt;Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs/releases&quot;&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs/raw/master/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/artf/grapesjs/dev/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;| Blocks | Style Manager | Layer Manager | |‚Äì|‚Äì|‚Äì| |&lt;img src=&quot;http://grapesjs.com/img/sc-grapesjs-blocks-prp.jpg&quot; alt=&quot;GrapesJS - Block Manager&quot; height=&quot;400&quot; align=&quot;center&quot;&gt;|&lt;img src=&quot;http://grapesjs.com/img/sc-grapesjs-style-2.jpg&quot; alt=&quot;GrapesJS - Style Manager&quot; height=&quot;400&quot; align=&quot;center&quot;&gt;|&lt;img src=&quot;http://grapesjs.com/img/sc-grapesjs-layers-2.jpg&quot; alt=&quot;GrapesJS - Layer Manager&quot; height=&quot;400&quot; align=&quot;center&quot;&gt;|&lt;/p&gt; 
&lt;p&gt;| Code Viewer | Asset Manager | |‚Äì|‚Äì| |&lt;img src=&quot;http://grapesjs.com/img/sc-grapesjs-code.jpg&quot; alt=&quot;GrapesJS - Code Viewer&quot; height=&quot;300&quot; align=&quot;center&quot;&gt;|&lt;img src=&quot;http://grapesjs.com/img/sc-grapesjs-assets-1.jpg&quot; alt=&quot;GrapesJS - Asset Manager&quot; height=&quot;250&quot; align=&quot;center&quot;&gt;|&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Local and remote storage&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Default built-in commands (basically for creating and managing different components)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;CDNs 
  &lt;ul&gt; 
   &lt;li&gt;UNPKG (resolves to the latest version) 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;https://unpkg.com/grapesjs&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;https://unpkg.com/grapesjs/dist/css/grapes.min.css&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;CDNJS (replace &lt;code&gt;X.X.X&lt;/code&gt; with the current version) 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;https://cdnjs.cloudflare.com/ajax/libs/grapesjs/X.X.X/grapes.min.js&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;https://cdnjs.cloudflare.com/ajax/libs/grapesjs/X.X.X/css/grapes.min.css&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;NPM 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;npm i grapesjs&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;GIT 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;git clone https://github.com/artf/grapesjs.git&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For the development purpose you should follow instructions below.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;path/to/grapes.min.css&quot;&amp;gt;
&amp;lt;script src=&quot;path/to/grapes.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;div id=&quot;gjs&quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
  var editor = grapesjs.init({
      container : &#39;#gjs&#39;,
      components: &#39;&amp;lt;div class=&quot;txt-red&quot;&amp;gt;Hello world!&amp;lt;/div&amp;gt;&#39;,
      style: &#39;.txt-red{color: red}&#39;,
  });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a more practical example I‚Äôd suggest looking up the code inside this demo: http://grapesjs.com/demo.html&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;Clone the repository and install all the necessary dependencies (&lt;code&gt;yarn&lt;/code&gt; is highly recommended)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ git clone https://github.com/artf/grapesjs.git
$ cd grapesjs
$ yarn
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Start the dev server&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ yarn start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once the development server is started you should be able to reach the demo page (eg. &lt;code&gt;http://localhost:8080&lt;/code&gt;)&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Check the getting started guide here: &lt;a href=&quot;https://grapesjs.com/docs/&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;p&gt;API References could be found here: &lt;a href=&quot;https://grapesjs.com/docs/api/&quot;&gt;API-Reference&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ yarn test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;h3&gt;Extensions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-plugin-export&quot;&gt;grapesjs-plugin-export&lt;/a&gt; - Export GrapesJS templates in a zip archive&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-plugin-filestack&quot;&gt;grapesjs-plugin-filestack&lt;/a&gt; - Add Filestack uploader in Asset Manager&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-plugin-ckeditor&quot;&gt;grapesjs-plugin-ckeditor&lt;/a&gt; - Replaces the built-in RTE with CKEditor&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-aviary&quot;&gt;grapesjs-aviary&lt;/a&gt; - Add the Aviary Image Editor (dismissed, use the plugin below instead)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-tui-image-editor&quot;&gt;grapesjs-tui-image-editor&lt;/a&gt; - GrapesJS TOAST UI Image Editor&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-blocks-basic&quot;&gt;grapesjs-blocks-basic&lt;/a&gt; - Basic set of blocks&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-plugin-forms&quot;&gt;grapesjs-plugin-forms&lt;/a&gt; - Set of form components and blocks&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-navbar&quot;&gt;grapesjs-navbar&lt;/a&gt; - Simple navbar component&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-component-countdown&quot;&gt;grapesjs-component-countdown&lt;/a&gt; - Simple countdown component&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-style-gradient&quot;&gt;grapesjs-style-gradient&lt;/a&gt; - Add &lt;code&gt;gradient&lt;/code&gt; type input to the Style Manager&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-style-filter&quot;&gt;grapesjs-style-filter&lt;/a&gt; - Add &lt;code&gt;filter&lt;/code&gt; type input to the Style Manager&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-style-bg&quot;&gt;grapesjs-style-bg&lt;/a&gt; - Full-stack background style property type, with the possibility to add images, colors, and gradients&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-blocks-flexbox&quot;&gt;grapesjs-blocks-flexbox&lt;/a&gt; - Add the flexbox block&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-lory-slider&quot;&gt;grapesjs-lory-slider&lt;/a&gt; - Slider component by using &lt;a href=&quot;https://github.com/meandmax/lory&quot;&gt;lory&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-tabs&quot;&gt;grapesjs-tabs&lt;/a&gt; - Simple tabs component&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-tooltip&quot;&gt;grapesjs-tooltip&lt;/a&gt; - Simple, CSS only, tooltip component for GrapesJS&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-custom-code&quot;&gt;grapesjs-custom-code&lt;/a&gt; - Embed custom code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-touch&quot;&gt;grapesjs-touch&lt;/a&gt; - Enable touch support&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-indexeddb&quot;&gt;grapesjs-indexeddb&lt;/a&gt; - Storage wrapper for IndexedDB&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-firestore&quot;&gt;grapesjs-firestore&lt;/a&gt; - Storage wrapper for &lt;a href=&quot;https://firebase.google.com/docs/firestore&quot;&gt;Cloud Firestore&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-parser-postcss&quot;&gt;grapesjs-parser-postcss&lt;/a&gt; - Custom CSS parser for GrapesJS by using &lt;a href=&quot;https://github.com/postcss/postcss&quot;&gt;PostCSS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-typed&quot;&gt;grapesjs-typed&lt;/a&gt; - Typed component made by wrapping Typed.js library&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Presets&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-preset-webpage&quot;&gt;grapesjs-preset-webpage&lt;/a&gt; - Webpage Builder&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-preset-newsletter&quot;&gt;grapesjs-preset-newsletter&lt;/a&gt; - Newsletter Builder&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs-mjml&quot;&gt;grapesjs-mjml&lt;/a&gt; - Newsletter Builder with MJML components&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Find out more about plugins here: &lt;a href=&quot;https://grapesjs.com/docs/modules/Plugins.html&quot;&gt;Creating plugins&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;If you like the project and you wish to see it grow, please consider supporting us with a donation of your choice or become a backer/sponsor via &lt;a href=&quot;https://opencollective.com/grapesjs&quot;&gt;Open Collective&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://paypal.me/grapesjs&quot;&gt;&lt;img src=&quot;http://grapesjs.com/img/ppme.png&quot; alt=&quot;PayPalMe&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://commerce.coinbase.com/checkout/fc90b940-558d-408b-a166-28a823c98173&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/11614725/52977952-87235f80-33cf-11e9-9607-7a9a354e1155.png&quot; alt=&quot;Bitcoin&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/grapesjs&quot;&gt;&lt;img src=&quot;https://opencollective.com/grapesjs/tiers/sponsors.svg?avatarHeight=64&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/grapesjs&quot;&gt;&lt;img src=&quot;https://opencollective.com/grapesjs/tiers/backers.svg?avatarHeight=64&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.browserstack.com&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/11614725/39406324-4ef89c40-4bb5-11e8-809a-113d9432e5a5.png&quot; alt=&quot;BrowserStack&quot;&gt;&lt;/a&gt;&lt;br&gt; Thanks to &lt;a href=&quot;https://www.browserstack.com&quot;&gt;BrowserStack&lt;/a&gt; for providing us browser testing services&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;BSD 3-clause&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>upgundecha/howtheysre</title>
      <link>https://github.com/upgundecha/howtheysre</link>
      <description>&lt;p&gt;A curated collection of publicly available resources on how technology and tech-savvy organizations around the world practice Site Reliability Engineering (SRE)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;How they SRE&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&quot; alt=&quot;PRs Welcome&quot;&gt; &lt;a href=&quot;https://github.com/upgundecha/howtheysre/actions/workflows/workflow.yml&quot;&gt;&lt;img src=&quot;https://github.com/upgundecha/howtheysre/actions/workflows/workflow.yml/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/upgundecha/howtheysre/main/banner.png&quot; alt=&quot;Alt&quot; title=&quot;banner&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A curated collection of publicly available resources on how technology and tech-savvy organizations around the world practice Site Reliability Engineering (SRE)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;How They SRE&lt;/strong&gt; is a curated knowledge repository of best practices, tools, techniques, and culture of SRE adopted by the leading technology or tech-savvy organizations.&lt;/p&gt; 
&lt;p&gt;Many organizations regularly come forward and share their best practices, tools, techniques and offer an insight into engineering culture on various public platforms like engineering blogs, conferences &amp;amp; meetups. The content is curated from these avenues and shared in this repository.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note to readers: This list refers to some of the articles, posts, videos, tools, and techniques published before 2015. Please use such material with caution as there may be recent advances in technology and practices which offer better alternatives and perspectives.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Topics&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Site Reliability Engineering&lt;/li&gt; 
 &lt;li&gt;Hiring and Building SRE teams&lt;/li&gt; 
 &lt;li&gt;SRE Culture&lt;/li&gt; 
 &lt;li&gt;DevOps&lt;/li&gt; 
 &lt;li&gt;Monitoring &amp;amp; Observability&lt;/li&gt; 
 &lt;li&gt;Alerting&lt;/li&gt; 
 &lt;li&gt;Incident Response &amp;amp; Post-Mortem&lt;/li&gt; 
 &lt;li&gt;On-Call&lt;/li&gt; 
 &lt;li&gt;Testing in Production&lt;/li&gt; 
 &lt;li&gt;Chaos Engineering&lt;/li&gt; 
 &lt;li&gt;Automation&lt;/li&gt; 
 &lt;li&gt;Performance&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Organizations&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;Achievers&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://achievers.engineering/enter-the-abattoir-ee5e2019f0b3&quot;&gt;Enter the Abattoir - Building ‚Äò√† la carte‚Äô gitops tooling&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Airbnb&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/airbnb-engineering/detecting-vulnerabilities-with-vulnture-f5f23387f6ec&quot;&gt;Detecting Vulnerabilities With Vulnture&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/airbnb-engineering/alerting-framework-at-airbnb-35ba48df894f&quot;&gt;Alerting Framework at Airbnb&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/airbnb-engineering/when-the-cloud-gets-dark-how-amazons-outage-affected-airbnb-66eaf8c0f162&quot;&gt;When The Cloud Gets Dark ‚Äî How Amazon‚Äôs Outage Affected Airbnb&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Algolia&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.algolia.com/blog/may-30-ssl-incident/&quot;&gt;May 30 SSL incident&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.algolia.com/blog/a-journey-into-sre/&quot;&gt;A Journey Into SRE&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Asana&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://blog.asana.com/2021/01/asana-engineering-ships-web-application-releases/&quot;&gt;How Asana ships stable web application&amp;nbsp;releases&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://blog.asana.com/2019/09/downtime-what-were-doing-to-prevent-future-downtime/&quot;&gt;Analysis of recent downtime &amp;amp; what we‚Äôre doing to prevent future&amp;nbsp;incidents&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://blog.asana.com/2017/07/developer-environment-making-it-reliable-by-making-it-fast-to-reset/&quot;&gt;Developer environment: Achieving reliability by making it fast to&amp;nbsp;reset&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;ASOS&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/asos-techblog/cyber-security-asos-com-7d1d1f346e57&quot;&gt;Cyber Security @ ASOS.com&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/asos-techblog/security-operations-24-x-7-2e90c8e5e7e&quot;&gt;Security Operations 24x7&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/asos-techblog/the-skills-we-look-for-in-cyber-security-incident-response-12b327927e38&quot;&gt;The skills we look for in Cyber Security Incident Response&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Atlassian&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/engineering/best-practices-for-change-management-in-the-age-of-devops&quot;&gt;Best practices for change management in the age of DevOps&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/engineering/automated-testing-5-lessons-from-atlassians-kubernetes-team-on-testing-infrastructure-as-code&quot;&gt;Automated testing: 5 lessons from Atlassian‚Äôs Kubernetes team on testing infrastructure as code&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/engineering/how-to-export-kubernetes-events-for-observability-and-alerting&quot;&gt;How to export Kubernetes events for observability and alerting&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/incident-management/postmortem/templates&quot;&gt;Incident Postmortem Template&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;BackMarket&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/back-market-engineering/how-back-market-sres-prepared-for-black-friday-5f017f343408&quot;&gt;How Back Market SREs prepared for Black Friday&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Baidu&lt;/summary&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/chen-yu&quot;&gt;Anomaly Detection on Golden Signals&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/chen-yun&quot;&gt;NetRadar: Monitoring the Datacenter Network&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Basecamp&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://m.signalvnoise.com/inside-a-code-red-network-edition/&quot;&gt;Inside a CODE RED: Network Edition&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://m.signalvnoise.com/three-basecamp-outages-one-week-what-happened/&quot;&gt;Three Basecamp outages. One week. What happened?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://m.signalvnoise.com/basecamp-2-and-basecamp-3-search-outage-report/&quot;&gt;Basecamp 2 and Basecamp 3 search outage report&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://m.signalvnoise.com/reducing-incident-escalations-at-basecamp/&quot;&gt;Reducing Incident Escalations at Basecamp&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Books&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://basecamp.com/shapeup/webbook&quot;&gt;Shape Up&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Bloomberg&lt;/summary&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/chen&quot;&gt;Capacity Planning and Performance Enhancement with Page Reference Sampling&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/pawlikowski&quot;&gt;Why SREs can‚Äôt afford to NOT do Chaos Engineering&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/yakimov&quot;&gt;Tracing Real-Time Distributed Systems&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/sorensen&quot;&gt;The Bloomberg Story: Building SRE Teams in an ‚ÄúImmeasurable‚Äù Organisation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/chen&quot;&gt;Visibility into Loggers (and Other Low Level Services)‚ÄîSeeing the Trees from the Forest&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Booking.com&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/booking-com-infrastructure/how-reliability-and-product-teams-collaborate-at-booking-com-f6c317cc0aeb&quot;&gt;How Reliability and Product Teams Collaborate at Booking.com&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/booking-com-infrastructure/incidents-fixes-and-the-day-after-c5d9aeae28c3&quot;&gt;Incidents, fixes, and the day after&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/booking-com-infrastructure/troubleshooting-a-journey-into-the-unknown-e31b524fa86&quot;&gt;Troubleshooting: A journey into the unknown&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/fouquet&quot;&gt;SLOs for Data-Intensive Services&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/iacoboaia&quot;&gt;Benefits of Taking the Less Traveled Road with Containers Infrastructure&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Capital One&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/automate-aws-infrastructure-with-boto-3-aws-health-checks-e51338ba075&quot;&gt;Automate AWS Infrastructure with Boto 3: AWS Health Check&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/active-active-shared-nothing-database-architecture-304957ffb89&quot;&gt;Active-Active Shared-Nothing Database Architecture&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/the-3-rs-of-sres-resiliency-recovery-reliability-5f2f5360a91b&quot;&gt;The 3 R‚Äôs of SREs: Resiliency, Recovery &amp;amp; Reliability&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/5-steps-to-getting-your-app-chaos-ready-capital-one-a5b7b3cb8e09&quot;&gt;5 Steps to Getting Your App Chaos Ready&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/4-real-world-scenarios-that-read-like-chaos-engineering-experiments-8dbf40c5f247&quot;&gt;4 Real-World Scenarios That Read Like Chaos Engineering Experiments&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/embrace-the-chaos-engineering-203fd6fc6ff7&quot;&gt;Embrace the Chaos ‚Ä¶ Engineering&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/3-lessons-learned-from-implementing-chaos-engineering-at-enterprise-28eb3ffecc57&quot;&gt;3 Lessons Learned From Implementing Chaos Engineering at Enterprise&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/seamless-blue-green-deployment-using-aws-codedeploy-4c36c0bbeef4&quot;&gt;A Deep Dive Into Seamless Blue/Green Deployment Using AWS CodeDeploy&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/secure-docker-containers-require-secure-applications-75eb358abef9&quot;&gt;Secure Docker Containers Require Secure Applications&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/4-steps-for-pairing-cloud-and-devops-to-improve-resiliency-c72fe2e52b05&quot;&gt;4 Steps for Pairing the Cloud and DevOps to Improve Resiliency&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/container-ready-applications-with-twelve-factor-app-and-microservices-architecture-16af683a767f&quot;&gt;Container Ready Applications with Twelve-Factor App and Microservices Architecture&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/deploying-with-confidence-strategies-for-canary-deployments-on-aws-7cab3798823e&quot;&gt;Deploying with Confidence ‚Äî Minimize Risk, Maximize Resiliency With Canary Deployments on AWS&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/architecting-for-resiliency-9ec663db5c94&quot;&gt;Architecting for Resiliency&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/continuous-chaos-introducing-chaos-engineering-into-devops-practices-75757e1cca6d&quot;&gt;Continuous Chaos ‚Äî Introducing Chaos Engineering into DevOps Practices&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/the-mon-ifesto-part-1-metrics-808f6c944765&quot;&gt;The Mon-ifesto Part 1: Metrics&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Major incidents &amp;amp; analysis reports&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.capitalone.com/facts2019/&quot;&gt;Information on the Capital One Cyber Incident&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;http://web.mit.edu/smadnick/www/wp/2020-16.pdf&quot;&gt;A Case Study of the Capital One Data Breach&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=_DnYSQEUTfo&quot;&gt;Banking on Continuous Delivery - Capital One&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=U_Uh5RMCwPI&quot;&gt;Continuous Chaos in DevOps - Capital One&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=6Q0mtVnnthQ&quot;&gt;DevOps at Capital One: Focusing on Pipeline and Measurement&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/walls&quot;&gt;Automating the Management of the Operational Health of Cloud Accounts at Scale&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;DBS&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/dbs-tech-blog/site-reliability-engineering-at-dbs-bank-32c02228ccf4&quot;&gt;Site Reliability Engineering at DBS Bank&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/dbs-tech-blog/automating-configuration-management-at-scale-5c7927f83df3&quot;&gt;Automating Configuration Management at Scale&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=URwkaRbOLxI&amp;amp;feature=emb_title&quot;&gt;SREcon Conversations Asia/Pacific with Koon Seng Lim, DBS&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;DeepSource&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://deepsource.io/blog/redis-diskless-replication/&quot;&gt;Redis diskless replication: What, how, why and the caveats&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://deepsource.io/blog/setup-vault-kubernetes/&quot;&gt;How to setup Vault with Kubernetes&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://deepsource.io/blog/zero-downtime-deployment/&quot;&gt;Breaking down zero downtime deployments in Kubernetes&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Dropbox&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://dropbox.tech/infrastructure/atlas--our-journey-from-a-python-monolith-to-a-managed-platform&quot;&gt;Atlas: Our journey from a Python monolith to a managed platform&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://dropbox.tech/infrastructure/monitoring-server-applications-with-vortex&quot;&gt;Monitoring server applications with Vortex&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://dropbox.tech/infrastructure/athena-our-automated-build-health-management-system&quot;&gt;Athena: Our automated build health management system&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/nigmatullin&quot;&gt;Service Discovery Challenges at Scale&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;eBay&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.ebayinc.com/engineering/resiliency-and-disaster-recovery-with-kafka/&quot;&gt;Resiliency and Disaster Recovery with Kafka&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.ebayinc.com/engineering/sre-case-study-triage-a-non-heap-jvm-out-of-memory-issue/&quot;&gt;SRE Case Study: Triaging a Non-Heap JVM Out of Memory Issue&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.ebayinc.com/engineering/sre-case-study-mysterious-traffic-imbalance/&quot;&gt;SRE Case Study: Mysterious Traffic Imbalance&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.ebayinc.com/engineering/zero-downtime-instant-deployment-and-rollback/&quot;&gt;Zero Downtime, Instant Deployment and Rollback&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Video&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/raina&quot;&gt;Madaari: Ordering for the Monkeys&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Etsy&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://codeascraft.com/2021/02/25/how-etsy-prepared-for-historic-volumes-of-holiday-traffic-in-2020/&quot;&gt;How Etsy Prepared for Historic Volumes of Holiday Traffic in 2020&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://increment.com/reliability/brain-on-progress/&quot;&gt;Your brain on progress&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://codeascraft.com/2016/11/17/debriefing-facilitation-guide/&quot;&gt;Etsy‚Äôs Debriefing Facilitation Guide for Blameless Postmortems&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://codeascraft.com/2014/06/19/opsweekly-measuring-on-call-experience-with-alert-classification/&quot;&gt;Opsweekly: Measuring on-call experience with alert classification&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://blog.etsy.com/news/2012/demystifying-site-outages/&quot;&gt;Demystifying Site Outages&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://codeascraft.com/2012/05/22/blameless-postmortems/&quot;&gt;Blameless PostMortems and a Just Culture&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://codeascraft.com/2011/02/15/measure-anything-measure-everything/&quot;&gt;Measure Anything, Measure Everything&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LdOe18KhtT4&quot;&gt;Velocity 09: John Allspaw and Paul Hammond, ‚Äú10+ Deploys Pe&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/govande&quot;&gt;Migrating a Monolith to the Cloud&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Expedia&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/expedia-group-tech/the-cost-of-100-reliability-ecb2901f23a4&quot;&gt;The Cost of 100% Reliability&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/expedia-group-tech/creating-monitoring-dashboards-1f3fbe0ae1ac&quot;&gt;Creating Monitoring Dashboards&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/expedia-group-tech/using-bash-for-devops-7046eed1aa63&quot;&gt;Using Bash for DevOps&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Facebook&lt;/summary&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/looney&quot;&gt;A Customer Service Approach to SRE&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/bagnoli&quot;&gt;How (Not) to Scale a Project: A Post-Mortem&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/wong-shuhong&quot;&gt;Releasing the World‚Äôs Largest Python Site Every 7 Minutes&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/davoli&quot;&gt;Using ML to Automate Dynamic Error Categorization&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Fastly&lt;/summary&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/wohlner&quot;&gt;SRE &amp;amp; Product Management: How to Level up Your Team (and Career!) by Thinking like a Product Manager&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/gallego&quot;&gt;Resilience Engineering Mythbusting&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;GitHub&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2021-03-16-improving-large-monorepo-performance-on-github/&quot;&gt;Improving large monorepo performance on GitHub&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2021-02-03-deployment-reliability-at-github/&quot;&gt;Deployment reliability at GitHub&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2021-01-25-improving-how-we-deploy-github/&quot;&gt;Improving how we deploy GitHub&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2021-01-06-building-on-call-culture-at-github/&quot;&gt;Building On-Call Culture at GitHub&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2020-12-16-reducing-flaky-builds-by-18x/&quot;&gt;Reducing flaky builds by 18x&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2020-12-03-the-evolving-role-of-operations-in-devops/&quot;&gt;The evolving role of operations in DevOps&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2020-10-29-getting-started-with-devops-automation/&quot;&gt;Getting started with DevOps automation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2018-06-20-mysql-high-availability-at-github/&quot;&gt;MySQL High Availability at GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Major incidents &amp;amp; analysis reports&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2021-03-03-github-availability-report-february-2021/&quot;&gt;GitHub Availability Report: February 2021&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2021-02-02-github-availability-report-january-2021/&quot;&gt;GitHub Availability Report: January 2021&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2021-01-06-github-availability-report-december-2020/&quot;&gt;GitHub Availability Report: December 2020&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2020-12-02-availability-report-november-2020/&quot;&gt;GitHub Availability Report: November 2020&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2020-09-02-github-availability-report-august-2020/&quot;&gt;GitHub Availability Report: August 2020&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2020-08-05-github-availability-report-july-2020/&quot;&gt;GitHub Availability Report: July 2020&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2020-07-08-introducing-the-github-availability-report/&quot;&gt;Introducing the GitHub Availability Report&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2020-03-26-february-service-disruptions-post-incident-analysis/&quot;&gt;February service disruptions post-incident analysis&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2018-10-30-oct21-post-incident-analysis/&quot;&gt;October 21 post-incident analysis&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2018-03-01-ddos-incident-report/&quot;&gt;February 28th DDoS Incident Report&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://github.blog/2016-10-28-incident-report-inadvertent-private-repository-disclosure/&quot;&gt;Incident Report: Inadvertent Private Repository Disclosure&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/tobey&quot;&gt;One on One SRE&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;GitLab&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/blog/2021/01/14/this-sre-attempted-to-roll-out-an-haproxy-change/&quot;&gt;This SRE attempted to roll out an HAProxy config change. You won‚Äôt believe what happened next‚Ä¶&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/blog/2019/12/16/sre-shadow/&quot;&gt;My week shadowing a GitLab Site Reliability Engineer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/blog/2020/04/28/elasticsearch-update/&quot;&gt;Update: Elasticsearch lessons learnt for Advanced Global Search&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/blog/2020/11/09/lessons-in-iteration-from-new-infrastructure-team/&quot;&gt;Lessons in iteration from a new team in infrastructure&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/blog/2020/10/27/how-we-optimized-our-infrastructure-spend-at-gitlab/&quot;&gt;How we optimized infrastructure spend at GitLab&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/blog/2020/06/24/scaling-our-use-of-sidekiq/&quot;&gt;How we scaled async workload processing at GitLab.com using Sidekiq&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/blog/2020/05/13/how-we-release-software-patches/&quot;&gt;Inside GitLab: How we release software patches&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/blog/2019/11/15/tracking-down-missing-tcp-keepalives/&quot;&gt;What tracking down missing TCP Keepalives taught me about Docker, Golang, and GitLab&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/blog/2019/02/13/delayed-replication-for-disaster-recovery-with-postgresql/&quot;&gt;How we used delayed replication for disaster recovery with PostgreSQL&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;GoCardless&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/gocardless-tech/deploying-software-at-gocardless-open-sourcing-our-getting-started-tutorial-ab857aa91c9e&quot;&gt;Deploying Software at GoCardless: Open-Sourcing our ‚ÄúGetting Started‚Äù Tutorial&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/gocardless-tech/how-we-compress-pub-sub-messages-and-more-saving-a-load-of-money-694b64c3458a&quot;&gt;How we compress Pub/Sub messages and more, saving a load of money&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://gocardless.com/blog/fear-free-postgresql-migrations-for-rails/&quot;&gt;Fear-free PostgreSQL migrations for Rails&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://gocardless.com/blog/observability-at-gocardless-a-tale-of-api-performance-improvement/&quot;&gt;Observability at GoCardless: a tale of API performance improvement&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://gocardless.com/blog/debugging-the-postgres-query-planner/&quot;&gt;Debugging the PostgreSQL query planner&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://gocardless.com/blog/zero-downtime-postgres-migrations-the-hard-parts/&quot;&gt;Zero-downtime Postgres migrations - the hard parts&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://gocardless.com/blog/in-search-of-performance-how-we-shaved-200ms-off-every-post-request/&quot;&gt;In search of performance - how we shaved 200ms off every POST request&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Major incidents &amp;amp; analysis reports&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://gocardless.com/blog/incident-review-service-outage-on-25-october-2020/&quot;&gt;Incident review: Service outage on 25 October 2020, Vault TLS expiry&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://gocardless.com/blog/incident-review-api-and-dashboard-outage-on-10th-october/&quot;&gt;Incident review: API and Dashboard outage on 10 October 2017&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Gojek&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://blog.gojekengineering.com/why-we-swear-by-the-rca-f535fd5abbcb&quot;&gt;Why We Swear by the RCA&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Google&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://sre.google/resources/#practicesandprocesses&quot;&gt;SRE Practices &amp;amp; Processes&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/blog/products/g-suite/keeping-google-meet-ahead-of-usage-demand-during-covid-19&quot;&gt;Three months, 30x demand: How we scaled Google Meet during COVID-19&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://sre.google/resources/practices-and-processes/distributed-pubsub/&quot;&gt;SRE Classroom: Distributed PubSub&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/uTEL8Ff1Zvk&quot;&gt;What‚Äôs the Difference Between DevOps and SRE? with Seth Vargo and Liz Fong-Jones of Google&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/y2ILKr8kCJU&quot;&gt;Risk and Error Budgets‚Äô with Seth Vargo and Liz Fong-Jones of Google&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=oDcjAcFTFC0&amp;amp;t=0m56s&quot;&gt;Pragmatic Automation‚Äô with Max Luebbe of GCP&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLIivdWyY5sqJrKl7D2u-gmis8h9K66qoj&quot;&gt;Must Watch! - Google SRE YouTube Playlist&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/stanke&quot;&gt;Squish Level Objectives: How SRE can Help Align Technical Work to User Benefit&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/ludtke&quot;&gt;Implementing Distributed Consensus&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/aknin&quot;&gt;The SRE I Aspire to Be&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/perry&quot;&gt;SRE Classroom, Or, How to Design a Reliable Distributed System in 3 Hours&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/czapinski&quot;&gt;Zero Touch Prod: Towards Safer and More Secure Production Environments&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/underwood&quot;&gt;All of Our ML Ideas Are Bad (and We Should Feel Bad)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/desai&quot;&gt;The Map Is Not the Territory: How SLOs Lead Us Astray, and What We Can Do about It&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/petoff&quot;&gt;Deploying SRE Training Best Practices to Production: How We SRE‚Äôed Our SRE Education Program&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/gleason&quot;&gt;Bigtable: A Journey from Binary to Service and the Lessons Learned along the Way&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/krabbe&quot;&gt;Practical Instrumentation for Observability&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/sato&quot;&gt;What Is ML Ops: Solutions and Best Practices for DevOps of Production ML Services&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/zhang&quot;&gt;Unified Reporting of Service Reliability&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/plenz&quot;&gt;How to Trade off Server Utilization and Tail Latency&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/nolan-loadbalancing&quot;&gt;Keeping the Balance: Internet-Scale Loadbalancing Demystified&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/virji&quot;&gt;From Black Box to a Known Quantity: How to Build Predictable, Reliable ML-based Services&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/lutz&quot;&gt;Mindfulness in SRE: Monitoring and Alerting for One‚Äôs Self&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/luebbe&quot;&gt;Pragmatic Automation&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/rath&quot;&gt;Sublinear Scaling in Practice: The 1k SRE Project&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/qiu&quot;&gt;Strategies to Edit Production Data&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/bondi&quot;&gt;The Curse of SRE Autonomy and How to Manage It&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/franco&quot;&gt;Scaling SRE Organizations: The Journey from 1 to Many Teams&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/thomas&quot;&gt;SRE Classroom - How to Design a Distributed System in 3 Hours&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/stockman&quot;&gt;Using PRDs and User Journeys to Design User-Friendly Tools&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Grab&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.grab.com/our-journey-to-continuous-delivery-at-grab&quot;&gt;Our Journey to Continuous Delivery at Grab (Part 1)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.grab.com/designing-resilient-systems-part-1&quot;&gt;Designing Resilient Systems: Circuit Breakers or Retries? (Part 1)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.grab.com/designing-resilient-systems-part-2&quot;&gt;Designing Resilient Systems: Circuit Breakers or Retries? (Part 2)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.grab.com/beyond-retries-part-3&quot;&gt;Designing Resilient Systems Beyond Retries (Part 3): Architecture Patterns and Chaos Engineering&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.grab.com/chaos-engineering&quot;&gt;Orchestrating Chaos using Grab‚Äôs Experimentation Platform&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.grab.com/quotas-service&quot;&gt;How We Designed the Quotas Microservice to Prevent Resource Abuse&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.grab.com/how-we-scaled-our-cache-and-got-a-good-nights-sleep&quot;&gt;How We Scaled Our Cache and Got a Good Night‚Äôs Sleep&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Grammarly&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.grammarly.com/blog/engineering/security-infrastructure-aws/&quot;&gt;Security Operations in an AWS Environment&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Heroku&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://blog.heroku.com/incident-response-at-heroku-2020&quot;&gt;Incident Response at Heroku&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Indeed&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.indeedblog.com/blog/2019/10/being-just-reliable-enough/&quot;&gt;Being Just Reliable Enough&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.indeedblog.com/blog/2017/03/automating-release-process/&quot;&gt;Automating Indeed‚Äôs Release Process&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon17americas/program/presentation/appan&quot;&gt;Sloth, a Tool for Inducing Network Failures‚Äô with Preetha Appan of Indeed.com&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/elman&quot;&gt;Are We Getting Better Yet? Progress Toward Safer Operations&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Khan Academy&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://blog.khanacademy.org/how-khan-academy-successfully-handled-2-5x-traffic-in-a-week/&quot;&gt;How Khan Academy Successfully Handled 2.5x Traffic in a Week&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://blog.khanacademy.org/evolving-our-content-infrastructure/&quot;&gt;Evolving our content infrastructure&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;LinkedIn&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2021/rethinking-site-capacity-projections-with-capacity-analyzer&quot;&gt;Rethinking site capacity projections with Capacity Analyzer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/pulse/insights-product-sre-team-linkedin-zaina-afoulki/?trackingId=mxKJgZ3kp8l2WI9D4UZv7Q%3D%3D&quot;&gt;Insights into a Product SRE team at LinkedIn&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/engineering-culture/hiring-sres-linkedin&quot;&gt;Hiring SREs at LinkedIn&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2021/open-source-update--school-of-sre&quot;&gt;Open source update: School of SRE&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2020/fixing-linux-filesystem-performance-regressions&quot;&gt;Fixing Linux filesystem performance regressions&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2020/production-testing-with-dark-canaries&quot;&gt;Production testing with dark canaries&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2019/06/smart-alerts-in-thirdeye--linkedins-real-time-monitoring-platfor&quot;&gt;Smart alerts in ThirdEye, LinkedIn‚Äôs real-time monitoring platform&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2019/05/iris-mobile--an-open-source--mobile-interface-for-incident-manag&quot;&gt;Iris mobile: An open source, mobile interface for incident management&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2018/05/linkedout--a-request-level-failure-injection-framework&quot;&gt;LinkedOut: A Request-Level Failure Injection Framework&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2019/eliminating-toil-with-fully-automated-load-testing&quot;&gt;Eliminating toil with fully automated load testing&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2018/03/the-makeup-of-successful-geographically-distributed-sre-teams--p&quot;&gt;The Makeup of Successful Geographically-Distributed SRE Teams: Part 1&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2018/03/the-makeup-of-successful-geographically-distributed-sre-teams--p0&quot;&gt;The Makeup of Successful Geographically-Distributed SRE Teams: Part 2&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2018/01/project-star-streamlining-our-on-call-process&quot;&gt;Project STAR*: Streamlining Our On-Call Process&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2017/12/open-sourcing-fossor-and-ascii-etch&quot;&gt;Automating Your Oncall: Open Sourcing Fossor and Ascii Etch&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2017/11/resilience-engineering-at-linkedin-with-project-waterbear&quot;&gt;Resilience Engineering at LinkedIn with Project Waterbear&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2017/07/hiring-sres-at-linkedin&quot;&gt;Hiring SREs at LinkedIn, 2017&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2017/06/open-sourcing-iris-and-oncall&quot;&gt;Open Sourcing Iris and Oncall&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2017/05/building-the-sre-culture-at-linkedin&quot;&gt;Building the SRE Culture at LinkedIn&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2017/01/failure-is-not-an-option&quot;&gt;Failure is Not an Option&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2016/12/mttd-and-mttr-are-key&quot;&gt;MTTD and MTTR Are Key&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.linkedin.com/blog/2016/12/what-gets-measured-gets-fixed&quot;&gt;What Gets Measured Gets Fixed&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ZemNg9GYvOA&quot;&gt;Growing the Site Reliability Team at LinkedIn: Hiring is Hard ‚Äì Greg Leffler&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/doherty&quot;&gt;9 Years of Failure: How Racing Crappy Cars Made Me a Better SRE&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/sherwin&quot;&gt;Weathering the Storm: How Early Warnings Save the Farm&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/andersen&quot;&gt;Unconference: Unsolved Problems in SRE&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/palino-leading&quot;&gt;Leading without Managing: Becoming an SRE Technical Leader&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/palino-monitoring&quot;&gt;Why Does (My) Monitoring Suck?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/sulakhe&quot;&gt;Traffic Forecasting and Stress Testing Infrastructure&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/andersen-mindfulness&quot;&gt;Collective Mindfulness for Better Decisions in SRE&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/dhakal&quot;&gt;TCP‚ÄîArchitecture, Enhancements, and Tuning&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/lamba&quot;&gt;Over 600 Million Members and Hundreds of Micro Services: How We Scaled Our Monitoring System to Keep up&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/suley&quot;&gt;Understanding Business Metrics Can Make You a Better SRE&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/kehoe&quot;&gt;Code-Yellow: Helping Operations Top-Heavy Teams the Smart Way&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/andersen&quot;&gt;Differences in SRE Implementations across Companies&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Mercari&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.mercari.com/en/blog/entry/20201214-devsecops-what-is-it-and-why-is-it-gaining-momentum-in-the-industry/&quot;&gt;DevSecOps: What Is It and Why Is It Gaining Momentum in the Industry?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.mercari.com/en/blog/entry/2020-01-28-143339/&quot;&gt;How do we share troubleshooting skills&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.mercari.com/en/blog/entry/2019-12-09-122134/&quot;&gt;Datadog Dashboard at Scale w / Terraform&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Microsoft&lt;/summary&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=1iMo3SkdQqQ&quot;&gt;SLI &amp;amp; Reliability Deep-Dive‚Äô with David N. Blank-Edelman of Microsoft&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=U3ubcoNzx9k&quot;&gt;Ironies of Automation: A Comedy in Three Parts‚Äô with Tanner Lund of Microsoft&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/johnson&quot;&gt;Sustainable Software Engineering &amp;amp; SREs&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/barteneva&quot;&gt;Study on Human Factors and Team Culture to Improve Pager Fatigue&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/davis&quot;&gt;Prioritizing Trust While Creating Applications&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/stenning&quot;&gt;Building Resilience: How to Learn More from Incidents&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/lund-postmortem&quot;&gt;A Tale of Two Postmortems: A Human Factors View&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/srinivasamurthy&quot;&gt;Availability‚ÄîThinking beyond 9s&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/lund-comedy&quot;&gt;Ironies of Automation: A Comedy in Three Parts&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/davis&quot;&gt;The Ops in Serverless&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;MIRO&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/miro-engineering/prometheus-high-availability-and-fault-tolerance-strategy-long-term-storage-with-victoriametrics-82f6f3f0409e&quot;&gt;Prometheus High Availability and Fault Tolerance strategy, long term storage with VictoriaMetrics&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/miro-engineering/managing-hundreds-of-servers-for-load-testing-autoscaling-custom-monitoring-devops-culture-390fd1c7e699&quot;&gt;Managing hundreds of servers for load testing: Autoscaling, custom monitoring, DevOps culture&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/miro-engineering/reliable-load-testing-with-regards-to-unexpected-nuances-6f38c82196a5&quot;&gt;Reliable load testing with regards to unexpected nuances&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Monzo&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://monzo.com/blog/2020/10/19/autoscaling-monzo&quot;&gt;Autoscaling Monzo: How we optimise our platform to be just the right size&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://monzo.com/blog/how-weve-evolved-on-call-at-monzo&quot;&gt;How we‚Äôve evolved on-call at Monzo&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://monzo.com/blog/2019/07/08/how-we-respond-to-incidents&quot;&gt;How we respond to incidents&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://monzo.com/blog/2018/07/27/how-we-monitor-monzo&quot;&gt;How we monitor Monzo&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/patel&quot;&gt;Eventually Consistent Service Discovery&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Netflix&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/building-netflixs-distributed-tracing-infrastructure-bb856c319304&quot;&gt;Building Netflix‚Äôs Distributed Tracing Infrastructure&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/lessons-from-building-observability-tools-at-netflix-7cfafed6ab17&quot;&gt;Lessons from Building Observability Tools at Netflix&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/edgar-solving-mysteries-faster-with-observability-e1a76302c71f&quot;&gt;Edgar: Solving Mysteries Faster with Observability&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/telltale-netflix-application-monitoring-simplified-5c08bfa780ba&quot;&gt;Telltale: Netflix Application Monitoring Simplified&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/keeping-customers-streaming-the-centralized-site-reliability-practice-at-netflix-205cc37aa9fb&quot;&gt;Keeping Customers Streaming ‚Äî The Centralized Site Reliability Practice at Netflix&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/introducing-dispatch-da4b8a2a8072&quot;&gt;Introducing Dispatch&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/applying-netflix-devops-patterns-to-windows-2a57f2dbbf79&quot;&gt;Applying Netflix DevOps Patterns to Windows&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/chap-chaos-automation-platform-53e6d528371f&quot;&gt;ChAP: Chaos Automation Platform&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/starting-the-avalanche-640e69b14a06&quot;&gt;Starting the Avalanche&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/netflix-chaos-monkey-upgraded-1d679429be5d&quot;&gt;Netflix Chaos Monkey Upgraded&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/chaos-engineering-upgraded-878d341f15fa&quot;&gt;Chaos Engineering Upgraded&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/automated-failure-testing-86c1b8bc841f&quot;&gt;Automated Failure Testing&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/from-chaos-to-control-testing-the-resiliency-of-netflixs-content-discovery-platform-ce5566aef0a4&quot;&gt;From Chaos to Control ‚Äî Testing the resiliency of Netflix‚Äôs Content Discovery Platform&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/introducing-atlas-netflixs-primary-telemetry-platform-bd31f4d8ed9a&quot;&gt;Introducing Atlas: Netflix‚Äôs Primary Telemetry Platform&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/fit-failure-injection-testing-35d8e2a9bb2&quot;&gt;FIT: Failure Injection Testing&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/announcing-security-monkey-aws-security-configuration-monitoring-and-analysis-1f2bfb001708&quot;&gt;Announcing Security Monkey ‚Äî AWS Security Configuration Monitoring and Analysis&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/lessons-netflix-learned-from-the-aws-outage-deefe5fd0c04&quot;&gt;Lessons Netflix Learned from the AWS Outage&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Major incidents &amp;amp; analysis reports&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/post-mortem-of-october-22-2012-aws-degradation-efcee3ab40d5&quot;&gt;Post-mortem of October 22, 2012 AWS degradation&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0QS1TWLooo0&quot;&gt;AWS re:Invent 2019: A day in the life of a Netflix engineer (NFX202)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/reed&quot;&gt;When /bin/sh Attacks: Revisiting ‚ÄúAutomate All the Things‚Äù&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/kitchens&quot;&gt;How Did Things Go Right? Learning More from Incidents&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DlWYNoLmma8&quot;&gt;Monitoring and Tracing @Netflix Streaming Data Infrastructure&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4RG2DUK03_0&quot;&gt;Real user performance monitoring at Netflix scale ‚Äê Martin Spier&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=rgfww8tLM0A&quot;&gt;AWS re:Invent 2017 - Nora Jones Describes Why We Need More Chaos - Chaos Engineering, That Is&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LaKGx0dAUlo&quot;&gt;AWS re:Invent 2017: Performing Chaos at Netflix Scale (DEV334)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=WDDkLOT8SCk&quot;&gt;Netflix: Multi-Regional Resiliency and Amazon Route 53&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=RWyZkNzvC-c&quot;&gt;Designing Services for Resilience: Netflix Lessons&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=uQ0flQOtQEA&quot;&gt;South Bay SRE Meetup - Netflix Cloud Performance Team&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=T_D1G42G0dE&quot;&gt;AWS re:Invent 2017: A Day in the Life of a Netflix Engineer III (ARC209)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8tsIqfvizpU&quot;&gt;How Netflix Uses Kinesis Streams to Monitor Applications and Analyze Billions of Traffic Flows&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=CZ3wIuvmHeM&quot;&gt;Mastering Chaos - A Netflix Guide to Microservices&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=leqUbSY55hY&quot;&gt;AWS re:Invent 2016: From Resilience to Ubiquity - #NetflixEverywhere‚Äã Global Architecture (ARC204)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=koGaH4ffXaU&quot;&gt;SREcon 2016 - Netflix: 190 Countries and 5 CORE SREs&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lZI51YzIgVE&quot;&gt;From Sys Admin to Netflix SRE&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=RzlluokGi1w&quot;&gt;Application Resilience Engineering and Operations at Netflix with Hystrix&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ioXV28GtXeo&quot;&gt;Injecting Failure at Netflix&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=3D0zS3kPNUU&quot;&gt;LISA13 - How Netflix Embraces Failure to Improve Resilience and Maximize Availability&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;PayPal&lt;/summary&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=XAIj567wBsU&amp;amp;feature=emb_title&quot;&gt;SREcon Conversations Asia/Pacific with Karthikeyan Selvaraj and Rajesh Ramachandran, PayPal&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/sunder-vr&quot;&gt;SRE Then vs SRE Now: A Balancing Act between Reflexes and Intuitive Instincts at PayPal&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/narayanan&quot;&gt;Detecting Service Degradation and Failures at Scale through Distributed Log Processing&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/sankaravadivel&quot;&gt;Operating Elasticsearch with Ease at Scale&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/janakiraman&quot;&gt;Ensuring Site Reliability through Security Controls&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Pinterest&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/pinterest-engineering/simplifying-web-deploys-19244fe13737&quot;&gt;Simplifying web deploys&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/pinterest-engineering/upgrading-pinterest-operational-metrics-8718d058079a&quot;&gt;Upgrading Pinterest operational metrics&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/pinterest-engineering/distributed-tracing-at-pinterest-with-new-open-source-tools-a4f8a5562f6b&quot;&gt;Distributed tracing at Pinterest with new open source tools&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/pinterest-engineering/auto-scaling-pinterest-df1d2beb4d64&quot;&gt;Auto scaling Pinterest&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/mukherji&quot;&gt;Building Actionable Code Ownership&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/abbas&quot;&gt;Evolution of Observability Tools at Pinterest&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/menezes&quot;&gt;Automating OS/Platform Upgrades for Service Owners&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Postman&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/better-practices/chaos-d3ef238ec328&quot;&gt;Learn how your Kubernetes clusters respond to failure using Gremlin and Grafana&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Red Hat&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.openshift.com/blog/from-ops-to-sre-evolution-of-the-openshift-dedicated-team&quot;&gt;From Ops to SRE: Evolution of the OpenShift Dedicated Team&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.openshift.com/blog/5-agile-practices-every-sre-team-should-adopt&quot;&gt;5 Agile Practices Every SRE Team Should Adopt&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.openshift.com/blog/7-best-practices-for-writing-kubernetes-operators-an-sre-perspective&quot;&gt;7 Best Practices for Writing Kubernetes Operators: An SRE Perspective&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Scribd&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.scribd.com/blog/2020/sidekiq-incident-learnings.html&quot;&gt;Learning from incidents: getting Sidekiq ready to serve a billion jobs&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.scribd.com/blog/2020/pagerduty-at-scribd.html&quot;&gt;A testimonial for using PagerDuty at Scribd&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.scribd.com/blog/2019/managing-pagerduty-rotations.html&quot;&gt;Assigning pager duty to developers&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Shopify&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://shopify.engineering/resiliency-planning-for-high-traffic-events&quot;&gt;Resiliency Planning for High-Traffic Events&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://shopify.engineering/capacity-planning-shopify&quot;&gt;Capacity Planning at Scale&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://shopify.engineering/using-dns-traffic-management-add-resiliency-shopify-services&quot;&gt;Using DNS Traffic Management to Add Resiliency to Shopify‚Äôs Services&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://shopify.engineering/four-steps-creating-effective-game-day-tests&quot;&gt;Four Steps to Creating Effective Game Day Tests&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://shopify.engineering/implementing-chatops-into-our-incident-management-procedure&quot;&gt;Implementing ChatOps into our Incident Management Procedure&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://shopify.engineering/17488320-statsd-at-shopify&quot;&gt;StatsD at Shopify&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/gedge&quot;&gt;Network Monitor: A Tale of ACKnowledging an Observability Gap&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/arthorne&quot;&gt;Expect the Unexpected: Preparing SRE Teams for Responding to Novel Failures&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/eskildsen&quot;&gt;Advanced Napkin Math: Estimating System Performance from First Principles&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Sky Betting and Gaming&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://sbg.technology/2020/12/09/its-just-a-monitoring-change/&quot;&gt;It‚Äôs Just a Monitoring Change&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://sbg.technology/2020/04/02/whats-the-worst-that-can-happen/&quot;&gt;‚ÄúWhat‚Äôs the worst that could happen?‚Äù: A worked example of how we deal with live incidents&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://sbg.technology/2020/02/07/rising-from-the-ashes/&quot;&gt;Rising from the Ashes&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://sbg.technology/2018/05/04/firedrills-in-core/&quot;&gt;Crash! Bang! Wallop! Practice makes perfect&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://sbg.technology/2017/10/23/performance-left-right-and-center/&quot;&gt;Performance Left Right and Center&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Slack&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://slack.engineering/slacks-outage-on-january-4th-2021/&quot;&gt;Slack‚Äôs Outage on January 4th 2021&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://slack.engineering/a-terrible-horrible-no-good-very-bad-day-at-slack/&quot;&gt;A Terrible, Horrible, No-Good, Very Bad Day at Slack&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://slack.engineering/deploys-at-slack/&quot;&gt;Deploys at Slack&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://slack.engineering/disasterpiece-theater-slacks-process-for-approachable-chaos-engineering/&quot;&gt;Disasterpiece Theater: Slack‚Äôs process for approachable Chaos Engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/pemberton&quot;&gt;Slack at the Edge&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/nolan-taxonomy&quot;&gt;What Breaks Our Systems: A Taxonomy of Black Swans&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Slalom Build&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/slalom-build/beginners-guid-to-devops-how-to-make-it-into-the-industry-c1652d59807&quot;&gt;Beginners Guide to DevOps: How to Make It into the Industry&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/slalom-build/github-actions-beyond-ci-cd-cb3ddc6abaa&quot;&gt;GitHub Actions: Beyond CI/CD&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/slalom-build/why-isnt-all-test-automation-run-on-the-pipeline-b2c57afbdf5a&quot;&gt;Why isn‚Äôt all test automation run on the pipeline?&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/slalom-build/the-many-shapes-of-site-reliability-engineering-468359866517&quot;&gt;The Many Shapes of Site Reliability Engineering&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/slalom-build/how-to-build-a-secure-by-default-kubernetes-cluster-with-a-basic-ci-cd-pipeline-on-aws-ebfe0da1c7c9&quot;&gt;How to build a secure by default Kubernetes cluster with a basic CI/CD pipeline on AWS&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/slalom-build/secret-management-architectures-finding-the-balance-between-security-and-complexity-d857ceaa2300&quot;&gt;Secret Management Architectures: Finding the balance between security and complexity&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/slalom-build/detecting-malicious-requests-with-keras-tensorflow-5d5db06b4f28&quot;&gt;Detecting Malicious Requests with Keras &amp;amp; Tensorflow&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/slalom-build/the-lego-monolith-a-monolith-microservice-proof-of-concept-a402ca1654e4&quot;&gt;The Lego Monolith ‚Äî A Monolith Microservice Proof of Concept&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/slalom-build/managing-secrets-using-hashicorp-vault-ed6b9e0375ac&quot;&gt;Managing Secrets Using Hashicorp Vault&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/slalom-build/packaging-spring-boot-applications-for-deployment-on-kubernetes-5fb64bc65406&quot;&gt;Packaging Spring Boot Applications for Deployment on Kubernetes&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/slalom-build/immutable-infrastructure-and-continuous-delivery-in-the-cloud-56ee4b31b8d5&quot;&gt;Immutable Infrastructure and Continuous Delivery in the Cloud&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Soundcloud&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://developers.soundcloud.com/blog/building-a-healthy-on-call-culture&quot;&gt;Building a Healthy On-Call Culture&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://developers.soundcloud.com/blog/alerting-on-slos&quot;&gt;Alerting on SLOs like Pros&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://developers.soundcloud.com/blog/hands-off-deployment-with-canary&quot;&gt;Hands-Off Deployment with Canary&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://developers.soundcloud.com/blog/prometheus-has-come-of-age-a-reflection-on-the-development-of-an-open-source-project&quot;&gt;Prometheus has come of age ‚Äì a reflection on the development of an open-source project&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://developers.soundcloud.com/blog/prometheus-monitoring-at-soundcloud&quot;&gt;Prometheus: Monitoring at SoundCloud&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Spotify&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.atspotify.com/2020/02/26/techbytes-what-the-industry-misses-about-incidents-and-what-you-can-do/&quot;&gt;Techbytes: What The Industry Misses About Incidents and What You Can Do&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.atspotify.com/2019/04/04/whacking-a-million-moles-automated-incident-response-infrastructure-in-gcp/&quot;&gt;Automated Incident Response Infrastructure in GCP&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/root&quot;&gt;Tracing, Fast and Slow: Digging into and Improving Your Web Service‚Äôs Performance&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Squarespace&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://engineering.squarespace.com/blog/2017/under-the-hood-ensuring-site-reliability&quot;&gt;Under the Hood: Ensuring Site Reliability&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/na&quot;&gt;Pushing through Friction&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/hidalgo&quot;&gt;How to SRE When Everything‚Äôs Already on Fire&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/lawson&quot;&gt;Case Study: Implementing SLOs for a New Service&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/turner&quot;&gt;Creating a Code Review Culture&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Stack Overflow&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.blog/2021/03/18/creating-a-good-feedback-loop-between-ops-and-devs-using-documentation/&quot;&gt;‚ÄúThis should never happen. If it does, call the developers.‚Äù&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.blog/2021/03/08/infrastructure-as-code-create-and-configure-infrastructure-elements-in-seconds/&quot;&gt;Infrastructure as code: Create and configure infrastructure elements in seconds&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.blog/2021/01/19/fulfilling-the-promise-of-ci-cd/&quot;&gt;Fulfilling the promise of CI/CD&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.blog/2021/01/25/a-deeper-dive-into-our-may-2019-security-incident/&quot;&gt;A deeper dive into our May 2019 security incident&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.blog/2020/10/23/adrian-cockcroft-aws-failover-chaos-engineering-fault-tolerance-distaster-recovery/&quot;&gt;Guest Post - Failing over without falling over&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/limoncelli&quot;&gt;Low Context DevOps: Improving SRE Team Culture through Defaults, Documentation, and Discipline&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Stripe&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://stripe.com/blog/canonical-log-lines&quot;&gt;Fast and flexible observability with canonical log lines&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://stripe.com/blog/engineering/page/3&quot;&gt;Introducing Veneur: high performance and global aggregation for Datadog&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/larson&quot;&gt;How Stripe Invests in Technical Infrastructure&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19asia/presentation/lopopolo&quot;&gt;The AWS Billing Machine and Optimizing Cloud Costs&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Target&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.target.com/2019/05/09/chaos-engineering-at-Target.html&quot;&gt;∆Ühaos ∆éngin«ù«ùring @ Target - Part 2&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.target.com/2019/02/05/chaos-engineering-at-Target.html&quot;&gt;∆Ühaos ∆éngin«ù«ùring @ Target - Part 1&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.target.com/2019/02/25/introducing-goalert.html&quot;&gt;GoAlert - Your Future Open Source, On-Call Notification Product&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.target.com/2019/01/14/cascading-failure-of-distributed-systems.html&quot;&gt;On Infrastructure at Scale: A Cascading Failure of Distributed Systems&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.target.com/2017/04/05/distributed-troubleshooting.html&quot;&gt;Distributed Troubleshooting&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.target.com/2014/12/29/outage-resolution-through-automation.html&quot;&gt;Outage Resolution Through Automation&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Teads&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/teads-engineering/scaling-your-on-duty-team-bc467c480747&quot;&gt;Scaling your on-duty team&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Trivago&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://tech.trivago.com/2020/12/04/how-to-get-fooled-by-metrics/&quot;&gt;How To Get Fooled By Metrics&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Uber&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://eng.uber.com/kafka/&quot;&gt;Disaster Recovery for Multi-Region Kafka at Uber&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://eng.uber.com/eng-failover-handling/&quot;&gt;Engineering Failover Handling in Uber‚Äôs Mobile Networking Infrastructure&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://eng.uber.com/optimizing-observability/&quot;&gt;Optimizing Observability with Jaeger, M3, and XYS at Uber&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/lee&quot;&gt;A Tale of Two Rotations: Building a Humane &amp;amp; Effective On-Call&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/gud&quot;&gt;Testing in Production at Scale&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=qJnS-EfIIIE&quot;&gt;A History of SRE at Uber‚Äô with Rick Boone of Uber&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;VGW&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@bruce_25864/the-sre-incident-response-game-db242fff391c&quot;&gt;The SRE Incident Response game&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/c2-52EP8_7c&quot;&gt;Level Up Your Incident Response With Gameplay&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Wikimedia Foundation&lt;/summary&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/mouzeli&quot;&gt;Testing Encyclopedias in Production&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/mouzeli&quot;&gt;What Happens When You Type en.wikipedia.org?&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Yelp&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://increment.com/reliability/yelp-traffic-failover-strategy/&quot;&gt;The process: Implementing Yelp‚Äôs failover strategy&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h3&gt;Videos&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/shu&quot;&gt;Yelp - What I Wish I Knew before Going On-Call&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;Zerodha&lt;/summary&gt; 
 &lt;h3&gt;Blog Posts&lt;/h3&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://zerodha.tech/blog/infra-monitoring-at-zerodha/&quot;&gt;Infrastructure monitoring with Prometheus at Zerodha&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h2&gt;SRECon Mix Playlist&lt;/h2&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/charagondla&quot;&gt;Adobe - The Good, the Bad and the Ugly: The 3 Learnings of an SRE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/yitzhaki&quot;&gt;Amdocs - SREs at Telecom and Media Industry: Bridging between Legacy and Cloud Native Apps&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/argent&quot;&gt;Amazon - Confessions of a Systems Engineer: Learning from My 20+ Years of Failure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/kraus&quot;&gt;Alaska Airlines - Capacity Prediction in External Services&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/mcdonald&quot;&gt;BuzzFeed - Optimizing for Learning&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/narvas&quot;&gt;BT - Challenges of Starting an SRE Team from Scratch in an Enterprise&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/ali&quot;&gt;Cloudflare - Support Operations Engineering: Scaling Developer Products to the Millions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/lykke&quot;&gt;Hudson River Trading - Fixing On-Call When Nobody Thinks It‚Äôs (Too) Broken&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/thorne&quot;&gt;IBM - Why Automating Everything Adds to Your Toil&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/thomas&quot;&gt;Genesys - The Smallest Possible SRE Team&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/murphy&quot;&gt;G-Research - My Life as a Solo SRE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/rabenstein&quot;&gt;Grafana Labs - SRE in the Third Age&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/struve&quot;&gt;Kenna Security - Building a Scalable Monitoring System&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/spoonhower&quot;&gt;Lightstep - Building Service Ownership Using Documentation, Telemetry, and a Chance to Make Things Better&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/gagne&quot;&gt;MessageBird - Autopsy of a MySQL Automation Disaster&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/neal&quot;&gt;Netlify - Perks and Pitfalls of Building a Remote First Team&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/schlesinger&quot;&gt;ReactiveOps - Zero to SRE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/collins&quot;&gt;Salesforce - Incident Response in Unfamiliar Sociotechnical Systems: One Incident Commander‚Äôs Challenges Supporting Inter-organizational Anomaly Response in the Age of COVID-19&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/huxtable&quot;&gt;Sprax - From Nothing to SRE: Practical Guidance on Implementing SRE in Smaller Organisations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/wan&quot;&gt;The New York Times - SRE by Influence, Not Authority: How the New York Times Prepares for Large-Scale Events&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/rutkin&quot;&gt;Twitter - Hiring Great SREs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/wieczorek&quot;&gt;United States Digital Service - Lessons Learned in Black Box Monitoring 25,000 Endpoints and Proving the SRE Team‚Äôs Value&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/urbanec&quot;&gt;Unity Technologies - Being Reasonable about SRE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19emea/presentation/ocallaghan&quot;&gt;Udemy - How to Do SRE When You Have No SRE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/yakomin&quot;&gt;Vanguard - Cloudy with a Chance of Chaos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon19americas/presentation/shoup&quot;&gt;WeWork - Learning from Learnings: Anatomy of Three Incidents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon20americas/presentation/moyer&quot;&gt;Zendesk - Latency and Availability Error Budgets Done Right at Scale&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;h3&gt;Books&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/building-secure-and/9781492083115/&quot;&gt;Building Secure &amp;amp; Reliable Systems&lt;/a&gt; | &lt;a href=&quot;https://static.googleusercontent.com/media/sre.google/en//static/pdf/building_secure_and_reliable_systems.pdf&quot;&gt;Read free online version hosted by Google&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/site-reliability-engineering/9781491929117/&quot;&gt;Site Reliability Engineering&lt;/a&gt; | &lt;a href=&quot;https://sre.google/sre-book/table-of-contents/&quot;&gt;Read free online version hosted by Google&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/the-site-reliability/9781492029496/&quot;&gt;The Site Reliability Workbook from Google&lt;/a&gt; | &lt;a href=&quot;https://sre.google/workbook/table-of-contents/&quot;&gt;Read free online version hosted by Google&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/training-site-reliability/9781492076018/&quot;&gt;Training Site Reliability Engineers&lt;/a&gt; | &lt;a href=&quot;https://static.googleusercontent.com/media/sre.google/en//static/pdf/training-sre.pdf&quot;&gt;Read free online version hosted by Google&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/97-things-every/9781492081487/&quot;&gt;97 Things Every SRE Should Know&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/slo-adoption-and/9781492075370/&quot;&gt;SLO Adoption and Usage in Site Reliability Engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/practical-site-reliability/9781788839563/&quot;&gt;Practical Site Reliability Engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/implementing-service-level/9781492076803/&quot;&gt;Implementing Service Level Objectives&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/chaos-engineering/9781492043850/&quot;&gt;Chaos Engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/seeking-sre/9781491978856/&quot;&gt;Seeking SRE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/security-chaos-engineering/9781492080350/&quot;&gt;Security Chaos Engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/chaos-engineering-observability/9781492051046/&quot;&gt;Chaos Engineering Observability&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/database-reliability-engineering/9781491925935/&quot;&gt;Database Reliability Engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/what-is-sre/9781492054429/&quot;&gt;What Is SRE?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/database-reliability-engineering/9781492030942/&quot;&gt;Database Reliability Engineering: What, Why, and How?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/observability-engineering/9781492076438/&quot;&gt;Observability Engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.manning.com/books/chaos-engineering&quot;&gt;Chaos Engineering: Site reliability through controlled disruption&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/incident-metrics-in/9781098103163/&quot;&gt;&lt;em&gt;New!&lt;/em&gt; Incident Metrics in SRE&lt;/a&gt; | &lt;a href=&quot;https://sre.google/resources/practices-and-processes/incident-metrics-in-sre/&quot;&gt;Read free online version hosted by Google&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Events&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/srecon#past&quot;&gt;SRECon Past Events&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chaosconf.io/&quot;&gt;ChaosConf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Other Goodies&lt;/h3&gt; 
&lt;h4&gt;Awesome Lists&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dastergon/awesome-sre&quot;&gt;Awesome SRE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SquadcastHub/awesome-sre-tools&quot;&gt;Awesome Site Reliability Engineering Tools&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dastergon/awesome-chaos-engineering&quot;&gt;Awesome Chaos Engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/crazy-canux/awesome-monitoring&quot;&gt;Awesome Monitoring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/adriannovegil/awesome-observability&quot;&gt;Awesome Observability&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://project-awesome.org/n1trux/awesome-sysadmin&quot;&gt;Awesome Sysadmin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/visenger/awesome-mlops&quot;&gt;Awesome MLOps&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ml-ops.org/&quot;&gt;ML-Ops.org&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;SRE Resources from various organizations&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sre.google/&quot;&gt;Google SRE Page&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sre.google/classroom/&quot;&gt;Google SRE Classroom&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/site-reliability-engineering/&quot;&gt;Microsoft SRE Page&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://linkedin.github.io/school-of-sre/&quot;&gt;School of SRE from LinkedIn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://increment.com/reliability/&quot;&gt;Stripe Increment Magazine Issue 16 on Reliability&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Newsletters&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sreweekly.com/&quot;&gt;SRE Weekly Newsletter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://chaosengineering.news/&quot;&gt;Chaos Engineering Newsletter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://devopsweekly.com&quot;&gt;DevOps Weekly Newsletter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dastergon/postmortem-templates&quot;&gt;Postmortem Templates&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Inspired by &lt;a href=&quot;https://github.com/abhivaikar/howtheytest&quot;&gt;Howtheytest&lt;/a&gt; from &lt;a href=&quot;https://github.com/abhivaikar&quot;&gt;Abhijeet Vaikar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;The list of organizations is referred from my other repo &lt;a href=&quot;https://github.com/upgundecha/awesome-engineering&quot;&gt;awesome-engineering&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Banner image &lt;a href=&quot;https://www.freepik.com/vectors/cartoon&quot;&gt;Cartoon vector created by vectorjuice - www.freepik.com&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other How They‚Ä¶ repos&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/abhivaikar/howtheytest&quot;&gt;Howtheytest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bregman-arie/howtheydevops&quot;&gt;Howtheydevops&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/upgundecha/howtheyaws&quot;&gt;Howtheyaws&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;Contributions welcome! Read the &lt;a href=&quot;https://raw.githubusercontent.com/upgundecha/howtheysre/main/contributing.md&quot;&gt;contribution guidelines&lt;/a&gt; first.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0&quot;&gt;&lt;img src=&quot;https://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg?sanitize=true&quot; alt=&quot;CC0&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;To the extent possible under law, Unmesh Gundecha has waived all copyright and related or neighboring rights to this work.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;If you decide to use this anywhere please give a credit to &lt;a href=&quot;https://www.twitter.com/upgundecha&quot;&gt;@upgundecha&lt;/a&gt; on twitter, also If you like my work, check out other projects on my Github.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ryanmcdermott/clean-code-javascript</title>
      <link>https://github.com/ryanmcdermott/clean-code-javascript</link>
      <description>&lt;p&gt;üõÅ Clean Code concepts adapted for JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;clean-code-javascript&lt;/h1&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#variables&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#functions&quot;&gt;Functions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#objects-and-data-structures&quot;&gt;Objects and Data Structures&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#classes&quot;&gt;Classes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#solid&quot;&gt;SOLID&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#concurrency&quot;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#error-handling&quot;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#formatting&quot;&gt;Formatting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#translation&quot;&gt;Translation&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://www.osnews.com/images/comics/wtfm.jpg&quot; alt=&quot;Humorous image of software quality estimation as a count of how many expletives you shout when reading code&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Software engineering principles, from Robert C. Martin‚Äôs book &lt;a href=&quot;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for JavaScript. This is not a style guide. It‚Äôs a guide to producing &lt;a href=&quot;https://github.com/ryanmcdermott/3rs-of-software-architecture&quot;&gt;readable, reusable, and refactorable&lt;/a&gt; software in JavaScript.&lt;/p&gt; 
&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Our craft of software engineering is just a bit over 50 years old, and we are still learning a lot. When software architecture is as old as architecture itself, maybe then we will have harder rules to follow. For now, let these guidelines serve as a touchstone by which to assess the quality of the JavaScript code that you and your team produce.&lt;/p&gt; 
&lt;p&gt;One more thing: knowing these won‚Äôt immediately make you a better software developer, and working with them for many years doesn‚Äôt mean you won‚Äôt make mistakes. Every piece of code starts as a first draft, like wet clay getting shaped into its final form. Finally, we chisel away the imperfections when we review it with our peers. Don‚Äôt beat yourself up for first drafts that need improvement. Beat up the code instead!&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Use meaningful and pronounceable variable names&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const yyyymmdstr = moment().format(&quot;YYYY/MM/DD&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const currentDate = moment().format(&quot;YYYY/MM/DD&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use the same vocabulary for the same type of variable&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getUserInfo();
getClientData();
getCustomerRecord();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getUser();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use searchable names&lt;/h3&gt; 
&lt;p&gt;We will read more code than we will ever write. It‚Äôs important that the code we do write is readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable. Tools like &lt;a href=&quot;https://github.com/danielstjules/buddy.js&quot;&gt;buddy.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/eslint/eslint/raw/660e0918933e6e7fede26bc675a0763a6b357c94/docs/rules/no-magic-numbers.md&quot;&gt;ESLint&lt;/a&gt; can help identify unnamed constants.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// What the heck is 86400000 for?
setTimeout(blastOff, 86400000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Declare them as capitalized named constants.
const MILLISECONDS_PER_DAY = 60 * 60 * 24 * 1000; //86400000;

setTimeout(blastOff, MILLISECONDS_PER_DAY);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use explanatory variables&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const address = &quot;One Infinite Loop, Cupertino 95014&quot;;
const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;
saveCityZipCode(
  address.match(cityZipCodeRegex)[1],
  address.match(cityZipCodeRegex)[2]
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const address = &quot;One Infinite Loop, Cupertino 95014&quot;;
const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;
const [_, city, zipCode] = address.match(cityZipCodeRegex) || [];
saveCityZipCode(city, zipCode);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid Mental Mapping&lt;/h3&gt; 
&lt;p&gt;Explicit is better than implicit.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const locations = [&quot;Austin&quot;, &quot;New York&quot;, &quot;San Francisco&quot;];
locations.forEach(l =&amp;gt; {
  doStuff();
  doSomeOtherStuff();
  // ...
  // ...
  // ...
  // Wait, what is `l` for again?
  dispatch(l);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const locations = [&quot;Austin&quot;, &quot;New York&quot;, &quot;San Francisco&quot;];
locations.forEach(location =&amp;gt; {
  doStuff();
  doSomeOtherStuff();
  // ...
  // ...
  // ...
  dispatch(location);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don‚Äôt add unneeded context&lt;/h3&gt; 
&lt;p&gt;If your class/object name tells you something, don‚Äôt repeat that in your variable name.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Car = {
  carMake: &quot;Honda&quot;,
  carModel: &quot;Accord&quot;,
  carColor: &quot;Blue&quot;
};

function paintCar(car, color) {
  car.carColor = color;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Car = {
  make: &quot;Honda&quot;,
  model: &quot;Accord&quot;,
  color: &quot;Blue&quot;
};

function paintCar(car, color) {
  car.color = color;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use default arguments instead of short circuiting or conditionals&lt;/h3&gt; 
&lt;p&gt;Default arguments are often cleaner than short circuiting. Be aware that if you use them, your function will only provide default values for &lt;code&gt;undefined&lt;/code&gt; arguments. Other ‚Äúfalsy‚Äù values such as &lt;code&gt;&#39;&#39;&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;NaN&lt;/code&gt;, will not be replaced by a default value.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMicrobrewery(name) {
  const breweryName = name || &quot;Hipster Brew Co.&quot;;
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMicrobrewery(name = &quot;Hipster Brew Co.&quot;) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Function arguments (2 or fewer ideally)&lt;/h3&gt; 
&lt;p&gt;Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; 
&lt;p&gt;One or two arguments is the ideal case, and three should be avoided if possible. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it‚Äôs not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; 
&lt;p&gt;Since JavaScript allows you to make objects on the fly, without a lot of class boilerplate, you can use an object if you are finding yourself needing a lot of arguments.&lt;/p&gt; 
&lt;p&gt;To make it obvious what properties the function expects, you can use the ES2015/ES6 destructuring syntax. This has a few advantages:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;When someone looks at the function signature, it‚Äôs immediately clear what properties are being used.&lt;/li&gt; 
 &lt;li&gt;It can be used to simulate named parameters.&lt;/li&gt; 
 &lt;li&gt;Destructuring also clones the specified primitive values of the argument object passed into the function. This can help prevent side effects. Note: objects and arrays that are destructured from the argument object are NOT cloned.&lt;/li&gt; 
 &lt;li&gt;Linters can warn you about unused properties, which would be impossible without destructuring.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMenu(title, body, buttonText, cancellable) {
  // ...
}

createMenu(&quot;Foo&quot;, &quot;Bar&quot;, &quot;Baz&quot;, true);

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMenu({ title, body, buttonText, cancellable }) {
  // ...
}

createMenu({
  title: &quot;Foo&quot;,
  body: &quot;Bar&quot;,
  buttonText: &quot;Baz&quot;,
  cancellable: true
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Functions should do one thing&lt;/h3&gt; 
&lt;p&gt;This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, it can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you‚Äôll be ahead of many developers.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function emailClients(clients) {
  clients.forEach(client =&amp;gt; {
    const clientRecord = database.lookup(client);
    if (clientRecord.isActive()) {
      email(client);
    }
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function emailActiveClients(clients) {
  clients.filter(isActiveClient).forEach(email);
}

function isActiveClient(client) {
  const clientRecord = database.lookup(client);
  return clientRecord.isActive();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Function names should say what they do&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function addToDate(date, month) {
  // ...
}

const date = new Date();

// It&#39;s hard to tell from the function name what is added
addToDate(date, 1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function addMonthToDate(month, date) {
  // ...
}

const date = new Date();
addMonthToDate(1, date);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Functions should only be one level of abstraction&lt;/h3&gt; 
&lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function parseBetterJSAlternative(code) {
  const REGEXES = [
    // ...
  ];

  const statements = code.split(&quot; &quot;);
  const tokens = [];
  REGEXES.forEach(REGEX =&amp;gt; {
    statements.forEach(statement =&amp;gt; {
      // ...
    });
  });

  const ast = [];
  tokens.forEach(token =&amp;gt; {
    // lex...
  });

  ast.forEach(node =&amp;gt; {
    // parse...
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function parseBetterJSAlternative(code) {
  const tokens = tokenize(code);
  const syntaxTree = parse(tokens);
  syntaxTree.forEach(node =&amp;gt; {
    // parse...
  });
}

function tokenize(code) {
  const REGEXES = [
    // ...
  ];

  const statements = code.split(&quot; &quot;);
  const tokens = [];
  REGEXES.forEach(REGEX =&amp;gt; {
    statements.forEach(statement =&amp;gt; {
      tokens.push(/* ... */);
    });
  });

  return tokens;
}

function parse(tokens) {
  const syntaxTree = [];
  tokens.forEach(token =&amp;gt; {
    syntaxTree.push(/* ... */);
  });

  return syntaxTree;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Remove duplicate code&lt;/h3&gt; 
&lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there‚Äôs more than one place to alter something if you need to change some logic.&lt;/p&gt; 
&lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there‚Äôs only one place to update!&lt;/p&gt; 
&lt;p&gt;Oftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; 
&lt;p&gt;Getting the abstraction right is critical, that‚Äôs why you should follow the SOLID principles laid out in the &lt;em&gt;Classes&lt;/em&gt; section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don‚Äôt repeat yourself, otherwise you‚Äôll find yourself updating multiple places anytime you want to change one thing.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function showDeveloperList(developers) {
  developers.forEach(developer =&amp;gt; {
    const expectedSalary = developer.calculateExpectedSalary();
    const experience = developer.getExperience();
    const githubLink = developer.getGithubLink();
    const data = {
      expectedSalary,
      experience,
      githubLink
    };

    render(data);
  });
}

function showManagerList(managers) {
  managers.forEach(manager =&amp;gt; {
    const expectedSalary = manager.calculateExpectedSalary();
    const experience = manager.getExperience();
    const portfolio = manager.getMBAProjects();
    const data = {
      expectedSalary,
      experience,
      portfolio
    };

    render(data);
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function showEmployeeList(employees) {
  employees.forEach(employee =&amp;gt; {
    const expectedSalary = employee.calculateExpectedSalary();
    const experience = employee.getExperience();

    const data = {
      expectedSalary,
      experience
    };

    switch (employee.type) {
      case &quot;manager&quot;:
        data.portfolio = employee.getMBAProjects();
        break;
      case &quot;developer&quot;:
        data.githubLink = employee.getGithubLink();
        break;
    }

    render(data);
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Set default objects with Object.assign&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const menuConfig = {
  title: null,
  body: &quot;Bar&quot;,
  buttonText: null,
  cancellable: true
};

function createMenu(config) {
  config.title = config.title || &quot;Foo&quot;;
  config.body = config.body || &quot;Bar&quot;;
  config.buttonText = config.buttonText || &quot;Baz&quot;;
  config.cancellable =
    config.cancellable !== undefined ? config.cancellable : true;
}

createMenu(menuConfig);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const menuConfig = {
  title: &quot;Order&quot;,
  // User did not include &#39;body&#39; key
  buttonText: &quot;Send&quot;,
  cancellable: true
};

function createMenu(config) {
  let finalConfig = Object.assign(
    {
      title: &quot;Foo&quot;,
      body: &quot;Bar&quot;,
      buttonText: &quot;Baz&quot;,
      cancellable: true
    },
    config
  );
  return finalConfig
  // config now equals: {title: &quot;Order&quot;, body: &quot;Bar&quot;, buttonText: &quot;Send&quot;, cancellable: true}
  // ...
}

createMenu(menuConfig);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don‚Äôt use flags as function parameters&lt;/h3&gt; 
&lt;p&gt;Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createFile(name, temp) {
  if (temp) {
    fs.create(`./temp/${name}`);
  } else {
    fs.create(name);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createFile(name) {
  fs.create(name);
}

function createTempFile(name) {
  createFile(`./temp/${name}`);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid Side Effects (part 1)&lt;/h3&gt; 
&lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; 
&lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don‚Äôt have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; 
&lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Global variable referenced by following function.
// If we had another function that used this name, now it&#39;d be an array and it could break it.
let name = &quot;Ryan McDermott&quot;;

function splitIntoFirstAndLastName() {
  name = name.split(&quot; &quot;);
}

splitIntoFirstAndLastName();

console.log(name); // [&#39;Ryan&#39;, &#39;McDermott&#39;];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function splitIntoFirstAndLastName(name) {
  return name.split(&quot; &quot;);
}

const name = &quot;Ryan McDermott&quot;;
const newName = splitIntoFirstAndLastName(name);

console.log(name); // &#39;Ryan McDermott&#39;;
console.log(newName); // [&#39;Ryan&#39;, &#39;McDermott&#39;];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid Side Effects (part 2)&lt;/h3&gt; 
&lt;p&gt;In JavaScript, some values are unchangeable (immutable) and some are changeable (mutable). Objects and arrays are two kinds of mutable values so it‚Äôs important to handle them carefully when they‚Äôre passed as parameters to a function. A JavaScript function can change an object‚Äôs properties or alter the contents of an array which could easily cause bugs elsewhere.&lt;/p&gt; 
&lt;p&gt;Suppose there‚Äôs a function that accepts an array parameter representing a shopping cart. If the function makes a change in that shopping cart array - by adding an item to purchase, for example - then any other function that uses that same &lt;code&gt;cart&lt;/code&gt; array will be affected by this addition. That may be great, however it could also be bad. Let‚Äôs imagine a bad situation:&lt;/p&gt; 
&lt;p&gt;The user clicks the ‚ÄúPurchase‚Äù button which calls a &lt;code&gt;purchase&lt;/code&gt; function that spawns a network request and sends the &lt;code&gt;cart&lt;/code&gt; array to the server. Because of a bad network connection, the &lt;code&gt;purchase&lt;/code&gt; function has to keep retrying the request. Now, what if in the meantime the user accidentally clicks an ‚ÄúAdd to Cart‚Äù button on an item they don‚Äôt actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because the &lt;code&gt;cart&lt;/code&gt; array was modified.&lt;/p&gt; 
&lt;p&gt;A great solution would be for the &lt;code&gt;addItemToCart&lt;/code&gt; function to always clone the &lt;code&gt;cart&lt;/code&gt;, edit it, and return the clone. This would ensure that functions that are still using the old shopping cart wouldn‚Äôt be affected by the changes.&lt;/p&gt; 
&lt;p&gt;Two caveats to mention to this approach:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;There might be cases where you actually want to modify the input object, but when you adopt this programming practice you will find that those cases are pretty rare. Most things can be refactored to have no side effects!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Cloning big objects can be very expensive in terms of performance. Luckily, this isn‚Äôt a big issue in practice because there are &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;great libraries&lt;/a&gt; that allow this kind of programming approach to be fast and not as memory intensive as it would be for you to manually clone objects and arrays.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const addItemToCart = (cart, item) =&amp;gt; {
  cart.push({ item, date: Date.now() });
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const addItemToCart = (cart, item) =&amp;gt; {
  return [...cart, { item, date: Date.now() }];
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don‚Äôt write to global functions&lt;/h3&gt; 
&lt;p&gt;Polluting globals is a bad practice in JavaScript because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let‚Äôs think about an example: what if you wanted to extend JavaScript‚Äôs native Array method to have a &lt;code&gt;diff&lt;/code&gt; method that could show the difference between two arrays? You could write your new function to the &lt;code&gt;Array.prototype&lt;/code&gt;, but it could clash with another library that tried to do the same thing. What if that other library was just using &lt;code&gt;diff&lt;/code&gt; to find the difference between the first and last elements of an array? This is why it would be much better to just use ES2015/ES6 classes and simply extend the &lt;code&gt;Array&lt;/code&gt; global.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Array.prototype.diff = function diff(comparisonArray) {
  const hash = new Set(comparisonArray);
  return this.filter(elem =&amp;gt; !hash.has(elem));
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class SuperArray extends Array {
  diff(comparisonArray) {
    const hash = new Set(comparisonArray);
    return this.filter(elem =&amp;gt; !hash.has(elem));
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Favor functional programming over imperative programming&lt;/h3&gt; 
&lt;p&gt;JavaScript isn‚Äôt a functional language in the way that Haskell is, but it has a functional flavor to it. Functional languages can be cleaner and easier to test. Favor this style of programming when you can.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const programmerOutput = [
  {
    name: &quot;Uncle Bobby&quot;,
    linesOfCode: 500
  },
  {
    name: &quot;Suzie Q&quot;,
    linesOfCode: 1500
  },
  {
    name: &quot;Jimmy Gosling&quot;,
    linesOfCode: 150
  },
  {
    name: &quot;Gracie Hopper&quot;,
    linesOfCode: 1000
  }
];

let totalOutput = 0;

for (let i = 0; i &amp;lt; programmerOutput.length; i++) {
  totalOutput += programmerOutput[i].linesOfCode;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const programmerOutput = [
  {
    name: &quot;Uncle Bobby&quot;,
    linesOfCode: 500
  },
  {
    name: &quot;Suzie Q&quot;,
    linesOfCode: 1500
  },
  {
    name: &quot;Jimmy Gosling&quot;,
    linesOfCode: 150
  },
  {
    name: &quot;Gracie Hopper&quot;,
    linesOfCode: 1000
  }
];

const totalOutput = programmerOutput.reduce(
  (totalLines, output) =&amp;gt; totalLines + output.linesOfCode,
  0
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Encapsulate conditionals&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (fsm.state === &quot;fetching&quot; &amp;amp;&amp;amp; isEmpty(listNode)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function shouldShowSpinner(fsm, listNode) {
  return fsm.state === &quot;fetching&quot; &amp;amp;&amp;amp; isEmpty(listNode);
}

if (shouldShowSpinner(fsmInstance, listNodeInstance)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid negative conditionals&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isDOMNodeNotPresent(node) {
  // ...
}

if (!isDOMNodeNotPresent(node)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isDOMNodePresent(node) {
  // ...
}

if (isDOMNodePresent(node)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid conditionals&lt;/h3&gt; 
&lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, ‚Äúhow am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?‚Äù The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, ‚Äúwell that‚Äôs great but why would I want to do that?‚Äù The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Airplane {
  // ...
  getCruisingAltitude() {
    switch (this.type) {
      case &quot;777&quot;:
        return this.getMaxAltitude() - this.getPassengerCount();
      case &quot;Air Force One&quot;:
        return this.getMaxAltitude();
      case &quot;Cessna&quot;:
        return this.getMaxAltitude() - this.getFuelExpenditure();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Airplane {
  // ...
}

class Boeing777 extends Airplane {
  // ...
  getCruisingAltitude() {
    return this.getMaxAltitude() - this.getPassengerCount();
  }
}

class AirForceOne extends Airplane {
  // ...
  getCruisingAltitude() {
    return this.getMaxAltitude();
  }
}

class Cessna extends Airplane {
  // ...
  getCruisingAltitude() {
    return this.getMaxAltitude() - this.getFuelExpenditure();
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid type-checking (part 1)&lt;/h3&gt; 
&lt;p&gt;JavaScript is untyped, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it becomes tempting to do type-checking in your functions. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function travelToTexas(vehicle) {
  if (vehicle instanceof Bicycle) {
    vehicle.pedal(this.currentLocation, new Location(&quot;texas&quot;));
  } else if (vehicle instanceof Car) {
    vehicle.drive(this.currentLocation, new Location(&quot;texas&quot;));
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function travelToTexas(vehicle) {
  vehicle.move(this.currentLocation, new Location(&quot;texas&quot;));
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid type-checking (part 2)&lt;/h3&gt; 
&lt;p&gt;If you are working with basic primitive values like strings and integers, and you can‚Äôt use polymorphism but you still feel the need to type-check, you should consider using TypeScript. It is an excellent alternative to normal JavaScript, as it provides you with static typing on top of standard JavaScript syntax. The problem with manually type-checking normal JavaScript is that doing it well requires so much extra verbiage that the faux ‚Äútype-safety‚Äù you get doesn‚Äôt make up for the lost readability. Keep your JavaScript clean, write good tests, and have good code reviews. Otherwise, do all of that but with TypeScript (which, like I said, is a great alternative!).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function combine(val1, val2) {
  if (
    (typeof val1 === &quot;number&quot; &amp;amp;&amp;amp; typeof val2 === &quot;number&quot;) ||
    (typeof val1 === &quot;string&quot; &amp;amp;&amp;amp; typeof val2 === &quot;string&quot;)
  ) {
    return val1 + val2;
  }

  throw new Error(&quot;Must be of type String or Number&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function combine(val1, val2) {
  return val1 + val2;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don‚Äôt over-optimize&lt;/h3&gt; 
&lt;p&gt;Modern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time. &lt;a href=&quot;https://github.com/petkaantonov/bluebird/wiki/Optimization-killers&quot;&gt;There are good resources&lt;/a&gt; for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// On old browsers, each iteration with uncached `list.length` would be costly
// because of `list.length` recomputation. In modern browsers, this is optimized.
for (let i = 0, len = list.length; i &amp;lt; len; i++) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (let i = 0; i &amp;lt; list.length; i++) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Remove dead code&lt;/h3&gt; 
&lt;p&gt;Dead code is just as bad as duplicate code. There‚Äôs no reason to keep it in your codebase. If it‚Äôs not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function oldRequestModule(url) {
  // ...
}

function newRequestModule(url) {
  // ...
}

const req = newRequestModule;
inventoryTracker(&quot;apples&quot;, req, &quot;www.inventory-awesome.io&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function newRequestModule(url) {
  // ...
}

const req = newRequestModule;
inventoryTracker(&quot;apples&quot;, req, &quot;www.inventory-awesome.io&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Objects and Data Structures&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Use getters and setters&lt;/h3&gt; 
&lt;p&gt;Using getters and setters to access data on objects could be better than simply looking for a property on an object. ‚ÄúWhy?‚Äù you might ask. Well, here‚Äôs an unorganized list of reasons why:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;When you want to do more beyond getting an object property, you don‚Äôt have to look up and change every accessor in your codebase.&lt;/li&gt; 
 &lt;li&gt;Makes adding validation simple when doing a &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Encapsulates the internal representation.&lt;/li&gt; 
 &lt;li&gt;Easy to add logging and error handling when getting and setting.&lt;/li&gt; 
 &lt;li&gt;You can lazy load your object‚Äôs properties, let‚Äôs say getting it from a server.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function makeBankAccount() {
  // ...

  return {
    balance: 0
    // ...
  };
}

const account = makeBankAccount();
account.balance = 100;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function makeBankAccount() {
  // this one is private
  let balance = 0;

  // a &quot;getter&quot;, made public via the returned object below
  function getBalance() {
    return balance;
  }

  // a &quot;setter&quot;, made public via the returned object below
  function setBalance(amount) {
    // ... validate before updating the balance
    balance = amount;
  }

  return {
    // ...
    getBalance,
    setBalance
  };
}

const account = makeBankAccount();
account.setBalance(100);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Make objects have private members&lt;/h3&gt; 
&lt;p&gt;This can be accomplished through closures (for ES5 and below).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Employee = function(name) {
  this.name = name;
};

Employee.prototype.getName = function getName() {
  return this.name;
};

const employee = new Employee(&quot;John Doe&quot;);
console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe
delete employee.name;
console.log(`Employee name: ${employee.getName()}`); // Employee name: undefined
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function makeEmployee(name) {
  return {
    getName() {
      return name;
    }
  };
}

const employee = makeEmployee(&quot;John Doe&quot;);
console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe
delete employee.name;
console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Prefer ES2015/ES6 classes over ES5 plain functions&lt;/h3&gt; 
&lt;p&gt;It‚Äôs very difficult to get readable class inheritance, construction, and method definitions for classical ES5 classes. If you need inheritance (and be aware that you might not), then prefer ES2015/ES6 classes. However, prefer small functions over classes until you find yourself needing larger and more complex objects.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Animal = function(age) {
  if (!(this instanceof Animal)) {
    throw new Error(&quot;Instantiate Animal with `new`&quot;);
  }

  this.age = age;
};

Animal.prototype.move = function move() {};

const Mammal = function(age, furColor) {
  if (!(this instanceof Mammal)) {
    throw new Error(&quot;Instantiate Mammal with `new`&quot;);
  }

  Animal.call(this, age);
  this.furColor = furColor;
};

Mammal.prototype = Object.create(Animal.prototype);
Mammal.prototype.constructor = Mammal;
Mammal.prototype.liveBirth = function liveBirth() {};

const Human = function(age, furColor, languageSpoken) {
  if (!(this instanceof Human)) {
    throw new Error(&quot;Instantiate Human with `new`&quot;);
  }

  Mammal.call(this, age, furColor);
  this.languageSpoken = languageSpoken;
};

Human.prototype = Object.create(Mammal.prototype);
Human.prototype.constructor = Human;
Human.prototype.speak = function speak() {};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Animal {
  constructor(age) {
    this.age = age;
  }

  move() {
    /* ... */
  }
}

class Mammal extends Animal {
  constructor(age, furColor) {
    super(age);
    this.furColor = furColor;
  }

  liveBirth() {
    /* ... */
  }
}

class Human extends Mammal {
  constructor(age, furColor, languageSpoken) {
    super(age, furColor);
    this.languageSpoken = languageSpoken;
  }

  speak() {
    /* ... */
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use method chaining&lt;/h3&gt; 
&lt;p&gt;This pattern is very useful in JavaScript and you see it in many libraries such as jQuery and Lodash. It allows your code to be expressive, and less verbose. For that reason, I say, use method chaining and take a look at how clean your code will be. In your class functions, simply return &lt;code&gt;this&lt;/code&gt; at the end of every function, and you can chain further class methods onto it.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Car {
  constructor(make, model, color) {
    this.make = make;
    this.model = model;
    this.color = color;
  }

  setMake(make) {
    this.make = make;
  }

  setModel(model) {
    this.model = model;
  }

  setColor(color) {
    this.color = color;
  }

  save() {
    console.log(this.make, this.model, this.color);
  }
}

const car = new Car(&quot;Ford&quot;, &quot;F-150&quot;, &quot;red&quot;);
car.setColor(&quot;pink&quot;);
car.save();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Car {
  constructor(make, model, color) {
    this.make = make;
    this.model = model;
    this.color = color;
  }

  setMake(make) {
    this.make = make;
    // NOTE: Returning this for chaining
    return this;
  }

  setModel(model) {
    this.model = model;
    // NOTE: Returning this for chaining
    return this;
  }

  setColor(color) {
    this.color = color;
    // NOTE: Returning this for chaining
    return this;
  }

  save() {
    console.log(this.make, this.model, this.color);
    // NOTE: Returning this for chaining
    return this;
  }
}

const car = new Car(&quot;Ford&quot;, &quot;F-150&quot;, &quot;red&quot;).setColor(&quot;pink&quot;).save();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Prefer composition over inheritance&lt;/h3&gt; 
&lt;p&gt;As stated famously in &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; 
&lt;p&gt;You might be wondering then, ‚Äúwhen should I use inheritance?‚Äù It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Your inheritance represents an ‚Äúis-a‚Äù relationship and not a ‚Äúhas-a‚Äù relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/li&gt; 
 &lt;li&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/li&gt; 
 &lt;li&gt;You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Employee {
  constructor(name, email) {
    this.name = name;
    this.email = email;
  }

  // ...
}

// Bad because Employees &quot;have&quot; tax data. EmployeeTaxData is not a type of Employee
class EmployeeTaxData extends Employee {
  constructor(ssn, salary) {
    super();
    this.ssn = ssn;
    this.salary = salary;
  }

  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class EmployeeTaxData {
  constructor(ssn, salary) {
    this.ssn = ssn;
    this.salary = salary;
  }

  // ...
}

class Employee {
  constructor(name, email) {
    this.name = name;
    this.email = email;
  }

  setTaxData(ssn, salary) {
    this.taxData = new EmployeeTaxData(ssn, salary);
  }
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;SOLID&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Single Responsibility Principle (SRP)&lt;/h3&gt; 
&lt;p&gt;As stated in Clean Code, ‚ÄúThere should never be more than one reason for a class to change‚Äù. It‚Äôs tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won‚Äôt be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It‚Äôs important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class UserSettings {
  constructor(user) {
    this.user = user;
  }

  changeSettings(settings) {
    if (this.verifyCredentials()) {
      // ...
    }
  }

  verifyCredentials() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class UserAuth {
  constructor(user) {
    this.user = user;
  }

  verifyCredentials() {
    // ...
  }
}

class UserSettings {
  constructor(user) {
    this.user = user;
    this.auth = new UserAuth(user);
  }

  changeSettings(settings) {
    if (this.auth.verifyCredentials()) {
      // ...
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Open/Closed Principle (OCP)&lt;/h3&gt; 
&lt;p&gt;As stated by Bertrand Meyer, ‚Äúsoftware entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.‚Äù What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class AjaxAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;ajaxAdapter&quot;;
  }
}

class NodeAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;nodeAdapter&quot;;
  }
}

class HttpRequester {
  constructor(adapter) {
    this.adapter = adapter;
  }

  fetch(url) {
    if (this.adapter.name === &quot;ajaxAdapter&quot;) {
      return makeAjaxCall(url).then(response =&amp;gt; {
        // transform response and return
      });
    } else if (this.adapter.name === &quot;nodeAdapter&quot;) {
      return makeHttpCall(url).then(response =&amp;gt; {
        // transform response and return
      });
    }
  }
}

function makeAjaxCall(url) {
  // request and return promise
}

function makeHttpCall(url) {
  // request and return promise
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class AjaxAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;ajaxAdapter&quot;;
  }

  request(url) {
    // request and return promise
  }
}

class NodeAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;nodeAdapter&quot;;
  }

  request(url) {
    // request and return promise
  }
}

class HttpRequester {
  constructor(adapter) {
    this.adapter = adapter;
  }

  fetch(url) {
    return this.adapter.request(url).then(response =&amp;gt; {
      // transform response and return
    });
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt; 
&lt;p&gt;This is a scary term for a very simple concept. It‚Äôs formally defined as ‚ÄúIf S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).‚Äù That‚Äôs an even scarier definition.&lt;/p&gt; 
&lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let‚Äôs take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the ‚Äúis-a‚Äù relationship via inheritance, you quickly get into trouble.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Rectangle {
  constructor() {
    this.width = 0;
    this.height = 0;
  }

  setColor(color) {
    // ...
  }

  render(area) {
    // ...
  }

  setWidth(width) {
    this.width = width;
  }

  setHeight(height) {
    this.height = height;
  }

  getArea() {
    return this.width * this.height;
  }
}

class Square extends Rectangle {
  setWidth(width) {
    this.width = width;
    this.height = width;
  }

  setHeight(height) {
    this.width = height;
    this.height = height;
  }
}

function renderLargeRectangles(rectangles) {
  rectangles.forEach(rectangle =&amp;gt; {
    rectangle.setWidth(4);
    rectangle.setHeight(5);
    const area = rectangle.getArea(); // BAD: Returns 25 for Square. Should be 20.
    rectangle.render(area);
  });
}

const rectangles = [new Rectangle(), new Rectangle(), new Square()];
renderLargeRectangles(rectangles);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Shape {
  setColor(color) {
    // ...
  }

  render(area) {
    // ...
  }
}

class Rectangle extends Shape {
  constructor(width, height) {
    super();
    this.width = width;
    this.height = height;
  }

  getArea() {
    return this.width * this.height;
  }
}

class Square extends Shape {
  constructor(length) {
    super();
    this.length = length;
  }

  getArea() {
    return this.length * this.length;
  }
}

function renderLargeShapes(shapes) {
  shapes.forEach(shape =&amp;gt; {
    const area = shape.getArea();
    shape.render(area);
  });
}

const shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];
renderLargeShapes(shapes);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Interface Segregation Principle (ISP)&lt;/h3&gt; 
&lt;p&gt;JavaScript doesn‚Äôt have interfaces so this principle doesn‚Äôt apply as strictly as others. However, it‚Äôs important and relevant even with JavaScript‚Äôs lack of type system.&lt;/p&gt; 
&lt;p&gt;ISP states that ‚ÄúClients should not be forced to depend upon interfaces that they do not use.‚Äù Interfaces are implicit contracts in JavaScript because of duck typing.&lt;/p&gt; 
&lt;p&gt;A good example to look at that demonstrates this principle in JavaScript is for classes that require large settings objects. Not requiring clients to setup huge amounts of options is beneficial, because most of the time they won‚Äôt need all of the settings. Making them optional helps prevent having a ‚Äúfat interface‚Äù.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class DOMTraverser {
  constructor(settings) {
    this.settings = settings;
    this.setup();
  }

  setup() {
    this.rootNode = this.settings.rootNode;
    this.settings.animationModule.setup();
  }

  traverse() {
    // ...
  }
}

const $ = new DOMTraverser({
  rootNode: document.getElementsByTagName(&quot;body&quot;),
  animationModule() {} // Most of the time, we won&#39;t need to animate when traversing.
  // ...
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class DOMTraverser {
  constructor(settings) {
    this.settings = settings;
    this.options = settings.options;
    this.setup();
  }

  setup() {
    this.rootNode = this.settings.rootNode;
    this.setupOptions();
  }

  setupOptions() {
    if (this.options.animationModule) {
      // ...
    }
  }

  traverse() {
    // ...
  }
}

const $ = new DOMTraverser({
  rootNode: document.getElementsByTagName(&quot;body&quot;),
  options: {
    animationModule() {}
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt; 
&lt;p&gt;This principle states two essential things:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt; 
 &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This can be hard to understand at first, but if you‚Äôve worked with AngularJS, you‚Äôve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; 
&lt;p&gt;As stated previously, JavaScript doesn‚Äôt have interfaces so the abstractions that are depended upon are implicit contracts. That is to say, the methods and properties that an object/class exposes to another object/class. In the example below, the implicit contract is that any Request module for an &lt;code&gt;InventoryTracker&lt;/code&gt; will have a &lt;code&gt;requestItems&lt;/code&gt; method.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class InventoryRequester {
  constructor() {
    this.REQ_METHODS = [&quot;HTTP&quot;];
  }

  requestItem(item) {
    // ...
  }
}

class InventoryTracker {
  constructor(items) {
    this.items = items;

    // BAD: We have created a dependency on a specific request implementation.
    // We should just have requestItems depend on a request method: `request`
    this.requester = new InventoryRequester();
  }

  requestItems() {
    this.items.forEach(item =&amp;gt; {
      this.requester.requestItem(item);
    });
  }
}

const inventoryTracker = new InventoryTracker([&quot;apples&quot;, &quot;bananas&quot;]);
inventoryTracker.requestItems();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class InventoryTracker {
  constructor(items, requester) {
    this.items = items;
    this.requester = requester;
  }

  requestItems() {
    this.items.forEach(item =&amp;gt; {
      this.requester.requestItem(item);
    });
  }
}

class InventoryRequesterV1 {
  constructor() {
    this.REQ_METHODS = [&quot;HTTP&quot;];
  }

  requestItem(item) {
    // ...
  }
}

class InventoryRequesterV2 {
  constructor() {
    this.REQ_METHODS = [&quot;WS&quot;];
  }

  requestItem(item) {
    // ...
  }
}

// By constructing our dependencies externally and injecting them, we can easily
// substitute our request module for a fancy new one that uses WebSockets.
const inventoryTracker = new InventoryTracker(
  [&quot;apples&quot;, &quot;bananas&quot;],
  new InventoryRequesterV2()
);
inventoryTracker.requestItems();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Testing is more important than shipping. If you have no tests or an inadequate amount, then every time you ship code you won‚Äôt be sure that you didn‚Äôt break anything. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind. This means that in addition to having a great testing framework, you also need to use a &lt;a href=&quot;https://gotwarlost.github.io/istanbul/&quot;&gt;good coverage tool&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There‚Äôs no excuse to not write tests. There are &lt;a href=&quot;https://jstherightway.org/#testing-tools&quot;&gt;plenty of good JS test frameworks&lt;/a&gt;, so find one that your team prefers. When you find one that works for your team, then aim to always write tests for every new feature/module you introduce. If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.&lt;/p&gt; 
&lt;h3&gt;Single concept per test&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import assert from &quot;assert&quot;;

describe(&quot;MomentJS&quot;, () =&amp;gt; {
  it(&quot;handles date boundaries&quot;, () =&amp;gt; {
    let date;

    date = new MomentJS(&quot;1/1/2015&quot;);
    date.addDays(30);
    assert.equal(&quot;1/31/2015&quot;, date);

    date = new MomentJS(&quot;2/1/2016&quot;);
    date.addDays(28);
    assert.equal(&quot;02/29/2016&quot;, date);

    date = new MomentJS(&quot;2/1/2015&quot;);
    date.addDays(28);
    assert.equal(&quot;03/01/2015&quot;, date);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import assert from &quot;assert&quot;;

describe(&quot;MomentJS&quot;, () =&amp;gt; {
  it(&quot;handles 30-day months&quot;, () =&amp;gt; {
    const date = new MomentJS(&quot;1/1/2015&quot;);
    date.addDays(30);
    assert.equal(&quot;1/31/2015&quot;, date);
  });

  it(&quot;handles leap year&quot;, () =&amp;gt; {
    const date = new MomentJS(&quot;2/1/2016&quot;);
    date.addDays(28);
    assert.equal(&quot;02/29/2016&quot;, date);
  });

  it(&quot;handles non-leap year&quot;, () =&amp;gt; {
    const date = new MomentJS(&quot;2/1/2015&quot;);
    date.addDays(28);
    assert.equal(&quot;03/01/2015&quot;, date);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Use Promises, not callbacks&lt;/h3&gt; 
&lt;p&gt;Callbacks aren‚Äôt clean, and they cause excessive amounts of nesting. With ES2015/ES6, Promises are a built-in global type. Use them!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request&quot;;
import { writeFile } from &quot;fs&quot;;

get(
  &quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;,
  (requestErr, response, body) =&amp;gt; {
    if (requestErr) {
      console.error(requestErr);
    } else {
      writeFile(&quot;article.html&quot;, body, writeErr =&amp;gt; {
        if (writeErr) {
          console.error(writeErr);
        } else {
          console.log(&quot;File written&quot;);
        }
      });
    }
  }
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request-promise&quot;;
import { writeFile } from &quot;fs-extra&quot;;

get(&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;)
  .then(body =&amp;gt; {
    return writeFile(&quot;article.html&quot;, body);
  })
  .then(() =&amp;gt; {
    console.log(&quot;File written&quot;);
  })
  .catch(err =&amp;gt; {
    console.error(err);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Async/Await are even cleaner than Promises&lt;/h3&gt; 
&lt;p&gt;Promises are a very clean alternative to callbacks, but ES2017/ES8 brings async and await which offer an even cleaner solution. All you need is a function that is prefixed in an &lt;code&gt;async&lt;/code&gt; keyword, and then you can write your logic imperatively without a &lt;code&gt;then&lt;/code&gt; chain of functions. Use this if you can take advantage of ES2017/ES8 features today!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request-promise&quot;;
import { writeFile } from &quot;fs-extra&quot;;

get(&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;)
  .then(body =&amp;gt; {
    return writeFile(&quot;article.html&quot;, body);
  })
  .then(() =&amp;gt; {
    console.log(&quot;File written&quot;);
  })
  .catch(err =&amp;gt; {
    console.error(err);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request-promise&quot;;
import { writeFile } from &quot;fs-extra&quot;;

async function getCleanCodeArticle() {
  try {
    const body = await get(
      &quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;
    );
    await writeFile(&quot;article.html&quot;, body);
    console.log(&quot;File written&quot;);
  } catch (err) {
    console.error(err);
  }
}

getCleanCodeArticle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Thrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it‚Äôs letting you know by stopping function execution on the current stack, killing the process (in Node), and notifying you in the console with a stack trace.&lt;/p&gt; 
&lt;h3&gt;Don‚Äôt ignore caught errors&lt;/h3&gt; 
&lt;p&gt;Doing nothing with a caught error doesn‚Äôt give you the ability to ever fix or react to said error. Logging the error to the console (&lt;code&gt;console.log&lt;/code&gt;) isn‚Äôt much better as often times it can get lost in a sea of things printed to the console. If you wrap any bit of code in a &lt;code&gt;try/catch&lt;/code&gt; it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  functionThatMightThrow();
} catch (error) {
  console.log(error);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  functionThatMightThrow();
} catch (error) {
  // One option (more noisy than console.log):
  console.error(error);
  // Another option:
  notifyUserOfError(error);
  // Another option:
  reportErrorToService(error);
  // OR do all three!
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Don‚Äôt ignore rejected promises&lt;/h3&gt; 
&lt;p&gt;For the same reason you shouldn‚Äôt ignore caught errors from &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getdata()
  .then(data =&amp;gt; {
    functionThatMightThrow(data);
  })
  .catch(error =&amp;gt; {
    console.log(error);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getdata()
  .then(data =&amp;gt; {
    functionThatMightThrow(data);
  })
  .catch(error =&amp;gt; {
    // One option (more noisy than console.log):
    console.error(error);
    // Another option:
    notifyUserOfError(error);
    // Another option:
    reportErrorToService(error);
    // OR do all three!
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Formatting is subjective. Like many rules herein, there is no hard and fast rule that you must follow. The main point is DO NOT ARGUE over formatting. There are &lt;a href=&quot;https://standardjs.com/rules.html&quot;&gt;tons of tools&lt;/a&gt; to automate this. Use one! It‚Äôs a waste of time and money for engineers to argue over formatting.&lt;/p&gt; 
&lt;p&gt;For things that don‚Äôt fall under the purview of automatic formatting (indentation, tabs vs. spaces, double vs. single quotes, etc.) look here for some guidance.&lt;/p&gt; 
&lt;h3&gt;Use consistent capitalization&lt;/h3&gt; 
&lt;p&gt;JavaScript is untyped, so capitalization tells you a lot about your variables, functions, etc. These rules are subjective, so your team can choose whatever they want. The point is, no matter what you all choose, just be consistent.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const DAYS_IN_WEEK = 7;
const daysInMonth = 30;

const songs = [&quot;Back In Black&quot;, &quot;Stairway to Heaven&quot;, &quot;Hey Jude&quot;];
const Artists = [&quot;ACDC&quot;, &quot;Led Zeppelin&quot;, &quot;The Beatles&quot;];

function eraseDatabase() {}
function restore_database() {}

class animal {}
class Alpaca {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const DAYS_IN_WEEK = 7;
const DAYS_IN_MONTH = 30;

const SONGS = [&quot;Back In Black&quot;, &quot;Stairway to Heaven&quot;, &quot;Hey Jude&quot;];
const ARTISTS = [&quot;ACDC&quot;, &quot;Led Zeppelin&quot;, &quot;The Beatles&quot;];

function eraseDatabase() {}
function restoreDatabase() {}

class Animal {}
class Alpaca {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Function callers and callees should be close&lt;/h3&gt; 
&lt;p&gt;If a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class PerformanceReview {
  constructor(employee) {
    this.employee = employee;
  }

  lookupPeers() {
    return db.lookup(this.employee, &quot;peers&quot;);
  }

  lookupManager() {
    return db.lookup(this.employee, &quot;manager&quot;);
  }

  getPeerReviews() {
    const peers = this.lookupPeers();
    // ...
  }

  perfReview() {
    this.getPeerReviews();
    this.getManagerReview();
    this.getSelfReview();
  }

  getManagerReview() {
    const manager = this.lookupManager();
  }

  getSelfReview() {
    // ...
  }
}

const review = new PerformanceReview(employee);
review.perfReview();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class PerformanceReview {
  constructor(employee) {
    this.employee = employee;
  }

  perfReview() {
    this.getPeerReviews();
    this.getManagerReview();
    this.getSelfReview();
  }

  getPeerReviews() {
    const peers = this.lookupPeers();
    // ...
  }

  lookupPeers() {
    return db.lookup(this.employee, &quot;peers&quot;);
  }

  getManagerReview() {
    const manager = this.lookupManager();
  }

  lookupManager() {
    return db.lookup(this.employee, &quot;manager&quot;);
  }

  getSelfReview() {
    // ...
  }
}

const review = new PerformanceReview(employee);
review.perfReview();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Only comment things that have business logic complexity.&lt;/h3&gt; 
&lt;p&gt;Comments are an apology, not a requirement. Good code &lt;em&gt;mostly&lt;/em&gt; documents itself.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hashIt(data) {
  // The hash
  let hash = 0;

  // Length of string
  const length = data.length;

  // Loop through every character in data
  for (let i = 0; i &amp;lt; length; i++) {
    // Get character code.
    const char = data.charCodeAt(i);
    // Make the hash
    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;
    // Convert to 32-bit integer
    hash &amp;amp;= hash;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hashIt(data) {
  let hash = 0;
  const length = data.length;

  for (let i = 0; i &amp;lt; length; i++) {
    const char = data.charCodeAt(i);
    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;

    // Convert to 32-bit integer
    hash &amp;amp;= hash;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don‚Äôt leave commented out code in your codebase&lt;/h3&gt; 
&lt;p&gt;Version control exists for a reason. Leave old code in your history.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;doStuff();
// doOtherStuff();
// doSomeMoreStuff();
// doSoMuchStuff();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;doStuff();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don‚Äôt have journal comments&lt;/h3&gt; 
&lt;p&gt;Remember, use version control! There‚Äôs no need for dead code, commented code, and especially journal comments. Use &lt;code&gt;git log&lt;/code&gt; to get history!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;/**
 * 2016-12-20: Removed monads, didn&#39;t understand them (RM)
 * 2016-10-01: Improved using special monads (JP)
 * 2016-02-03: Removed type-checking (LI)
 * 2015-03-14: Added combine with type-checking (JR)
 */
function combine(a, b) {
  return a + b;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function combine(a, b) {
  return a + b;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid positional markers&lt;/h3&gt; 
&lt;p&gt;They usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;////////////////////////////////////////////////////////////////////////////////
// Scope Model Instantiation
////////////////////////////////////////////////////////////////////////////////
$scope.model = {
  menu: &quot;foo&quot;,
  nav: &quot;bar&quot;
};

////////////////////////////////////////////////////////////////////////////////
// Action setup
////////////////////////////////////////////////////////////////////////////////
const actions = function() {
  // ...
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$scope.model = {
  menu: &quot;foo&quot;,
  nav: &quot;bar&quot;
};

const actions = function() {
  // ...
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Translation&lt;/h2&gt; 
&lt;p&gt;This is also available in other languages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Armenia.png&quot; alt=&quot;am&quot;&gt; &lt;strong&gt;Armenian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/hanumanum/clean-code-javascript&quot;&gt;hanumanum/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bangladesh.png&quot; alt=&quot;bd&quot;&gt; &lt;strong&gt;Bangla(‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)&lt;/strong&gt;: &lt;a href=&quot;https://github.com/InsomniacSabbir/clean-code-javascript/&quot;&gt;InsomniacSabbir/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png&quot; alt=&quot;br&quot;&gt; &lt;strong&gt;Brazilian Portuguese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/fesnt/clean-code-javascript&quot;&gt;fesnt/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png&quot; alt=&quot;cn&quot;&gt; &lt;strong&gt;Simplified Chinese&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/alivebao/clean-code-js&quot;&gt;alivebao/clean-code-js&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/beginor/clean-code-javascript&quot;&gt;beginor/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png&quot; alt=&quot;tw&quot;&gt; &lt;strong&gt;Traditional Chinese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/AllJointTW/clean-code-javascript&quot;&gt;AllJointTW/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png&quot; alt=&quot;fr&quot;&gt; &lt;strong&gt;French&lt;/strong&gt;: &lt;a href=&quot;https://github.com/GavBaros/clean-code-javascript-fr&quot;&gt;GavBaros/clean-code-javascript-fr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png&quot; alt=&quot;de&quot;&gt; &lt;strong&gt;German&lt;/strong&gt;: &lt;a href=&quot;https://github.com/marcbruederlin/clean-code-javascript&quot;&gt;marcbruederlin/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Indonesia.png&quot; alt=&quot;id&quot;&gt; &lt;strong&gt;Indonesia&lt;/strong&gt;: &lt;a href=&quot;https://github.com/andirkh/clean-code-javascript/&quot;&gt;andirkh/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png&quot; alt=&quot;it&quot;&gt; &lt;strong&gt;Italian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/frappacchio/clean-code-javascript/&quot;&gt;frappacchio/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png&quot; alt=&quot;ja&quot;&gt; &lt;strong&gt;Japanese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mitsuruog/clean-code-javascript/&quot;&gt;mitsuruog/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png&quot; alt=&quot;kr&quot;&gt; &lt;strong&gt;Korean&lt;/strong&gt;: &lt;a href=&quot;https://github.com/qkraudghgh/clean-code-javascript-ko&quot;&gt;qkraudghgh/clean-code-javascript-ko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png&quot; alt=&quot;pl&quot;&gt; &lt;strong&gt;Polish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/greg-dev/clean-code-javascript-pl&quot;&gt;greg-dev/clean-code-javascript-pl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png&quot; alt=&quot;ru&quot;&gt; &lt;strong&gt;Russian&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/BoryaMogila/clean-code-javascript-ru/&quot;&gt;BoryaMogila/clean-code-javascript-ru/&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/maksugr/clean-code-javascript&quot;&gt;maksugr/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png&quot; alt=&quot;es&quot;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/tureey/clean-code-javascript&quot;&gt;tureey/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Uruguay.png&quot; alt=&quot;es&quot;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/andersontr15/clean-code-javascript-es&quot;&gt;andersontr15/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Serbia.png&quot; alt=&quot;rs&quot;&gt; &lt;strong&gt;Serbian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/doskovicmilos/clean-code-javascript&quot;&gt;doskovicmilos/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Turkey.png&quot; alt=&quot;tr&quot;&gt; &lt;strong&gt;Turkish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/bsonmez/clean-code-javascript/tree/turkish-translation&quot;&gt;bsonmez/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Ukraine.png&quot; alt=&quot;ua&quot;&gt; &lt;strong&gt;Ukrainian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mindfr1k/clean-code-javascript-ua&quot;&gt;mindfr1k/clean-code-javascript-ua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png&quot; alt=&quot;vi&quot;&gt; &lt;strong&gt;Vietnamese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/hienvd/clean-code-javascript/&quot;&gt;hienvd/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>conventional-changelog/standard-version</title>
      <link>https://github.com/conventional-changelog/standard-version</link>
      <description>&lt;p&gt;üèÜ Automate versioning and CHANGELOG generation, with semver.org and conventionalcommits.org&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Standard Version&lt;/h1&gt; 
&lt;p&gt;A utility for versioning using &lt;a href=&quot;https://semver.org/&quot;&gt;semver&lt;/a&gt; and CHANGELOG generation powered by &lt;a href=&quot;https://conventionalcommits.org&quot;&gt;Conventional Commits&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/conventional-changelog/standard-version/workflows/ci/badge.svg?sanitize=true&quot; alt=&quot;ci&quot;&gt; &lt;a href=&quot;https://www.npmjs.com/package/standard-version&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/standard-version.svg?sanitize=true&quot; alt=&quot;NPM version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/conventional-changelog/standard-version&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/conventional-changelog/standard-version/branch/master/graph/badge.svg?token=J7zMN7vTTd&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://conventionalcommits.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg?sanitize=true&quot; alt=&quot;Conventional Commits&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://devtoolscommunity.herokuapp.com&quot;&gt;&lt;img src=&quot;http://devtoolscommunity.herokuapp.com/badge.svg?sanitize=true&quot; alt=&quot;Community slack&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Having problems? Want to contribute? Join us on the &lt;a href=&quot;http://devtoolscommunity.herokuapp.com&quot;&gt;node-tooling community Slack&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;How It Works:&lt;/em&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Follow the &lt;a href=&quot;https://conventionalcommits.org&quot;&gt;Conventional Commits Specification&lt;/a&gt; in your repository.&lt;/li&gt; 
 &lt;li&gt;When you‚Äôre ready to release, run &lt;code&gt;standard-version&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;code&gt;standard-version&lt;/code&gt; will then do the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Retrieve the current version of your repository by looking at &lt;code&gt;packageFiles&lt;/code&gt;&lt;a href=&quot;https://raw.githubusercontent.com/conventional-changelog/standard-version/master/#bumpfiles-packagefiles-and-updaters&quot;&gt;[1]&lt;/a&gt;, falling back to the last &lt;code&gt;git tag&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;bump&lt;/code&gt; the version in &lt;code&gt;bumpFiles&lt;/code&gt;&lt;a href=&quot;https://raw.githubusercontent.com/conventional-changelog/standard-version/master/#bumpfiles-packagefiles-and-updaters&quot;&gt;[1]&lt;/a&gt; based on your commits.&lt;/li&gt; 
 &lt;li&gt;Generates a &lt;code&gt;changelog&lt;/code&gt; based on your commits (uses &lt;a href=&quot;https://github.com/conventional-changelog/conventional-changelog&quot;&gt;conventional-changelog&lt;/a&gt; under the hood).&lt;/li&gt; 
 &lt;li&gt;Creates a new &lt;code&gt;commit&lt;/code&gt; including your &lt;code&gt;bumpFiles&lt;/code&gt;&lt;a href=&quot;https://raw.githubusercontent.com/conventional-changelog/standard-version/master/#bumpfiles-packagefiles-and-updaters&quot;&gt;[1]&lt;/a&gt; and updated CHANGELOG.&lt;/li&gt; 
 &lt;li&gt;Creates a new &lt;code&gt;tag&lt;/code&gt; with the new version number.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;&lt;code&gt;bumpFiles&lt;/code&gt;, &lt;code&gt;packageFiles&lt;/code&gt; and &lt;code&gt;updaters&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;standard-version&lt;/code&gt; uses a few key concepts for handling version bumping in your project.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;packageFiles&lt;/code&gt;&lt;/strong&gt; ‚Äì User-defined files where versions can be read from &lt;em&gt;and&lt;/em&gt; be ‚Äúbumped‚Äù. 
  &lt;ul&gt; 
   &lt;li&gt;Examples: &lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;manifest.json&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;In most cases (including the default), &lt;code&gt;packageFiles&lt;/code&gt; are a subset of &lt;code&gt;bumpFiles&lt;/code&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;bumpFiles&lt;/code&gt;&lt;/strong&gt; ‚Äì&amp;nbsp;User-defined files where versions should be ‚Äúbumped‚Äù, but not explicitly read from. 
  &lt;ul&gt; 
   &lt;li&gt;Examples: &lt;code&gt;package-lock.json&lt;/code&gt;, &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;code&gt;updaters&lt;/code&gt;&lt;/strong&gt; ‚Äì&amp;nbsp;Simple modules used for reading &lt;code&gt;packageFiles&lt;/code&gt; and writing to &lt;code&gt;bumpFiles&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;By default, &lt;code&gt;standard-version&lt;/code&gt; assumes you‚Äôre working in a NodeJS based project‚Ä¶ because of this, for the majority of projects you might never need to interact with these options.&lt;/p&gt; 
&lt;p&gt;That said, if you find your self asking &lt;a href=&quot;https://raw.githubusercontent.com/conventional-changelog/standard-version/master/#can-i-use-standard-version-for-additional-metadata-files-languages-or-version-files&quot;&gt;How can I use standard-version for additional metadata files, languages or version files?&lt;/a&gt; ‚Äì these configuration options will help!&lt;/p&gt; 
&lt;h2&gt;Installing &lt;code&gt;standard-version&lt;/code&gt;&lt;/h2&gt; 
&lt;h3&gt;As a local &lt;code&gt;npm run&lt;/code&gt; script&lt;/h3&gt; 
&lt;p&gt;Install and add to &lt;code&gt;devDependencies&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm i --save-dev standard-version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add an &lt;a href=&quot;https://docs.npmjs.com/cli/run-script&quot;&gt;&lt;code&gt;npm run&lt;/code&gt; script&lt;/a&gt; to your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;scripts&quot;: {
    &quot;release&quot;: &quot;standard-version&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can use &lt;code&gt;npm run release&lt;/code&gt; in place of &lt;code&gt;npm version&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This has the benefit of making your repo/package more portable, so that other developers can cut releases without having to globally install &lt;code&gt;standard-version&lt;/code&gt; on their machine.&lt;/p&gt; 
&lt;h3&gt;As global &lt;code&gt;bin&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Install globally (add to your &lt;code&gt;PATH&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm i -g standard-version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you can use &lt;code&gt;standard-version&lt;/code&gt; in place of &lt;code&gt;npm version&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This has the benefit of allowing you to use &lt;code&gt;standard-version&lt;/code&gt; on any repo/package without adding a dev dependency to each one.&lt;/p&gt; 
&lt;h3&gt;Using &lt;code&gt;npx&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;As of &lt;code&gt;npm@5.2.0&lt;/code&gt;, &lt;code&gt;npx&lt;/code&gt; is installed alongside &lt;code&gt;npm&lt;/code&gt;. Using &lt;code&gt;npx&lt;/code&gt; you can use &lt;code&gt;standard-version&lt;/code&gt; without having to keep a &lt;code&gt;package.json&lt;/code&gt; file by running: &lt;code&gt;npx standard-version&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This method is especially useful when using &lt;code&gt;standard-version&lt;/code&gt; in non-JavaScript projects.&lt;/p&gt; 
&lt;h2&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;You can configure &lt;code&gt;standard-version&lt;/code&gt; either by:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Placing a &lt;code&gt;standard-version&lt;/code&gt; stanza in your &lt;code&gt;package.json&lt;/code&gt; (assuming your project is JavaScript).&lt;/li&gt; 
 &lt;li&gt;Creating a &lt;code&gt;.versionrc&lt;/code&gt;, &lt;code&gt;.versionrc.json&lt;/code&gt; or &lt;code&gt;.versionrc.js&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you are using a &lt;code&gt;.versionrc.js&lt;/code&gt; your default export must be a configuration object, or a function returning a configuration object.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Any of the command line parameters accepted by &lt;code&gt;standard-version&lt;/code&gt; can instead be provided via configuration. Please refer to the &lt;a href=&quot;https://github.com/conventional-changelog/conventional-changelog-config-spec/&quot;&gt;conventional-changelog-config-spec&lt;/a&gt; for details on available configuration options.&lt;/p&gt; 
&lt;h3&gt;Customizing CHANGELOG Generation&lt;/h3&gt; 
&lt;p&gt;By default (as of &lt;code&gt;6.0.0&lt;/code&gt;), &lt;code&gt;standard-version&lt;/code&gt; uses the &lt;a href=&quot;https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-conventionalcommits&quot;&gt;conventionalcommits preset&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This preset:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Adheres closely to the &lt;a href=&quot;https://www.conventionalcommits.org&quot;&gt;conventionalcommits.org&lt;/a&gt; specification.&lt;/li&gt; 
 &lt;li&gt;Is highly configurable, following the configuration specification &lt;a href=&quot;https://github.com/conventional-changelog/conventional-changelog-config-spec&quot;&gt;maintained here&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;em&gt;We‚Äôve documented these config settings as a recommendation to other tooling makers.&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are a variety of dials and knobs you can turn related to CHANGELOG generation.&lt;/p&gt; 
&lt;p&gt;As an example, suppose you‚Äôre using GitLab, rather than GitHub, you might modify the following variables:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;commitUrlFormat&lt;/code&gt;: the URL format of commit SHAs detected in commit messages.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;compareUrlFormat&lt;/code&gt;: the URL format used to compare two tags.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;issueUrlFormat&lt;/code&gt;: the URL format used to link to issues.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Making these URLs match GitLab‚Äôs format, rather than GitHub‚Äôs.&lt;/p&gt; 
&lt;h2&gt;CLI Usage&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; To pass nested configurations to the CLI without defining them in the &lt;code&gt;package.json&lt;/code&gt; use dot notation as the parameters &lt;code&gt;e.g. --skip.changelog&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;First Release&lt;/h3&gt; 
&lt;p&gt;To generate your changelog for your first release, simply do:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# npm run script
npm run release -- --first-release
# global bin
standard-version --first-release
# npx
npx standard-version --first-release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will tag a release &lt;strong&gt;without bumping the version &lt;code&gt;bumpFiles&lt;/code&gt;&lt;a href=&quot;&quot;&gt;1&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;When you are ready, push the git tag and &lt;code&gt;npm publish&lt;/code&gt; your first release. \o/&lt;/p&gt; 
&lt;h3&gt;Cutting Releases&lt;/h3&gt; 
&lt;p&gt;If you typically use &lt;code&gt;npm version&lt;/code&gt; to cut a new release, do this instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# npm run script
npm run release
# or global bin
standard-version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As long as your git commit messages are conventional and accurate, you no longer need to specify the semver type - and you get CHANGELOG generation for free! \o/&lt;/p&gt; 
&lt;p&gt;After you cut a release, you can push the new git tag and &lt;code&gt;npm publish&lt;/code&gt; (or &lt;code&gt;npm publish --tag next&lt;/code&gt;) when you‚Äôre ready.&lt;/p&gt; 
&lt;h3&gt;Release as a Pre-Release&lt;/h3&gt; 
&lt;p&gt;Use the flag &lt;code&gt;--prerelease&lt;/code&gt; to generate pre-releases:&lt;/p&gt; 
&lt;p&gt;Suppose the last version of your code is &lt;code&gt;1.0.0&lt;/code&gt;, and your code to be committed has patched changes. Run:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# npm run script
npm run release -- --prerelease
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will tag your version as: &lt;code&gt;1.0.1-0&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to name the pre-release, you specify the name via &lt;code&gt;--prerelease &amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For example, suppose your pre-release should contain the &lt;code&gt;alpha&lt;/code&gt; prefix:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# npm run script
npm run release -- --prerelease alpha
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will tag the version as: &lt;code&gt;1.0.1-alpha.0&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Release as a Target Type Imperatively (&lt;code&gt;npm version&lt;/code&gt;-like)&lt;/h3&gt; 
&lt;p&gt;To forgo the automated version bump use &lt;code&gt;--release-as&lt;/code&gt; with the argument &lt;code&gt;major&lt;/code&gt;, &lt;code&gt;minor&lt;/code&gt; or &lt;code&gt;patch&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Suppose the last version of your code is &lt;code&gt;1.0.0&lt;/code&gt;, you‚Äôve only landed &lt;code&gt;fix:&lt;/code&gt; commits, but you would like your next release to be a &lt;code&gt;minor&lt;/code&gt;. Simply run the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# npm run script
npm run release -- --release-as minor
# Or
npm run release -- --release-as 1.1.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You will get version &lt;code&gt;1.1.0&lt;/code&gt; rather than what would be the auto-generated version &lt;code&gt;1.0.1&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; you can combine &lt;code&gt;--release-as&lt;/code&gt; and &lt;code&gt;--prerelease&lt;/code&gt; to generate a release. This is useful when publishing experimental feature(s).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Prevent Git Hooks&lt;/h3&gt; 
&lt;p&gt;If you use git hooks, like pre-commit, to test your code before committing, you can prevent hooks from being verified during the commit step by passing the &lt;code&gt;--no-verify&lt;/code&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# npm run script
npm run release -- --no-verify
# or global bin
standard-version --no-verify
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Signing Commits and Tags&lt;/h3&gt; 
&lt;p&gt;If you have your GPG key set up, add the &lt;code&gt;--sign&lt;/code&gt; or &lt;code&gt;-s&lt;/code&gt; flag to your &lt;code&gt;standard-version&lt;/code&gt; command.&lt;/p&gt; 
&lt;h3&gt;Lifecycle Scripts&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;standard-version&lt;/code&gt; supports lifecycle scripts. These allow you to execute your own supplementary commands during the release. The following hooks are available and execute in the order documented:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;prerelease&lt;/code&gt;: executed before anything happens. If the &lt;code&gt;prerelease&lt;/code&gt; script returns a non-zero exit code, versioning will be aborted, but it has no other effect on the process.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prebump&lt;/code&gt;/&lt;code&gt;postbump&lt;/code&gt;: executed before and after the version is bumped. If the &lt;code&gt;prebump&lt;/code&gt; script returns a version #, it will be used rather than the version calculated by &lt;code&gt;standard-version&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;prechangelog&lt;/code&gt;/&lt;code&gt;postchangelog&lt;/code&gt;: executes before and after the CHANGELOG is generated.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;precommit&lt;/code&gt;/&lt;code&gt;postcommit&lt;/code&gt;: called before and after the commit step.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pretag&lt;/code&gt;/&lt;code&gt;posttag&lt;/code&gt;: called before and after the tagging step.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Simply add the following to your package.json to configure lifecycle scripts:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;standard-version&quot;: {
    &quot;scripts&quot;: {
      &quot;prebump&quot;: &quot;echo 9.9.9&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As an example to change from using GitHub to track your items to using your projects Jira use a &lt;code&gt;postchangelog&lt;/code&gt; script to replace the url fragment containing ‚Äòhttps://github.com/&lt;code&gt;myproject&lt;/code&gt;/issues/‚Äô with a link to your Jira - assuming you have already installed &lt;a href=&quot;https://www.npmjs.com/package/replace&quot;&gt;replace&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;standard-version&quot;: {
    &quot;scripts&quot;: {
      &quot;postchangelog&quot;: &quot;replace &#39;https://github.com/myproject/issues/&#39; &#39;https://myjira/browse/&#39; CHANGELOG.md&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Skipping Lifecycle Steps&lt;/h3&gt; 
&lt;p&gt;You can skip any of the lifecycle steps (&lt;code&gt;bump&lt;/code&gt;, &lt;code&gt;changelog&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;), by adding the following to your package.json:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;standard-version&quot;: {
    &quot;skip&quot;: {
      &quot;changelog&quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Committing Generated Artifacts in the Release Commit&lt;/h3&gt; 
&lt;p&gt;If you want to commit generated artifacts in the release commit, you can use the &lt;code&gt;--commit-all&lt;/code&gt; or &lt;code&gt;-a&lt;/code&gt; flag. You will need to stage the artifacts you want to commit, so your &lt;code&gt;release&lt;/code&gt; command could look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;standard-version&quot;: {
    &quot;scripts&quot;: {
      &quot;prerelease&quot;: &quot;webpack -p --bail &amp;amp;&amp;amp; git add &amp;lt;file(s) to commit&amp;gt;&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;scripts&quot;: {
    &quot;release&quot;: &quot;standard-version -a&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Dry Run Mode&lt;/h3&gt; 
&lt;p&gt;running &lt;code&gt;standard-version&lt;/code&gt; with the flag &lt;code&gt;--dry-run&lt;/code&gt; allows you to see what commands would be run, without committing to git or updating files.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# npm run script
npm run release -- --dry-run
# or global bin
standard-version --dry-run
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Prefix Tags&lt;/h3&gt; 
&lt;p&gt;Tags are prefixed with &lt;code&gt;v&lt;/code&gt; by default. If you would like to prefix your tags with something else, you can do so with the &lt;code&gt;-t&lt;/code&gt; flag.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;standard-version -t @scope/package\@
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will prefix your tags to look something like &lt;code&gt;@scope/package@2.0.0&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;If you do not want to have any tag prefix you can use the &lt;code&gt;-t&lt;/code&gt; flag and provide it with an &lt;strong&gt;empty string&lt;/strong&gt; as value.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: simply -t or ‚Äìtag-prefix without any value will fallback to the default ‚Äòv‚Äô&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;CLI Help&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# npm run script
npm run release -- --help
# or global bin
standard-version --help
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Code Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const standardVersion = require(&#39;standard-version&#39;)

// Options are the same as command line, except camelCase
// standardVersion returns a Promise
standardVersion({
  noVerify: true,
  infile: &#39;docs/CHANGELOG.md&#39;,
  silent: true
}).then(() =&amp;gt; {
  // standard-version is done
}).catch(err =&amp;gt; {
    console.error(`standard-version failed with message: ${err.message}`)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;TIP: Use the &lt;code&gt;silent&lt;/code&gt; option to prevent &lt;code&gt;standard-version&lt;/code&gt; from printing to the &lt;code&gt;console&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;h3&gt;How is &lt;code&gt;standard-version&lt;/code&gt; different from &lt;code&gt;semantic-release&lt;/code&gt;?&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/semantic-release/semantic-release&quot;&gt;&lt;code&gt;semantic-release&lt;/code&gt;&lt;/a&gt; is described as:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;semantic-release automates the whole package release workflow including: determining the next version number, generating the release notes and publishing the package.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;While both are based on the same foundation of structured commit messages, &lt;code&gt;standard-version&lt;/code&gt; takes a different approach by handling versioning, changelog generation, and git tagging for you &lt;strong&gt;without&lt;/strong&gt; automatic pushing (to GitHub) or publishing (to an npm registry). Use of &lt;code&gt;standard-version&lt;/code&gt; only affects your local git repo - it doesn‚Äôt affect remote resources at all. After you run &lt;code&gt;standard-version&lt;/code&gt;, you can review your release state, correct mistakes and follow the release strategy that makes the most sense for your codebase.&lt;/p&gt; 
&lt;p&gt;We think they are both fantastic tools, and we encourage folks to use &lt;code&gt;semantic-release&lt;/code&gt; instead of &lt;code&gt;standard-version&lt;/code&gt; if it makes sense for their use-case.&lt;/p&gt; 
&lt;h3&gt;Should I always squash commits when merging PRs?&lt;/h3&gt; 
&lt;p&gt;The instructions to squash commits when merging pull requests assumes that &lt;strong&gt;one PR equals, at most, one feature or fix&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;If you have multiple features or fixes landing in a single PR and each commit uses a structured message, then you can do a standard merge when accepting the PR. This will preserve the commit history from your branch after the merge.&lt;/p&gt; 
&lt;p&gt;Although this will allow each commit to be included as separate entries in your CHANGELOG, the entries will &lt;strong&gt;not&lt;/strong&gt; be able to reference the PR that pulled the changes in because the preserved commit messages do not include the PR number.&lt;/p&gt; 
&lt;p&gt;For this reason, we recommend keeping the scope of each PR to one general feature or fix. In practice, this allows you to use unstructured commit messages when committing each little change and then squash them into a single commit with a structured message (referencing the PR number) once they have been reviewed and accepted.&lt;/p&gt; 
&lt;h3&gt;Can I use &lt;code&gt;standard-version&lt;/code&gt; for additional metadata files, languages or version files?&lt;/h3&gt; 
&lt;p&gt;As of version &lt;code&gt;7.1.0&lt;/code&gt; you can configure multiple &lt;code&gt;bumpFiles&lt;/code&gt; and &lt;code&gt;packageFiles&lt;/code&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Specify a custom &lt;code&gt;bumpFile&lt;/code&gt; ‚Äú&lt;code&gt;filename&lt;/code&gt;‚Äù, this is the path to the file you want to ‚Äúbump‚Äù&lt;/li&gt; 
 &lt;li&gt;Specify the &lt;code&gt;bumpFile&lt;/code&gt; ‚Äú&lt;code&gt;updater&lt;/code&gt;‚Äù, this is &lt;em&gt;how&lt;/em&gt; the file will be bumped. a. If you‚Äôre using a common type, you can use one of &lt;code&gt;standard-version&lt;/code&gt;‚Äôs built-in &lt;code&gt;updaters&lt;/code&gt; by specifying a &lt;code&gt;type&lt;/code&gt;. b. If your using an less-common version file, you can create your own &lt;code&gt;updater&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .versionrc
{
  &quot;bumpFiles&quot;: [
    {
      &quot;filename&quot;: &quot;MY_VERSION_TRACKER.txt&quot;,
      // The `plain-text` updater assumes the file contents represents the version.
      &quot;type&quot;: &quot;plain-text&quot;
    },
    {
      &quot;filename&quot;: &quot;a/deep/package/dot/json/file/package.json&quot;,
      // The `json` updater assumes the version is available under a `version` key in the provided JSON document.
      &quot;type&quot;: &quot;json&quot;
    },
    {
      &quot;filename&quot;: &quot;VERSION_TRACKER.json&quot;,
      //  See &quot;Custom `updater`s&quot; for more details.
      &quot;updater&quot;: &quot;standard-version-updater.js&quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If using &lt;code&gt;.versionrc.js&lt;/code&gt; as your configuration file, the &lt;code&gt;updater&lt;/code&gt; may also be set as an object, rather than a path:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .versionrc.js
const tracker = {
  filename: &#39;VERSION_TRACKER.json&#39;,
  updater: require(&#39;./path/to/custom-version-updater&#39;)
}

module.exports = {
  bumpFiles: [tracker],
  packageFiles: [tracker]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Custom &lt;code&gt;updater&lt;/code&gt;s&lt;/h4&gt; 
&lt;p&gt;An &lt;code&gt;updater&lt;/code&gt; is expected to be a Javascript module with &lt;em&gt;atleast&lt;/em&gt; two methods exposed: &lt;code&gt;readVersion&lt;/code&gt; and &lt;code&gt;writeVersion&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;&lt;code&gt;readVersion(contents = string): string&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;This method is used to read the version from the provided file contents.&lt;/p&gt; 
&lt;p&gt;The return value is expected to be a semantic version string.&lt;/p&gt; 
&lt;h5&gt;&lt;code&gt;writeVersion(contents = string, version: string): string&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;This method is used to write the version to the provided contents.&lt;/p&gt; 
&lt;p&gt;The return value will be written directly (overwrite) to the provided file.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Let‚Äôs assume our &lt;code&gt;VERSION_TRACKER.json&lt;/code&gt; has the following contents:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;tracker&quot;: {
    &quot;package&quot;: {
      &quot;version&quot;: &quot;1.0.0&quot;
    }
  }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;An acceptable &lt;code&gt;standard-version-updater.js&lt;/code&gt; would be:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// standard-version-updater.js
const stringifyPackage = require(&#39;stringify-package&#39;)
const detectIndent = require(&#39;detect-indent&#39;)
const detectNewline = require(&#39;detect-newline&#39;)

module.exports.readVersion = function (contents) {
  return JSON.parse(contents).tracker.package.version;
}

module.exports.writeVersion = function (contents, version) {
  const json = JSON.parse(contents)
  let indent = detectIndent(contents).indent
  let newline = detectNewline(contents)
  json.tracker.package.version = version
  return stringifyPackage(json, indent, newline)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;ISC&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>asciidwango/js-primer</title>
      <link>https://github.com/asciidwango/js-primer</link>
      <description>&lt;p&gt;üìñ JavaScript Primer - Ëø∑„Çè„Å™„ÅÑ„Åü„ÇÅ„ÅÆÂÖ•ÈñÄÊõ∏&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Primer &lt;a href=&quot;https://github.com/asciidwango/js-primer/actions?query=workflow%3A%22test%22&quot;&gt;&lt;img src=&quot;https://github.com/asciidwango/js-primer/workflows/test/badge.svg?sanitize=true&quot; alt=&quot;Actions Status&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;„Åì„ÅÆÊõ∏Á±ç„ÅØECMAScript 2015‰ª•Èôç„Çí„Éô„Éº„Çπ„Å®„Åó„ÅüJavaScript„ÅÆÂÖ•ÈñÄÊõ∏„Åß„Åô„ÄÇ&lt;/p&gt; 
&lt;p&gt;„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Çí„ÇÑ„Å£„Åü„Åì„Å®„Åå„ÅÇ„Çã„Åå„ÄÅ‰ªä„ÅÆJavaScript„Åå„Çà„Åè„Çè„Åã„Çâ„Å™„ÅÑ„Å®„ÅÑ„ÅÜ‰∫∫„Åå„ÄÅ ‰ªä„ÅÆJavaScript„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíË™≠„ÅøÊõ∏„Åç„Åß„Åç„Çã„Çà„ÅÜ„Å´„Å™„ÇãÁõÆÁöÑ„ÅÆÊõ∏Á±ç„Åß„Åô„ÄÇ&lt;/p&gt; 
&lt;p&gt;„Ç¶„Çß„ÉñÁâà„ÅØÊ¨°„ÅÆURL„Åã„ÇâÈñ≤Ë¶ß„Åß„Åç„Åæ„Åô„ÄÇ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;„Ç¶„Çß„ÉñÁâà: &lt;a href=&quot;https://jsprimer.net/&quot;&gt;https://jsprimer.net/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Êõ∏Á±çÁâà„ÅØÊ¨°„ÅÆ„Éö„Éº„Ç∏„Åã„ÇâË≥ºÂÖ•„Åß„Åç„Åæ„Åô„ÄÇ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Áâ©ÁêÜÊõ∏Á±ç„Å®Kindle: &lt;a href=&quot;https://www.amazon.co.jp/dp/4048930737/&quot;&gt;JavaScript Primer Ëø∑„Çè„Å™„ÅÑ„Åü„ÇÅ„ÅÆÂÖ•ÈñÄÊõ∏ | azu, Suguru Inatomi |Êú¨ | ÈÄöË≤© | Amazon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;PDF„Å®epub: &lt;a href=&quot;https://tatsu-zine.com/books/javascript-primer&quot;&gt;JavaScript Primer Ëø∑„Çè„Å™„ÅÑ„Åü„ÇÅ„ÅÆÂÖ•ÈñÄÊõ∏„ÄêÂßîË®ó„Äë - ÈÅî‰∫∫Âá∫Áâà‰ºö&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;„Ç¶„Çß„ÉñÁâà„Å®Êõ∏Á±çÁâà„ÅÆÂÜÖÂÆπ„ÅØÂü∫Êú¨ÁöÑ„Å´„ÅØÂêå„Åò„Åß„Åô„ÄÇ Ë©≥Á¥∞„ÅØ&lt;a href=&quot;https://jsprimer.net/intro/#diff-with-print-version&quot;&gt;„Ç¶„Çß„ÉñÁâà„Å®Êõ∏Á±çÁâà„ÅÆÈÅï„ÅÑ&lt;/a&gt;„ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ&lt;/p&gt; 
&lt;p&gt;Twitter„ÅÆ„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞„ÅØ &lt;a href=&quot;https://twitter.com/intent/tweet?hashtags=jsprimer&quot;&gt;#jsprimer&lt;/a&gt; „Åß„Åô„ÄÇ&lt;/p&gt; 
&lt;h2&gt;:warning: Status :warning:&lt;/h2&gt; 
&lt;p&gt;„Åì„ÅÆÊõ∏Á±ç„ÅØÈñãÁô∫‰∏≠„ÅÆÂÜÖÂÆπ„Å®„Å™„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ&lt;/p&gt; 
&lt;p&gt;„Å©„ÅÆ„Çà„ÅÜ„Å™ÁµåÁ∑Ø„ÅßÂãï„ÅÑ„Å¶„ÅÑ„Çã„Åã„ÅØ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„Éé„Éº„Éà„ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/asciidwango/js-primer/tree/master/meetings&quot; title=&quot;Meeting Notes&quot;&gt;Meeting Notes&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;„É™„Éù„Ç∏„Éà„É™„ÅÆÊõ¥Êñ∞„ÇíËøΩ„ÅÑ„Åü„ÅÑÊñπ„ÅØ„É™„Éù„Ç∏„Éà„É™„ÇíWatch„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/asciidwango/js-primer/watchers&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/asciidwango/js-primer/master/source/landing/img/repo-actions-watch.png&quot; alt=&quot;Watch button&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;„Åæ„Åü„ÄÅ‰∏ãË®ò„Éï„Ç©„Éº„É†„Åã„Çâ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÁôªÈå≤„Åó„Å¶„Åä„Åè„Å®Êõ¥Êñ∞ÊÉÖÂ†±„ÇíÂèó„ÅëÂèñ„Çå„Åæ„Åô„ÄÇ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://eepurl.com/b674IX&quot;&gt;Êõ¥Êñ∞ÈÄöÁü•„ÇíÂèó„ÅëÂèñ„Çã„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÁôªÈå≤„Åô„Çã„Éï„Ç©„Éº„É†&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Node.js 14.15.0‰ª•‰∏ä„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ &lt;code&gt;npx&lt;/code&gt;„Ç≥„Éû„É≥„Éâ„ÅåÂà©Áî®„Åß„Åç„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;HonKit„ÅÆbuild„Çí„Åó„Åæ„Åô„ÄÇ&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Watch&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;HonKit„ÅÆbuild„Åã„Å§Watch„Çí„Åó„Åæ„Åô„ÄÇ „Éó„É¨„Éì„É•„Éº„Çí„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅ„É≠„Éº„Ç´„É´„Çµ„Éº„Éê„Éº„ÇíÂà©Áî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ&lt;/p&gt; 
&lt;p&gt;Ê¨°„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°åÂæå„ÄÅ&lt;a href=&quot;http://localhost:4000/&quot;&gt;http://localhost:4000/&lt;/a&gt;„Å∏„Ç¢„ÇØ„Çª„Çπ„Åô„Çã„Åì„Å®„Åß„Éó„É¨„Éì„É•„Éº„ÇíË¶ã„Çâ„Çå„Åæ„Åô„ÄÇ&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm run start
# open http://localhost:4000/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Test&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;„Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß„ÅØÊñáÁ´†„ÇÑ„Ç≥„Éº„Éâ„Å´ÂØæ„Åó„Å¶„ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ ÊñáÁ´†‰∏≠„ÅÆ„Ç§„É≥„É©„Ç§„É≥„Ç≥„Éº„Éâ„ÅÆ„ÉÜ„Çπ„Éà„ÄÅÁâπÂÆö„ÅÆ„Éï„Ç°„Ç§„É´Âêç„Å´„ÇÇ„Å®„Å•„Åè„ÉÜ„Çπ„Éà„ÄÅ„Ç≥„É°„É≥„Éà„Çí‰Ωø„Å£„ÅüDocTest„Å™„Å©„ÅåÂê´„Åæ„Çå„Åæ„Åô„ÄÇ&lt;/p&gt; 
&lt;p&gt;‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åô„Çã„Å®ÂÖ®„Å¶„ÅÆ„ÉÜ„Çπ„Éà„ÅåÂÆüË°å„Åï„Çå„Åæ„Åô„ÄÇ&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm i -d &amp;amp;&amp;amp; npm test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ë©≥„Åó„Åè„ÅØ &lt;a href=&quot;https://raw.githubusercontent.com/asciidwango/js-primer/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; „ÇíË¶ã„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Â∞è„Åï„Å™typo„Åß„ÇÇIssue„ÇÑPull Request„ÇíÊ≠ìËøé„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ&lt;/p&gt; 
&lt;p&gt;„Ç≥„É≥„Éà„É™„Éì„É•„Éº„Éà„ÅÆÊñπÊ≥ï„ÇÑÁ¢∫Ë™çÊñπÊ≥ï„Å´„Å§„ÅÑ„Å¶„ÅØ&lt;a href=&quot;https://raw.githubusercontent.com/asciidwango/js-primer/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;„ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ „Åæ„Åü&lt;a href=&quot;https://jsprimer.net/intro/feedback/&quot;&gt;ÊñáÁ´†„ÅÆÈñìÈÅï„ÅÑ„Å´Ê∞ó„Å•„ÅÑ„Åü„Çâ&lt;/a&gt;„ÇÇÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork it!&lt;/li&gt; 
 &lt;li&gt;Create your feature branch: &lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Commit your changes: &lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Push to the branch: &lt;code&gt;git push origin my-new-feature&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Submit a pull request :D&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/asciidwango/js-primer/raw/master/.github/CODE_OF_CONDUCT.md&quot;&gt;CODE_OF_CONDUCT&lt;/a&gt;„ÇÇ„ÅÇ„Çè„Åõ„Å¶ÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2016-present jsprimer project&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;„ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ: MIT„É©„Ç§„Çª„É≥„Çπ&lt;/li&gt; 
 &lt;li&gt;ÊñáÁ´†: &lt;a href=&quot;http://creativecommons.org/licenses/by-nc/4.0/&quot;&gt;CC BY-NC 4.0&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Project Member&lt;/h2&gt; 
&lt;p&gt;jsprimer„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØÊ¨°„ÅÆ„É°„É≥„Éê„Éº„ÅßÊßãÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;azu(&lt;a href=&quot;https://github.com/azu&quot;&gt;@azu&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Suguru Inatomi(&lt;a href=&quot;https://github.com/lacolaco&quot;&gt;@lacolaco&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contact&lt;/h2&gt; 
&lt;p&gt;„Éê„Ç∞Â†±Âëä„ÅØÊ¨°„ÅÆ„Éö„Éº„Ç∏„ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jsprimer.net/intro/feedback/&quot;&gt;ÊñáÁ´†„ÅÆÈñìÈÅï„ÅÑ„Å´Ê∞ó„Å•„ÅÑ„Åü„Çâ ¬∑ JavaScript Primer #jsprimer&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;ÊÑüÊÉ≥„Å™„Å©„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Å´„ÅØÊ¨°„ÅÆ„Éï„Ç©„Éº„É†„ÇíÂà©Áî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSc11vV1IO3dWEUDXDFE-I9IwxE-zoYWvfrJWLCHFxMcLWwdqA/viewform&quot;&gt;jsprimer.net„ÅÆÊÑüÊÉ≥/„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;„Åù„ÅÆ‰ªñ„ÅÆÈÄ£Áµ°„ÅØÊ¨°„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å´ÈÄÅ„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;info@jsprimer.net&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;OSS Supporters&lt;/h2&gt; 
&lt;a href=&quot;https://www.netlify.com&quot;&gt; &lt;img src=&quot;https://www.netlify.com/img/global/badges/netlify-color-bg.svg?sanitize=true&quot;&gt; &lt;/a&gt;</description>
    </item>
    
    <item>
      <title>strapi/strapi</title>
      <link>https://github.com/strapi/strapi</link>
      <description>&lt;p&gt;üöÄ Open source Node.js Headless CMS to easily build customisable APIs&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://strapi.io&quot;&gt; &lt;img src=&quot;https://strapi.io/assets/strapi-logo-dark.svg?sanitize=true&quot; width=&quot;318px&quot; alt=&quot;Strapi logo&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align=&quot;center&quot;&gt;API creation made simple, secure and fast.&lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt;The most advanced open-source headless CMS to build powerful APIs with no effort.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://strapi.io/demo&quot;&gt;Try live demo&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://console.platform.sh/projects/create-project?template=https://raw.githubusercontent.com/platformsh/template-builder/master/templates/strapi/.platform.template.yaml&amp;amp;utm_content=strapi&amp;amp;utm_source=github&amp;amp;utm_medium=button&amp;amp;utm_campaign=deploy_on_platform&quot;&gt; &lt;img src=&quot;https://assets.strapi.io/uploads/deploy_button_platform_sh_d032f646a7.png&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://marketplace.digitalocean.com/apps/strapi&quot;&gt; &lt;img src=&quot;https://assets.strapi.io/uploads/deploy_button_Digital_Ocean_fe2c286222.png&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://www.heroku.com/deploy/?template=https://github.com/strapi/strapi-heroku-template&quot;&gt; &lt;img src=&quot;https://assets.strapi.io/uploads/Deploy_button_heroku_b1043fc67d.png&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://render.com/docs/deploy-strapi&quot;&gt; &lt;img src=&quot;https://assets.strapi.io/uploads/deploy_render_e076b6f23a.png&quot; height=&quot;44&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.npmjs.org/package/strapi&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/v/strapi/latest.svg?sanitize=true&quot; alt=&quot;NPM Version&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://www.npmjs.org/package/strapi&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/dm/strapi.svg?sanitize=true&quot; alt=&quot;Monthly download on NPM&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://discord.strapi.io&quot;&gt; &lt;img src=&quot;https://img.shields.io/discord/811989166782021633?label=Discord&quot; alt=&quot;Strapi on Discord&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://strapi.io&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/strapi/strapi/master/public/assets/administration_panel.png&quot; alt=&quot;Administration panel&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;Strapi is a free and open-source headless CMS delivering your content anywhere you need.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Keep control over your data&lt;/strong&gt;. With Strapi, you know where your data is stored, and you keep full control at all times.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Self-hosted&lt;/strong&gt;. You can host and scale Strapi projects the way you want. You can choose any hosting platform you want: AWS, Render, Netlify, Heroku, a VPS, or a dedicated server. You can scale as you grow, 100% independent.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Database agnostic&lt;/strong&gt;. You can choose the database you prefer. Strapi works with SQL &amp;amp; NoSQL databases: MongoDB, PostgreSQL, MySQL, MariaDB, and SQLite.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;. You can quickly build your logic by fully customizing APIs, routes, or plugins to fit your needs perfectly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://strapi.io/documentation/developer-docs/latest/getting-started/quick-start.html&quot; target=&quot;_blank&quot;&gt;Read the Getting Started tutorial&lt;/a&gt; or follow the steps below:&lt;/p&gt; 
&lt;h3&gt;‚è≥ Installation&lt;/h3&gt; 
&lt;p&gt;Install Strapi with this &lt;strong&gt;Quickstart&lt;/strong&gt; command to create a Strapi project instantly:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Use &lt;strong&gt;yarn&lt;/strong&gt; to install the Strapi project (recommended). &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/install/&quot;&gt;Install yarn with these docs&lt;/a&gt;.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn create strapi-app my-project --quickstart
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Use npm/npx to install the Strapi project.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx create-strapi-app my-project --quickstart
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command generates a brand new project with the default features (authentication, permissions, content management, content type builder &amp;amp; file upload). The &lt;strong&gt;Quickstart&lt;/strong&gt; command installs Strapi using a &lt;strong&gt;SQLite&lt;/strong&gt; database which is used for prototyping in development.&lt;/p&gt; 
&lt;p&gt;Enjoy üéâ&lt;/p&gt; 
&lt;h3&gt;üñê Requirements&lt;/h3&gt; 
&lt;p&gt;Complete installation requirements can be found in the documentation under &lt;a href=&quot;https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/deployment.html#recommended-requirements&quot;&gt;Installation Requirements&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Supported operating systems&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ubuntu LTS/Debian 9.x&lt;/li&gt; 
 &lt;li&gt;CentOS/RHEL 8&lt;/li&gt; 
 &lt;li&gt;macOS Mojave&lt;/li&gt; 
 &lt;li&gt;Windows 10&lt;/li&gt; 
 &lt;li&gt;Docker - &lt;a href=&quot;https://github.com/strapi/strapi-docker&quot;&gt;Docker-Repo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(Please note that Strapi may work on other operating systems, but these are not tested nor officially supported at this time.)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Node:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;NodeJS &amp;gt;= 10.16 &amp;lt;=14&lt;/li&gt; 
 &lt;li&gt;NPM &amp;gt;= 6.x&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Database:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MySQL &amp;gt;= 5.6&lt;/li&gt; 
 &lt;li&gt;MariaDB &amp;gt;= 10.1&lt;/li&gt; 
 &lt;li&gt;PostgreSQL &amp;gt;= 10&lt;/li&gt; 
 &lt;li&gt;SQLite &amp;gt;= 3&lt;/li&gt; 
 &lt;li&gt;MongoDB &amp;gt;= 3.6 (&lt;a href=&quot;https://forum.strapi.io/t/mongodb-compatibility-delayed-on-v4/4549/108&quot;&gt;please read this thread before using MongoDB&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;We recommend always using the latest version of Strapi to start your new projects&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Modern Admin Panel:&lt;/strong&gt; Elegant, entirely customizable and a fully extensible admin panel.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure by default:&lt;/strong&gt; Reusable policies, CORS, CSP, P3P, Xframe, XSS, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Plugins Oriented:&lt;/strong&gt; Install the auth system, content management, custom plugins, and more, in seconds.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Blazing Fast:&lt;/strong&gt; Built on top of Node.js, Strapi delivers amazing performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Front-end Agnostic:&lt;/strong&gt; Use any front-end framework (React, Vue, Angular, etc.), mobile apps or even IoT.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Powerful CLI:&lt;/strong&gt; Scaffold projects and APIs on the fly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SQL &amp;amp; NoSQL databases:&lt;/strong&gt; Works with MongoDB (&lt;a href=&quot;https://forum.strapi.io/t/mongodb-compatibility-delayed-on-v4/4549/108&quot;&gt;please read this thread before using MongoDB&lt;/a&gt;), PostgreSQL, MySQL, MariaDB, and SQLite.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://strapi.io/overview&quot;&gt;See more on our website&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read our &lt;a href=&quot;https://raw.githubusercontent.com/strapi/strapi/master/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt; before submitting a Pull Request to the project.&lt;/p&gt; 
&lt;h2&gt;Community support&lt;/h2&gt; 
&lt;p&gt;For general help using Strapi, please refer to &lt;a href=&quot;https://strapi.io/documentation/&quot;&gt;the official Strapi documentation&lt;/a&gt;. For additional help, you can use one of these channels to ask a question:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.strapi.io&quot;&gt;Discord&lt;/a&gt; (For live discussion with the Community and Strapi team)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/strapi/strapi&quot;&gt;GitHub&lt;/a&gt; (Bug reports, Contributions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://forum.strapi.io&quot;&gt;Community Forum&lt;/a&gt; (Questions and Discussions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://academy.strapi.io&quot;&gt;Academy&lt;/a&gt; (Learn the fundamentals of Strapi)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://portal.productboard.com/strapi/tabs/2-under-consideration&quot;&gt;ProductBoard&lt;/a&gt; (Roadmap, Feature requests)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/strapijs&quot;&gt;Twitter&lt;/a&gt; (Get the news fast)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/Strapi-616063331867161&quot;&gt;Facebook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/strapi&quot;&gt;YouTube Channel&lt;/a&gt; (Learn from Video Tutorials)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Migration&lt;/h2&gt; 
&lt;p&gt;Follow our &lt;a href=&quot;https://strapi.io/documentation/developer-docs/latest/update-migration-guides/migration-guides.html&quot;&gt;migration guides&lt;/a&gt; on the documentation to keep your projects up-to-date.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://portal.productboard.com/strapi&quot;&gt;roadmap&lt;/a&gt; to get informed of the latest features released and the upcoming ones. You may also give us insights and vote for a specific feature.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See our dedicated &lt;a href=&quot;https://github.com/strapi/documentation&quot;&gt;repository&lt;/a&gt; for the Strapi documentation, or view our documentation live:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://strapi.io/documentation/developer-docs/latest/getting-started/introduction.html&quot;&gt;Developer docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://strapi.io/documentation/user-docs/latest/getting-started/introduction.html&quot;&gt;User docs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Try live demo&lt;/h2&gt; 
&lt;p&gt;See for yourself what‚Äôs under the hood by getting access to a &lt;a href=&quot;https://strapi.io/demo&quot;&gt;hosted Strapi project&lt;/a&gt; with sample data.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/strapi/strapi/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for licensing information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github/opensource.guide</title>
      <link>https://github.com/github/opensource.guide</link>
      <description>&lt;p&gt;üìö Community guides for open source creators&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open Source Guides&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/github/opensource.guide/actions&quot;&gt;&lt;img src=&quot;https://github.com/github/opensource.guide/workflows/GitHub%20Actions%20CI/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Open Source Guides (https://opensource.guide/) are a collection of resources for individuals, communities, and companies who want to learn how to run and contribute to an open source project.&lt;/p&gt; 
&lt;h2&gt;Background&lt;/h2&gt; 
&lt;p&gt;Open Source Guides were created and are curated by GitHub, along with input from outside community reviewers, but they are not exclusive to GitHub products. One reason we started this project is because we felt that there weren‚Äôt enough resources for people creating open source projects.&lt;/p&gt; 
&lt;p&gt;Our goal was to aggregate community best practices, &lt;em&gt;not&lt;/em&gt; what GitHub (or any other individual or entity) thinks is best. Therefore, we used examples and quotations from others to illustrate our points.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;This site is powered by &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. Check out our &lt;a href=&quot;https://raw.githubusercontent.com/github/opensource.guide/main/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt; for ways to offer feedback and contribute.&lt;/p&gt; 
&lt;h2&gt;Licenses&lt;/h2&gt; 
&lt;p&gt;Content is released under &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/&quot;&gt;CC-BY-4.0&lt;/a&gt;. See &lt;a href=&quot;https://raw.githubusercontent.com/github/opensource.guide/main/notices.md&quot;&gt;notices&lt;/a&gt; for complete details, including attribution guidelines, contribution terms, and software and third-party licenses and permissions.&lt;/p&gt; 
&lt;h2&gt;Acknowledgments&lt;/h2&gt; 
&lt;p&gt;The initial release of these guides were authored by &lt;strong&gt;&lt;a href=&quot;https://github.com/nayafia&quot;&gt;@nayafia&lt;/a&gt;, &lt;a href=&quot;https://github.com/bkeepers&quot;&gt;@bkeepers&lt;/a&gt;, &lt;a href=&quot;https://github.com/stephbwills&quot;&gt;@stephbwills&lt;/a&gt;,&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://github.com/mlinksva&quot;&gt;@mlinksva&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Thanks to &lt;strong&gt;&lt;a href=&quot;https://github.com/aitchabee&quot;&gt;@aitchabee&lt;/a&gt;, &lt;a href=&quot;https://github.com/benbalter&quot;&gt;@benbalter&lt;/a&gt;, &lt;a href=&quot;https://github.com/brettcannon&quot;&gt;@brettcannon&lt;/a&gt;, &lt;a href=&quot;https://github.com/caabernathy&quot;&gt;@caabernathy&lt;/a&gt;, &lt;a href=&quot;https://github.com/CoralineAda&quot;&gt;@coralineada&lt;/a&gt;, &lt;a href=&quot;https://github.com/dmleong&quot;&gt;@dmleong&lt;/a&gt;, &lt;a href=&quot;https://github.com/ericholscher&quot;&gt;@ericholscher&lt;/a&gt;, &lt;a href=&quot;https://github.com/gr2m&quot;&gt;@gr2m&lt;/a&gt;, &lt;a href=&quot;https://github.com/janl&quot;&gt;@janl&lt;/a&gt;, &lt;a href=&quot;https://github.com/jessfraz&quot;&gt;@jessfraz&lt;/a&gt;, &lt;a href=&quot;https://github.com/joshsimmons&quot;&gt;@joshsimmons&lt;/a&gt;, &lt;a href=&quot;https://github.com/kfogel&quot;&gt;@kfogel&lt;/a&gt;, &lt;a href=&quot;https://github.com/kytrinyx&quot;&gt;@kytrinyx&lt;/a&gt;, &lt;a href=&quot;https://github.com/lee-dohm&quot;&gt;@lee-dohm&lt;/a&gt;, &lt;a href=&quot;https://github.com/mikeal&quot;&gt;@mikeal&lt;/a&gt;, &lt;a href=&quot;https://github.com/MikeMcQuaid&quot;&gt;@mikemcquaid&lt;/a&gt;, &lt;a href=&quot;https://github.com/nathansobo&quot;&gt;@nathansobo&lt;/a&gt;, &lt;a href=&quot;https://github.com/nruff&quot;&gt;@nruff&lt;/a&gt;, &lt;a href=&quot;https://github.com/nsqe&quot;&gt;@nsqe&lt;/a&gt;, &lt;a href=&quot;https://github.com/orta&quot;&gt;@orta&lt;/a&gt;, &lt;a href=&quot;https://github.com/parkr&quot;&gt;@parkr&lt;/a&gt;, &lt;a href=&quot;https://github.com/shazow&quot;&gt;@shazow&lt;/a&gt;, &lt;a href=&quot;https://github.com/steveklabnik&quot;&gt;@steveklabnik&lt;/a&gt;,&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://github.com/wooorm&quot;&gt;@wooorm&lt;/a&gt;&lt;/strong&gt; for lending their valuable input and expertise leading up to the initial release, and to &lt;strong&gt;&lt;a href=&quot;https://github.com/sophshep&quot;&gt;@sophshep&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://github.com/jeejkang&quot;&gt;@jeejkang&lt;/a&gt;&lt;/strong&gt; for designing and illustrating the guides.&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;While we‚Äôve got advice about running an open source project, we‚Äôre not lawyers. Be sure to read our &lt;a href=&quot;https://raw.githubusercontent.com/github/opensource.guide/main/notices.md#legal-disclaimer&quot;&gt;disclaimer&lt;/a&gt; before diving in.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>webpack/webpack</title>
      <link>https://github.com/webpack/webpack</link>
      <description>&lt;p&gt;A bundler for javascript and friends. Packs many modules into a few bundled assets. Code Splitting allows for loading parts of the application on demand. Through &quot;loaders&quot;, modules can be CommonJs, AMD, ES6 modules, CSS, Images, JSON, Coffeescript, LESS, ... and your custom stuff.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt; &lt;img width=&quot;200&quot; height=&quot;200&quot; src=&quot;https://webpack.js.org/assets/icon-square-big.svg?sanitize=true&quot;&gt; &lt;/a&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;a href=&quot;https://npmjs.com/package/webpack&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/webpack.svg?sanitize=true&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://nodejs.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/node/v/webpack.svg?sanitize=true&quot; alt=&quot;node&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/webpack/webpack&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/webpack/webpack.svg?sanitize=true&quot; alt=&quot;deps&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/webpack/webpack&quot;&gt;&lt;img src=&quot;https://img.shields.io/travis/webpack/webpack/main.svg?sanitize=true&quot; alt=&quot;tests&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/sokra/webpack/branch/main&quot;&gt;&lt;img src=&quot;https://ci.appveyor.com/api/projects/status/github/webpack/webpack?svg=true&quot; alt=&quot;builds&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dev.azure.com/webpack/webpack/_build/latest?definitionId=3&quot;&gt;&lt;img src=&quot;https://dev.azure.com/webpack/webpack/_apis/build/status/webpack.webpack&quot; alt=&quot;builds2&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/r/webpack/webpack/&quot;&gt;&lt;img src=&quot;https://img.shields.io/coveralls/webpack/webpack.svg?sanitize=true&quot; alt=&quot;coverage&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fwebpack%2Fwebpack?ref=badge_shield&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fwebpack%2Fwebpack.svg?type=shield&quot; alt=&quot;licenses&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://webpack.js.org/contribute/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&quot; alt=&quot;PR‚Äôs welcome&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;br&gt; 
 &lt;a href=&quot;https://dependabot.com/compatibility-score.html?dependency-name=webpack&amp;amp;package-manager=npm_and_yarn&amp;amp;new-version=latest&quot;&gt; &lt;img src=&quot;https://api.dependabot.com/badges/compatibility_score?dependency-name=webpack&amp;amp;package-manager=npm_and_yarn&amp;amp;version-scheme=semver&amp;amp;target-version=latest&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://npmcharts.com/compare/webpack?minimal=true&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/dm/webpack.svg?sanitize=true&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://packagephobia.com/result?p=webpack&quot;&gt; &lt;img src=&quot;https://packagephobia.com/badge?p=webpack&quot; alt=&quot;install size&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://opencollective.com/webpack#backer&quot;&gt; &lt;img src=&quot;https://opencollective.com/webpack/backers/badge.svg?sanitize=true&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://opencollective.com/webpack#sponsors&quot;&gt; &lt;img src=&quot;https://opencollective.com/webpack/sponsors/badge.svg?sanitize=true&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/webpack/webpack/graphs/contributors&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/contributors/webpack/webpack.svg?sanitize=true&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://gitter.im/webpack/webpack&quot;&gt; &lt;img src=&quot;https://badges.gitter.im/webpack/webpack.svg?sanitize=true&quot;&gt; &lt;/a&gt; 
 &lt;h1&gt;webpack&lt;/h1&gt; 
 &lt;p&gt; Webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset. &lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#concepts&quot;&gt;Concepts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#support&quot;&gt;Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#core-team&quot;&gt;Core Team&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#sponsoring&quot;&gt;Sponsoring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#premium-partners&quot;&gt;Premium Partners&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#other-backers-and-sponsors&quot;&gt;Other Backers and Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#gold-sponsors&quot;&gt;Gold Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#silver-sponsors&quot;&gt;Silver Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#bronze-sponsors&quot;&gt;Bronze Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#backers&quot;&gt;Backers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/webpack/webpack/main/#special-thanks-to&quot;&gt;Special Thanks&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 align=&quot;center&quot;&gt;Install&lt;/h2&gt; 
&lt;p&gt;Install with npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install --save-dev webpack
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install with yarn:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add webpack --dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2 align=&quot;center&quot;&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;Webpack is a bundler for modules. The main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Bundles &lt;a href=&quot;https://www.2ality.com/2014/09/es6-modules-final.html&quot;&gt;ES Modules&lt;/a&gt;, &lt;a href=&quot;http://wiki.commonjs.org/&quot;&gt;CommonJS&lt;/a&gt;, and &lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/AMD&quot;&gt;AMD&lt;/a&gt; modules (even combined).&lt;/li&gt; 
 &lt;li&gt;Can create a single bundle or multiple chunks that are asynchronously loaded at runtime (to reduce initial loading time).&lt;/li&gt; 
 &lt;li&gt;Dependencies are resolved during compilation, reducing the runtime size.&lt;/li&gt; 
 &lt;li&gt;Loaders can preprocess files while compiling, e.g. TypeScript to JavaScript, Handlebars strings to compiled functions, images to Base64, etc.&lt;/li&gt; 
 &lt;li&gt;Highly modular plugin system to do whatever else your application requires.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Get Started&lt;/h3&gt; 
&lt;p&gt;Check out webpack‚Äôs quick &lt;a href=&quot;https://webpack.js.org/guides/getting-started&quot;&gt;&lt;strong&gt;Get Started&lt;/strong&gt;&lt;/a&gt; guide and the &lt;a href=&quot;https://webpack.js.org/guides/&quot;&gt;other guides&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Browser Compatibility&lt;/h3&gt; 
&lt;p&gt;Webpack supports all browsers that are &lt;a href=&quot;https://kangax.github.io/compat-table/es5/&quot;&gt;ES5-compliant&lt;/a&gt; (IE8 and below are not supported). Webpack also needs &lt;code&gt;Promise&lt;/code&gt; for &lt;code&gt;import()&lt;/code&gt; and &lt;code&gt;require.ensure()&lt;/code&gt;. If you want to support older browsers, you will need to &lt;a href=&quot;https://webpack.js.org/guides/shimming/&quot;&gt;load a polyfill&lt;/a&gt; before using these expressions.&lt;/p&gt; 
&lt;h2 align=&quot;center&quot;&gt;Concepts&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://webpack.js.org/plugins/&quot;&gt;Plugins&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Webpack has a &lt;a href=&quot;https://webpack.js.org/plugins/&quot;&gt;rich plugin interface&lt;/a&gt;. Most of the features within webpack itself use this plugin interface. This makes webpack very &lt;strong&gt;flexible&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;| Name | Status | Install Size | Description | | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî: | :‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì: | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì: | :‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì | | &lt;a href=&quot;https://github.com/webpack-contrib/mini-css-extract-plugin&quot;&gt;mini-css-extract-plugin&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/mini-css-extract-plugin.svg?sanitize=true&quot; alt=&quot;mini-css-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=mini-css-extract-plugin&quot; alt=&quot;mini-css-size&quot;&gt; | Extracts CSS into separate files. It creates a CSS file per JS file which contains CSS. | | &lt;a href=&quot;https://github.com/webpack-contrib/compression-webpack-plugin&quot;&gt;compression-webpack-plugin&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/compression-webpack-plugin.svg?sanitize=true&quot; alt=&quot;compression-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=compression-webpack-plugin&quot; alt=&quot;compression-size&quot;&gt; | Prepares compressed versions of assets to serve them with Content-Encoding | | &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt;html-webpack-plugin&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/html-webpack-plugin.svg?sanitize=true&quot; alt=&quot;html-plugin-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=html-webpack-plugin&quot; alt=&quot;html-plugin-size&quot;&gt; | Simplifies creation of HTML files (&lt;code&gt;index.html&lt;/code&gt;) to serve your bundles |&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://webpack.js.org/loaders/&quot;&gt;Loaders&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Webpack enables the use of loaders to preprocess files. This allows you to bundle &lt;strong&gt;any static resource&lt;/strong&gt; way beyond JavaScript. You can easily &lt;a href=&quot;https://webpack.js.org/api/loaders/&quot;&gt;write your own loaders&lt;/a&gt; using Node.js.&lt;/p&gt; 
&lt;p&gt;Loaders are activated by using &lt;code&gt;loadername!&lt;/code&gt; prefixes in &lt;code&gt;require()&lt;/code&gt; statements, or are automatically applied via regex from your webpack configuration.&lt;/p&gt; 
&lt;h4&gt;Files&lt;/h4&gt; 
&lt;p&gt;| Name | Status | Install Size | Description | | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì: | :‚Äî‚Äî‚Äî: | :‚Äì‚Äì‚Äì‚Äì‚Äì: | :‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì | | &lt;a href=&quot;https://github.com/webpack-contrib/raw-loader&quot;&gt;raw-loader&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/raw-loader.svg?sanitize=true&quot; alt=&quot;raw-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=raw-loader&quot; alt=&quot;raw-size&quot;&gt; | Loads raw content of a file (utf-8) | | &lt;a href=&quot;https://github.com/webpack-contrib/val-loader&quot;&gt;val-loader&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/val-loader.svg?sanitize=true&quot; alt=&quot;val-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=val-loader&quot; alt=&quot;val-size&quot;&gt; | Executes code as module and considers exports as JS code | | &lt;a href=&quot;https://github.com/webpack-contrib/url-loader&quot;&gt;url-loader&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/url-loader.svg?sanitize=true&quot; alt=&quot;url-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=url-loader&quot; alt=&quot;url-size&quot;&gt; | Works like the file loader, but can return a Data Url if the file is smaller than a limit | | &lt;a href=&quot;https://github.com/webpack-contrib/file-loader&quot;&gt;file-loader&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/file-loader.svg?sanitize=true&quot; alt=&quot;file-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=file-loader&quot; alt=&quot;file-size&quot;&gt; | Emits the file into the output folder and returns the (relative) url |&lt;/p&gt; 
&lt;h4&gt;JSON&lt;/h4&gt; 
&lt;p&gt;| Name | Status | Install Size | Description | | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî: | :‚Äî‚Äî‚Äî: | :‚Äì‚Äì‚Äì‚Äì‚Äì: | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî: | | &lt;a href=&quot;https://github.com/awnist/cson-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/coffeescript.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/cson-loader.svg?sanitize=true&quot; alt=&quot;cson-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=cson-loader&quot; alt=&quot;cson-size&quot;&gt; | Loads and transpiles a CSON file |&lt;/p&gt; 
&lt;h4&gt;Transpiling&lt;/h4&gt; 
&lt;p&gt;| Name | Status | Install Size | Description | | :‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì: | :‚Äî‚Äî‚Äî‚Äì: | :‚Äî‚Äî‚Äî‚Äî: | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî | | &lt;a href=&quot;https://github.com/babel/babel-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; title=&quot;babel-loader&quot; src=&quot;https://worldvectorlogo.com/logos/babel-10.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/babel-loader.svg?sanitize=true&quot; alt=&quot;babel-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=babel-loader&quot; alt=&quot;babel-size&quot;&gt; | Loads ES2015+ code and transpiles to ES5 using &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; | | &lt;a href=&quot;https://github.com/TypeStrong/ts-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://cdn.rawgit.com/Microsoft/TypeScript/master/doc/logo.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/ts-loader.svg?sanitize=true&quot; alt=&quot;type-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=ts-loader&quot; alt=&quot;type-size&quot;&gt; | Loads TypeScript like JavaScript | | &lt;a href=&quot;https://github.com/webpack-contrib/coffee-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/coffeescript.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/coffee-loader.svg?sanitize=true&quot; alt=&quot;coffee-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=coffee-loader&quot; alt=&quot;coffee-size&quot;&gt; | Loads CoffeeScript like JavaScript |&lt;/p&gt; 
&lt;h4&gt;Templating&lt;/h4&gt; 
&lt;p&gt;| Name | Status | Install Size | Description | | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì: | :‚Äî‚Äî‚Äî‚Äì‚Äì: | :‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì: | :‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì | | &lt;a href=&quot;https://github.com/webpack-contrib/html-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/html5.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/html-loader.svg?sanitize=true&quot; alt=&quot;html-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=html-loader&quot; alt=&quot;html-size&quot;&gt; | Exports HTML as string, requires references to static resources | | &lt;a href=&quot;https://github.com/pugjs/pug-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://cdn.rawgit.com/pugjs/pug-logo/master/SVG/pug-final-logo-_-colour-128.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/pug-loader.svg?sanitize=true&quot; alt=&quot;pug-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=pug-loader&quot; alt=&quot;pug-size&quot;&gt; | Loads Pug templates and returns a function | | &lt;a href=&quot;https://github.com/peerigon/markdown-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/markdown.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/markdown-loader.svg?sanitize=true&quot; alt=&quot;md-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=markdown-loader&quot; alt=&quot;md-size&quot;&gt; | Compiles Markdown to HTML | | &lt;a href=&quot;https://github.com/posthtml/posthtml-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://posthtml.github.io/posthtml/logo.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/posthtml-loader.svg?sanitize=true&quot; alt=&quot;posthtml-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=posthtml-loader&quot; alt=&quot;posthtml-size&quot;&gt; | Loads and transforms a HTML file using &lt;a href=&quot;https://github.com/posthtml/posthtml&quot;&gt;PostHTML&lt;/a&gt; | | &lt;a href=&quot;https://github.com/pcardune/handlebars-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/handlebars-1.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/handlebars-loader.svg?sanitize=true&quot; alt=&quot;hbs-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=handlebars-loader&quot; alt=&quot;hbs-size&quot;&gt; | Compiles Handlebars to HTML |&lt;/p&gt; 
&lt;h4&gt;Styling&lt;/h4&gt; 
&lt;p&gt;| Name | Status | Install Size | Description | | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì: | :‚Äî‚Äî‚Äî‚Äî: | :‚Äî‚Äî‚Äî‚Äì‚Äì: | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì | | &lt;a href=&quot;https://github.com/webpack-contrib/style-loader&quot;&gt;&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/style-loader.svg?sanitize=true&quot; alt=&quot;style-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=style-loader&quot; alt=&quot;style-size&quot;&gt; | Add exports of a module as style to DOM | | &lt;a href=&quot;https://github.com/webpack-contrib/css-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/css-3.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/css-loader.svg?sanitize=true&quot; alt=&quot;css-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=css-loader&quot; alt=&quot;css-size&quot;&gt; | Loads CSS file with resolved imports and returns CSS code | | &lt;a href=&quot;https://github.com/webpack-contrib/less-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/less-63.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/less-loader.svg?sanitize=true&quot; alt=&quot;less-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=less-loader&quot; alt=&quot;less-size&quot;&gt; | Loads and compiles a LESS file | | &lt;a href=&quot;https://github.com/webpack-contrib/sass-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/sass-1.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/sass-loader.svg?sanitize=true&quot; alt=&quot;sass-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=sass-loader&quot; alt=&quot;sass-size&quot;&gt; | Loads and compiles a Sass/SCSS file | | &lt;a href=&quot;https://github.com/shama/stylus-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/stylus.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/stylus-loader.svg?sanitize=true&quot; alt=&quot;stylus-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=stylus-loader&quot; alt=&quot;stylus-size&quot;&gt; | Loads and compiles a Stylus file | | &lt;a href=&quot;https://github.com/postcss/postcss-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/postcss.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/postcss-loader.svg?sanitize=true&quot; alt=&quot;postcss-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=postcss-loader&quot; alt=&quot;postcss-size&quot;&gt; | Loads and transforms a CSS/SSS file using &lt;a href=&quot;https://postcss.org&quot;&gt;PostCSS&lt;/a&gt; |&lt;/p&gt; 
&lt;h4&gt;Frameworks&lt;/h4&gt; 
&lt;p&gt;| Name | Status | Install Size | Description | | :‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì: | :‚Äî‚Äî‚Äî‚Äî: | :‚Äî‚Äî‚Äî‚Äì‚Äì: | :‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì | | &lt;a href=&quot;https://github.com/vuejs/vue-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/vue-9.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/vue-loader.svg?sanitize=true&quot; alt=&quot;vue-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=vue-loader&quot; alt=&quot;vue-size&quot;&gt; | Loads and compiles Vue Components | | &lt;a href=&quot;https://github.com/webpack-contrib/polymer-webpack-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/polymer.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/polymer-webpack-loader.svg?sanitize=true&quot; alt=&quot;polymer-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=polymer-webpack-loader&quot; alt=&quot;polymer-size&quot;&gt; | Process HTML &amp;amp; CSS with preprocessor of choice and &lt;code&gt;require()&lt;/code&gt; Web Components like first-class modules | | &lt;a href=&quot;https://github.com/TheLarkInn/angular2-template-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/angular-icon-1.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/angular2-template-loader.svg?sanitize=true&quot; alt=&quot;angular-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=angular2-template-loader&quot; alt=&quot;angular-size&quot;&gt; | Loads and compiles Angular 2 Components | | &lt;a href=&quot;https://github.com/riot/webpack-loader&quot;&gt;&lt;img width=&quot;48&quot; height=&quot;48&quot; src=&quot;https://worldvectorlogo.com/logos/riot.svg?sanitize=true&quot;&gt;&lt;/a&gt; | &lt;img src=&quot;https://img.shields.io/npm/v/riot-tag-loader.svg?sanitize=true&quot; alt=&quot;riot-npm&quot;&gt; | &lt;img src=&quot;https://packagephobia.com/badge?p=riot-tag-loader&quot; alt=&quot;riot-size&quot;&gt; | Riot official webpack loader |&lt;/p&gt; 
&lt;h3&gt;Performance&lt;/h3&gt; 
&lt;p&gt;Webpack uses async I/O and has multiple caching levels. This makes webpack fast and incredibly &lt;strong&gt;fast&lt;/strong&gt; on incremental compilations.&lt;/p&gt; 
&lt;h3&gt;Module Formats&lt;/h3&gt; 
&lt;p&gt;Webpack supports ES2015+, CommonJS and AMD modules &lt;strong&gt;out of the box&lt;/strong&gt;. It performs clever static analysis on the AST of your code. It even has an evaluation engine to evaluate simple expressions. This allows you to &lt;strong&gt;support most existing libraries&lt;/strong&gt; out of the box.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://webpack.js.org/guides/code-splitting/&quot;&gt;Code Splitting&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Webpack allows you to split your codebase into multiple chunks. Chunks are loaded asynchronously at runtime. This reduces the initial loading time.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://webpack.js.org/guides/production-build/&quot;&gt;Optimizations&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Webpack can do many optimizations to &lt;strong&gt;reduce the output size of your JavaScript&lt;/strong&gt; by deduplicating frequently used modules, minifying, and giving you full control of what is loaded initially and what is loaded at runtime through code splitting. It can also make your code chunks &lt;strong&gt;cache friendly&lt;/strong&gt; by using hashes.&lt;/p&gt; 
&lt;h2 align=&quot;center&quot;&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;We want contributing to webpack to be fun, enjoyable, and educational for anyone, and everyone.&lt;/strong&gt; We have a &lt;a href=&quot;https://medium.com/webpack/contributors-guide/home&quot;&gt;vibrant ecosystem&lt;/a&gt; that spans beyond this single repo. We welcome you to check out any of the repositories in &lt;a href=&quot;https://github.com/webpack&quot;&gt;our organization&lt;/a&gt; or &lt;a href=&quot;https://github.com/webpack-contrib&quot;&gt;webpack-contrib organization&lt;/a&gt; which houses all of our loaders and plugins.&lt;/p&gt; 
&lt;p&gt;Contributions go far beyond pull requests and commits. Although we love giving you the opportunity to put your stamp on webpack, we also are thrilled to receive a variety of other contributions including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/webpack/webpack.js.org&quot;&gt;Documentation&lt;/a&gt; updates, enhancements, designs, or bugfixes&lt;/li&gt; 
 &lt;li&gt;Spelling or grammar fixes&lt;/li&gt; 
 &lt;li&gt;README.md corrections or redesigns&lt;/li&gt; 
 &lt;li&gt;Adding unit, or functional tests&lt;/li&gt; 
 &lt;li&gt;Triaging GitHub issues ‚Äì especially determining whether an issue still persists or is reproducible.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/search?q=webpack&quot;&gt;Searching #webpack on twitter&lt;/a&gt; and helping someone else who needs help&lt;/li&gt; 
 &lt;li&gt;Teaching others how to contribute to one of the many webpack‚Äôs repos!&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/webpack-contrib/awesome-webpack&quot;&gt;Blogging, speaking about, or creating tutorials&lt;/a&gt; about one of webpack‚Äôs many features.&lt;/li&gt; 
 &lt;li&gt;Helping others in our webpack &lt;a href=&quot;https://gitter.im/webpack/webpack&quot;&gt;gitter channel&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To get started have a look at our &lt;a href=&quot;https://github.com/webpack/webpack/raw/main/CONTRIBUTING.md&quot;&gt;documentation on contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are worried or don‚Äôt know where to start, you can &lt;strong&gt;always&lt;/strong&gt; reach out to &lt;a href=&quot;https://twitter.com/thelarkinn&quot;&gt;Sean Larkin (@TheLarkInn) on Twitter&lt;/a&gt; or simply submit an issue and a maintainer can help give you guidance!&lt;/p&gt; 
&lt;p&gt;We have also started a series on our &lt;a href=&quot;https://medium.com/webpack&quot;&gt;Medium Publication&lt;/a&gt; called &lt;a href=&quot;https://medium.com/webpack/contributors-guide/home&quot;&gt;The Contributor‚Äôs Guide to webpack&lt;/a&gt;. We welcome you to read it and post any questions or responses if you still need help.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Looking to speak about webpack?&lt;/em&gt; We‚Äôd &lt;strong&gt;love&lt;/strong&gt; to review your talk abstract/CFP! You can email it to webpack [at] opencollective [dot] com and we can give pointers or tips!!!&lt;/p&gt; 
&lt;h3 align=&quot;center&quot;&gt;Creating your own plugins and loaders&lt;/h3&gt; 
&lt;p&gt;If you create a loader or plugin, we would &amp;lt;3 for you to open source it, and put it on npm. We follow the &lt;code&gt;x-loader&lt;/code&gt;, &lt;code&gt;x-webpack-plugin&lt;/code&gt; naming convention.&lt;/p&gt; 
&lt;h2 align=&quot;center&quot;&gt;Support&lt;/h2&gt; 
&lt;p&gt;We consider webpack to be a low-level tool used not only individually but also layered beneath other awesome tools. Because of its flexibility, webpack isn‚Äôt always the &lt;em&gt;easiest&lt;/em&gt; entry-level solution, however we do believe it is the most powerful. That said, we‚Äôre always looking for ways to improve and simplify the tool without compromising functionality. If you have any ideas on ways to accomplish this, we‚Äôre all ears!&lt;/p&gt; 
&lt;p&gt;If you‚Äôre just getting started, take a look at &lt;a href=&quot;https://webpack.js.org/concepts/&quot;&gt;our new docs and concepts page&lt;/a&gt;. This has a high level overview that is great for beginners!!&lt;/p&gt; 
&lt;p&gt;Looking for webpack 1 docs? Please check out the old &lt;a href=&quot;https://github.com/webpack/docs/wiki/contents&quot;&gt;wiki&lt;/a&gt;, but note that this deprecated version is no longer supported.&lt;/p&gt; 
&lt;p&gt;If you want to discuss something or just need help, &lt;a href=&quot;https://gitter.im/webpack/webpack&quot;&gt;here is our Gitter room&lt;/a&gt; where there are always individuals looking to help out!&lt;/p&gt; 
&lt;p&gt;If you are still having difficulty, we would love for you to post a question to &lt;a href=&quot;https://stackoverflow.com/tags/webpack&quot;&gt;StackOverflow with the webpack tag&lt;/a&gt;. It is much easier to answer questions that include your webpack.config.js and relevant files! So if you can provide them, we‚Äôd be extremely grateful (and more likely to help you find the answer!)&lt;/p&gt; 
&lt;p&gt;If you are twitter savvy you can tweet #webpack with your question and someone should be able to reach out and help also.&lt;/p&gt; 
&lt;p&gt;If you have discovered a üêú or have a feature suggestion, feel free to create an issue on Github.&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fwebpack%2Fwebpack?ref=badge_large&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fwebpack%2Fwebpack.svg?type=large&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2 align=&quot;center&quot;&gt;Core Team&lt;/h2&gt; 
&lt;table&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; &lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;https://github.com/sokra.png?s=150&quot;&gt; &lt;br&gt; &lt;a href=&quot;https://github.com/sokra&quot;&gt;Tobias Koppers&lt;/a&gt; &lt;p&gt;Core&lt;/p&gt; &lt;br&gt; &lt;p&gt;Founder of webpack&lt;/p&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; &lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;https://github.com/jhnns.png?s=150&quot;&gt; &lt;br&gt; &lt;a href=&quot;https://github.com/jhnns&quot;&gt;Johannes Ewald&lt;/a&gt; &lt;p&gt;Loaders &amp;amp; Plugins&lt;/p&gt; &lt;br&gt; &lt;p&gt;Early adopter of webpack&lt;/p&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; width=&quot;20%&quot; valign=&quot;top&quot;&gt; &lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;https://github.com/TheLarkInn.png?s=150&quot;&gt; &lt;br&gt; &lt;a href=&quot;https://github.com/TheLarkInn&quot;&gt;Sean T. Larkin&lt;/a&gt; &lt;p&gt;Public Relations&lt;/p&gt; &lt;br&gt; &lt;p&gt;Founder of the core team&lt;/p&gt; &lt;/td&gt; 
   &lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt; &lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;https://github.com/spacek33z.png?s=150&quot;&gt; &lt;br&gt; &lt;a href=&quot;https://github.com/spacek33z&quot;&gt;Kees Kluskens&lt;/a&gt; &lt;p&gt;Development&lt;/p&gt; &lt;br&gt; &lt;p&gt;Sponsor&lt;/p&gt; &lt;a href=&quot;https://codeyellow.nl/&quot;&gt; &lt;img height=&quot;15px&quot; src=&quot;https://cloud.githubusercontent.com/assets/1365881/20286583/ad62eb04-aac7-11e6-9c14-a0fef35b9b56.png&quot;&gt; &lt;/a&gt; &lt;br&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2 align=&quot;center&quot;&gt;Sponsoring&lt;/h2&gt; 
&lt;p&gt;Most of the core team members, webpack contributors and contributors in the ecosystem do this open source work in their free time. If you use webpack for a serious task, and you‚Äôd like us to invest more time on it, please donate. This project increases your income/productivity too. It makes development and applications faster and it reduces the required bandwidth.&lt;/p&gt; 
&lt;p&gt;This is how we use the donations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Allow the core team to work on webpack&lt;/li&gt; 
 &lt;li&gt;Thank contributors if they invested a large amount of time in contributing&lt;/li&gt; 
 &lt;li&gt;Support projects in the ecosystem that are of great value for users&lt;/li&gt; 
 &lt;li&gt;Support projects that are voted most (work in progress)&lt;/li&gt; 
 &lt;li&gt;Infrastructure cost&lt;/li&gt; 
 &lt;li&gt;Fees for money handling&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2 align=&quot;center&quot;&gt;Premium Partners&lt;/h2&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://www.ag-grid.com/?utm_source=webpack&amp;amp;utm_medium=banner&amp;amp;utm_campaign=sponsorship&quot; target=&quot;_blank&quot;&gt;&lt;img align=&quot;center&quot; src=&quot;https://raw.githubusercontent.com/webpack/media/2b399d58/horiz-banner-ad-ag-grid.png&quot;&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2 align=&quot;center&quot;&gt;Other Backers and Sponsors&lt;/h2&gt; 
&lt;p&gt;Before we started using OpenCollective, donations were made anonymously. Now that we have made the switch, we would like to acknowledge these sponsors (and the ones who continue to donate using OpenCollective). If we‚Äôve missed someone, please send us a PR, and we‚Äôll add you to this list.&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://angular.io/&quot; target=&quot;_blank&quot; title=&quot;JS framework&quot;&gt;&lt;img src=&quot;https://cdn.worldvectorlogo.com/logos/angular-icon-1.svg?sanitize=true&quot; height=&quot;30&quot; alt=&quot;Angular&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://moonmail.io&quot; target=&quot;_blank&quot; title=&quot;Email Marketing Software&quot;&gt;&lt;img src=&quot;https://static.moonmail.io/moonmail-logo.svg?sanitize=true&quot; height=&quot;30&quot; alt=&quot;MoonMail&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://monei.net&quot; target=&quot;_blank&quot; title=&quot;Best payment gateway rates&quot;&gt;&lt;img src=&quot;https://static.monei.net/monei-logo.svg?sanitize=true&quot; height=&quot;30&quot; alt=&quot;MONEI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2 align=&quot;center&quot;&gt;Gold Sponsors&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/webpack#sponsor&quot;&gt;Become a gold sponsor&lt;/a&gt; and get your logo on our README on Github with a link to your site.&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/0/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/0/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/1/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/1/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/2/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/2/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/3/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/3/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/4/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/4/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/5/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/5/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/6/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/6/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/7/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/7/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/8/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/8/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/9/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/9/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/10/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/10/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/11/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/11/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/12/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/12/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/13/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/13/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/14/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/14/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/15/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/15/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/16/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/16/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/17/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/17/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/18/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/18/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/19/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/19/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/20/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/20/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/21/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/21/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/22/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/22/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/23/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/23/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/24/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/24/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/25/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/25/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/26/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/26/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/27/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/27/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/28/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/28/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/goldsponsor/29/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/goldsponsor/29/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2 align=&quot;center&quot;&gt;Silver Sponsors&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/webpack#sponsor&quot;&gt;Become a silver sponsor&lt;/a&gt; and get your logo on our README on Github with a link to your site.&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://opencollective.com/webpack/silversponsor/0/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/0/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/1/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/1/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/2/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/2/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/3/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/3/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/4/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/4/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/5/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/5/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/6/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/6/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/7/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/7/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/8/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/8/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/9/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/9/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/10/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/10/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/11/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/11/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/12/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/12/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/13/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/13/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/14/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/14/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/15/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/15/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/16/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/16/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/17/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/17/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/18/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/18/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/19/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/19/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/20/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/20/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/21/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/21/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/22/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/22/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/23/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/23/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/24/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/24/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/25/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/25/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/26/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/26/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/27/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/27/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/28/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/28/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/silversponsor/29/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/silversponsor/29/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2 align=&quot;center&quot;&gt;Bronze Sponsors&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/webpack#sponsor&quot;&gt;Become a bronze sponsor&lt;/a&gt; and get your logo on our README on Github with a link to your site.&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;a href=&quot;https://opencollective.com/webpack/sponsor/0/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/0/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/1/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/1/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/2/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/2/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/3/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/3/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/4/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/4/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/5/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/5/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/6/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/6/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/7/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/7/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/8/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/8/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/9/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/9/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/10/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/10/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/11/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/11/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/12/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/12/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/13/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/13/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/14/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/14/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/15/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/15/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/16/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/16/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/17/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/17/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/18/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/18/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/19/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/19/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/20/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/20/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/21/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/21/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/22/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/22/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/23/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/23/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/24/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/24/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/25/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/25/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/26/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/26/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/27/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/27/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/28/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/28/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/29/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/29/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/30/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/30/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/31/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/31/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/32/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/32/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/33/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/33/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/34/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/34/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/35/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/35/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/36/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/36/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/37/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/37/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/38/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/38/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/39/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/39/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/40/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/40/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/41/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/41/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/42/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/42/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/43/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/43/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/44/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/44/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/45/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/45/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/46/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/46/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/47/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/47/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/48/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/48/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/49/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/49/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/50/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/50/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/51/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/51/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/52/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/52/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/53/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/53/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/54/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/54/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/55/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/55/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/56/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/56/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/57/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/57/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/58/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/58/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/59/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/59/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/60/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/60/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/61/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/61/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/62/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/62/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/63/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/63/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/64/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/64/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/65/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/65/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/66/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/66/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/67/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/67/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/68/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/68/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/69/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/69/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/70/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/70/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/71/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/71/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/72/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/72/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/73/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/73/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/74/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/74/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/75/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/75/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/76/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/76/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/77/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/77/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/78/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/78/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/79/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/79/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/80/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/80/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/81/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/81/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/82/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/82/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/83/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/83/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/84/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/84/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/85/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/85/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/86/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/86/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/87/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/87/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/88/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/88/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/89/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/89/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/90/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/90/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/91/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/91/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/92/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/92/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/93/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/93/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/94/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/94/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/95/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/95/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/96/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/96/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/97/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/97/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/98/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/98/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/99/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/99/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/sponsor/100/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/sponsor/100/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2 align=&quot;center&quot;&gt;Backers&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/webpack#backer&quot;&gt;Become a backer&lt;/a&gt; and get your image on our README on Github with a link to your site.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/webpack/backer/0/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/0/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/1/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/1/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/2/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/2/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/3/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/3/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/4/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/4/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/5/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/5/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/6/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/6/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/7/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/7/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/8/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/8/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/9/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/9/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/10/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/10/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/11/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/11/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/12/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/12/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/13/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/13/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/14/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/14/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/15/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/15/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/16/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/16/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/17/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/17/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/18/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/18/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/19/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/19/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/20/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/20/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/21/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/21/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/22/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/22/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/23/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/23/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/24/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/24/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/25/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/25/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/26/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/26/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/27/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/27/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/28/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/28/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/29/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/29/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/30/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/30/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/31/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/31/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/32/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/32/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/33/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/33/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/34/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/34/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/35/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/35/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/36/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/36/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/37/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/37/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/38/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/38/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/39/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/39/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/40/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/40/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/41/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/41/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/42/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/42/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/43/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/43/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/44/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/44/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/45/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/45/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/46/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/46/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/47/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/47/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/48/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/48/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/49/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/49/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/50/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/50/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/51/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/51/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/52/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/52/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/53/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/53/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/54/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/54/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/55/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/55/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/56/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/56/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/57/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/57/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/58/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/58/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/59/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/59/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/60/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/60/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/61/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/61/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/62/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/62/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/63/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/63/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/64/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/64/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/65/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/65/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/66/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/66/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/67/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/67/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/68/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/68/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/69/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/69/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/70/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/70/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/71/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/71/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/72/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/72/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/73/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/73/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/74/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/74/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/75/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/75/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/76/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/76/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/77/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/77/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/78/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/78/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/79/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/79/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/80/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/80/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/81/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/81/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/82/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/82/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/83/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/83/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/84/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/84/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/85/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/85/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/86/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/86/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/87/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/87/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/88/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/88/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/89/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/89/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/90/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/90/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/91/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/91/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/92/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/92/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/93/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/93/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/94/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/94/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/95/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/95/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/96/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/96/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/97/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/97/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/98/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/98/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/99/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/99/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/webpack/backer/100/website?requireActive=false&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/webpack/backer/100/avatar.svg?requireActive=false&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2 align=&quot;center&quot;&gt;Special Thanks to&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt;(In chronological order)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/google&quot;&gt;@google&lt;/a&gt; for &lt;a href=&quot;http://www.gwtproject.org/&quot;&gt;Google Web Toolkit (GWT)&lt;/a&gt;, which aims to compile Java to JavaScript. It features a similar &lt;a href=&quot;http://www.gwtproject.org/doc/latest/DevGuideCodeSplitting.html&quot;&gt;Code Splitting&lt;/a&gt; as webpack.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/medikoo&quot;&gt;@medikoo&lt;/a&gt; for &lt;a href=&quot;https://github.com/medikoo/modules-webmake&quot;&gt;modules-webmake&lt;/a&gt;, which is a similar project. webpack was born because I wanted Code Splitting for modules-webmake. Interestingly the &lt;a href=&quot;https://github.com/medikoo/modules-webmake/issues/7&quot;&gt;Code Splitting issue is still open&lt;/a&gt; (thanks also to @Phoscur for the discussion).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/substack&quot;&gt;@substack&lt;/a&gt; for &lt;a href=&quot;http://browserify.org/&quot;&gt;browserify&lt;/a&gt;, which is a similar project and source for many ideas.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jrburke&quot;&gt;@jrburke&lt;/a&gt; for &lt;a href=&quot;https://requirejs.org/&quot;&gt;require.js&lt;/a&gt;, which is a similar project and source for many ideas.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/defunctzombie&quot;&gt;@defunctzombie&lt;/a&gt; for the &lt;a href=&quot;https://github.com/defunctzombie/package-browser-field-spec&quot;&gt;browser-field spec&lt;/a&gt;, which makes modules available for node.js, browserify and webpack.&lt;/li&gt; 
 &lt;li&gt;Every early webpack user, which contributed to webpack by writing issues or PRs. You influenced the direction‚Ä¶&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/shama&quot;&gt;@shama&lt;/a&gt;, &lt;a href=&quot;https://github.com/jhnns&quot;&gt;@jhnns&lt;/a&gt; and &lt;a href=&quot;https://github.com/sokra&quot;&gt;@sokra&lt;/a&gt; for maintaining this project&lt;/li&gt; 
 &lt;li&gt;Everyone who has written a loader for webpack. You are the ecosystem‚Ä¶&lt;/li&gt; 
 &lt;li&gt;Everyone I forgot to mention here, but also influenced webpack.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>fhefh2015/Fast-GitHub</title>
      <link>https://github.com/fhefh2015/Fast-GitHub</link>
      <description>&lt;p&gt;ÂõΩÂÜÖGithub‰∏ãËΩΩÂæàÊÖ¢ÔºåÁî®‰∏ä‰∫ÜËøô‰∏™Êèí‰ª∂ÂêéÔºå‰∏ãËΩΩÈÄüÂ∫¶ÂóñÂóñÂóñÁöÑ~ÔºÅ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fast-GitHub&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/chrome-web-store/v/mfnkflidjnladnkldfonnaicljppahpg?style=for-the-badge&quot; alt=&quot;Chrome Web Store&quot;&gt; &lt;img src=&quot;https://img.shields.io/chrome-web-store/users/mfnkflidjnladnkldfonnaicljppahpg?style=for-the-badge&quot; alt=&quot;Chrome Web Store&quot;&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h1&gt;INTRODUCTION&lt;/h1&gt; 
&lt;p&gt;Github download speeds are generally slow in Asia, and with this plugin the download speeds will be insane!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://badges.toozhao.com/badges/01EH1R0YMQANV1ACQXTEBK7JCN/green.svg&quot; title=&quot;Get your own page views count badge on badges.toozhao.com&quot;&gt;&lt;img src=&quot;https://badges.toozhao.com/badges/01EH1R0YMQANV1ACQXTEBK7JCN/green.svg?sanitize=true&quot; alt=&quot;Page Views Count&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h1&gt;Preview&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/04/23/MNOt8347RDGmnjo.png&quot; alt=&quot;MNOt8347RDGmnjo&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/04/23/9UPXkGsHzw5hiru.png&quot; alt=&quot;9UPXkGsHzw5hiru&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Download&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/mfnkflidjnladnkldfonnaicljppahpg?hl=zh-CN&amp;amp;authuser=1&quot;&gt;&lt;img src=&quot;https://i.loli.net/2021/04/23/IqpU7COKQvzrcyG.png&quot; alt=&quot;alt text&quot; title=&quot;title&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://apps.apple.com/cn/app/fastgithub/id1564025982?mt=12&quot;&gt;&lt;img src=&quot;https://i.loli.net/2021/04/23/SKsywoGWg1HvEja.png&quot; alt=&quot;alt text&quot; title=&quot;title&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://microsoftedge.microsoft.com/addons/detail/github%E5%8A%A0%E9%80%9F/alhnbdjjbokpmilgemopoomnldpejihb&quot;&gt;&lt;img src=&quot;https://i.loli.net/2021/04/23/EnS3eDi4I86Yv2N.png&quot; alt=&quot;alt text&quot; title=&quot;title&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/fastgithub/&quot;&gt;&lt;img src=&quot;https://i.loli.net/2021/04/23/4wGaRTisEdcBnIt.png&quot; alt=&quot;alt text&quot; title=&quot;title&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;How to use SSH channels&lt;/h1&gt; 
&lt;p&gt;Configuring user profiles (&lt;code&gt;~/.ssh/config&lt;/code&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Host github.com
	HostName github.com
	User git
	IdentityFile Specify the path to the private key file used for key authentication
# Add the following
Host git.zhlh6.cn
	HostName git.zhlh6.cn
	User git
	IdentityFile Using the secret key of github.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Testing SSH Connections&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh -T git@git.zhlh6.cn

# successful
You&#39;ve successfully authenticated, but GitHub does not provide shell access
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Version&lt;/h1&gt; 
&lt;p&gt;v1.1.0&lt;/p&gt; 
&lt;p&gt;1.add fusion mode, please check in plugin options&lt;/p&gt; 
&lt;p&gt;2.Fix custom accelerated URL problem&lt;/p&gt; 
&lt;p&gt;3.Fix UI display problems&lt;/p&gt; 
&lt;p&gt;v1.1.1&lt;/p&gt; 
&lt;p&gt;1.Github part of the page structure modified to accommodate the new layout.&lt;/p&gt; 
&lt;p&gt;Known issues&lt;/p&gt; 
&lt;p&gt;Octotree 6.0.0 has an impact on GitHub page layouts&lt;/p&gt; 
&lt;p&gt;Solution&lt;/p&gt; 
&lt;p&gt;Disable Octotree or use &lt;a href=&quot;https://chrome.google.com/webstore/detail/git-master/klmeolbcejnhefkapdchfhlhhjgobhmo&quot; target=&quot;_blank&quot;&gt;Git Master&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;v1.2.0&lt;/p&gt; 
&lt;p&gt;1.Disabled mixed mode, separate acceleration button option&lt;/p&gt; 
&lt;p&gt;2.Remove configuration page&lt;/p&gt; 
&lt;p&gt;v1.2.1&lt;/p&gt; 
&lt;p&gt;Fix Github Pjax issue&lt;/p&gt; 
&lt;p&gt;v.1.2.2-v1.2.3&lt;/p&gt; 
&lt;p&gt;Fix bugs&lt;/p&gt; 
&lt;p&gt;v.1.2.4&lt;/p&gt; 
&lt;p&gt;Fix the problem that 404 cannot be downloaded&lt;/p&gt; 
&lt;p&gt;v1.2.5&lt;/p&gt; 
&lt;p&gt;Fixed an issue where the ‚ÄúÂä†ÈÄü‚Äù button appeared on the Issue page&lt;/p&gt; 
&lt;p&gt;Add a new plug-in notification feature&lt;/p&gt; 
&lt;p&gt;v1.2.6&lt;/p&gt; 
&lt;p&gt;Fixed a bug in V1.2.5 that prevented the plugin from working properly&lt;/p&gt; 
&lt;hr&gt; 
&lt;h1&gt;ÁÆÄ‰ªã&lt;/h1&gt; 
&lt;p&gt;ÂõΩÂÜÖ Github ‰∏ãËΩΩÂæàÊÖ¢ÔºåÁî®‰∏ä‰∫ÜËøô‰∏™Êèí‰ª∂ÂêéÔºå‰∏ãËΩΩÈÄüÂ∫¶ÂóñÂóñÂóñÁöÑ~ÔºÅ&lt;/p&gt; 
&lt;h1&gt;È¢ÑËßà&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/04/23/MNOt8347RDGmnjo.png&quot; alt=&quot;MNOt8347RDGmnjo&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/04/23/9UPXkGsHzw5hiru.png&quot; alt=&quot;9UPXkGsHzw5hiru&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;‰∏ãËΩΩÊèí‰ª∂&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/mfnkflidjnladnkldfonnaicljppahpg?hl=zh-CN&amp;amp;authuser=1&quot;&gt;&lt;img src=&quot;https://i.loli.net/2021/04/23/IqpU7COKQvzrcyG.png&quot; alt=&quot;alt text&quot; title=&quot;title&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://apps.apple.com/cn/app/fastgithub/id1564025982?mt=12&quot;&gt;&lt;img src=&quot;https://i.loli.net/2021/04/23/SKsywoGWg1HvEja.png&quot; alt=&quot;alt text&quot; title=&quot;title&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://microsoftedge.microsoft.com/addons/detail/github%E5%8A%A0%E9%80%9F/alhnbdjjbokpmilgemopoomnldpejihb&quot;&gt;&lt;img src=&quot;https://i.loli.net/2021/04/23/EnS3eDi4I86Yv2N.png&quot; alt=&quot;alt text&quot; title=&quot;title&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/fastgithub/&quot;&gt;&lt;img src=&quot;https://i.loli.net/2021/04/23/4wGaRTisEdcBnIt.png&quot; alt=&quot;alt text&quot; title=&quot;title&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Â¶Ç‰Ωï‰ΩøÁî® SSH ÈÄöÈÅì&lt;/h1&gt; 
&lt;p&gt;ÈÖçÁΩÆÁî®Êà∑ÈÖçÁΩÆÊñá‰ª∂ (&lt;code&gt;~/.ssh/config&lt;/code&gt;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Host github.com
	HostName github.com
	User git
	IdentityFile ÊåáÂÆöÂØÜÈí•ËÆ§ËØÅ‰ΩøÁî®ÁöÑÁßÅÈí•Êñá‰ª∂Ë∑ØÂæÑ
# Êñ∞Â¢ûÂ¶Ç‰∏ãÂÜÖÂÆπ
Host git.zhlh6.cn
	HostName git.zhlh6.cn
	User git
	IdentityFile ‰ΩøÁî®github.comÁöÑÁßòÈí•
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ÊµãËØï SSH ËøûÊé•&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh -T git@git.zhlh6.cn

# ÊàêÂäü
You&#39;ve successfully authenticated, but GitHub does not provide shell access
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;ÁâàÊú¨&lt;/h1&gt; 
&lt;p&gt;v1.1.0&lt;/p&gt; 
&lt;p&gt;1.Êñ∞Â¢ûËûçÂêàÊ®°ÂºèÔºåËØ∑Âú®Êèí‰ª∂ÈÄâÈ°π‰∏≠Êü•Áúã&lt;/p&gt; 
&lt;p&gt;2.‰øÆÂ§çËá™ÂÆö‰πâÂä†ÈÄüÁΩëÂùÄÈóÆÈ¢ò&lt;/p&gt; 
&lt;p&gt;3.‰øÆÂ§çÁïåÈù¢ÊòæÁ§∫ÈóÆÈ¢ò&lt;/p&gt; 
&lt;p&gt;v1.1.1&lt;/p&gt; 
&lt;p&gt;Github ÈÉ®ÂàÜÁΩëÈ°µÁªìÊûÑ‰øÆÊîπ ÈÄÇÈÖçÊñ∞Â∏ÉÂ±Ä&lt;/p&gt; 
&lt;p&gt;Â∑≤Áü•ÈóÆÈ¢ò&lt;/p&gt; 
&lt;p&gt;Octotree 6.0.0 ÂØπ GitHub È°µÈù¢Â∏ÉÂ±ÄÊúâÂΩ±Âìç&lt;/p&gt; 
&lt;p&gt;Ëß£ÂÜ≥&lt;/p&gt; 
&lt;p&gt;Á¶ÅÁî® Octotree ÊàñËÄÖ‰ΩøÁî®&lt;a href=&quot;https://chrome.google.com/webstore/detail/git-master/klmeolbcejnhefkapdchfhlhhjgobhmo&quot; target=&quot;_blank&quot;&gt;Git Master&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;v1.2.0&lt;/p&gt; 
&lt;p&gt;1.Ê∑∑ÂêàÊ®°ÂºèÂ§±Êïà,ÂçïÁã¨ÂàóÂá∫Âä†ÈÄüÊåâÈíÆÈÄâÈ°π&lt;/p&gt; 
&lt;p&gt;2.Âà†Èô§ÈÖçÁΩÆÈ°µ&lt;/p&gt; 
&lt;p&gt;v1.2.1&lt;/p&gt; 
&lt;p&gt;‰øÆÂ§ç GitHub Pjax ÈóÆÈ¢ò&lt;/p&gt; 
&lt;p&gt;v1.2.2-v1.2.3&lt;/p&gt; 
&lt;p&gt;‰øÆÂ§ç bugs&lt;/p&gt; 
&lt;p&gt;v1.2.4&lt;/p&gt; 
&lt;p&gt;‰øÆÂ§ç‰∏ãËΩΩ 404 ÈóÆÈ¢ò&lt;/p&gt; 
&lt;p&gt;v1.2.5&lt;/p&gt; 
&lt;p&gt;‰øÆÂ§ç issue È°µÈù¢Âá∫Áé∞Âä†ÈÄüÊåâÈíÆÁöÑÈóÆÈ¢ò&lt;/p&gt; 
&lt;p&gt;Ê∑ªÂä†Êñ∞Êèí‰ª∂ÈÄöÁü•&lt;/p&gt; 
&lt;p&gt;v1.2.6&lt;/p&gt; 
&lt;p&gt;‰øÆÂ§ç v1.2.5 ÁöÑ bugÔºåÂØºËá¥Êèí‰ª∂Êó†Ê≥ïÊ≠£Â∏∏‰ΩøÁî®&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jsdom/jsdom</title>
      <link>https://github.com/jsdom/jsdom</link>
      <description>&lt;p&gt;A JavaScript implementation of various web standards, for use with Node.js&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt; &lt;img width=&quot;100&quot; height=&quot;100&quot; src=&quot;https://raw.githubusercontent.com/jsdom/jsdom/master/logo.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;br&gt; jsdom &lt;/h1&gt; 
&lt;p&gt;jsdom is a pure-JavaScript implementation of many web standards, notably the WHATWG &lt;a href=&quot;https://dom.spec.whatwg.org/&quot;&gt;DOM&lt;/a&gt; and &lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;HTML&lt;/a&gt; Standards, for use with Node.js. In general, the goal of the project is to emulate enough of a subset of a web browser to be useful for testing and scraping real-world web applications.&lt;/p&gt; 
&lt;p&gt;The latest versions of jsdom require Node.js v10 or newer. (Versions of jsdom below v16 still work with previous Node.js versions, but are unsupported.)&lt;/p&gt; 
&lt;h2&gt;Basic usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const jsdom = require(&quot;jsdom&quot;);
const { JSDOM } = jsdom;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To use jsdom, you will primarily use the &lt;code&gt;JSDOM&lt;/code&gt; constructor, which is a named export of the jsdom main module. Pass the constructor a string. You will get back a &lt;code&gt;JSDOM&lt;/code&gt; object, which has a number of useful properties, notably &lt;code&gt;window&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const dom = new JSDOM(`&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;p&amp;gt;Hello world&amp;lt;/p&amp;gt;`);
console.log(dom.window.document.querySelector(&quot;p&quot;).textContent); // &quot;Hello world&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(Note that jsdom will parse the HTML you pass it just like a browser does, including implied &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags.)&lt;/p&gt; 
&lt;p&gt;The resulting object is an instance of the &lt;code&gt;JSDOM&lt;/code&gt; class, which contains a number of useful properties and methods besides &lt;code&gt;window&lt;/code&gt;. In general, it can be used to act on the jsdom from the ‚Äúoutside,‚Äù doing things that are not possible with the normal DOM APIs. For simple cases, where you don‚Äôt need any of this functionality, we recommend a coding pattern like&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { window } = new JSDOM(`...`);
// or even
const { document } = (new JSDOM(`...`)).window;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Full documentation on everything you can do with the &lt;code&gt;JSDOM&lt;/code&gt; class is below, in the section ‚Äú&lt;code&gt;JSDOM&lt;/code&gt; Object API‚Äù.&lt;/p&gt; 
&lt;h2&gt;Customizing jsdom&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;JSDOM&lt;/code&gt; constructor accepts a second parameter which can be used to customize your jsdom in the following ways.&lt;/p&gt; 
&lt;h3&gt;Simple options&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const dom = new JSDOM(``, {
  url: &quot;https://example.org/&quot;,
  referrer: &quot;https://example.com/&quot;,
  contentType: &quot;text/html&quot;,
  includeNodeLocations: true,
  storageQuota: 10000000
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;url&lt;/code&gt; sets the value returned by &lt;code&gt;window.location&lt;/code&gt;, &lt;code&gt;document.URL&lt;/code&gt;, and &lt;code&gt;document.documentURI&lt;/code&gt;, and affects things like resolution of relative URLs within the document and the same-origin restrictions and referrer used while fetching subresources. It defaults to &lt;code&gt;&quot;about:blank&quot;&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;referrer&lt;/code&gt; just affects the value read from &lt;code&gt;document.referrer&lt;/code&gt;. It defaults to no referrer (which reflects as the empty string).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;contentType&lt;/code&gt; affects the value read from &lt;code&gt;document.contentType&lt;/code&gt;, as well as how the document is parsed: as HTML or as XML. Values that are not a &lt;a href=&quot;https://mimesniff.spec.whatwg.org/#html-mime-type&quot;&gt;HTML mime type&lt;/a&gt; or an &lt;a href=&quot;https://mimesniff.spec.whatwg.org/#xml-mime-type&quot;&gt;XML mime type&lt;/a&gt; will throw. It defaults to &lt;code&gt;&quot;text/html&quot;&lt;/code&gt;. If a &lt;code&gt;charset&lt;/code&gt; parameter is present, it can affect &lt;a href=&quot;https://raw.githubusercontent.com/jsdom/jsdom/master/#encoding-sniffing&quot;&gt;binary data processing&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;includeNodeLocations&lt;/code&gt; preserves the location info produced by the HTML parser, allowing you to retrieve it with the &lt;code&gt;nodeLocation()&lt;/code&gt; method (described below). It also ensures that line numbers reported in exception stack traces for code running inside &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements are correct. It defaults to &lt;code&gt;false&lt;/code&gt; to give the best performance, and cannot be used with an XML content type since our XML parser does not support location info.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;storageQuota&lt;/code&gt; is the maximum size in code units for the separate storage areas used by &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt;. Attempts to store data larger than this limit will cause a &lt;code&gt;DOMException&lt;/code&gt; to be thrown. By default, it is set to 5,000,000 code units per origin, as inspired by the HTML specification.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that both &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;referrer&lt;/code&gt; are canonicalized before they‚Äôre used, so e.g. if you pass in &lt;code&gt;&quot;https:example.com&quot;&lt;/code&gt;, jsdom will interpret that as if you had given &lt;code&gt;&quot;https://example.com/&quot;&lt;/code&gt;. If you pass an unparseable URL, the call will throw. (URLs are parsed and serialized according to the &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;URL Standard&lt;/a&gt;.)&lt;/p&gt; 
&lt;h3&gt;Executing scripts&lt;/h3&gt; 
&lt;p&gt;jsdom‚Äôs most powerful ability is that it can execute scripts inside the jsdom. These scripts can modify the content of the page and access all the web platform APIs jsdom implements.&lt;/p&gt; 
&lt;p&gt;However, this is also highly dangerous when dealing with untrusted content. The jsdom sandbox is not foolproof, and code running inside the DOM‚Äôs &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;s can, if it tries hard enough, get access to the Node.js environment, and thus to your machine. As such, the ability to execute scripts embedded in the HTML is disabled by default:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const dom = new JSDOM(`&amp;lt;body&amp;gt;
  &amp;lt;script&amp;gt;document.body.appendChild(document.createElement(&quot;hr&quot;));&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;`);

// The script will not be executed, by default:
dom.window.document.body.children.length === 1;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To enable executing scripts inside the page, you can use the &lt;code&gt;runScripts: &quot;dangerously&quot;&lt;/code&gt; option:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const dom = new JSDOM(`&amp;lt;body&amp;gt;
  &amp;lt;script&amp;gt;document.body.appendChild(document.createElement(&quot;hr&quot;));&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;`, { runScripts: &quot;dangerously&quot; });

// The script will be executed and modify the DOM:
dom.window.document.body.children.length === 2;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Again we emphasize to only use this when feeding jsdom code you know is safe. If you use it on arbitrary user-supplied code, or code from the Internet, you are effectively running untrusted Node.js code, and your machine could be compromised.&lt;/p&gt; 
&lt;p&gt;If you want to execute &lt;em&gt;external&lt;/em&gt; scripts, included via &lt;code&gt;&amp;lt;script src=&quot;&quot;&amp;gt;&lt;/code&gt;, you‚Äôll also need to ensure that they load them. To do this, add the option &lt;code&gt;resources: &quot;usable&quot;&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/jsdom/jsdom/master/#loading-subresources&quot;&gt;as described below&lt;/a&gt;. (You‚Äôll likely also want to set the &lt;code&gt;url&lt;/code&gt; option, for the reasons discussed there.)&lt;/p&gt; 
&lt;p&gt;Event handler attributes, like &lt;code&gt;&amp;lt;div onclick=&quot;&quot;&amp;gt;&lt;/code&gt;, are also governed by this setting; they will not function unless &lt;code&gt;runScripts&lt;/code&gt; is set to &lt;code&gt;&quot;dangerously&quot;&lt;/code&gt;. (However, event handler &lt;em&gt;properties&lt;/em&gt;, like &lt;code&gt;div.onclick = ...&lt;/code&gt;, will function regardless of &lt;code&gt;runScripts&lt;/code&gt;.)&lt;/p&gt; 
&lt;p&gt;If you are simply trying to execute script ‚Äúfrom the outside‚Äù, instead of letting &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements and event handlers attributes run ‚Äúfrom the inside‚Äù, you can use the &lt;code&gt;runScripts: &quot;outside-only&quot;&lt;/code&gt; option, which enables fresh copies of all the JavaScript spec-provided globals to be installed on &lt;code&gt;window&lt;/code&gt;. This includes things like &lt;code&gt;window.Array&lt;/code&gt;, &lt;code&gt;window.Promise&lt;/code&gt;, etc. It also, notably, includes &lt;code&gt;window.eval&lt;/code&gt;, which allows running scripts, but with the jsdom &lt;code&gt;window&lt;/code&gt; as the global:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { window } = new JSDOM(``, { runScripts: &quot;outside-only&quot; });

window.eval(`document.body.innerHTML = &quot;&amp;lt;p&amp;gt;Hello, world!&amp;lt;/p&amp;gt;&quot;;`);
window.document.body.children.length === 1;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is turned off by default for performance reasons, but is safe to enable.&lt;/p&gt; 
&lt;p&gt;(Note that in the default configuration, without setting &lt;code&gt;runScripts&lt;/code&gt;, the values of &lt;code&gt;window.Array&lt;/code&gt;, &lt;code&gt;window.eval&lt;/code&gt;, etc. will be the same as those provided by the outer Node.js environment. That is, &lt;code&gt;window.eval === eval&lt;/code&gt; will hold, so &lt;code&gt;window.eval&lt;/code&gt; will not run scripts in a useful way.)&lt;/p&gt; 
&lt;p&gt;We strongly advise against trying to ‚Äúexecute scripts‚Äù by mashing together the jsdom and Node global environments (e.g. by doing &lt;code&gt;global.window = dom.window&lt;/code&gt;), and then executing scripts or test code inside the Node global environment. Instead, you should treat jsdom like you would a browser, and run all scripts and tests that need access to a DOM inside the jsdom environment, using &lt;code&gt;window.eval&lt;/code&gt; or &lt;code&gt;runScripts: &quot;dangerously&quot;&lt;/code&gt;. This might require, for example, creating a browserify bundle to execute as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element‚Äîjust like you would in a browser.&lt;/p&gt; 
&lt;p&gt;Finally, for advanced use cases you can use the &lt;code&gt;dom.getInternalVMContext()&lt;/code&gt; method, documented below.&lt;/p&gt; 
&lt;h3&gt;Pretending to be a visual browser&lt;/h3&gt; 
&lt;p&gt;jsdom does not have the capability to render visual content, and will act like a headless browser by default. It provides hints to web pages through APIs such as &lt;code&gt;document.hidden&lt;/code&gt; that their content is not visible.&lt;/p&gt; 
&lt;p&gt;When the &lt;code&gt;pretendToBeVisual&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt;, jsdom will pretend that it is rendering and displaying content. It does this by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Changing &lt;code&gt;document.hidden&lt;/code&gt; to return &lt;code&gt;false&lt;/code&gt; instead of &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Changing &lt;code&gt;document.visibilityState&lt;/code&gt; to return &lt;code&gt;&quot;visible&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;prerender&quot;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Enabling &lt;code&gt;window.requestAnimationFrame()&lt;/code&gt; and &lt;code&gt;window.cancelAnimationFrame()&lt;/code&gt; methods, which otherwise do not exist&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const window = (new JSDOM(``, { pretendToBeVisual: true })).window;

window.requestAnimationFrame(timestamp =&amp;gt; {
  console.log(timestamp &amp;gt; 0);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that jsdom still &lt;a href=&quot;https://raw.githubusercontent.com/jsdom/jsdom/master/#unimplemented-parts-of-the-web-platform&quot;&gt;does not do any layout or rendering&lt;/a&gt;, so this is really just about &lt;em&gt;pretending&lt;/em&gt; to be visual, not about implementing the parts of the platform a real, visual web browser would implement.&lt;/p&gt; 
&lt;h3&gt;Loading subresources&lt;/h3&gt; 
&lt;h4&gt;Basic options&lt;/h4&gt; 
&lt;p&gt;By default, jsdom will not load any subresources such as scripts, stylesheets, images, or iframes. If you‚Äôd like jsdom to load such resources, you can pass the &lt;code&gt;resources: &quot;usable&quot;&lt;/code&gt; option, which will load all usable resources. Those are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Frames and iframes, via &lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Stylesheets, via &lt;code&gt;&amp;lt;link rel=&quot;stylesheet&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Scripts, via &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, but only if &lt;code&gt;runScripts: &quot;dangerously&quot;&lt;/code&gt; is also set&lt;/li&gt; 
 &lt;li&gt;Images, via &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, but only if the &lt;code&gt;canvas&lt;/code&gt; npm package is also installed (see ‚Äú&lt;a href=&quot;https://raw.githubusercontent.com/jsdom/jsdom/master/#canvas-support&quot;&gt;Canvas Support&lt;/a&gt;‚Äù below)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When attempting to load resources, recall that the default value for the &lt;code&gt;url&lt;/code&gt; option is &lt;code&gt;&quot;about:blank&quot;&lt;/code&gt;, which means that any resources included via relative URLs will fail to load. (The result of trying to parse the URL &lt;code&gt;/something&lt;/code&gt; against the URL &lt;code&gt;about:blank&lt;/code&gt; is an error.) So, you‚Äôll likely want to set a non-default value for the &lt;code&gt;url&lt;/code&gt; option in those cases, or use one of the &lt;a href=&quot;https://raw.githubusercontent.com/jsdom/jsdom/master/#convenience-apis&quot;&gt;convenience APIs&lt;/a&gt; that do so automatically.&lt;/p&gt; 
&lt;h4&gt;Advanced configuration&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;This resource loader system is new as of jsdom v12.0.0, and we‚Äôd love your feedback on whether it meets your needs and how easy it is to use. Please file an issue to discuss!&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;To more fully customize jsdom‚Äôs resource-loading behavior, you can pass an instance of the &lt;code&gt;ResourceLoader&lt;/code&gt; class as the &lt;code&gt;resources&lt;/code&gt; option value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const resourceLoader = new jsdom.ResourceLoader({
  proxy: &quot;http://127.0.0.1:9001&quot;,
  strictSSL: false,
  userAgent: &quot;Mellblomenator/9000&quot;,
});
const dom = new JSDOM(``, { resources: resourceLoader });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The three options to the &lt;code&gt;ResourceLoader&lt;/code&gt; constructor are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;proxy&lt;/code&gt; is the address of an HTTP proxy to be used.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;strictSSL&lt;/code&gt; can be set to false to disable the requirement that SSL certificates be valid.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;userAgent&lt;/code&gt; affects the &lt;code&gt;User-Agent&lt;/code&gt; header sent, and thus the resulting value for &lt;code&gt;navigator.userAgent&lt;/code&gt;. It defaults to &lt;code&gt;`Mozilla/5.0 (${process.platform || ‚Äúunknown OS‚Äù}) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/${jsdomVersion}`&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can further customize resource fetching by subclassing &lt;code&gt;ResourceLoader&lt;/code&gt; and overriding the &lt;code&gt;fetch()&lt;/code&gt; method. For example, here is a version that only returns results for requests to a trusted origin:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;class CustomResourceLoader extends jsdom.ResourceLoader {
  fetch(url, options) {
    // Override the contents of this script to do something unusual.
    if (url === &quot;https://example.com/some-specific-script.js&quot;) {
      return Promise.resolve(Buffer.from(&quot;window.someGlobal = 5;&quot;));
    }

    return super.fetch(url, options);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;jsdom will call your custom resource loader‚Äôs &lt;code&gt;fetch()&lt;/code&gt; method whenever it encounters a ‚Äúusable‚Äù resource, per the above section. The method takes a URL string, as well as a few options which you should pass through unmodified if calling &lt;code&gt;super.fetch()&lt;/code&gt;. It must return a promise for a Node.js &lt;code&gt;Buffer&lt;/code&gt; object, or return &lt;code&gt;null&lt;/code&gt; if the resource is intentionally not to be loaded. In general, most cases will want to delegate to &lt;code&gt;super.fetch()&lt;/code&gt;, as shown.&lt;/p&gt; 
&lt;p&gt;One of the options you will receive in &lt;code&gt;fetch()&lt;/code&gt; will be the element (if applicable) that is fetching a resource.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;class CustomResourceLoader extends jsdom.ResourceLoader {
  fetch(url, options) {
    if (options.element) {
      console.log(`Element ${options.element.localName} is requesting the url ${url}`);
    }

    return super.fetch(url, options);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Virtual consoles&lt;/h3&gt; 
&lt;p&gt;Like web browsers, jsdom has the concept of a ‚Äúconsole‚Äù. This records both information directly sent from the page, via scripts executing inside the document, as well as information from the jsdom implementation itself. We call the user-controllable console a ‚Äúvirtual console‚Äù, to distinguish it from the Node.js &lt;code&gt;console&lt;/code&gt; API and from the inside-the-page &lt;code&gt;window.console&lt;/code&gt; API.&lt;/p&gt; 
&lt;p&gt;By default, the &lt;code&gt;JSDOM&lt;/code&gt; constructor will return an instance with a virtual console that forwards all its output to the Node.js console. To create your own virtual console and pass it to jsdom, you can override this default by doing&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const virtualConsole = new jsdom.VirtualConsole();
const dom = new JSDOM(``, { virtualConsole });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Code like this will create a virtual console with no behavior. You can give it behavior by adding event listeners for all the possible console methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;virtualConsole.on(&quot;error&quot;, () =&amp;gt; { ... });
virtualConsole.on(&quot;warn&quot;, () =&amp;gt; { ... });
virtualConsole.on(&quot;info&quot;, () =&amp;gt; { ... });
virtualConsole.on(&quot;dir&quot;, () =&amp;gt; { ... });
// ... etc. See https://console.spec.whatwg.org/#logging
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(Note that it is probably best to set up these event listeners &lt;em&gt;before&lt;/em&gt; calling &lt;code&gt;new JSDOM()&lt;/code&gt;, since errors or console-invoking script might occur during parsing.)&lt;/p&gt; 
&lt;p&gt;If you simply want to redirect the virtual console output to another console, like the default Node.js one, you can do&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;virtualConsole.sendTo(console);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There is also a special event, &lt;code&gt;&quot;jsdomError&quot;&lt;/code&gt;, which will fire with error objects to report errors from jsdom itself. This is similar to how error messages often show up in web browser consoles, even if they are not initiated by &lt;code&gt;console.error&lt;/code&gt;. So far, the following errors are output this way:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Errors loading or parsing subresources (scripts, stylesheets, frames, and iframes)&lt;/li&gt; 
 &lt;li&gt;Script execution errors that are not handled by a window &lt;code&gt;onerror&lt;/code&gt; event handler that returns &lt;code&gt;true&lt;/code&gt; or calls &lt;code&gt;event.preventDefault()&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Not-implemented errors resulting from calls to methods, like &lt;code&gt;window.alert&lt;/code&gt;, which jsdom does not implement, but installs anyway for web compatibility&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you‚Äôre using &lt;code&gt;sendTo(c)&lt;/code&gt; to send errors to &lt;code&gt;c&lt;/code&gt;, by default it will call &lt;code&gt;c.error(errorStack[, errorDetail])&lt;/code&gt; with information from &lt;code&gt;&quot;jsdomError&quot;&lt;/code&gt; events. If you‚Äôd prefer to maintain a strict one-to-one mapping of events to method calls, and perhaps handle &lt;code&gt;&quot;jsdomError&quot;&lt;/code&gt;s yourself, then you can do&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;virtualConsole.sendTo(c, { omitJSDOMErrors: true });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Cookie jars&lt;/h3&gt; 
&lt;p&gt;Like web browsers, jsdom has the concept of a cookie jar, storing HTTP cookies. Cookies that have a URL on the same domain as the document, and are not marked HTTP-only, are accessible via the &lt;code&gt;document.cookie&lt;/code&gt; API. Additionally, all cookies in the cookie jar will impact the fetching of subresources.&lt;/p&gt; 
&lt;p&gt;By default, the &lt;code&gt;JSDOM&lt;/code&gt; constructor will return an instance with an empty cookie jar. To create your own cookie jar and pass it to jsdom, you can override this default by doing&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const cookieJar = new jsdom.CookieJar(store, options);
const dom = new JSDOM(``, { cookieJar });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is mostly useful if you want to share the same cookie jar among multiple jsdoms, or prime the cookie jar with certain values ahead of time.&lt;/p&gt; 
&lt;p&gt;Cookie jars are provided by the &lt;a href=&quot;https://www.npmjs.com/package/tough-cookie&quot;&gt;tough-cookie&lt;/a&gt; package. The &lt;code&gt;jsdom.CookieJar&lt;/code&gt; constructor is a subclass of the tough-cookie cookie jar which by default sets the &lt;code&gt;looseMode: true&lt;/code&gt; option, since that &lt;a href=&quot;https://github.com/whatwg/html/issues/804&quot;&gt;matches better how browsers behave&lt;/a&gt;. If you want to use tough-cookie‚Äôs utilities and classes yourself, you can use the &lt;code&gt;jsdom.toughCookie&lt;/code&gt; module export to get access to the tough-cookie module instance packaged with jsdom.&lt;/p&gt; 
&lt;h3&gt;Intervening before parsing&lt;/h3&gt; 
&lt;p&gt;jsdom allows you to intervene in the creation of a jsdom very early: after the &lt;code&gt;Window&lt;/code&gt; and &lt;code&gt;Document&lt;/code&gt; objects are created, but before any HTML is parsed to populate the document with nodes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const dom = new JSDOM(`&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;`, {
  beforeParse(window) {
    window.document.childNodes.length === 0;
    window.someCoolAPI = () =&amp;gt; { /* ... */ };
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is especially useful if you are wanting to modify the environment in some way, for example adding shims for web platform APIs jsdom does not support.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;JSDOM&lt;/code&gt; object API&lt;/h2&gt; 
&lt;p&gt;Once you have constructed a &lt;code&gt;JSDOM&lt;/code&gt; object, it will have the following useful capabilities:&lt;/p&gt; 
&lt;h3&gt;Properties&lt;/h3&gt; 
&lt;p&gt;The property &lt;code&gt;window&lt;/code&gt; retrieves the &lt;code&gt;Window&lt;/code&gt; object that was created for you.&lt;/p&gt; 
&lt;p&gt;The properties &lt;code&gt;virtualConsole&lt;/code&gt; and &lt;code&gt;cookieJar&lt;/code&gt; reflect the options you pass in, or the defaults created for you if nothing was passed in for those options.&lt;/p&gt; 
&lt;h3&gt;Serializing the document with &lt;code&gt;serialize()&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;serialize()&lt;/code&gt; method will return the &lt;a href=&quot;https://html.spec.whatwg.org/#html-fragment-serialisation-algorithm&quot;&gt;HTML serialization&lt;/a&gt; of the document, including the doctype:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const dom = new JSDOM(`&amp;lt;!DOCTYPE html&amp;gt;hello`);

dom.serialize() === &quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;hello&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;;

// Contrast with:
dom.window.document.documentElement.outerHTML === &quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;hello&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Getting the source location of a node with &lt;code&gt;nodeLocation(node)&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;nodeLocation()&lt;/code&gt; method will find where a DOM node is within the source document, returning the &lt;a href=&quot;https://www.npmjs.com/package/parse5#options-locationinfo&quot;&gt;parse5 location info&lt;/a&gt; for the node:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const dom = new JSDOM(
  `&amp;lt;p&amp;gt;Hello
    &amp;lt;img src=&quot;foo.jpg&quot;&amp;gt;
  &amp;lt;/p&amp;gt;`,
  { includeNodeLocations: true }
);

const document = dom.window.document;
const bodyEl = document.body; // implicitly created
const pEl = document.querySelector(&quot;p&quot;);
const textNode = pEl.firstChild;
const imgEl = document.querySelector(&quot;img&quot;);

console.log(dom.nodeLocation(bodyEl));   // null; it&#39;s not in the source
console.log(dom.nodeLocation(pEl));      // { startOffset: 0, endOffset: 39, startTag: ..., endTag: ... }
console.log(dom.nodeLocation(textNode)); // { startOffset: 3, endOffset: 13 }
console.log(dom.nodeLocation(imgEl));    // { startOffset: 13, endOffset: 32 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that this feature only works if you have set the &lt;code&gt;includeNodeLocations&lt;/code&gt; option; node locations are off by default for performance reasons.&lt;/p&gt; 
&lt;h3&gt;Interfacing with the Node.js &lt;code&gt;vm&lt;/code&gt; module using &lt;code&gt;getInternalVMContext()&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The built-in &lt;a href=&quot;https://nodejs.org/api/vm.html&quot;&gt;&lt;code&gt;vm&lt;/code&gt;&lt;/a&gt; module of Node.js is what underpins jsdom‚Äôs script-running magic. Some advanced use cases, like pre-compiling a script and then running it multiple times, benefit from using the &lt;code&gt;vm&lt;/code&gt; module directly with a jsdom-created &lt;code&gt;Window&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To get access to the &lt;a href=&quot;https://nodejs.org/api/vm.html#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;contextified global object&lt;/a&gt;, suitable for use with the &lt;code&gt;vm&lt;/code&gt; APIs, you can use the &lt;code&gt;getInternalVMContext()&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { Script } = require(&quot;vm&quot;);

const dom = new JSDOM(``, { runScripts: &quot;outside-only&quot; });
const script = new Script(`
  if (!this.ran) {
    this.ran = 0;
  }

  ++this.ran;
`);

const vmContext = dom.getInternalVMContext();

script.runInContext(vmContext);
script.runInContext(vmContext);
script.runInContext(vmContext);

console.assert(dom.window.ran === 3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is somewhat-advanced functionality, and we advise sticking to normal DOM APIs (such as &lt;code&gt;window.eval()&lt;/code&gt; or &lt;code&gt;document.createElement(&quot;script&quot;)&lt;/code&gt;) unless you have very specific needs.&lt;/p&gt; 
&lt;p&gt;Note that this method will throw an exception if the &lt;code&gt;JSDOM&lt;/code&gt; instance was created without &lt;code&gt;runScripts&lt;/code&gt; set, or if you are &lt;a href=&quot;https://raw.githubusercontent.com/jsdom/jsdom/master/#running-jsdom-inside-a-web-browser&quot;&gt;using jsdom in a web browser&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Reconfiguring the jsdom with &lt;code&gt;reconfigure(settings)&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;top&lt;/code&gt; property on &lt;code&gt;window&lt;/code&gt; is marked &lt;code&gt;[Unforgeable]&lt;/code&gt; in the spec, meaning it is a non-configurable own property and thus cannot be overridden or shadowed by normal code running inside the jsdom, even using &lt;code&gt;Object.defineProperty&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Similarly, at present jsdom does not handle navigation (such as setting &lt;code&gt;window.location.href = &quot;https://example.com/&quot;&lt;/code&gt;); doing so will cause the virtual console to emit a &lt;code&gt;&quot;jsdomError&quot;&lt;/code&gt; explaining that this feature is not implemented, and nothing will change: there will be no new &lt;code&gt;Window&lt;/code&gt; or &lt;code&gt;Document&lt;/code&gt; object, and the existing &lt;code&gt;window&lt;/code&gt;‚Äôs &lt;code&gt;location&lt;/code&gt; object will still have all the same property values.&lt;/p&gt; 
&lt;p&gt;However, if you‚Äôre acting from outside the window, e.g. in some test framework that creates jsdoms, you can override one or both of these using the special &lt;code&gt;reconfigure()&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const dom = new JSDOM();

dom.window.top === dom.window;
dom.window.location.href === &quot;about:blank&quot;;

dom.reconfigure({ windowTop: myFakeTopForTesting, url: &quot;https://example.com/&quot; });

dom.window.top === myFakeTopForTesting;
dom.window.location.href === &quot;https://example.com/&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that changing the jsdom‚Äôs URL will impact all APIs that return the current document URL, such as &lt;code&gt;window.location&lt;/code&gt;, &lt;code&gt;document.URL&lt;/code&gt;, and &lt;code&gt;document.documentURI&lt;/code&gt;, as well as the resolution of relative URLs within the document, and the same-origin checks and referrer used while fetching subresources. It will not, however, perform navigation to the contents of that URL; the contents of the DOM will remain unchanged, and no new instances of &lt;code&gt;Window&lt;/code&gt;, &lt;code&gt;Document&lt;/code&gt;, etc. will be created.&lt;/p&gt; 
&lt;h2&gt;Convenience APIs&lt;/h2&gt; 
&lt;h3&gt;&lt;code&gt;fromURL()&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;In addition to the &lt;code&gt;JSDOM&lt;/code&gt; constructor itself, jsdom provides a promise-returning factory method for constructing a jsdom from a URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;JSDOM.fromURL(&quot;https://example.com/&quot;, options).then(dom =&amp;gt; {
  console.log(dom.serialize());
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The returned promise will fulfill with a &lt;code&gt;JSDOM&lt;/code&gt; instance if the URL is valid and the request is successful. Any redirects will be followed to their ultimate destination.&lt;/p&gt; 
&lt;p&gt;The options provided to &lt;code&gt;fromURL()&lt;/code&gt; are similar to those provided to the &lt;code&gt;JSDOM&lt;/code&gt; constructor, with the following additional restrictions and consequences:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;contentType&lt;/code&gt; options cannot be provided.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;referrer&lt;/code&gt; option is used as the HTTP &lt;code&gt;Referer&lt;/code&gt; request header of the initial request.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;resources&lt;/code&gt; option also affects the initial request; this is useful if you want to, for example, configure a proxy (see above).&lt;/li&gt; 
 &lt;li&gt;The resulting jsdom‚Äôs URL, content type, and referrer are determined from the response.&lt;/li&gt; 
 &lt;li&gt;Any cookies set via HTTP &lt;code&gt;Set-Cookie&lt;/code&gt; response headers are stored in the jsdom‚Äôs cookie jar. Similarly, any cookies already in a supplied cookie jar are sent as HTTP &lt;code&gt;Cookie&lt;/code&gt; request headers.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;fromFile()&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Similar to &lt;code&gt;fromURL()&lt;/code&gt;, jsdom also provides a &lt;code&gt;fromFile()&lt;/code&gt; factory method for constructing a jsdom from a filename:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;JSDOM.fromFile(&quot;stuff.html&quot;, options).then(dom =&amp;gt; {
  console.log(dom.serialize());
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The returned promise will fulfill with a &lt;code&gt;JSDOM&lt;/code&gt; instance if the given file can be opened. As usual in Node.js APIs, the filename is given relative to the current working directory.&lt;/p&gt; 
&lt;p&gt;The options provided to &lt;code&gt;fromFile()&lt;/code&gt; are similar to those provided to the &lt;code&gt;JSDOM&lt;/code&gt; constructor, with the following additional defaults:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;url&lt;/code&gt; option will default to a file URL corresponding to the given filename, instead of to &lt;code&gt;&quot;about:blank&quot;&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;contentType&lt;/code&gt; option will default to &lt;code&gt;&quot;application/xhtml+xml&quot;&lt;/code&gt; if the given filename ends in &lt;code&gt;.xht&lt;/code&gt;, &lt;code&gt;.xhtml&lt;/code&gt;, or &lt;code&gt;.xml&lt;/code&gt;; otherwise it will continue to default to &lt;code&gt;&quot;text/html&quot;&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;code&gt;fragment()&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;For the very simplest of cases, you might not need a whole &lt;code&gt;JSDOM&lt;/code&gt; instance with all its associated power. You might not even need a &lt;code&gt;Window&lt;/code&gt; or &lt;code&gt;Document&lt;/code&gt;! Instead, you just need to parse some HTML, and get a DOM object you can manipulate. For that, we have &lt;code&gt;fragment()&lt;/code&gt;, which creates a &lt;code&gt;DocumentFragment&lt;/code&gt; from a given string:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const frag = JSDOM.fragment(`&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Hi!&amp;lt;/strong&amp;gt;`);

frag.childNodes.length === 2;
frag.querySelector(&quot;strong&quot;).textContent === &quot;Hi!&quot;;
// etc.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here &lt;code&gt;frag&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment&quot;&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;&lt;/a&gt; instance, whose contents are created by parsing the provided string. The parsing is done using a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element, so you can include any element there (including ones with weird parsing rules like &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;). It‚Äôs also important to note that the resulting &lt;code&gt;DocumentFragment&lt;/code&gt; will not have &lt;a href=&quot;https://html.spec.whatwg.org/multipage/#concept-document-bc&quot;&gt;an associated browsing context&lt;/a&gt;: that is, elements‚Äô &lt;code&gt;ownerDocument&lt;/code&gt; will have a null &lt;code&gt;defaultView&lt;/code&gt; property, resources will not load, etc.&lt;/p&gt; 
&lt;p&gt;All invocations of the &lt;code&gt;fragment()&lt;/code&gt; factory result in &lt;code&gt;DocumentFragment&lt;/code&gt;s that share the same template owner &lt;code&gt;Document&lt;/code&gt;. This allows many calls to &lt;code&gt;fragment()&lt;/code&gt; with no extra overhead. But it also means that calls to &lt;code&gt;fragment()&lt;/code&gt; cannot be customized with any options.&lt;/p&gt; 
&lt;p&gt;Note that serialization is not as easy with &lt;code&gt;DocumentFragment&lt;/code&gt;s as it is with full &lt;code&gt;JSDOM&lt;/code&gt; objects. If you need to serialize your DOM, you should probably use the &lt;code&gt;JSDOM&lt;/code&gt; constructor more directly. But for the special case of a fragment containing a single element, it‚Äôs pretty easy to do through normal means:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const frag = JSDOM.fragment(`&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;`);
console.log(frag.firstChild.outerHTML); // logs &quot;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Other noteworthy features&lt;/h2&gt; 
&lt;h3&gt;Canvas support&lt;/h3&gt; 
&lt;p&gt;jsdom includes support for using the &lt;a href=&quot;https://www.npmjs.com/package/canvas&quot;&gt;&lt;code&gt;canvas&lt;/code&gt;&lt;/a&gt; package to extend any &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; elements with the canvas API. To make this work, you need to include &lt;code&gt;canvas&lt;/code&gt; as a dependency in your project, as a peer of &lt;code&gt;jsdom&lt;/code&gt;. If jsdom can find the &lt;code&gt;canvas&lt;/code&gt; package, it will use it, but if it‚Äôs not present, then &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; elements will behave like &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s. Since jsdom v13, version 2.x of &lt;code&gt;canvas&lt;/code&gt; is required; version 1.x is no longer supported.&lt;/p&gt; 
&lt;h3&gt;Encoding sniffing&lt;/h3&gt; 
&lt;p&gt;In addition to supplying a string, the &lt;code&gt;JSDOM&lt;/code&gt; constructor can also be supplied binary data, in the form of a Node.js &lt;a href=&quot;https://nodejs.org/docs/latest/api/buffer.html&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; or a standard JavaScript binary data type like &lt;code&gt;ArrayBuffer&lt;/code&gt;, &lt;code&gt;Uint8Array&lt;/code&gt;, &lt;code&gt;DataView&lt;/code&gt;, etc. When this is done, jsdom will &lt;a href=&quot;https://html.spec.whatwg.org/multipage/syntax.html#encoding-sniffing-algorithm&quot;&gt;sniff the encoding&lt;/a&gt; from the supplied bytes, scanning for &lt;code&gt;&amp;lt;meta charset&amp;gt;&lt;/code&gt; tags just like a browser does.&lt;/p&gt; 
&lt;p&gt;If the supplied &lt;code&gt;contentType&lt;/code&gt; option contains a &lt;code&gt;charset&lt;/code&gt; parameter, that encoding will override the sniffed encoding‚Äîunless a UTF-8 or UTF-16 BOM is present, in which case those take precedence. (Again, this is just like a browser.)&lt;/p&gt; 
&lt;p&gt;This encoding sniffing also applies to &lt;code&gt;JSDOM.fromFile()&lt;/code&gt; and &lt;code&gt;JSDOM.fromURL()&lt;/code&gt;. In the latter case, any &lt;code&gt;Content-Type&lt;/code&gt; headers sent with the response will take priority, in the same fashion as the constructor‚Äôs &lt;code&gt;contentType&lt;/code&gt; option.&lt;/p&gt; 
&lt;p&gt;Note that in many cases supplying bytes in this fashion can be better than supplying a string. For example, if you attempt to use Node.js‚Äôs &lt;code&gt;buffer.toString(&quot;utf-8&quot;)&lt;/code&gt; API, Node.js will not strip any leading BOMs. If you then give this string to jsdom, it will interpret it verbatim, leaving the BOM intact. But jsdom‚Äôs binary data decoding code will strip leading BOMs, just like a browser; in such cases, supplying &lt;code&gt;buffer&lt;/code&gt; directly will give the desired result.&lt;/p&gt; 
&lt;h3&gt;Closing down a jsdom&lt;/h3&gt; 
&lt;p&gt;Timers in the jsdom (set by &lt;code&gt;window.setTimeout()&lt;/code&gt; or &lt;code&gt;window.setInterval()&lt;/code&gt;) will, by definition, execute code in the future in the context of the window. Since there is no way to execute code in the future without keeping the process alive, outstanding jsdom timers will keep your Node.js process alive. Similarly, since there is no way to execute code in the context of an object without keeping that object alive, outstanding jsdom timers will prevent garbage collection of the window on which they are scheduled.&lt;/p&gt; 
&lt;p&gt;If you want to be sure to shut down a jsdom window, use &lt;code&gt;window.close()&lt;/code&gt;, which will terminate all running timers (and also remove any event listeners on the window and document).&lt;/p&gt; 
&lt;h3&gt;Running jsdom inside a web browser&lt;/h3&gt; 
&lt;p&gt;jsdom has some support for being run inside a web browser, using &lt;a href=&quot;https://browserify.org/&quot;&gt;browserify&lt;/a&gt;. That is, inside a web browser, you can use a browserified jsdom to create an entirely self-contained set of plain JavaScript objects which look and act much like the browser‚Äôs existing DOM objects, while being entirely independent of them. ‚ÄúVirtual DOM‚Äù, indeed!&lt;/p&gt; 
&lt;p&gt;jsdom‚Äôs primary target is still Node.js, and so we use language features that are only present in recent Node.js versions (namely, Node.js v8+). Thus, older browsers will likely not work. (Even transpilation will not help: we use &lt;code&gt;Proxy&lt;/code&gt;s extensively throughout the jsdom codebase.)&lt;/p&gt; 
&lt;p&gt;Notably, jsdom works well inside a web worker. The original contributor, &lt;a href=&quot;https://github.com/lawnsea/&quot;&gt;@lawnsea&lt;/a&gt;, who made this possible, has &lt;a href=&quot;https://pdfs.semanticscholar.org/47f0/6bb6607a975500a30e9e52d7c9fbc0034e27.pdf&quot;&gt;published a paper&lt;/a&gt; about his project which uses this capability.&lt;/p&gt; 
&lt;p&gt;Not everything works perfectly when running jsdom inside a web browser. Sometimes that is because of fundamental limitations (such as not having filesystem access), but sometimes it is simply because we haven‚Äôt spent enough time making the appropriate small tweaks. Bug reports are certainly welcome.&lt;/p&gt; 
&lt;h3&gt;Debugging the DOM using Chrome Devtools&lt;/h3&gt; 
&lt;p&gt;As of Node.js v6 you can debug programs using Chrome Devtools. See the &lt;a href=&quot;https://nodejs.org/en/docs/inspector/&quot;&gt;official documentation&lt;/a&gt; for how to get started.&lt;/p&gt; 
&lt;p&gt;By default jsdom elements are formatted as plain old JS objects in the console. To make it easier to debug, you can use &lt;a href=&quot;https://github.com/viddo/jsdom-devtools-formatter&quot;&gt;jsdom-devtools-formatter&lt;/a&gt;, which lets you inspect them like real DOM elements.&lt;/p&gt; 
&lt;h2&gt;Caveats&lt;/h2&gt; 
&lt;h3&gt;Asynchronous script loading&lt;/h3&gt; 
&lt;p&gt;People often have trouble with asynchronous script loading when using jsdom. Many pages load scripts asynchronously, but there is no way to tell when they‚Äôre done doing so, and thus when it‚Äôs a good time to run your code and inspect the resulting DOM structure. This is a fundamental limitation; we cannot predict what scripts on the web page will do, and so cannot tell you when they are done loading more scripts.&lt;/p&gt; 
&lt;p&gt;This can be worked around in a few ways. The best way, if you control the page in question, is to use whatever mechanisms are given by the script loader to detect when loading is done. For example, if you‚Äôre using a module loader like RequireJS, the code could look like:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// On the Node.js side:
const window = (new JSDOM(...)).window;
window.onModulesLoaded = () =&amp;gt; {
  console.log(&quot;ready to roll!&quot;);
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Inside the HTML you supply to jsdom --&amp;gt;
&amp;lt;script&amp;gt;
requirejs([&quot;entry-module&quot;], () =&amp;gt; {
  window.onModulesLoaded();
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you do not control the page, you could try workarounds such as polling for the presence of a specific element.&lt;/p&gt; 
&lt;p&gt;For more details, see the discussion in &lt;a href=&quot;https://github.com/jsdom/jsdom/issues/640&quot;&gt;#640&lt;/a&gt;, especially &lt;a href=&quot;https://github.com/matthewkastor&quot;&gt;@matthewkastor&lt;/a&gt;‚Äôs &lt;a href=&quot;https://github.com/jsdom/jsdom/issues/640#issuecomment-22216965&quot;&gt;insightful comment&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Unimplemented parts of the web platform&lt;/h3&gt; 
&lt;p&gt;Although we enjoy adding new features to jsdom and keeping it up to date with the latest web specs, it has many missing APIs. Please feel free to file an issue for anything missing, but we‚Äôre a small and busy team, so a pull request might work even better.&lt;/p&gt; 
&lt;p&gt;Beyond just features that we haven‚Äôt gotten to yet, there are two major features that are currently outside the scope of jsdom. These are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Navigation&lt;/strong&gt;: the ability to change the global object, and all other objects, when clicking a link or assigning &lt;code&gt;location.href&lt;/code&gt; or similar.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Layout&lt;/strong&gt;: the ability to calculate where elements will be visually laid out as a result of CSS, which impacts methods like &lt;code&gt;getBoundingClientRects()&lt;/code&gt; or properties like &lt;code&gt;offsetTop&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Currently jsdom has dummy behaviors for some aspects of these features, such as sending a ‚Äúnot implemented‚Äù &lt;code&gt;&quot;jsdomError&quot;&lt;/code&gt; to the virtual console for navigation, or returning zeros for many layout-related properties. Often you can work around these limitations in your code, e.g. by creating new &lt;code&gt;JSDOM&lt;/code&gt; instances for each page you ‚Äúnavigate‚Äù to during a crawl, or using &lt;code&gt;Object.defineProperty()&lt;/code&gt; to change what various layout-related getters and methods return.&lt;/p&gt; 
&lt;p&gt;Note that other tools in the same space, such as PhantomJS, do support these features. On the wiki, we have a more complete writeup about &lt;a href=&quot;https://github.com/jsdom/jsdom/wiki/jsdom-vs.-PhantomJS&quot;&gt;jsdom vs. PhantomJS&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supporting jsdom&lt;/h2&gt; 
&lt;p&gt;jsdom is a community-driven project maintained by a team of &lt;a href=&quot;https://github.com/orgs/jsdom/people&quot;&gt;volunteers&lt;/a&gt;. You could support jsdom by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://tidelift.com/subscription/pkg/npm-jsdom?utm_source=npm-jsdom&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&quot;&gt;Getting professional support for jsdom&lt;/a&gt; as part of a Tidelift subscription. Tidelift helps making open source sustainable for us while giving teams assurances for maintenance, licensing, and security.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jsdom/jsdom/raw/master/Contributing.md&quot;&gt;Contributing&lt;/a&gt; directly to the project.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting help&lt;/h2&gt; 
&lt;p&gt;If you need help with jsdom, please feel free to use any of the following venues:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://groups.google.com/group/jsdom&quot;&gt;mailing list&lt;/a&gt; (best for ‚Äúhow do I‚Äù questions)&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://github.com/jsdom/jsdom/issues&quot;&gt;issue tracker&lt;/a&gt; (best for bug reports)&lt;/li&gt; 
 &lt;li&gt;The Matrix room: &lt;a href=&quot;https://matrix.to/#/#jsdom:matrix.org&quot;&gt;#jsdom:matrix.org&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>carbon-design-system/carbon</title>
      <link>https://github.com/carbon-design-system/carbon</link>
      <description>&lt;p&gt;A design system built by IBM&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.carbondesignsystem.com&quot;&gt; &lt;img alt=&quot;Carbon Design System&quot; src=&quot;https://user-images.githubusercontent.com/3901764/57545698-ce5f2380-7320-11e9-8682-903df232d7b0.png&quot; width=&quot;100%&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1 align=&quot;center&quot;&gt; Carbon Design System &lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Carbon is an open-source design system built by IBM. With the IBM Design Language as its foundation, the system consists of working code, design tools and resources, human interface guidelines, and a vibrant community of contributors.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/raw/master/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/license-Apache--2.0-blue.svg?sanitize=true&quot; alt=&quot;Carbon is released under the Apache-2.0 license&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/carbon-design-system/carbon&quot;&gt; &lt;img src=&quot;https://circleci.com/gh/carbon-design-system/carbon.svg?style=shield&quot; alt=&quot;Build Status&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://lerna.js.org/&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg?sanitize=true&quot; alt=&quot;Maintained with Lerna&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/raw/master/.github/CONTRIBUTING.md&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&quot; alt=&quot;PRs welcome&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://gitter.im/carbondesignsystem/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&quot;&gt; &lt;img src=&quot;https://badges.gitter.im/carbondesignsystem/community.svg?sanitize=true&quot; alt=&quot;Chat with us on Gitter&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;If you‚Äôre just getting started, check out &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/components&quot;&gt;&lt;code&gt;carbon-components&lt;/code&gt;&lt;/a&gt;. If you‚Äôre looking for React components, take a look at &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/react&quot;&gt;&lt;code&gt;carbon-components-react&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We also have community-contributed components for the following technologies:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/IBM/carbon-components-angular&quot;&gt;Angular&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon-components-vue&quot;&gt;Vue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/IBM/carbon-components-svelte&quot;&gt;Svelte&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you‚Äôre trying to find something specific, here‚Äôs a full list of packages that we support!&lt;/p&gt; 
&lt;p&gt;| Package name | Description | | ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî | ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/components&quot;&gt;&lt;code&gt;carbon-components&lt;/code&gt;&lt;/a&gt; | Component styles and Vanilla JavaScript | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/react&quot;&gt;&lt;code&gt;carbon-components-react&lt;/code&gt;&lt;/a&gt; | React components | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/elements&quot;&gt;&lt;code&gt;@carbon/elements&lt;/code&gt;&lt;/a&gt; | IBM Design Language elements like colors, type, iconography, and more | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/colors&quot;&gt;&lt;code&gt;@carbon/colors&lt;/code&gt;&lt;/a&gt; | Work with IBM Design Language colors | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/grid&quot;&gt;&lt;code&gt;@carbon/grid&lt;/code&gt;&lt;/a&gt; | Build layouts using the new 16 column grid system | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/icons&quot;&gt;&lt;code&gt;@carbon/icons&lt;/code&gt;&lt;/a&gt; | Iconography assets. We also offer support in: &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/icons-react&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://github.com/carbon-design-system/carbon-icons-angular&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/icons-vue&quot;&gt;Vue&lt;/a&gt;, and &lt;a href=&quot;https://github.com/IBM/carbon-icons-svelte&quot;&gt;Svelte&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/pictograms&quot;&gt;&lt;code&gt;@carbon/pictograms&lt;/code&gt;&lt;/a&gt; | Pictogram assets. We also offer support in: &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/pictograms-react&quot;&gt;React&lt;/a&gt; and &lt;a href=&quot;https://github.com/IBM/carbon-pictograms-svelte&quot;&gt;Svelte&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/layout&quot;&gt;&lt;code&gt;@carbon/layout&lt;/code&gt;&lt;/a&gt; | Layout-based units and spacing scale | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/motion&quot;&gt;&lt;code&gt;@carbon/motion&lt;/code&gt;&lt;/a&gt; | Productive and expressive motion curves | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/themes&quot;&gt;&lt;code&gt;@carbon/themes&lt;/code&gt;&lt;/a&gt; | Color tokens available in the Carbon Design System, like &lt;code&gt;$interactive-01&lt;/code&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/type&quot;&gt;&lt;code&gt;@carbon/type&lt;/code&gt;&lt;/a&gt; | New type tokens used alongside IBM Plex |&lt;/p&gt; 
&lt;h2&gt;:books: Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;See our documentation site &lt;a href=&quot;https://www.carbondesignsystem.com/get-started/develop/react&quot;&gt;here&lt;/a&gt; for full how-to docs and guidelines&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/.github/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt;: Guidelines for making contributions to this repo.&lt;/li&gt; 
 &lt;li&gt;üèÉ‚Äç‚ôÄÔ∏è Migration Guides 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/components/docs/migration/migrate-to-10.x.md&quot;&gt;v9 to v10 (vanilla)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/packages/react/docs/migration/migrate-to-7.x.md&quot;&gt;v9 to v10 (v6 to v7 React)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üôå Contributing&lt;/h2&gt; 
&lt;p&gt;We‚Äôre always looking for contributors to help us fix bugs, build new features, or help us improve the project documentation. If you‚Äôre interested, definitely check out our &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/.github/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt; and our &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/docs/developer-handbook.md&quot;&gt;Developer Guide&lt;/a&gt;! üëÄ&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/tw15egan&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/11928039?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;TJ Egan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=tw15egan&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=tw15egan&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#infra-tw15egan&quot; title=&quot;Infrastructure (Hosting, Build-Tools, etc)&quot;&gt;üöá&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Atw15egan&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-tw15egan&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/joshblack&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/3901764?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Josh Black&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=joshblack&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=joshblack&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#infra-joshblack&quot; title=&quot;Infrastructure (Hosting, Build-Tools, etc)&quot;&gt;üöá&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Ajoshblack&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-joshblack&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/aledavila&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/12533409?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alessandra Davila&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=aledavila&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=aledavila&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Aaledavila&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-aledavila&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://dakahn.netlify.com/&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/40970507?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;DAK&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=dakahn&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=dakahn&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Adakahn&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-dakahn&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/andrea-cardona-b647594b/&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/32720851?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Andrea N. Cardona&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=andreancardona&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=andreancardona&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Aandreancardona&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-andreancardona&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/emyarod&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/8265238?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;emyarod&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=emyarod&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=emyarod&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Aemyarod&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-emyarod&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/jnm2377&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/32556167?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Josefina Mancilla&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=jnm2377&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=jnm2377&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Ajnm2377&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-jnm2377&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.vincepic.one/&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/4078018?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Vince Picone&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=vpicone&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=vpicone&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Avpicone&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-vpicone&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://turpialcreative/&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/4718579?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ricardo Henriquez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=rjhenriquez&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=rjhenriquez&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Arjhenriquez&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-rjhenriquez&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/sstrubberg&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/15822070?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Scott Strubberg&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=sstrubberg&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=sstrubberg&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Asstrubberg&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-sstrubberg&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/alisonjoseph&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/2753488?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alison Joseph&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=alisonjoseph&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=alisonjoseph&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Aalisonjoseph&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-alisonjoseph&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/aagonzales&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/11670886?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Anna Gonzales&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#design-aagonzales&quot; title=&quot;Design&quot;&gt;üé®&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Aaagonzales&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/jillianhowarth&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/20690344?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;jillianhowarth&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#content-jillianhowarth&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#design-jillianhowarth&quot; title=&quot;Design&quot;&gt;üé®&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Ajillianhowarth&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/laurenmrice&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/43969356?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lauren Rice&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#design-laurenmrice&quot; title=&quot;Design&quot;&gt;üé®&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Alaurenmrice&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/johnbister&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/70543333?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;johnbister&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#design-johnbister&quot; title=&quot;Design&quot;&gt;üé®&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/pulls?q=is%3Apr+reviewed-by%3Ajohnbister&quot; title=&quot;Reviewed Pull Requests&quot;&gt;üëÄ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/dbrugger&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/10086178?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dominik Brugger&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=dbrugger&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#maintenance-dbrugger&quot; title=&quot;Maintenance&quot;&gt;üöß&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://janhassel.de/&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/28265588?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jan Hassel&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=janhassel&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/AlexanderLyon&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/17458641?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alexander Lyon&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=AlexanderLyon&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/rzhekova&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/35401262?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rosie Z&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=rzhekova&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://abdul-sen.github.io/portfolio&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/38502132?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Abdul Rehman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=Abdul-Sen&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/gptt916&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/20601623?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nick Gong&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=gptt916&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://nishithp.live/&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/34577844?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nishith P&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=NishithP2004&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/echarpibm&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/22177887?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Eric Charpentier&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=echarpibm&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/luizamendes&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/31076607?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Luiza Mendes&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=luizamendes&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#maintenance-luizamendes&quot; title=&quot;Maintenance&quot;&gt;üöß&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/akmalhakimi1991&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/10990690?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Akmal Hakimi Mohd Zamri&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=akmalhakimi1991&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/sanjitbauli&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/272230?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;sanjitbauli&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=sanjitbauli&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/moczolaszlo&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/3605657?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Laszlo Moczo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=moczolaszlo&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/LMapes&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/56092796?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;LMapes&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#content-LMapes&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=LMapes&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/conradennis&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/16782944?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;conradennis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#design-conradennis&quot; title=&quot;Design&quot;&gt;üé®&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/metonym&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/10718366?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Eric Liu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=metonym&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=metonym&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/rvsia&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/32869456?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Richard V≈°iansk√Ω&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=rvsia&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/lee-chase&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/15086604?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lee Chase&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=lee-chase&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=lee-chase&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/GoldenFishe&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/29215242?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Anton&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=GoldenFishe&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/panpan-lin&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/22054715?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Panpan Lin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=panpan-lin&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/ashharrison90&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/20999846?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ashley Harrison&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=ashharrison90&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://jendowns.com/&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/9057921?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jen Downs&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=jendowns&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=jendowns&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-jendowns&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/tay1orjones&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/3360588?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Taylor Jones&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=tay1orjones&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=tay1orjones&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-tay1orjones&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/dudley-ibm&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/54119397?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;MIchael Dudley&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#design-dudley-ibm&quot; title=&quot;Design&quot;&gt;üé®&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://davidbradshaw.us/&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/8028956?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;David Bradshaw&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=dabrad26&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/SimonFinney&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/3846874?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Simon Finney&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=SimonFinney&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-SimonFinney&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/atikenny&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/6061509?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Attila Bartha&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=atikenny&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://baeharam.netlify.com/&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/35518072?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Î∞∞ÌïòÎûå&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=baeharam&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Yohanna&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/6926228?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yohanna Gadelrab&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=Yohanna&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://asudoh.github.io/&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1259051?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Akira Sudoh&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=asudoh&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=asudoh&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-asudoh&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#infra-asudoh&quot; title=&quot;Infrastructure (Hosting, Build-Tools, etc)&quot;&gt;üöá&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/oyin-k&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/22506709?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Oyinkan Oyetunmibi &lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=oyin-k&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/pbenson322&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/59934268?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;pbenson322&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=pbenson322&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/abbeyhrt&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/17281178?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Abbey Hart&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=abbeyhrt&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=abbeyhrt&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-abbeyhrt&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/lucasmccomb&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/5007314?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lucas&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=lucasmccomb&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/dylanklohr&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/17390173?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dylan Klohr&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=dylanklohr&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://gilli.is/&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/5390864?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Gilli Sigurdsson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#design-gillisig&quot; title=&quot;Design&quot;&gt;üé®&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/kennylam&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/909118?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;kennylam&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=kennylam&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-kennylam&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/sgregoire&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/3350530?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;S√©bastien&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=sgregoire&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://dusanmilko.com/&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/302239?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dusan Milko&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=DusanMilko&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/taraspolovyi&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/25744197?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Taras Polovyi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=taraspolovyi&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/chrisconnors-ibm&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/35537391?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Chris Connors&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#design-chrisconnors-ibm&quot; title=&quot;Design&quot;&gt;üé®&lt;/a&gt; &lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=chrisconnors-ibm&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.david-conner.com/&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/1590966?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;David Conner&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=davidicus&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-davidicus&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/code-blooded-developer&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/7156129?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Harish Mohanani&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=code-blooded-developer&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/FrivalszkyP&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/3766124?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Frivalszky-Mayer P√©ter&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=FrivalszkyP&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-FrivalszkyP&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/s100&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/9932290?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;s100&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=s100&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.virk.cc/&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/3311536?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Taranveer Virk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=virkt25&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/ikhnaton&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/4853273?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Niall Cargill&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=ikhnaton&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/asfordmatt&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/14233261?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Matt Chapman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=asfordmatt&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/munkurious&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/2187109?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Boston Cartwright&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=munkurious&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/DavidSCChen&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/54974983?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;DavidSCChen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=DavidSCChen&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/molyholy&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/77503726?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;molyholy&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=molyholy&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/scottdickerson&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6663002?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Scott Dickerson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=scottdickerson&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://start.reactwarriors.com/join&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/15031623?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Evgeniy Podgaetskiy&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=epodgaetskiy&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/CassidyJensen&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/45407808?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;CassidyJensen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=CassidyJensen&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/#a11y-CassidyJensen&quot; title=&quot;Accessibility&quot;>Ô∏èÔ∏èÔ∏èÔ∏è‚ôøÔ∏è&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/lattmann&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1108945?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Zsolt Lattmann&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=lattmann&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://conrad.codes/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3808948?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Conrad Schmidt&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=ConradSchmidt&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/IgnacioBecerra&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/24970122?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ignacio Becerra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=IgnacioBecerra&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/swapnilpatil21&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/46713873?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Swapnil Patil&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=swapnilpatil21&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/sophiiae&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/18622886?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Fei Z&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=sophiiae&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/IgnasA&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7099068?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ignas Ausiejus&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=IgnasA&quot; title=&quot;Documentation&quot;&gt;üìñ&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://ryanomackey.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/17710824?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ryan O. Mackey&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=ryanomackey&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.skateman.eu/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/649130?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;D√°vid Hal√°sz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=skateman&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/guigueb&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/5973642?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Bill Guigue&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=guigueb&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/szymonbrandys&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/79149899?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;szymonbrandys&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon/commits?author=szymonbrandys&quot; title=&quot;Code&quot;&gt;üíª&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/kentcdodds/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt; 
&lt;h2&gt;üìù License&lt;/h2&gt; 
&lt;p&gt;Licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/main/LICENSE&quot;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bradtraversy/next-markdown-blog</title>
      <link>https://github.com/bradtraversy/next-markdown-blog</link>
      <description>&lt;p&gt;Simple blog using Next and Markdown&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Next Markdown Blog&lt;/h1&gt; 
&lt;p&gt;Simple static blog using markdown and Next.js&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://next-markdown-blog-drab.vercel.app/&quot;&gt;DEMO&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install dependencies
npm install

# Run dev server
npm run dev

# Build for prod and export static website
npm run build
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
